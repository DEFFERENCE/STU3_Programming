
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c478  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c650  0800c650  0000d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c690  0800c690  0000e264  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c690  0800c690  0000d690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c698  0800c698  0000e264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c698  0800c698  0000d698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c69c  0800c69c  0000d69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0800c6a0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001958  20000268  0800c904  0000e268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001bc0  0800c904  0000ebc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bf3  00000000  00000000  0000e294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000494f  00000000  00000000  00035e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  0003a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c3  00000000  00000000  0003c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056f5  00000000  00000000  0003d993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002698c  00000000  00000000  00043088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a58f  00000000  00000000  00069a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007944  00000000  00000000  00183fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018b92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000268 	.word	0x20000268
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c638 	.word	0x0800c638

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000026c 	.word	0x2000026c
 8000214:	0800c638 	.word	0x0800c638

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000554:	213c      	movs	r1, #60	@ 0x3c
 8000556:	6838      	ldr	r0, [r7, #0]
 8000558:	f007 f9ca 	bl	80078f0 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f04f 0200 	mov.w	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ac:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005be:	4293      	cmp	r3, r2
 80005c0:	dd05      	ble.n	80005ce <Encoder_Update+0x36>
        deltaRaw -= 60000;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 80005c8:	3b60      	subs	r3, #96	@ 0x60
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e008      	b.n	80005e0 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <Encoder_Update+0x15c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	da04      	bge.n	80005e0 <Encoder_Update+0x48>
        deltaRaw += 60000;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80005dc:	3360      	adds	r3, #96	@ 0x60
 80005de:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80006f8 <Encoder_Update+0x160>
 80005f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80005f8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80006fc <Encoder_Update+0x164>
 80005fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	edd3 7a06 	vldr	s15, [r3, #24]
 8000616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800061a:	ed97 7a00 	vldr	s14, [r7]
 800061e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	ed93 7a03 	vldr	s14, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a07 	vldr	s15, [r3, #28]
 8000634:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000638:	ed97 7a00 	vldr	s14, [r7]
 800063c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	edd3 7a02 	vldr	s15, [r3, #8]
 800064c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000700 <Encoder_Update+0x168>
 8000650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	ed93 7a08 	vldr	s14, [r3, #32]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000680:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 80006fc <Encoder_Update+0x164>
 8000684:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000688:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800068c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	ed93 7a08 	vldr	s14, [r3, #32]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80006a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006aa:	ed97 7a00 	vldr	s14, [r7]
 80006ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80006c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006c8:	ed97 7a00 	vldr	s14, [r7]
 80006cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a1a      	ldr	r2, [r3, #32]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	ffff8ad0 	.word	0xffff8ad0
 80006f8:	40c90fda 	.word	0x40c90fda
 80006fc:	463b8000 	.word	0x463b8000
 8000700:	42651738 	.word	0x42651738

08000704 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    return enc->position;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	ee07 3a90 	vmov	s15, r3
}
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	ee07 3a90 	vmov	s15, r3
}
 8000732:	eeb0 0a67 	vmov.f32	s0, s15
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	ee07 3a90 	vmov	s15, r3
}
 8000750:	eeb0 0a67 	vmov.f32	s0, s15
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <Encoder_GetPosition_mm>:

float Encoder_GetDegree(Encoder *enc) {
	return enc->position_degree;
}

float Encoder_GetPosition_mm(Encoder *enc) {
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6a1b      	ldr	r3, [r3, #32]
 800076a:	ee07 3a90 	vmov	s15, r3
}
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000788:	ee07 3a90 	vmov	s15, r3
}
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <PS2_ReadData>:
int count = 0;

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af02      	add	r7, sp, #8
	HAL_Delay(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f002 fe82 	bl	80034ac <HAL_Delay>
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ae:	4814      	ldr	r0, [pc, #80]	@ (8000800 <PS2_ReadData+0x64>)
 80007b0:	f004 ff2c 	bl	800560c <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	e012      	b.n	80007e0 <PS2_ReadData+0x44>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <PS2_ReadData+0x68>)
 80007be:	1899      	adds	r1, r3, r2
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <PS2_ReadData+0x6c>)
 80007c4:	441a      	add	r2, r3
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	480f      	ldr	r0, [pc, #60]	@ (800080c <PS2_ReadData+0x70>)
 80007d0:	f006 f827 	bl	8006822 <HAL_SPI_TransmitReceive>
		HAL_Delay(5);
 80007d4:	2005      	movs	r0, #5
 80007d6:	f002 fe69 	bl	80034ac <HAL_Delay>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3301      	adds	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b07      	cmp	r3, #7
 80007e4:	dde9      	ble.n	80007ba <PS2_ReadData+0x1e>
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <PS2_ReadData+0x64>)
 80007ee:	f004 ff0d 	bl	800560c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80007f2:	2005      	movs	r0, #5
 80007f4:	f002 fe5a 	bl	80034ac <HAL_Delay>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	48000800 	.word	0x48000800
 8000804:	20000000 	.word	0x20000000
 8000808:	20000284 	.word	0x20000284
 800080c:	20001360 	.word	0x20001360

08000810 <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <PS2_ButtonCircle+0x20>)
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	f003 0320 	and.w	r3, r3, #32
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	20000284 	.word	0x20000284

08000834 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <PS2_ButtonSquare+0x1c>)
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	b25b      	sxtb	r3, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	09db      	lsrs	r3, r3, #7
 8000844:	b2db      	uxtb	r3, r3
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	20000284 	.word	0x20000284

08000854 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <PS2_ButtonTriangle+0x20>)
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	f003 0310 	and.w	r3, r3, #16
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf0c      	ite	eq
 8000864:	2301      	moveq	r3, #1
 8000866:	2300      	movne	r3, #0
 8000868:	b2db      	uxtb	r3, r3
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	20000284 	.word	0x20000284

08000878 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <PS2_ButtonCross+0x20>)
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf0c      	ite	eq
 8000888:	2301      	moveq	r3, #1
 800088a:	2300      	movne	r3, #0
 800088c:	b2db      	uxtb	r3, r3
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	20000284 	.word	0x20000284

0800089c <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <PS2_ButtonR1+0x20>)
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	bf0c      	ite	eq
 80008ac:	2301      	moveq	r3, #1
 80008ae:	2300      	movne	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	20000284 	.word	0x20000284

080008c0 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <PS2_ButtonR2+0x20>)
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	20000284 	.word	0x20000284

080008e4 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <PS2_ButtonSelect+0x20>)
 80008ea:	78db      	ldrb	r3, [r3, #3]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bf0c      	ite	eq
 80008f4:	2301      	moveq	r3, #1
 80008f6:	2300      	movne	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	20000284 	.word	0x20000284

08000908 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <PS2_ButtonStart+0x20>)
 800090e:	78db      	ldrb	r3, [r3, #3]
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf0c      	ite	eq
 8000918:	2301      	moveq	r3, #1
 800091a:	2300      	movne	r3, #0
 800091c:	b2db      	uxtb	r3, r3
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	20000284 	.word	0x20000284

0800092c <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3370      	adds	r3, #112	@ 0x70
 800093a:	2204      	movs	r2, #4
 800093c:	2104      	movs	r1, #4
 800093e:	f00b f994 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f103 0008 	add.w	r0, r3, #8
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	33b0      	adds	r3, #176	@ 0xb0
 800094c:	2204      	movs	r2, #4
 800094e:	2104      	movs	r1, #4
 8000950:	f00b f98b 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f103 0010 	add.w	r0, r3, #16
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	33f0      	adds	r3, #240	@ 0xf0
 800095e:	2204      	movs	r2, #4
 8000960:	2104      	movs	r1, #4
 8000962:	f00b f982 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f103 0018 	add.w	r0, r3, #24
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8000972:	2204      	movs	r2, #4
 8000974:	2104      	movs	r1, #4
 8000976:	f00b f978 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f103 0020 	add.w	r0, r3, #32
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8000986:	2204      	movs	r2, #4
 8000988:	2104      	movs	r1, #4
 800098a:	f00b f96e 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800099a:	2204      	movs	r2, #4
 800099c:	2104      	movs	r1, #4
 800099e:	f00b f964 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80009ae:	2204      	movs	r2, #4
 80009b0:	2104      	movs	r1, #4
 80009b2:	f00b f95a 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80009c2:	2201      	movs	r2, #1
 80009c4:	2104      	movs	r1, #4
 80009c6:	f00b f950 	bl	800bc6a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80009d6:	2201      	movs	r2, #1
 80009d8:	2104      	movs	r1, #4
 80009da:	f00b f946 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80009ea:	2201      	movs	r2, #1
 80009ec:	2104      	movs	r1, #4
 80009ee:	f00b f93c 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80009fe:	2201      	movs	r2, #1
 8000a00:	2104      	movs	r1, #4
 8000a02:	f00b f932 	bl	800bc6a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000a12:	2204      	movs	r2, #4
 8000a14:	2104      	movs	r1, #4
 8000a16:	f00b f928 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000a26:	2204      	movs	r2, #4
 8000a28:	2104      	movs	r1, #4
 8000a2a:	f00b f91e 	bl	800bc6a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	f00b f914 	bl	800bc6a <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e00b      	b.n	8000a60 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	338c      	adds	r3, #140	@ 0x8c
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	3304      	adds	r3, #4
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	ddf0      	ble.n	8000a48 <Kalman_Init+0x11c>
    }
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	e01c      	b.n	8000abc <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	e013      	b.n	8000ab0 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d101      	bne.n	8000a94 <Kalman_SetProcessNoise+0x24>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	e001      	b.n	8000a98 <Kalman_SetProcessNoise+0x28>
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	0091      	lsls	r1, r2, #2
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	440a      	add	r2, r1
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	324c      	adds	r2, #76	@ 0x4c
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	440a      	add	r2, r1
 8000aa8:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	3301      	adds	r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	dde8      	ble.n	8000a88 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	dddf      	ble.n	8000a82 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e01c      	b.n	8000b1c <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	e013      	b.n	8000b10 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d101      	bne.n	8000af4 <Kalman_SetMeasurementNoise+0x24>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	e001      	b.n	8000af8 <Kalman_SetMeasurementNoise+0x28>
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	0091      	lsls	r1, r2, #2
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	440a      	add	r2, r1
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	325c      	adds	r2, #92	@ 0x5c
 8000b04:	0092      	lsls	r2, r2, #2
 8000b06:	440a      	add	r2, r1
 8000b08:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	dde8      	ble.n	8000ae8 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	dddf      	ble.n	8000ae2 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3358      	adds	r3, #88	@ 0x58
 8000b64:	461a      	mov	r2, r3
 8000b66:	f00b fc0f 	bl	800c388 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 0008 	add.w	r0, r3, #8
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3360      	adds	r3, #96	@ 0x60
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f00b fc04 	bl	800c388 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3340      	adds	r3, #64	@ 0x40
 8000b90:	461a      	mov	r2, r3
 8000b92:	f00b f82f 	bl	800bbf4 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3358      	adds	r3, #88	@ 0x58
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	f00b fbf0 	bl	800c388 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3360      	adds	r3, #96	@ 0x60
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	f00b fc9e 	bl	800c4f2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3328      	adds	r3, #40	@ 0x28
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f00b fbde 	bl	800c388 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f103 0118 	add.w	r1, r3, #24
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3328      	adds	r3, #40	@ 0x28
 8000bdc:	461a      	mov	r2, r3
 8000bde:	f00b f809 	bl	800bbf4 <arm_mat_add_f32>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b088      	sub	sp, #32
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	e00e      	b.n	8000c18 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3394      	adds	r3, #148	@ 0x94
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	3304      	adds	r3, #4
 8000c10:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3301      	adds	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	dded      	ble.n	8000bfa <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f103 0210 	add.w	r2, r3, #16
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3360      	adds	r3, #96	@ 0x60
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f00b fc61 	bl	800c4f2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3358      	adds	r3, #88	@ 0x58
 8000c40:	461a      	mov	r2, r3
 8000c42:	f00b fba1 	bl	800c388 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f103 0010 	add.w	r0, r3, #16
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3368      	adds	r3, #104	@ 0x68
 8000c56:	461a      	mov	r2, r3
 8000c58:	f00b fb96 	bl	800c388 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f103 0120 	add.w	r1, r3, #32
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3368      	adds	r3, #104	@ 0x68
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f00a ffc1 	bl	800bbf4 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3368      	adds	r3, #104	@ 0x68
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4610      	mov	r0, r2
 8000c80:	f00b f80b 	bl	800bc9a <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3330      	adds	r3, #48	@ 0x30
 8000c94:	461a      	mov	r2, r3
 8000c96:	f00b fb77 	bl	800c388 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f103 0010 	add.w	r0, r3, #16
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3348      	adds	r3, #72	@ 0x48
 8000caa:	461a      	mov	r2, r3
 8000cac:	f00b fb6c 	bl	800c388 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	e01c      	b.n	8000cf0 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	3394      	adds	r3, #148	@ 0x94
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	ed93 7a00 	vldr	s14, [r3]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	3390      	adds	r3, #144	@ 0x90
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	edd3 7a00 	vldr	s15, [r3]
 8000cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	3390      	adds	r3, #144	@ 0x90
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	3301      	adds	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	dddf      	ble.n	8000cb6 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3348      	adds	r3, #72	@ 0x48
 8000d06:	461a      	mov	r2, r3
 8000d08:	f00b fb3e 	bl	800c388 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e01c      	b.n	8000d4c <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	338c      	adds	r3, #140	@ 0x8c
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	ed93 7a00 	vldr	s14, [r3]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3390      	adds	r3, #144	@ 0x90
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	edd3 7a00 	vldr	s15, [r3]
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	338c      	adds	r3, #140	@ 0x8c
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	3304      	adds	r3, #4
 8000d42:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	dddf      	ble.n	8000d12 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e00b      	b.n	8000d70 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3398      	adds	r3, #152	@ 0x98
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	3304      	adds	r3, #4
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	ddf0      	ble.n	8000d58 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	e00e      	b.n	8000d9a <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	3398      	adds	r3, #152	@ 0x98
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d92:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	dded      	ble.n	8000d7c <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f103 0110 	add.w	r1, r3, #16
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3360      	adds	r3, #96	@ 0x60
 8000db0:	461a      	mov	r2, r3
 8000db2:	f00b fae9 	bl	800c388 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3358      	adds	r3, #88	@ 0x58
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f00b fb58 	bl	800c47c <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3328      	adds	r3, #40	@ 0x28
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f00b fad3 	bl	800c388 <arm_mat_mult_f32>
}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000df4:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <modbus_1t5_Timeout+0x1c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	751a      	strb	r2, [r3, #20]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	2000028c 	.word	0x2000028c

08000e0c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <modbus_3t5_Timeout+0x1c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	755a      	strb	r2, [r3, #21]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	2000028c 	.word	0x2000028c

08000e2c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <modbus_UART_Recived+0x60>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <modbus_UART_Recived+0x60>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8000e46:	1c59      	adds	r1, r3, #1
 8000e48:	b289      	uxth	r1, r1
 8000e4a:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000e4e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e52:	d210      	bcs.n	8000e76 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000e54:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <modbus_UART_Recived+0x60>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68d8      	ldr	r0, [r3, #12]
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <modbus_UART_Recived+0x60>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <modbus_UART_Recived+0x60>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000e66:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	f008 fb4d 	bl	8009510 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000e76:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <modbus_UART_Recived+0x60>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000028c 	.word	0x2000028c

08000e90 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000e9a:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <Modbus_init+0x9c>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <Modbus_init+0x9c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000ea8:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <Modbus_init+0x9c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	4a20      	ldr	r2, [pc, #128]	@ (8000f30 <Modbus_init+0xa0>)
 8000eb0:	2114      	movs	r1, #20
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f007 fa22 	bl	80082fc <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <Modbus_init+0x9c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8000f34 <Modbus_init+0xa4>)
 8000ec0:	210e      	movs	r1, #14
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 fa1a 	bl	80082fc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <Modbus_init+0x9c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	4a1a      	ldr	r2, [pc, #104]	@ (8000f38 <Modbus_init+0xa8>)
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f008 fa62 	bl	800939c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <Modbus_init+0x9c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68d8      	ldr	r0, [r3, #12]
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <Modbus_init+0x9c>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <Modbus_init+0x9c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000eea:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000eee:	4413      	add	r3, r2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f008 fb0b 	bl	8009510 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <Modbus_init+0x9c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10c      	bne.n	8000f24 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <Modbus_init+0x9c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 f8dd 	bl	80070d0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f16:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <Modbus_init+0x9c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f006 fba4 	bl	800766c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000028c 	.word	0x2000028c
 8000f30:	08000ded 	.word	0x08000ded
 8000f34:	08000e0d 	.word	0x08000e0d
 8000f38:	08000e2d 	.word	0x08000e2d

08000f3c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000f48:	23ff      	movs	r3, #255	@ 0xff
 8000f4a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000f4c:	23ff      	movs	r3, #255	@ 0xff
 8000f4e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000f50:	e013      	b.n	8000f7a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	4053      	eors	r3, r2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000f62:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <CRC16+0x68>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4413      	add	r3, r2
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	4053      	eors	r3, r2
 8000f6e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <CRC16+0x6c>)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	1e5a      	subs	r2, r3, #1
 8000f7e:	803a      	strh	r2, [r7, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1e6      	bne.n	8000f52 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	b29b      	uxth	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000108 	.word	0x20000108
 8000fa8:	20000008 	.word	0x20000008

08000fac <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000fb2:	4b80      	ldr	r3, [pc, #512]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	7e1b      	ldrb	r3, [r3, #24]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d80a      	bhi.n	8000fd4 <Modbus_Protocal_Worker+0x28>
 8000fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc4 <Modbus_Protocal_Worker+0x18>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fdf 	.word	0x08000fdf
 8000fc8:	0800117d 	.word	0x0800117d
 8000fcc:	08001069 	.word	0x08001069
 8000fd0:	0800108f 	.word	0x0800108f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000fd4:	4b77      	ldr	r3, [pc, #476]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	761a      	strb	r2, [r3, #24]
		break;
 8000fdc:	e0e6      	b.n	80011ac <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000fde:	4b75      	ldr	r3, [pc, #468]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000fea:	f000 f9d5 	bl	8001398 <Modbus_Emission>
 8000fee:	e01c      	b.n	800102a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000ff0:	4b70      	ldr	r3, [pc, #448]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	7d9b      	ldrb	r3, [r3, #22]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d017      	beq.n	800102a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000ffa:	4b6e      	ldr	r3, [pc, #440]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2200      	movs	r2, #0
 8001000:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001002:	4b6c      	ldr	r3, [pc, #432]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2200      	movs	r2, #0
 8001008:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800100a:	4b6a      	ldr	r3, [pc, #424]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b67      	ldr	r3, [pc, #412]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001022:	4b64      	ldr	r3, [pc, #400]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2203      	movs	r2, #3
 8001028:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800102a:	4b62      	ldr	r3, [pc, #392]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001034:	2b20      	cmp	r3, #32
 8001036:	f040 80b2 	bne.w	800119e <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800103a:	4b5e      	ldr	r3, [pc, #376]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001044:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68d8      	ldr	r0, [r3, #12]
 800104a:	4b5a      	ldr	r3, [pc, #360]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b59      	ldr	r3, [pc, #356]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001056:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800105a:	4413      	add	r3, r2
 800105c:	3302      	adds	r3, #2
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	f008 fa55 	bl	8009510 <HAL_UART_Receive_IT>
		}
		break;
 8001066:	e09a      	b.n	800119e <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001068:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	7d1b      	ldrb	r3, [r3, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8097 	beq.w	80011a2 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001074:	4b4f      	ldr	r3, [pc, #316]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800107c:	4b4d      	ldr	r3, [pc, #308]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	22fe      	movs	r2, #254	@ 0xfe
 8001082:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001084:	4b4b      	ldr	r3, [pc, #300]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2204      	movs	r2, #4
 800108a:	761a      	strb	r2, [r3, #24]
		}
		break;
 800108c:	e089      	b.n	80011a2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800108e:	4b49      	ldr	r3, [pc, #292]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	7d9b      	ldrb	r3, [r3, #22]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d009      	beq.n	80010ac <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8001098:	4b46      	ldr	r3, [pc, #280]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80010a4:	4b43      	ldr	r3, [pc, #268]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	22ff      	movs	r2, #255	@ 0xff
 80010aa:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80010ac:	4b41      	ldr	r3, [pc, #260]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80010b4:	f113 0f02 	cmn.w	r3, #2
 80010b8:	d150      	bne.n	800115c <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80010ba:	4b3e      	ldr	r3, [pc, #248]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80010c2:	4b3c      	ldr	r3, [pc, #240]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80010ca:	4b3a      	ldr	r3, [pc, #232]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80010d2:	3b02      	subs	r3, #2
 80010d4:	4619      	mov	r1, r3
 80010d6:	4610      	mov	r0, r2
 80010d8:	f7ff ff30 	bl	8000f3c <CRC16>
 80010dc:	4603      	mov	r3, r0
 80010de:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80010e0:	793a      	ldrb	r2, [r7, #4]
 80010e2:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80010ee:	3b02      	subs	r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d10c      	bne.n	8001114 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80010fa:	797a      	ldrb	r2, [r7, #5]
 80010fc:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001108:	3b01      	subs	r3, #1
 800110a:	440b      	add	r3, r1
 800110c:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001110:	429a      	cmp	r2, r3
 8001112:	d004      	beq.n	800111e <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	22ff      	movs	r2, #255	@ 0xff
 800111a:	75da      	strb	r2, [r3, #23]
				break;
 800111c:	e046      	b.n	80011ac <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800111e:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001126:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d113      	bne.n	8001158 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001130:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001140:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800114a:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800114c:	461a      	mov	r2, r3
 800114e:	f00b fa43 	bl	800c5d8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001152:	f000 f909 	bl	8001368 <Modbus_frame_response>
 8001156:	e001      	b.n	800115c <Modbus_Protocal_Worker+0x1b0>
				break;
 8001158:	bf00      	nop
					}
		break;


	}
}
 800115a:	e027      	b.n	80011ac <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	7d5b      	ldrb	r3, [r3, #21]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d01f      	beq.n	80011a6 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2201      	movs	r2, #1
 800116c:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4618      	mov	r0, r3
 8001176:	f008 fa97 	bl	80096a8 <HAL_UART_AbortReceive>
		break;
 800117a:	e014      	b.n	80011a6 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001186:	2b20      	cmp	r3, #32
 8001188:	d10f      	bne.n	80011aa <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <Modbus_Protocal_Worker+0x208>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2201      	movs	r2, #1
 800119a:	761a      	strb	r2, [r3, #24]
		break;
 800119c:	e005      	b.n	80011aa <Modbus_Protocal_Worker+0x1fe>
		break;
 800119e:	bf00      	nop
 80011a0:	e004      	b.n	80011ac <Modbus_Protocal_Worker+0x200>
		break;
 80011a2:	bf00      	nop
 80011a4:	e002      	b.n	80011ac <Modbus_Protocal_Worker+0x200>
		break;
 80011a6:	bf00      	nop
 80011a8:	e000      	b.n	80011ac <Modbus_Protocal_Worker+0x200>
		break;
 80011aa:	bf00      	nop
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000028c 	.word	0x2000028c

080011b8 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <modbusWrite1Register+0x7c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	7e9b      	ldrb	r3, [r3, #26]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001234 <modbusWrite1Register+0x7c>)
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	7ed2      	ldrb	r2, [r2, #27]
 80011ce:	4413      	add	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80011d2:	88fa      	ldrh	r2, [r7, #6]
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <modbusWrite1Register+0x7c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d903      	bls.n	80011e6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80011de:	2002      	movs	r0, #2
 80011e0:	f000 f8a0 	bl	8001324 <ModbusErrorReply>
			 return;
 80011e4:	e023      	b.n	800122e <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <modbusWrite1Register+0x7c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <modbusWrite1Register+0x7c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6859      	ldr	r1, [r3, #4]
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	440b      	add	r3, r1
 80011f6:	7f12      	ldrb	r2, [r2, #28]
 80011f8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <modbusWrite1Register+0x7c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <modbusWrite1Register+0x7c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6859      	ldr	r1, [r3, #4]
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	440b      	add	r3, r1
 800120a:	7f52      	ldrb	r2, [r2, #29]
 800120c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <modbusWrite1Register+0x7c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <modbusWrite1Register+0x7c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800121c:	2208      	movs	r2, #8
 800121e:	4619      	mov	r1, r3
 8001220:	f00b f9da 	bl	800c5d8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <modbusWrite1Register+0x7c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2205      	movs	r2, #5
 800122a:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000028c 	.word	0x2000028c

08001238 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800123e:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <modbusRead1Register+0xe8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	7f1b      	ldrb	r3, [r3, #28]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b29b      	uxth	r3, r3
 8001248:	4a35      	ldr	r2, [pc, #212]	@ (8001320 <modbusRead1Register+0xe8>)
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	7f52      	ldrb	r2, [r2, #29]
 800124e:	4413      	add	r3, r2
 8001250:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001252:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <modbusRead1Register+0xe8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	7e9b      	ldrb	r3, [r3, #26]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b29b      	uxth	r3, r3
 800125c:	4a30      	ldr	r2, [pc, #192]	@ (8001320 <modbusRead1Register+0xe8>)
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	7ed2      	ldrb	r2, [r2, #27]
 8001262:	4413      	add	r3, r2
 8001264:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <modbusRead1Register+0x3a>
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001270:	d903      	bls.n	800127a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001272:	2003      	movs	r0, #3
 8001274:	f000 f856 	bl	8001324 <ModbusErrorReply>
		 return;
 8001278:	e04e      	b.n	8001318 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800127a:	88ba      	ldrh	r2, [r7, #4]
 800127c:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <modbusRead1Register+0xe8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	429a      	cmp	r2, r3
 8001284:	d808      	bhi.n	8001298 <modbusRead1Register+0x60>
 8001286:	88ba      	ldrh	r2, [r7, #4]
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4413      	add	r3, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <modbusRead1Register+0xe8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	d903      	bls.n	80012a0 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001298:	2002      	movs	r0, #2
 800129a:	f000 f843 	bl	8001324 <ModbusErrorReply>
		 return;
 800129e:	e03b      	b.n	8001318 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <modbusRead1Register+0xe8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2203      	movs	r2, #3
 80012a6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <modbusRead1Register+0xe8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	0052      	lsls	r2, r2, #1
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80012ba:	2400      	movs	r4, #0
 80012bc:	e020      	b.n	8001300 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <modbusRead1Register+0xe8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	4423      	add	r3, r4
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	18d1      	adds	r1, r2, r3
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <modbusRead1Register+0xe8>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	1c63      	adds	r3, r4, #1
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	7849      	ldrb	r1, [r1, #1]
 80012d6:	4413      	add	r3, r2
 80012d8:	460a      	mov	r2, r1
 80012da:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <modbusRead1Register+0xe8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	4423      	add	r3, r4
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	18d1      	adds	r1, r2, r3
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <modbusRead1Register+0xe8>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	0063      	lsls	r3, r4, #1
 80012f2:	3303      	adds	r3, #3
 80012f4:	7809      	ldrb	r1, [r1, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	460a      	mov	r2, r1
 80012fa:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80012fe:	3401      	adds	r4, #1
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	429c      	cmp	r4, r3
 8001304:	dbdb      	blt.n	80012be <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	3301      	adds	r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <modbusRead1Register+0xe8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0052      	lsls	r2, r2, #1
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	bf00      	nop
 8001320:	2000028c 	.word	0x2000028c

08001324 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <ModbusErrorReply+0x40>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	7e5a      	ldrb	r2, [r3, #25]
 8001334:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <ModbusErrorReply+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <ModbusErrorReply+0x40>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <ModbusErrorReply+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2202      	movs	r2, #2
 8001352:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000028c 	.word	0x2000028c

08001368 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <Modbus_frame_response+0x2c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	7e5b      	ldrb	r3, [r3, #25]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d004      	beq.n	8001380 <Modbus_frame_response+0x18>
 8001376:	2b06      	cmp	r3, #6
 8001378:	d105      	bne.n	8001386 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800137a:	f7ff ff1d 	bl	80011b8 <modbusWrite1Register>
		break;
 800137e:	e006      	b.n	800138e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001380:	f7ff ff5a 	bl	8001238 <modbusRead1Register>
		break;
 8001384:	e003      	b.n	800138e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ffcc 	bl	8001324 <ModbusErrorReply>
		break;
 800138c:	bf00      	nop

	}
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000028c 	.word	0x2000028c

08001398 <Modbus_Emission>:

void Modbus_Emission()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800139e:	4b3c      	ldr	r3, [pc, #240]	@ (8001490 <Modbus_Emission+0xf8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	d15d      	bne.n	8001468 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80013ac:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <Modbus_Emission+0xf8>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <Modbus_Emission+0xf8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	7812      	ldrb	r2, [r2, #0]
 80013b6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <Modbus_Emission+0xf8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80013c2:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80013c4:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <Modbus_Emission+0xf8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <Modbus_Emission+0xf8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 80013d4:	461a      	mov	r2, r3
 80013d6:	f00b f8ff 	bl	800c5d8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80013da:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <Modbus_Emission+0xf8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <Modbus_Emission+0xf8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3203      	adds	r2, #3
 80013ea:	b292      	uxth	r2, r2
 80013ec:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <Modbus_Emission+0xf8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80013f8:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <Modbus_Emission+0xf8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001400:	3b02      	subs	r3, #2
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f7ff fd99 	bl	8000f3c <CRC16>
 800140a:	4603      	mov	r3, r0
 800140c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <Modbus_Emission+0xf8>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <Modbus_Emission+0xf8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800141a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800141c:	7939      	ldrb	r1, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	460a      	mov	r2, r1
 8001422:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <Modbus_Emission+0xf8>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <Modbus_Emission+0xf8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001432:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001434:	7979      	ldrb	r1, [r7, #5]
 8001436:	4413      	add	r3, r2
 8001438:	460a      	mov	r2, r1
 800143a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <Modbus_Emission+0xf8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001448:	2b20      	cmp	r3, #32
 800144a:	d10d      	bne.n	8001468 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <Modbus_Emission+0xf8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <Modbus_Emission+0xf8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <Modbus_Emission+0xf8>)
 800145c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800145e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001462:	461a      	mov	r2, r3
 8001464:	f008 f8a0 	bl	80095a8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <Modbus_Emission+0xf8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <Modbus_Emission+0xf8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <Modbus_Emission+0xf8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2200      	movs	r2, #0
 800147e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <Modbus_Emission+0xf8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000028c 	.word	0x2000028c

08001494 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8001494:	b4b0      	push	{r4, r5, r7}
 8001496:	b09f      	sub	sp, #124	@ 0x7c
 8001498:	af00      	add	r7, sp, #0
 800149a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800149c:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 80014a0:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80014a4:	ed87 2b08 	vstr	d2, [r7, #32]
 80014a8:	ed87 3b06 	vstr	d3, [r7, #24]
 80014ac:	ed87 4b04 	vstr	d4, [r7, #16]
 80014b0:	ed87 5b02 	vstr	d5, [r7, #8]
 80014b4:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 80014b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80014c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80014c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80014c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80014d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014d4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80014d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014dc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80014e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014e4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 80014e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014ec:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 80014f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f2:	461d      	mov	r5, r3
 80014f4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001508:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800150c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800150e:	377c      	adds	r7, #124	@ 0x7c
 8001510:	46bd      	mov	sp, r7
 8001512:	bcb0      	pop	{r4, r5, r7}
 8001514:	4770      	bx	lr

08001516 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8001516:	b4b0      	push	{r4, r5, r7}
 8001518:	b09f      	sub	sp, #124	@ 0x7c
 800151a:	af00      	add	r7, sp, #0
 800151c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800151e:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001522:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001526:	ed87 2b08 	vstr	d2, [r7, #32]
 800152a:	ed87 3b06 	vstr	d3, [r7, #24]
 800152e:	ed87 4b04 	vstr	d4, [r7, #16]
 8001532:	ed87 5b02 	vstr	d5, [r7, #8]
 8001536:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 800153a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800153e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001546:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800154a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800154e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001552:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001556:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 800155a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800155e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001566:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 800156a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800156e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8001572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001574:	461d      	mov	r5, r3
 8001576:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001586:	e894 0003 	ldmia.w	r4, {r0, r1}
 800158a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800158e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001590:	377c      	adds	r7, #124	@ 0x7c
 8001592:	46bd      	mov	sp, r7
 8001594:	bcb0      	pop	{r4, r5, r7}
 8001596:	4770      	bx	lr

08001598 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	@ 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	6178      	str	r0, [r7, #20]
 80015a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80015a4:	edc7 0a03 	vstr	s1, [r7, #12]
 80015a8:	ed87 1a02 	vstr	s2, [r7, #8]
 80015ac:	edc7 1a01 	vstr	s3, [r7, #4]
 80015b0:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 80015b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80015b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 80015c4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80015c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	db02      	blt.n	80015d8 <InitTrajectorySegment+0x40>
 80015d2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80015d6:	e000      	b.n	80015da <InitTrajectorySegment+0x42>
 80015d8:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <InitTrajectorySegment+0x168>)
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 80015dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80015e0:	eef0 7ae7 	vabs.f32	s15, s15
 80015e4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 80015e8:	edd7 6a02 	vldr	s13, [r7, #8]
 80015ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 80015f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001600:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001604:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8001618:	edd7 7a08 	vldr	s15, [r7, #32]
 800161c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001620:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162c:	d524      	bpl.n	8001678 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 800162e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001632:	edd7 7a01 	vldr	s15, [r7, #4]
 8001636:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800163a:	eeb0 0a66 	vmov.f32	s0, s13
 800163e:	f00a ffd9 	bl	800c5f4 <sqrtf>
 8001642:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 800164e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 800165c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001660:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001668:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	edc3 7a02 	vstr	s15, [r3, #8]
 8001676:	e027      	b.n	80016c8 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8001678:	edd7 7a08 	vldr	s15, [r7, #32]
 800167c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001680:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001688:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 800168c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001690:	ed97 7a02 	vldr	s14, [r7, #8]
 8001694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 800169e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 80016b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80016ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 80016d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80016d8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ea:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f0:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	621a      	str	r2, [r3, #32]
}
 80016f8:	bf00      	nop
 80016fa:	3730      	adds	r7, #48	@ 0x30
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	bf800000 	.word	0xbf800000

08001704 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	@ 0x30
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800170a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2220      	movs	r2, #32
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00a ff29 	bl	800c574 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001722:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001724:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800172a:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800172c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001732:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001738:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800173e:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001744:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174a:	4b28      	ldr	r3, [pc, #160]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800174c:	2204      	movs	r2, #4
 800174e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001750:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001752:	2200      	movs	r2, #0
 8001754:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001756:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001758:	2200      	movs	r2, #0
 800175a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800175e:	2201      	movs	r2, #1
 8001760:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800176c:	2200      	movs	r2, #0
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001776:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800177e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001780:	2200      	movs	r2, #0
 8001782:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800178c:	4817      	ldr	r0, [pc, #92]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800178e:	f002 f8bb 	bl	8003908 <HAL_ADC_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001798:	f000 fefe 	bl	8002598 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4811      	ldr	r0, [pc, #68]	@ (80017ec <MX_ADC1_Init+0xe8>)
 80017a8:	f003 f858 	bl	800485c <HAL_ADCEx_MultiModeConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017b2:	f000 fef1 	bl	8002598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <MX_ADC1_Init+0xec>)
 80017b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017ba:	2306      	movs	r3, #6
 80017bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017c2:	237f      	movs	r3, #127	@ 0x7f
 80017c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017c6:	2304      	movs	r3, #4
 80017c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4806      	ldr	r0, [pc, #24]	@ (80017ec <MX_ADC1_Init+0xe8>)
 80017d4:	f002 fb46 	bl	8003e64 <HAL_ADC_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80017de:	f000 fedb 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	3730      	adds	r7, #48	@ 0x30
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000290 	.word	0x20000290
 80017f0:	04300002 	.word	0x04300002

080017f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2220      	movs	r2, #32
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f00a feb7 	bl	800c574 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001806:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001808:	4a2b      	ldr	r2, [pc, #172]	@ (80018b8 <MX_ADC2_Init+0xc4>)
 800180a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 800180e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001812:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001814:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 800182e:	2204      	movs	r2, #4
 8001830:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001834:	2200      	movs	r2, #0
 8001836:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 800183a:	2200      	movs	r2, #0
 800183c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800183e:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001840:	2201      	movs	r2, #1
 8001842:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 800184e:	2200      	movs	r2, #0
 8001850:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001854:	2200      	movs	r2, #0
 8001856:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001860:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001862:	2200      	movs	r2, #0
 8001864:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001866:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800186e:	4811      	ldr	r0, [pc, #68]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 8001870:	f002 f84a 	bl	8003908 <HAL_ADC_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800187a:	f000 fe8d 	bl	8002598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <MX_ADC2_Init+0xc8>)
 8001880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001882:	2306      	movs	r3, #6
 8001884:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800188a:	237f      	movs	r3, #127	@ 0x7f
 800188c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800188e:	2304      	movs	r3, #4
 8001890:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001896:	463b      	mov	r3, r7
 8001898:	4619      	mov	r1, r3
 800189a:	4806      	ldr	r0, [pc, #24]	@ (80018b4 <MX_ADC2_Init+0xc0>)
 800189c:	f002 fae2 	bl	8003e64 <HAL_ADC_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80018a6:	f000 fe77 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200002fc 	.word	0x200002fc
 80018b8:	50000100 	.word	0x50000100
 80018bc:	08600004 	.word	0x08600004

080018c0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0a0      	sub	sp, #128	@ 0x80
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	2254      	movs	r2, #84	@ 0x54
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00a fe47 	bl	800c574 <memset>
  if(adcHandle->Instance==ADC1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ee:	d13e      	bne.n	800196e <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018f6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fc:	f107 0318 	add.w	r3, r7, #24
 8001900:	4618      	mov	r0, r3
 8001902:	f004 fc95 	bl	8006230 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800190c:	f000 fe44 	bl	8002598 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001910:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <HAL_ADC_MspInit+0x13c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	4a39      	ldr	r2, [pc, #228]	@ (80019fc <HAL_ADC_MspInit+0x13c>)
 8001918:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <HAL_ADC_MspInit+0x13c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d10b      	bne.n	800193a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	4a36      	ldr	r2, [pc, #216]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 8001928:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800192c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192e:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	4a30      	ldr	r2, [pc, #192]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001946:	4b2e      	ldr	r3, [pc, #184]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8001952:	2303      	movs	r3, #3
 8001954:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001956:	2303      	movs	r3, #3
 8001958:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001968:	f003 fcce 	bl	8005308 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800196c:	e042      	b.n	80019f4 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a24      	ldr	r2, [pc, #144]	@ (8001a04 <HAL_ADC_MspInit+0x144>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d13d      	bne.n	80019f4 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001978:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800197c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800197e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001982:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fc51 	bl	8006230 <HAL_RCCEx_PeriphCLKConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001994:	f000 fe00 	bl	8002598 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001998:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <HAL_ADC_MspInit+0x13c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <HAL_ADC_MspInit+0x13c>)
 80019a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_ADC_MspInit+0x13c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10b      	bne.n	80019c2 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 80019b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_ADC_MspInit+0x140>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 80019da:	2302      	movs	r3, #2
 80019dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019de:	2303      	movs	r3, #3
 80019e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f0:	f003 fc8a 	bl	8005308 <HAL_GPIO_Init>
}
 80019f4:	bf00      	nop
 80019f6:	3780      	adds	r7, #128	@ 0x80
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000368 	.word	0x20000368
 8001a00:	40021000 	.word	0x40021000
 8001a04:	50000100 	.word	0x50000100

08001a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a0e:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <MX_DMA_Init+0x50>)
 8001a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a12:	4a11      	ldr	r2, [pc, #68]	@ (8001a58 <MX_DMA_Init+0x50>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <MX_DMA_Init+0x50>)
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <MX_DMA_Init+0x50>)
 8001a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <MX_DMA_Init+0x50>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <MX_DMA_Init+0x50>)
 8001a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200b      	movs	r0, #11
 8001a44:	f003 f8ed 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a48:	200b      	movs	r0, #11
 8001a4a:	f003 f904 	bl	8004c56 <HAL_NVIC_EnableIRQ>

}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000

08001a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	4a46      	ldr	r2, [pc, #280]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001a90:	f043 0320 	orr.w	r3, r3, #32
 8001a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a96:	4b44      	ldr	r3, [pc, #272]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4a40      	ldr	r2, [pc, #256]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4b38      	ldr	r3, [pc, #224]	@ (8001ba8 <MX_GPIO_Init+0x14c>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4835      	ldr	r0, [pc, #212]	@ (8001bac <MX_GPIO_Init+0x150>)
 8001ad8:	f003 fd98 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2140      	movs	r1, #64	@ 0x40
 8001ae0:	4833      	ldr	r0, [pc, #204]	@ (8001bb0 <MX_GPIO_Init+0x154>)
 8001ae2:	f003 fd93 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aec:	4830      	ldr	r0, [pc, #192]	@ (8001bb0 <MX_GPIO_Init+0x154>)
 8001aee:	f003 fd8d 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4828      	ldr	r0, [pc, #160]	@ (8001bac <MX_GPIO_Init+0x150>)
 8001b0a:	f003 fbfd 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin|Limit_Switch_pen_1_Pin;
 8001b0e:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b14:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4821      	ldr	r0, [pc, #132]	@ (8001bac <MX_GPIO_Init+0x150>)
 8001b26:	f003 fbef 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 8001b2a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	481b      	ldr	r0, [pc, #108]	@ (8001bb0 <MX_GPIO_Init+0x154>)
 8001b44:	f003 fbe0 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8001b48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4814      	ldr	r0, [pc, #80]	@ (8001bb0 <MX_GPIO_Init+0x154>)
 8001b60:	f003 fbd2 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8001b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480d      	ldr	r0, [pc, #52]	@ (8001bb0 <MX_GPIO_Init+0x154>)
 8001b7c:	f003 fbc4 	bl	8005308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2017      	movs	r0, #23
 8001b86:	f003 f84c 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b8a:	2017      	movs	r0, #23
 8001b8c:	f003 f863 	bl	8004c56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2028      	movs	r0, #40	@ 0x28
 8001b96:	f003 f844 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b9a:	2028      	movs	r0, #40	@ 0x28
 8001b9c:	f003 f85b 	bl	8004c56 <HAL_NVIC_EnableIRQ>

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	48000800 	.word	0x48000800
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b096      	sub	sp, #88	@ 0x58
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bbe:	f001 fc04 	bl	80033ca <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc2:	f000 fc4f 	bl	8002464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc6:	f7ff ff49 	bl	8001a5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001bca:	f7ff ff1d 	bl	8001a08 <MX_DMA_Init>
  MX_TIM3_Init();
 8001bce:	f000 fee5 	bl	800299c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001bd2:	f7ff fd97 	bl	8001704 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001bd6:	f000 fe3f 	bl	8002858 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bda:	f000 fe91 	bl	8002900 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001bde:	f000 ff33 	bl	8002a48 <MX_TIM4_Init>
  MX_TIM20_Init();
 8001be2:	f001 f8b7 	bl	8002d54 <MX_TIM20_Init>
  MX_TIM8_Init();
 8001be6:	f000 ff85 	bl	8002af4 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001bea:	f001 f833 	bl	8002c54 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001bee:	f001 fae9 	bl	80031c4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001bf2:	f7ff fdff 	bl	80017f4 <MX_ADC2_Init>
  MX_SPI1_Init();
 8001bf6:	f000 fcd5 	bl	80025a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8001bfa:	48a0      	ldr	r0, [pc, #640]	@ (8001e7c <main+0x2c4>)
 8001bfc:	f005 f9f8 	bl	8006ff0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8001c00:	489f      	ldr	r0, [pc, #636]	@ (8001e80 <main+0x2c8>)
 8001c02:	f005 f9f5 	bl	8006ff0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001c06:	210c      	movs	r1, #12
 8001c08:	489d      	ldr	r0, [pc, #628]	@ (8001e80 <main+0x2c8>)
 8001c0a:	f005 fbb5 	bl	8007378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	489a      	ldr	r0, [pc, #616]	@ (8001e7c <main+0x2c4>)
 8001c12:	f005 fbb1 	bl	8007378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 8001c16:	2108      	movs	r1, #8
 8001c18:	4898      	ldr	r0, [pc, #608]	@ (8001e7c <main+0x2c4>)
 8001c1a:	f005 fbad 	bl	8007378 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8001c1e:	4999      	ldr	r1, [pc, #612]	@ (8001e84 <main+0x2cc>)
 8001c20:	4899      	ldr	r0, [pc, #612]	@ (8001e88 <main+0x2d0>)
 8001c22:	f7fe fc8f 	bl	8000544 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8001c26:	4999      	ldr	r1, [pc, #612]	@ (8001e8c <main+0x2d4>)
 8001c28:	4899      	ldr	r0, [pc, #612]	@ (8001e90 <main+0x2d8>)
 8001c2a:	f7fe fc8b 	bl	8000544 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8001c2e:	4899      	ldr	r0, [pc, #612]	@ (8001e94 <main+0x2dc>)
 8001c30:	f002 f826 	bl	8003c80 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001c34:	4898      	ldr	r0, [pc, #608]	@ (8001e98 <main+0x2e0>)
 8001c36:	f005 fa4b 	bl	80070d0 <HAL_TIM_Base_Start_IT>

	int lastTick = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	657b      	str	r3, [r7, #84]	@ 0x54

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001c3e:	213c      	movs	r1, #60	@ 0x3c
 8001c40:	4892      	ldr	r0, [pc, #584]	@ (8001e8c <main+0x2d4>)
 8001c42:	f005 fe55 	bl	80078f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001c46:	213c      	movs	r1, #60	@ 0x3c
 8001c48:	488e      	ldr	r0, [pc, #568]	@ (8001e84 <main+0x2cc>)
 8001c4a:	f005 fe51 	bl	80078f0 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8001c4e:	4b93      	ldr	r3, [pc, #588]	@ (8001e9c <main+0x2e4>)
 8001c50:	4a93      	ldr	r2, [pc, #588]	@ (8001ea0 <main+0x2e8>)
 8001c52:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001c54:	4b91      	ldr	r3, [pc, #580]	@ (8001e9c <main+0x2e4>)
 8001c56:	4a93      	ldr	r2, [pc, #588]	@ (8001ea4 <main+0x2ec>)
 8001c58:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001c5a:	4b90      	ldr	r3, [pc, #576]	@ (8001e9c <main+0x2e4>)
 8001c5c:	2215      	movs	r2, #21
 8001c5e:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001c60:	4b8e      	ldr	r3, [pc, #568]	@ (8001e9c <main+0x2e4>)
 8001c62:	22c8      	movs	r2, #200	@ 0xc8
 8001c64:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001c66:	4990      	ldr	r1, [pc, #576]	@ (8001ea8 <main+0x2f0>)
 8001c68:	488c      	ldr	r0, [pc, #560]	@ (8001e9c <main+0x2e4>)
 8001c6a:	f7ff f911 	bl	8000e90 <Modbus_init>

	Kalman_Init(&kf_pris);
 8001c6e:	488f      	ldr	r0, [pc, #572]	@ (8001eac <main+0x2f4>)
 8001c70:	f7fe fe5c 	bl	800092c <Kalman_Init>

	kf_pris.A_data[0] = 1;
 8001c74:	4b8d      	ldr	r3, [pc, #564]	@ (8001eac <main+0x2f4>)
 8001c76:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c7a:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 8001c7c:	4b8b      	ldr	r3, [pc, #556]	@ (8001eac <main+0x2f4>)
 8001c7e:	4a8c      	ldr	r2, [pc, #560]	@ (8001eb0 <main+0x2f8>)
 8001c80:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 8001c82:	4b8a      	ldr	r3, [pc, #552]	@ (8001eac <main+0x2f4>)
 8001c84:	4a8b      	ldr	r2, [pc, #556]	@ (8001eb4 <main+0x2fc>)
 8001c86:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 8001c88:	4b88      	ldr	r3, [pc, #544]	@ (8001eac <main+0x2f4>)
 8001c8a:	4a8b      	ldr	r2, [pc, #556]	@ (8001eb8 <main+0x300>)
 8001c8c:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 8001c8e:	4b87      	ldr	r3, [pc, #540]	@ (8001eac <main+0x2f4>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 8001c98:	4b84      	ldr	r3, [pc, #528]	@ (8001eac <main+0x2f4>)
 8001c9a:	4a88      	ldr	r2, [pc, #544]	@ (8001ebc <main+0x304>)
 8001c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 8001ca0:	4b82      	ldr	r3, [pc, #520]	@ (8001eac <main+0x2f4>)
 8001ca2:	4a87      	ldr	r2, [pc, #540]	@ (8001ec0 <main+0x308>)
 8001ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 8001ca8:	4b80      	ldr	r3, [pc, #512]	@ (8001eac <main+0x2f4>)
 8001caa:	4a86      	ldr	r2, [pc, #536]	@ (8001ec4 <main+0x30c>)
 8001cac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 8001cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8001eac <main+0x2f4>)
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 8001cba:	4b7c      	ldr	r3, [pc, #496]	@ (8001eac <main+0x2f4>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 8001cc4:	4b79      	ldr	r3, [pc, #484]	@ (8001eac <main+0x2f4>)
 8001cc6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 8001cce:	4b77      	ldr	r3, [pc, #476]	@ (8001eac <main+0x2f4>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 8001cd8:	4b74      	ldr	r3, [pc, #464]	@ (8001eac <main+0x2f4>)
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 8001ce2:	4b72      	ldr	r3, [pc, #456]	@ (8001eac <main+0x2f4>)
 8001ce4:	4a78      	ldr	r2, [pc, #480]	@ (8001ec8 <main+0x310>)
 8001ce6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 8001cea:	4b70      	ldr	r3, [pc, #448]	@ (8001eac <main+0x2f4>)
 8001cec:	4a77      	ldr	r2, [pc, #476]	@ (8001ecc <main+0x314>)
 8001cee:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 8001cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8001eac <main+0x2f4>)
 8001cf4:	4a76      	ldr	r2, [pc, #472]	@ (8001ed0 <main+0x318>)
 8001cf6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 8001cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8001eac <main+0x2f4>)
 8001cfc:	4a75      	ldr	r2, [pc, #468]	@ (8001ed4 <main+0x31c>)
 8001cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 8001d02:	4b6a      	ldr	r3, [pc, #424]	@ (8001eac <main+0x2f4>)
 8001d04:	4a74      	ldr	r2, [pc, #464]	@ (8001ed8 <main+0x320>)
 8001d06:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 8001d0a:	4b68      	ldr	r3, [pc, #416]	@ (8001eac <main+0x2f4>)
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 8001d14:	4b65      	ldr	r3, [pc, #404]	@ (8001eac <main+0x2f4>)
 8001d16:	4a71      	ldr	r2, [pc, #452]	@ (8001edc <main+0x324>)
 8001d18:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d20:	e01d      	b.n	8001d5e <main+0x1a6>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d26:	e014      	b.n	8001d52 <main+0x19a>
	        kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8001d28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d102      	bne.n	8001d36 <main+0x17e>
 8001d30:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d34:	e001      	b.n	8001d3a <main+0x182>
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d3c:	0099      	lsls	r1, r3, #2
 8001d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d40:	440b      	add	r3, r1
 8001d42:	495a      	ldr	r1, [pc, #360]	@ (8001eac <main+0x2f4>)
 8001d44:	333c      	adds	r3, #60	@ 0x3c
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d4e:	3301      	adds	r3, #1
 8001d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	dde7      	ble.n	8001d28 <main+0x170>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	ddde      	ble.n	8001d22 <main+0x16a>
	    }
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 8001d64:	4b51      	ldr	r3, [pc, #324]	@ (8001eac <main+0x2f4>)
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 8001d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001eac <main+0x2f4>)
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8001d78:	4b4c      	ldr	r3, [pc, #304]	@ (8001eac <main+0x2f4>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 8001d82:	4b4a      	ldr	r3, [pc, #296]	@ (8001eac <main+0x2f4>)
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 8001d8c:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8001ee0 <main+0x328>
 8001d90:	4846      	ldr	r0, [pc, #280]	@ (8001eac <main+0x2f4>)
 8001d92:	f7fe fe9d 	bl	8000ad0 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 8001d96:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001ee4 <main+0x32c>
 8001d9a:	4844      	ldr	r0, [pc, #272]	@ (8001eac <main+0x2f4>)
 8001d9c:	f7fe fe68 	bl	8000a70 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 8001da0:	4851      	ldr	r0, [pc, #324]	@ (8001ee8 <main+0x330>)
 8001da2:	f7fe fdc3 	bl	800092c <Kalman_Init>

	kf_rev.A_data[0] = 1;
 8001da6:	4b50      	ldr	r3, [pc, #320]	@ (8001ee8 <main+0x330>)
 8001da8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001dac:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 8001dae:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee8 <main+0x330>)
 8001db0:	4a4e      	ldr	r2, [pc, #312]	@ (8001eec <main+0x334>)
 8001db2:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 8001db4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ee8 <main+0x330>)
 8001db6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef0 <main+0x338>)
 8001db8:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 8001dba:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee8 <main+0x330>)
 8001dbc:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef4 <main+0x33c>)
 8001dbe:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 8001dc0:	4b49      	ldr	r3, [pc, #292]	@ (8001ee8 <main+0x330>)
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <main+0x330>)
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef8 <main+0x340>)
 8001dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 8001dd2:	4b45      	ldr	r3, [pc, #276]	@ (8001ee8 <main+0x330>)
 8001dd4:	4a49      	ldr	r2, [pc, #292]	@ (8001efc <main+0x344>)
 8001dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 8001dda:	4b43      	ldr	r3, [pc, #268]	@ (8001ee8 <main+0x330>)
 8001ddc:	4a48      	ldr	r2, [pc, #288]	@ (8001f00 <main+0x348>)
 8001dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 8001de2:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <main+0x330>)
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 8001dec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <main+0x330>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 8001df6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee8 <main+0x330>)
 8001df8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001dfc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 8001e00:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <main+0x330>)
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 8001e0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ee8 <main+0x330>)
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 8001e14:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <main+0x330>)
 8001e16:	4a3b      	ldr	r2, [pc, #236]	@ (8001f04 <main+0x34c>)
 8001e18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8001e1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <main+0x330>)
 8001e1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f08 <main+0x350>)
 8001e20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 8001e24:	4b30      	ldr	r3, [pc, #192]	@ (8001ee8 <main+0x330>)
 8001e26:	4a39      	ldr	r2, [pc, #228]	@ (8001f0c <main+0x354>)
 8001e28:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee8 <main+0x330>)
 8001e2e:	4a38      	ldr	r2, [pc, #224]	@ (8001f10 <main+0x358>)
 8001e30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8001e34:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <main+0x330>)
 8001e36:	4a37      	ldr	r2, [pc, #220]	@ (8001f14 <main+0x35c>)
 8001e38:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <main+0x330>)
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8001e46:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <main+0x330>)
 8001e48:	4a33      	ldr	r2, [pc, #204]	@ (8001f18 <main+0x360>)
 8001e4a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8001e4e:	2300      	movs	r3, #0
 8001e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e52:	e077      	b.n	8001f44 <main+0x38c>
	    for (int j = 0; j < 4; j++) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e58:	e06e      	b.n	8001f38 <main+0x380>
	        if (i == j) {
 8001e5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d15c      	bne.n	8001f1c <main+0x364>
	            kf_rev.H_data[i * 4 + j] = 1.0f;
 8001e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e64:	009a      	lsls	r2, r3, #2
 8001e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <main+0x330>)
 8001e6c:	333c      	adds	r3, #60	@ 0x3c
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e05b      	b.n	8001f32 <main+0x37a>
 8001e7a:	bf00      	nop
 8001e7c:	2000188c 	.word	0x2000188c
 8001e80:	200016f4 	.word	0x200016f4
 8001e84:	20001628 	.word	0x20001628
 8001e88:	2000036c 	.word	0x2000036c
 8001e8c:	2000155c 	.word	0x2000155c
 8001e90:	200003a0 	.word	0x200003a0
 8001e94:	20000290 	.word	0x20000290
 8001e98:	20001490 	.word	0x20001490
 8001e9c:	20000564 	.word	0x20000564
 8001ea0:	20001958 	.word	0x20001958
 8001ea4:	200017c0 	.word	0x200017c0
 8001ea8:	20000a3c 	.word	0x20000a3c
 8001eac:	20000c64 	.word	0x20000c64
 8001eb0:	3a5c11e4 	.word	0x3a5c11e4
 8001eb4:	b4e160df 	.word	0xb4e160df
 8001eb8:	3757157b 	.word	0x3757157b
 8001ebc:	3f2dd97f 	.word	0x3f2dd97f
 8001ec0:	ba5c11e4 	.word	0xba5c11e4
 8001ec4:	3cd20afa 	.word	0x3cd20afa
 8001ec8:	bd2c27a6 	.word	0xbd2c27a6
 8001ecc:	37b03ea2 	.word	0x37b03ea2
 8001ed0:	bdc3e426 	.word	0xbdc3e426
 8001ed4:	36866b47 	.word	0x36866b47
 8001ed8:	3c034092 	.word	0x3c034092
 8001edc:	3e90b0f2 	.word	0x3e90b0f2
 8001ee0:	3c23d70a 	.word	0x3c23d70a
 8001ee4:	3f666666 	.word	0x3f666666
 8001ee8:	20000f88 	.word	0x20000f88
 8001eec:	3a830bb9 	.word	0x3a830bb9
 8001ef0:	b6327146 	.word	0xb6327146
 8001ef4:	33ae1e34 	.word	0x33ae1e34
 8001ef8:	3f7fe5c9 	.word	0x3f7fe5c9
 8001efc:	bbae429e 	.word	0xbbae429e
 8001f00:	392a143b 	.word	0x392a143b
 8001f04:	c02fbe77 	.word	0xc02fbe77
 8001f08:	3bef4e01 	.word	0x3bef4e01
 8001f0c:	3e0aa64c 	.word	0x3e0aa64c
 8001f10:	34012bd0 	.word	0x34012bd0
 8001f14:	397c4992 	.word	0x397c4992
 8001f18:	3fd7ae14 	.word	0x3fd7ae14
	        } else {
	            kf_rev.H_data[i * 4 + j] = 0.0f;
 8001f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f1e:	009a      	lsls	r2, r3, #2
 8001f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f22:	4413      	add	r3, r2
 8001f24:	4ac0      	ldr	r2, [pc, #768]	@ (8002228 <main+0x670>)
 8001f26:	333c      	adds	r3, #60	@ 0x3c
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < 4; j++) {
 8001f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f34:	3301      	adds	r3, #1
 8001f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	dd8d      	ble.n	8001e5a <main+0x2a2>
	for (int i = 0; i < 2; i++) {
 8001f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f40:	3301      	adds	r3, #1
 8001f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	dd84      	ble.n	8001e54 <main+0x29c>
	        }
	    }
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8001f4a:	4bb7      	ldr	r3, [pc, #732]	@ (8002228 <main+0x670>)
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8001f54:	4bb4      	ldr	r3, [pc, #720]	@ (8002228 <main+0x670>)
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8001f5e:	4bb2      	ldr	r3, [pc, #712]	@ (8002228 <main+0x670>)
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8001f68:	4baf      	ldr	r3, [pc, #700]	@ (8002228 <main+0x670>)
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8001f72:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 800222c <main+0x674>
 8001f76:	48ac      	ldr	r0, [pc, #688]	@ (8002228 <main+0x670>)
 8001f78:	f7fe fdaa 	bl	8000ad0 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8001f7c:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8002230 <main+0x678>
 8001f80:	48a9      	ldr	r0, [pc, #676]	@ (8002228 <main+0x670>)
 8001f82:	f7fe fd75 	bl	8000a70 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01, 1.77e-01, 3.8719, 0.0016);
 8001f86:	4cab      	ldr	r4, [pc, #684]	@ (8002234 <main+0x67c>)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 80021c0 <main+0x608>
 8001f8e:	ed9f 5b8e 	vldr	d5, [pc, #568]	@ 80021c8 <main+0x610>
 8001f92:	ed9f 4b8f 	vldr	d4, [pc, #572]	@ 80021d0 <main+0x618>
 8001f96:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 80021d0 <main+0x618>
 8001f9a:	ed9f 2b8f 	vldr	d2, [pc, #572]	@ 80021d8 <main+0x620>
 8001f9e:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 80021e0 <main+0x628>
 8001fa2:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 80021e8 <main+0x630>
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fa74 	bl	8001494 <create_prismatic_motor>
 8001fac:	4625      	mov	r5, r4
 8001fae:	463c      	mov	r4, r7
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc0:	e885 0003 	stmia.w	r5, {r0, r1}
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00, 1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);
 8001fc4:	4c9c      	ldr	r4, [pc, #624]	@ (8002238 <main+0x680>)
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 80021f0 <main+0x638>
 8001fcc:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 80021f8 <main+0x640>
 8001fd0:	ed9f 4b8b 	vldr	d4, [pc, #556]	@ 8002200 <main+0x648>
 8001fd4:	ed9f 3b8c 	vldr	d3, [pc, #560]	@ 8002208 <main+0x650>
 8001fd8:	ed9f 2b8d 	vldr	d2, [pc, #564]	@ 8002210 <main+0x658>
 8001fdc:	ed9f 1b8e 	vldr	d1, [pc, #568]	@ 8002218 <main+0x660>
 8001fe0:	ed9f 0b8f 	vldr	d0, [pc, #572]	@ 8002220 <main+0x668>
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fa96 	bl	8001516 <create_motor>
 8001fea:	4625      	mov	r5, r4
 8001fec:	463c      	mov	r4, r7
 8001fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ffe:	e885 0003 	stmia.w	r5, {r0, r1}

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8002002:	4b8e      	ldr	r3, [pc, #568]	@ (800223c <main+0x684>)
 8002004:	4a8e      	ldr	r2, [pc, #568]	@ (8002240 <main+0x688>)
 8002006:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8002008:	4b8c      	ldr	r3, [pc, #560]	@ (800223c <main+0x684>)
 800200a:	4a8e      	ldr	r2, [pc, #568]	@ (8002244 <main+0x68c>)
 800200c:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 800200e:	4b8b      	ldr	r3, [pc, #556]	@ (800223c <main+0x684>)
 8002010:	4a8b      	ldr	r2, [pc, #556]	@ (8002240 <main+0x688>)
 8002012:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8002014:	2100      	movs	r1, #0
 8002016:	4889      	ldr	r0, [pc, #548]	@ (800223c <main+0x684>)
 8002018:	f009 fdb6 	bl	800bb88 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 800201c:	4b8a      	ldr	r3, [pc, #552]	@ (8002248 <main+0x690>)
 800201e:	4a8b      	ldr	r2, [pc, #556]	@ (800224c <main+0x694>)
 8002020:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8002022:	4b89      	ldr	r3, [pc, #548]	@ (8002248 <main+0x690>)
 8002024:	4a87      	ldr	r2, [pc, #540]	@ (8002244 <main+0x68c>)
 8002026:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8002028:	4b87      	ldr	r3, [pc, #540]	@ (8002248 <main+0x690>)
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8002030:	2100      	movs	r1, #0
 8002032:	4885      	ldr	r0, [pc, #532]	@ (8002248 <main+0x690>)
 8002034:	f009 fda8 	bl	800bb88 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 100.0;
 8002038:	4b85      	ldr	r3, [pc, #532]	@ (8002250 <main+0x698>)
 800203a:	4a86      	ldr	r2, [pc, #536]	@ (8002254 <main+0x69c>)
 800203c:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 40.0;
 800203e:	4b84      	ldr	r3, [pc, #528]	@ (8002250 <main+0x698>)
 8002040:	4a85      	ldr	r2, [pc, #532]	@ (8002258 <main+0x6a0>)
 8002042:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 4.0;
 8002044:	4b82      	ldr	r3, [pc, #520]	@ (8002250 <main+0x698>)
 8002046:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800204a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 800204c:	2100      	movs	r1, #0
 800204e:	4880      	ldr	r0, [pc, #512]	@ (8002250 <main+0x698>)
 8002050:	f009 fd9a 	bl	800bb88 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8002054:	4b81      	ldr	r3, [pc, #516]	@ (800225c <main+0x6a4>)
 8002056:	4a82      	ldr	r2, [pc, #520]	@ (8002260 <main+0x6a8>)
 8002058:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 800205a:	4b80      	ldr	r3, [pc, #512]	@ (800225c <main+0x6a4>)
 800205c:	4a81      	ldr	r2, [pc, #516]	@ (8002264 <main+0x6ac>)
 800205e:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8002060:	4b7e      	ldr	r3, [pc, #504]	@ (800225c <main+0x6a4>)
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8002068:	2100      	movs	r1, #0
 800206a:	487c      	ldr	r0, [pc, #496]	@ (800225c <main+0x6a4>)
 800206c:	f009 fd8c 	bl	800bb88 <arm_pid_init_f32>

//	InitTrajectorySegment(&segments[0], 0.0f, 200.0f, 500.0f, 250.0f, 0.0f);
	InitTrajectorySegment(&segments[0], 0.0f,  0.785f, 1.0f, 0.4f, 0.0f);
 8002070:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 8002268 <main+0x6b0>
 8002074:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 800226c <main+0x6b4>
 8002078:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800207c:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 8002270 <main+0x6b8>
 8002080:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8002268 <main+0x6b0>
 8002084:	487b      	ldr	r0, [pc, #492]	@ (8002274 <main+0x6bc>)
 8002086:	f7ff fa87 	bl	8001598 <InitTrajectorySegment>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
		HAL_ADC_Start(&hadc1);
 800208a:	487b      	ldr	r0, [pc, #492]	@ (8002278 <main+0x6c0>)
 800208c:	f001 fdf8 	bl	8003c80 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8002090:	487a      	ldr	r0, [pc, #488]	@ (800227c <main+0x6c4>)
 8002092:	f001 fdf5 	bl	8003c80 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 8002096:	4878      	ldr	r0, [pc, #480]	@ (8002278 <main+0x6c0>)
 8002098:	f001 fed6 	bl	8003e48 <HAL_ADC_GetValue>
 800209c:	4603      	mov	r3, r0
 800209e:	b29a      	uxth	r2, r3
 80020a0:	4b77      	ldr	r3, [pc, #476]	@ (8002280 <main+0x6c8>)
 80020a2:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 80020a4:	4875      	ldr	r0, [pc, #468]	@ (800227c <main+0x6c4>)
 80020a6:	f001 fecf 	bl	8003e48 <HAL_ADC_GetValue>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b75      	ldr	r3, [pc, #468]	@ (8002284 <main+0x6cc>)
 80020b0:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 80020b2:	4b75      	ldr	r3, [pc, #468]	@ (8002288 <main+0x6d0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	4a74      	ldr	r2, [pc, #464]	@ (800228c <main+0x6d4>)
 80020ba:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 80020bc:	4b74      	ldr	r3, [pc, #464]	@ (8002290 <main+0x6d8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	4a74      	ldr	r2, [pc, #464]	@ (8002294 <main+0x6dc>)
 80020c4:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 80020c6:	f7fe ff71 	bl	8000fac <Modbus_Protocal_Worker>
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 80020ca:	f001 f9e3 	bl	8003494 <HAL_GetTick>
 80020ce:	6438      	str	r0, [r7, #64]	@ 0x40
		float dt = (currentTick - lastTick) / 1000.0f;
 80020d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020de:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002298 <main+0x6e0>
 80020e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.001f) {
 80020ea:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80020ee:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800229c <main+0x6e4>
 80020f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	f2c0 811a 	blt.w	8002332 <main+0x77a>
			Encoder_Update(&encoder1, dt);
 80020fe:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002102:	4867      	ldr	r0, [pc, #412]	@ (80022a0 <main+0x6e8>)
 8002104:	f7fe fa48 	bl	8000598 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8002108:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800210c:	4865      	ldr	r0, [pc, #404]	@ (80022a4 <main+0x6ec>)
 800210e:	f7fe fa43 	bl	8000598 <Encoder_Update>
			lastTick = currentTick;
 8002112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002114:	657b      	str	r3, [r7, #84]	@ 0x54

			p1 = Encoder_GetPosition(&encoder1);
 8002116:	4862      	ldr	r0, [pc, #392]	@ (80022a0 <main+0x6e8>)
 8002118:	f7fe faf4 	bl	8000704 <Encoder_GetPosition>
 800211c:	eef0 7a40 	vmov.f32	s15, s0
 8002120:	4b61      	ldr	r3, [pc, #388]	@ (80022a8 <main+0x6f0>)
 8002122:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8002126:	485e      	ldr	r0, [pc, #376]	@ (80022a0 <main+0x6e8>)
 8002128:	f7fe fafb 	bl	8000722 <Encoder_GetVelocity>
 800212c:	eef0 7a40 	vmov.f32	s15, s0
 8002130:	4b5e      	ldr	r3, [pc, #376]	@ (80022ac <main+0x6f4>)
 8002132:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8002136:	485a      	ldr	r0, [pc, #360]	@ (80022a0 <main+0x6e8>)
 8002138:	f7fe fb02 	bl	8000740 <Encoder_GetAcceleration>
 800213c:	eef0 7a40 	vmov.f32	s15, s0
 8002140:	4b5b      	ldr	r3, [pc, #364]	@ (80022b0 <main+0x6f8>)
 8002142:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8002146:	4857      	ldr	r0, [pc, #348]	@ (80022a4 <main+0x6ec>)
 8002148:	f7fe fadc 	bl	8000704 <Encoder_GetPosition>
 800214c:	eef0 7a40 	vmov.f32	s15, s0
 8002150:	4b58      	ldr	r3, [pc, #352]	@ (80022b4 <main+0x6fc>)
 8002152:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8002156:	4853      	ldr	r0, [pc, #332]	@ (80022a4 <main+0x6ec>)
 8002158:	f7fe fae3 	bl	8000722 <Encoder_GetVelocity>
 800215c:	eef0 7a40 	vmov.f32	s15, s0
 8002160:	4b55      	ldr	r3, [pc, #340]	@ (80022b8 <main+0x700>)
 8002162:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8002166:	484f      	ldr	r0, [pc, #316]	@ (80022a4 <main+0x6ec>)
 8002168:	f7fe faea 	bl	8000740 <Encoder_GetAcceleration>
 800216c:	eef0 7a40 	vmov.f32	s15, s0
 8002170:	4b52      	ldr	r3, [pc, #328]	@ (80022bc <main+0x704>)
 8002172:	edc3 7a00 	vstr	s15, [r3]

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8002176:	484a      	ldr	r0, [pc, #296]	@ (80022a0 <main+0x6e8>)
 8002178:	f7fe faf1 	bl	800075e <Encoder_GetPosition_mm>
 800217c:	eef0 7a40 	vmov.f32	s15, s0
 8002180:	4b4f      	ldr	r3, [pc, #316]	@ (80022c0 <main+0x708>)
 8002182:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8002186:	4846      	ldr	r0, [pc, #280]	@ (80022a0 <main+0x6e8>)
 8002188:	f7fe faf8 	bl	800077c <Encoder_GetVelocity_mm>
 800218c:	eef0 7a40 	vmov.f32	s15, s0
 8002190:	4b4b      	ldr	r3, [pc, #300]	@ (80022c0 <main+0x708>)
 8002192:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 8002196:	4b4a      	ldr	r3, [pc, #296]	@ (80022c0 <main+0x708>)
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 800219e:	4b48      	ldr	r3, [pc, #288]	@ (80022c0 <main+0x708>)
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 80021a6:	4b47      	ldr	r3, [pc, #284]	@ (80022c4 <main+0x70c>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	4845      	ldr	r0, [pc, #276]	@ (80022c8 <main+0x710>)
 80021b2:	f7fe fcbd 	bl	8000b30 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 80021b6:	4844      	ldr	r0, [pc, #272]	@ (80022c8 <main+0x710>)
 80021b8:	f7fe fcca 	bl	8000b50 <Kalman_Predict>
 80021bc:	e086      	b.n	80022cc <main+0x714>
 80021be:	bf00      	nop
 80021c0:	eb1c432d 	.word	0xeb1c432d
 80021c4:	3f5a36e2 	.word	0x3f5a36e2
 80021c8:	b50b0f28 	.word	0xb50b0f28
 80021cc:	400ef9a6 	.word	0x400ef9a6
 80021d0:	9db22d0e 	.word	0x9db22d0e
 80021d4:	3fc6a7ef 	.word	0x3fc6a7ef
 80021d8:	00000000 	.word	0x00000000
 80021dc:	3fec0000 	.word	0x3fec0000
 80021e0:	3c968944 	.word	0x3c968944
 80021e4:	3f3f969e 	.word	0x3f3f969e
 80021e8:	05857aff 	.word	0x05857aff
 80021ec:	3f2e03f7 	.word	0x3f2e03f7
 80021f0:	fa8f7db7 	.word	0xfa8f7db7
 80021f4:	3f3615eb 	.word	0x3f3615eb
 80021f8:	f9db22d1 	.word	0xf9db22d1
 80021fc:	3fe06a7e 	.word	0x3fe06a7e
 8002200:	a7daa4fc 	.word	0xa7daa4fc
 8002204:	3ff331e3 	.word	0x3ff331e3
 8002208:	e147ae14 	.word	0xe147ae14
 800220c:	3ffa147a 	.word	0x3ffa147a
 8002210:	df3b645a 	.word	0xdf3b645a
 8002214:	3fe78d4f 	.word	0x3fe78d4f
 8002218:	003eea21 	.word	0x003eea21
 800221c:	3f7c4da9 	.word	0x3f7c4da9
 8002220:	4dd2f1aa 	.word	0x4dd2f1aa
 8002224:	3fc81062 	.word	0x3fc81062
 8002228:	20000f88 	.word	0x20000f88
 800222c:	3da3d70a 	.word	0x3da3d70a
 8002230:	3df5c28f 	.word	0x3df5c28f
 8002234:	200012b0 	.word	0x200012b0
 8002238:	200012e8 	.word	0x200012e8
 800223c:	20000bcc 	.word	0x20000bcc
 8002240:	3e99999a 	.word	0x3e99999a
 8002244:	3c23d70a 	.word	0x3c23d70a
 8002248:	20000bf0 	.word	0x20000bf0
 800224c:	3da3d70a 	.word	0x3da3d70a
 8002250:	20000c18 	.word	0x20000c18
 8002254:	42c80000 	.word	0x42c80000
 8002258:	42200000 	.word	0x42200000
 800225c:	20000c3c 	.word	0x20000c3c
 8002260:	40400000 	.word	0x40400000
 8002264:	3dcccccd 	.word	0x3dcccccd
 8002268:	00000000 	.word	0x00000000
 800226c:	3ecccccd 	.word	0x3ecccccd
 8002270:	3f48f5c3 	.word	0x3f48f5c3
 8002274:	200003dc 	.word	0x200003dc
 8002278:	20000290 	.word	0x20000290
 800227c:	200002fc 	.word	0x200002fc
 8002280:	20000560 	.word	0x20000560
 8002284:	20000562 	.word	0x20000562
 8002288:	2000155c 	.word	0x2000155c
 800228c:	200003d4 	.word	0x200003d4
 8002290:	20001628 	.word	0x20001628
 8002294:	200003d8 	.word	0x200003d8
 8002298:	447a0000 	.word	0x447a0000
 800229c:	3a83126f 	.word	0x3a83126f
 80022a0:	2000036c 	.word	0x2000036c
 80022a4:	200003a0 	.word	0x200003a0
 80022a8:	20000544 	.word	0x20000544
 80022ac:	20000548 	.word	0x20000548
 80022b0:	2000054c 	.word	0x2000054c
 80022b4:	20000550 	.word	0x20000550
 80022b8:	20000554 	.word	0x20000554
 80022bc:	20000558 	.word	0x20000558
 80022c0:	20001320 	.word	0x20001320
 80022c4:	20000c14 	.word	0x20000c14
 80022c8:	20000c64 	.word	0x20000c64
			Kalman_Update(&kf_pris,Measurement_Pris);
 80022cc:	4954      	ldr	r1, [pc, #336]	@ (8002420 <main+0x868>)
 80022ce:	4855      	ldr	r0, [pc, #340]	@ (8002424 <main+0x86c>)
 80022d0:	f7fe fc8b 	bl	8000bea <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100/30);
 80022d4:	4854      	ldr	r0, [pc, #336]	@ (8002428 <main+0x870>)
 80022d6:	f7fe fa15 	bl	8000704 <Encoder_GetPosition>
 80022da:	eeb0 7a40 	vmov.f32	s14, s0
 80022de:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80022e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022e6:	4b51      	ldr	r3, [pc, #324]	@ (800242c <main+0x874>)
 80022e8:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100/30);
 80022ec:	484e      	ldr	r0, [pc, #312]	@ (8002428 <main+0x870>)
 80022ee:	f7fe fa18 	bl	8000722 <Encoder_GetVelocity>
 80022f2:	eeb0 7a40 	vmov.f32	s14, s0
 80022f6:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80022fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022fe:	4b4b      	ldr	r3, [pc, #300]	@ (800242c <main+0x874>)
 8002300:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Rev[2] = 0;
 8002304:	4b49      	ldr	r3, [pc, #292]	@ (800242c <main+0x874>)
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 800230c:	4b47      	ldr	r3, [pc, #284]	@ (800242c <main+0x874>)
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8002314:	4b46      	ldr	r3, [pc, #280]	@ (8002430 <main+0x878>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	eeb0 0a67 	vmov.f32	s0, s15
 800231e:	4845      	ldr	r0, [pc, #276]	@ (8002434 <main+0x87c>)
 8002320:	f7fe fc06 	bl	8000b30 <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8002324:	4843      	ldr	r0, [pc, #268]	@ (8002434 <main+0x87c>)
 8002326:	f7fe fc13 	bl	8000b50 <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 800232a:	4940      	ldr	r1, [pc, #256]	@ (800242c <main+0x874>)
 800232c:	4841      	ldr	r0, [pc, #260]	@ (8002434 <main+0x87c>)
 800232e:	f7fe fc5c 	bl	8000bea <Kalman_Update>
//		}
//		pwm_rev_velo = (V_plant / 18) * 65535;
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
//		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,pwm_rev_velo);

		PS2_ReadData();
 8002332:	f7fe fa33 	bl	800079c <PS2_ReadData>
		Circle = PS2_ButtonCircle();
 8002336:	f7fe fa6b 	bl	8000810 <PS2_ButtonCircle>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b3e      	ldr	r3, [pc, #248]	@ (8002438 <main+0x880>)
 8002340:	601a      	str	r2, [r3, #0]
		Square = PS2_ButtonSquare();
 8002342:	f7fe fa77 	bl	8000834 <PS2_ButtonSquare>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	4b3c      	ldr	r3, [pc, #240]	@ (800243c <main+0x884>)
 800234c:	601a      	str	r2, [r3, #0]
		Triangle = PS2_ButtonTriangle();
 800234e:	f7fe fa81 	bl	8000854 <PS2_ButtonTriangle>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	4b3a      	ldr	r3, [pc, #232]	@ (8002440 <main+0x888>)
 8002358:	601a      	str	r2, [r3, #0]
		Cross = PS2_ButtonCross();
 800235a:	f7fe fa8d 	bl	8000878 <PS2_ButtonCross>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	4b38      	ldr	r3, [pc, #224]	@ (8002444 <main+0x88c>)
 8002364:	601a      	str	r2, [r3, #0]
		R1 = PS2_ButtonR1();
 8002366:	f7fe fa99 	bl	800089c <PS2_ButtonR1>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4b36      	ldr	r3, [pc, #216]	@ (8002448 <main+0x890>)
 8002370:	601a      	str	r2, [r3, #0]
		R2 = PS2_ButtonR2();
 8002372:	f7fe faa5 	bl	80008c0 <PS2_ButtonR2>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	4b34      	ldr	r3, [pc, #208]	@ (800244c <main+0x894>)
 800237c:	601a      	str	r2, [r3, #0]
		Select = PS2_ButtonSelect();
 800237e:	f7fe fab1 	bl	80008e4 <PS2_ButtonSelect>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <main+0x898>)
 8002388:	601a      	str	r2, [r3, #0]
		Start = PS2_ButtonStart();
 800238a:	f7fe fabd 	bl	8000908 <PS2_ButtonStart>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <main+0x89c>)
 8002394:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 8002396:	2064      	movs	r0, #100	@ 0x64
 8002398:	f001 f888 	bl	80034ac <HAL_Delay>

		if (PS2_ButtonCircle()) {
 800239c:	f7fe fa38 	bl	8000810 <PS2_ButtonCircle>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <main+0x804>
			// Move Right (Revolute)
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1); // 0 or 1
 80023a6:	2201      	movs	r2, #1
 80023a8:	2140      	movs	r1, #64	@ 0x40
 80023aa:	482b      	ldr	r0, [pc, #172]	@ (8002458 <main+0x8a0>)
 80023ac:	f003 f92e 	bl	800560c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 10000);
 80023b0:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <main+0x8a4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80023b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023ba:	e666      	b.n	800208a <main+0x4d2>
		} else if (PS2_ButtonSquare()) {
 80023bc:	f7fe fa3a 	bl	8000834 <PS2_ButtonSquare>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <main+0x824>
			// Move Left (Revolute)
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
 80023c6:	2200      	movs	r2, #0
 80023c8:	2140      	movs	r1, #64	@ 0x40
 80023ca:	4823      	ldr	r0, [pc, #140]	@ (8002458 <main+0x8a0>)
 80023cc:	f003 f91e 	bl	800560c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 10000);
 80023d0:	4b22      	ldr	r3, [pc, #136]	@ (800245c <main+0x8a4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80023d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023da:	e656      	b.n	800208a <main+0x4d2>
		} else if (PS2_ButtonTriangle()) {
 80023dc:	f7fe fa3a 	bl	8000854 <PS2_ButtonTriangle>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <main+0x844>
			// Move Up (Prismatic)
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); // 0 or 1
 80023e6:	2201      	movs	r2, #1
 80023e8:	2102      	movs	r1, #2
 80023ea:	481d      	ldr	r0, [pc, #116]	@ (8002460 <main+0x8a8>)
 80023ec:	f003 f90e 	bl	800560c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 10000);
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <main+0x8a4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80023f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80023fa:	e646      	b.n	800208a <main+0x4d2>
		} else if (PS2_ButtonCross()) {
 80023fc:	f7fe fa3c 	bl	8000878 <PS2_ButtonCross>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	f43f ae41 	beq.w	800208a <main+0x4d2>
			// Move Down (Prismatic)
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
 8002408:	2200      	movs	r2, #0
 800240a:	2102      	movs	r1, #2
 800240c:	4814      	ldr	r0, [pc, #80]	@ (8002460 <main+0x8a8>)
 800240e:	f003 f8fd 	bl	800560c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 10000);
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <main+0x8a4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f242 7210 	movw	r2, #10000	@ 0x2710
 800241a:	635a      	str	r2, [r3, #52]	@ 0x34
	while (1) {
 800241c:	e635      	b.n	800208a <main+0x4d2>
 800241e:	bf00      	nop
 8002420:	20001320 	.word	0x20001320
 8002424:	20000c64 	.word	0x20000c64
 8002428:	200003a0 	.word	0x200003a0
 800242c:	20001330 	.word	0x20001330
 8002430:	20000c60 	.word	0x20000c60
 8002434:	20000f88 	.word	0x20000f88
 8002438:	20001340 	.word	0x20001340
 800243c:	20001344 	.word	0x20001344
 8002440:	20001348 	.word	0x20001348
 8002444:	2000134c 	.word	0x2000134c
 8002448:	20001350 	.word	0x20001350
 800244c:	20001354 	.word	0x20001354
 8002450:	20001358 	.word	0x20001358
 8002454:	2000135c 	.word	0x2000135c
 8002458:	48000800 	.word	0x48000800
 800245c:	2000188c 	.word	0x2000188c
 8002460:	48000400 	.word	0x48000400

08002464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b094      	sub	sp, #80	@ 0x50
 8002468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246a:	f107 0318 	add.w	r3, r7, #24
 800246e:	2238      	movs	r2, #56	@ 0x38
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f00a f87e 	bl	800c574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002486:	2000      	movs	r0, #0
 8002488:	f003 f8f0 	bl	800566c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800248c:	2302      	movs	r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002496:	2340      	movs	r3, #64	@ 0x40
 8002498:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800249a:	2302      	movs	r3, #2
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800249e:	2302      	movs	r3, #2
 80024a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80024a2:	2304      	movs	r3, #4
 80024a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80024a6:	2355      	movs	r3, #85	@ 0x55
 80024a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024aa:	2302      	movs	r3, #2
 80024ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024ae:	2302      	movs	r3, #2
 80024b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024b2:	2302      	movs	r3, #2
 80024b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b6:	f107 0318 	add.w	r3, r7, #24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 f98a 	bl	80057d4 <HAL_RCC_OscConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80024c6:	f000 f867 	bl	8002598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ca:	230f      	movs	r3, #15
 80024cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ce:	2303      	movs	r3, #3
 80024d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2104      	movs	r1, #4
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fc88 	bl	8005df8 <HAL_RCC_ClockConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80024ee:	f000 f853 	bl	8002598 <Error_Handler>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3750      	adds	r7, #80	@ 0x50
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800250c:	d103      	bne.n	8002516 <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 800250e:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x84>)
 8002510:	2209      	movs	r2, #9
 8002512:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 8002514:	e02e      	b.n	8002574 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251c:	d103      	bne.n	8002526 <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 800251e:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x84>)
 8002520:	220a      	movs	r2, #10
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	e026      	b.n	8002574 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800252c:	d103      	bne.n	8002536 <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 800252e:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x84>)
 8002530:	220b      	movs	r2, #11
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	e01e      	b.n	8002574 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800253c:	d103      	bne.n	8002546 <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 800253e:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x84>)
 8002540:	220c      	movs	r2, #12
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	e016      	b.n	8002574 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800254c:	d103      	bne.n	8002556 <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 800254e:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x84>)
 8002550:	220d      	movs	r2, #13
 8002552:	601a      	str	r2, [r3, #0]
}
 8002554:	e00e      	b.n	8002574 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800255c:	d103      	bne.n	8002566 <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x84>)
 8002560:	220e      	movs	r2, #14
 8002562:	601a      	str	r2, [r3, #0]
}
 8002564:	e006      	b.n	8002574 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800256c:	d102      	bne.n	8002574 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 800256e:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x84>)
 8002570:	220f      	movs	r2, #15
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	2000055c 	.word	0x2000055c

08002584 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
//			}
////			V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
//			count_Tim2 = 0;
//		}
//	}
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <Error_Handler+0x8>

080025a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <MX_SPI1_Init+0x78>)
 80025ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80025c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025c4:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025c6:	2202      	movs	r2, #2
 80025c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025ca:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025d0:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025da:	2238      	movs	r2, #56	@ 0x38
 80025dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025e0:	2280      	movs	r2, #128	@ 0x80
 80025e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025f2:	2207      	movs	r2, #7
 80025f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025f6:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <MX_SPI1_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	@ (8002618 <MX_SPI1_Init+0x74>)
 8002604:	f004 f862 	bl	80066cc <HAL_SPI_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800260e:	f7ff ffc3 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20001360 	.word	0x20001360
 800261c:	40013000 	.word	0x40013000

08002620 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a25      	ldr	r2, [pc, #148]	@ (80026d4 <HAL_SPI_MspInit+0xb4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d144      	bne.n	80026cc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002642:	4b25      	ldr	r3, [pc, #148]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 8002644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002646:	4a24      	ldr	r2, [pc, #144]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 8002648:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800264c:	6613      	str	r3, [r2, #96]	@ 0x60
 800264e:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002652:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	4b1f      	ldr	r3, [pc, #124]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	4a1e      	ldr	r2, [pc, #120]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002666:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	4a18      	ldr	r2, [pc, #96]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267e:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <HAL_SPI_MspInit+0xb8>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800268a:	2320      	movs	r3, #32
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800269a:	2305      	movs	r3, #5
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026a8:	f002 fe2e 	bl	8005308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026ac:	2330      	movs	r3, #48	@ 0x30
 80026ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026bc:	2305      	movs	r3, #5
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	4805      	ldr	r0, [pc, #20]	@ (80026dc <HAL_SPI_MspInit+0xbc>)
 80026c8:	f002 fe1e 	bl	8005308 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026cc:	bf00      	nop
 80026ce:	3728      	adds	r7, #40	@ 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40013000 	.word	0x40013000
 80026d8:	40021000 	.word	0x40021000
 80026dc:	48000400 	.word	0x48000400

080026e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <HAL_MspInit+0x44>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002724 <HAL_MspInit+0x44>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80026f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <HAL_MspInit+0x44>)
 80026f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_MspInit+0x44>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	4a08      	ldr	r2, [pc, #32]	@ (8002724 <HAL_MspInit+0x44>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002708:	6593      	str	r3, [r2, #88]	@ 0x58
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_MspInit+0x44>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002716:	f003 f84d 	bl	80057b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000

08002728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <NMI_Handler+0x4>

08002730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <HardFault_Handler+0x4>

08002738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <MemManage_Handler+0x4>

08002740 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <BusFault_Handler+0x4>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <UsageFault_Handler+0x4>

08002750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277e:	f000 fe77 	bl	8003470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <DMA1_Channel1_IRQHandler+0x10>)
 800278e:	f002 fc60 	bl	8005052 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20001a24 	.word	0x20001a24

0800279c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 80027a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027a4:	f002 ff4a 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027b0:	4802      	ldr	r0, [pc, #8]	@ (80027bc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80027b2:	f005 f92b 	bl	8007a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200013c4 	.word	0x200013c4

080027c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027c4:	4803      	ldr	r0, [pc, #12]	@ (80027d4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80027c6:	f005 f921 	bl	8007a0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80027ca:	4803      	ldr	r0, [pc, #12]	@ (80027d8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80027cc:	f005 f91e 	bl	8007a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200013c4 	.word	0x200013c4
 80027d8:	200017c0 	.word	0x200017c0

080027dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <TIM2_IRQHandler+0x10>)
 80027e2:	f005 f913 	bl	8007a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20001490 	.word	0x20001490

080027f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <USART2_IRQHandler+0x10>)
 80027f6:	f007 f80d 	bl	8009814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20001958 	.word	0x20001958

08002804 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8002808:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800280c:	f002 ff16 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8002810:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002814:	f002 ff12 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8002818:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800281c:	f002 ff0e 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8002820:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002824:	f002 ff0a 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8002828:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800282c:	f002 ff06 	bl	800563c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <SystemInit+0x20>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	4a05      	ldr	r2, [pc, #20]	@ (8002854 <SystemInit+0x20>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 8002878:	4a20      	ldr	r2, [pc, #128]	@ (80028fc <MX_TIM1_Init+0xa4>)
 800287a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800287c:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002882:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 800288a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800288e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002890:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002896:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 8002898:	2200      	movs	r2, #0
 800289a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028a2:	4815      	ldr	r0, [pc, #84]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 80028a4:	f004 fb40 	bl	8006f28 <HAL_TIM_Base_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80028ae:	f7ff fe73 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4619      	mov	r1, r3
 80028be:	480e      	ldr	r0, [pc, #56]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 80028c0:	f005 fbac 	bl	800801c <HAL_TIM_ConfigClockSource>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80028ca:	f7ff fe65 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4806      	ldr	r0, [pc, #24]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 80028e0:	f006 fb82 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80028ea:	f7ff fe55 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200013c4 	.word	0x200013c4
 80028fc:	40012c00 	.word	0x40012c00

08002900 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800291e:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002920:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002924:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002928:	22a9      	movs	r2, #169	@ 0xa9
 800292a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <MX_TIM2_Init+0x98>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002932:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002934:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002938:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <MX_TIM2_Init+0x98>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002946:	4814      	ldr	r0, [pc, #80]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002948:	f004 faee 	bl	8006f28 <HAL_TIM_Base_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002952:	f7ff fe21 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800295a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	4619      	mov	r1, r3
 8002962:	480d      	ldr	r0, [pc, #52]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002964:	f005 fb5a 	bl	800801c <HAL_TIM_ConfigClockSource>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800296e:	f7ff fe13 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4806      	ldr	r0, [pc, #24]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002980:	f006 fb32 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800298a:	f7ff fe05 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20001490 	.word	0x20001490

0800299c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	@ 0x30
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	2224      	movs	r2, #36	@ 0x24
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f009 fde2 	bl	800c574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	463b      	mov	r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029ba:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029bc:	4a21      	ldr	r2, [pc, #132]	@ (8002a44 <MX_TIM3_Init+0xa8>)
 80029be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029ce:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80029d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029da:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029e0:	2303      	movs	r3, #3
 80029e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029e8:	2301      	movs	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029f8:	2301      	movs	r3, #1
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480d      	ldr	r0, [pc, #52]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 8002a0c:	f004 febc 	bl	8007788 <HAL_TIM_Encoder_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002a16:	f7ff fdbf 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a22:	463b      	mov	r3, r7
 8002a24:	4619      	mov	r1, r3
 8002a26:	4806      	ldr	r0, [pc, #24]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 8002a28:	f006 fade 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002a32:	f7ff fdb1 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a36:	bf00      	nop
 8002a38:	3730      	adds	r7, #48	@ 0x30
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000155c 	.word	0x2000155c
 8002a44:	40000400 	.word	0x40000400

08002a48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	@ 0x30
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	2224      	movs	r2, #36	@ 0x24
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f009 fd8c 	bl	800c574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a66:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <MX_TIM4_Init+0xa4>)
 8002a68:	4a21      	ldr	r2, [pc, #132]	@ (8002af0 <MX_TIM4_Init+0xa8>)
 8002a6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aec <MX_TIM4_Init+0xa4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	@ (8002aec <MX_TIM4_Init+0xa4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8002a78:	4b1c      	ldr	r3, [pc, #112]	@ (8002aec <MX_TIM4_Init+0xa4>)
 8002a7a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002a7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	@ (8002aec <MX_TIM4_Init+0xa4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a86:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <MX_TIM4_Init+0xa4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a94:	2301      	movs	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	480d      	ldr	r0, [pc, #52]	@ (8002aec <MX_TIM4_Init+0xa4>)
 8002ab8:	f004 fe66 	bl	8007788 <HAL_TIM_Encoder_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002ac2:	f7ff fd69 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ace:	463b      	mov	r3, r7
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4806      	ldr	r0, [pc, #24]	@ (8002aec <MX_TIM4_Init+0xa4>)
 8002ad4:	f006 fa88 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002ade:	f7ff fd5b 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	3730      	adds	r7, #48	@ 0x30
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20001628 	.word	0x20001628
 8002af0:	40000800 	.word	0x40000800

08002af4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b09c      	sub	sp, #112	@ 0x70
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
 8002b24:	615a      	str	r2, [r3, #20]
 8002b26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	2234      	movs	r2, #52	@ 0x34
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f009 fd20 	bl	800c574 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b34:	4b45      	ldr	r3, [pc, #276]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b36:	4a46      	ldr	r2, [pc, #280]	@ (8002c50 <MX_TIM8_Init+0x15c>)
 8002b38:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b3a:	4b44      	ldr	r3, [pc, #272]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	4b42      	ldr	r3, [pc, #264]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b4c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b54:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b60:	483a      	ldr	r0, [pc, #232]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b62:	f004 f9e1 	bl	8006f28 <HAL_TIM_Base_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002b6c:	f7ff fd14 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b74:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b76:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4833      	ldr	r0, [pc, #204]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b7e:	f005 fa4d 	bl	800801c <HAL_TIM_ConfigClockSource>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002b88:	f7ff fd06 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b8c:	482f      	ldr	r0, [pc, #188]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002b8e:	f004 fb85 	bl	800729c <HAL_TIM_PWM_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002b98:	f7ff fcfe 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ba8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bac:	4619      	mov	r1, r3
 8002bae:	4827      	ldr	r0, [pc, #156]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002bb0:	f006 fa1a 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002bba:	f7ff fced 	bl	8002598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbe:	2360      	movs	r3, #96	@ 0x60
 8002bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bde:	220c      	movs	r2, #12
 8002be0:	4619      	mov	r1, r3
 8002be2:	481a      	ldr	r0, [pc, #104]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002be4:	f005 f906 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002bee:	f7ff fcd3 	bl	8002598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002c10:	2300      	movs	r3, #0
 8002c12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002c22:	2300      	movs	r3, #0
 8002c24:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4807      	ldr	r0, [pc, #28]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002c30:	f006 fa70 	bl	8009114 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8002c3a:	f7ff fcad 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002c3e:	4803      	ldr	r0, [pc, #12]	@ (8002c4c <MX_TIM8_Init+0x158>)
 8002c40:	f000 fa44 	bl	80030cc <HAL_TIM_MspPostInit>

}
 8002c44:	bf00      	nop
 8002c46:	3770      	adds	r7, #112	@ 0x70
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	200016f4 	.word	0x200016f4
 8002c50:	40013400 	.word	0x40013400

08002c54 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b094      	sub	sp, #80	@ 0x50
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	611a      	str	r2, [r3, #16]
 8002c6a:	615a      	str	r2, [r3, #20]
 8002c6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2234      	movs	r2, #52	@ 0x34
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f009 fc7d 	bl	800c574 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c7a:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002c7c:	4a34      	ldr	r2, [pc, #208]	@ (8002d50 <MX_TIM16_Init+0xfc>)
 8002c7e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002c80:	4b32      	ldr	r3, [pc, #200]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002c82:	22a9      	movs	r2, #169	@ 0xa9
 8002c84:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c86:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002c8e:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8002c92:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c94:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002ca6:	4829      	ldr	r0, [pc, #164]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002ca8:	f004 f93e 	bl	8006f28 <HAL_TIM_Base_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002cb2:	f7ff fc71 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8002cb6:	4825      	ldr	r0, [pc, #148]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002cb8:	f004 fa82 	bl	80071c0 <HAL_TIM_OC_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002cc2:	f7ff fc69 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	4820      	ldr	r0, [pc, #128]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002cca:	f004 fc67 	bl	800759c <HAL_TIM_OnePulse_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002cd4:	f7ff fc60 	bl	8002598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002cd8:	2310      	movs	r3, #16
 8002cda:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8002cdc:	f240 5399 	movw	r3, #1433	@ 0x599
 8002ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cf6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4813      	ldr	r0, [pc, #76]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002d00:	f004 fffe 	bl	8007d00 <HAL_TIM_OC_ConfigChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8002d0a:	f7ff fc45 	bl	8002598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002d30:	463b      	mov	r3, r7
 8002d32:	4619      	mov	r1, r3
 8002d34:	4805      	ldr	r0, [pc, #20]	@ (8002d4c <MX_TIM16_Init+0xf8>)
 8002d36:	f006 f9ed 	bl	8009114 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8002d40:	f7ff fc2a 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002d44:	bf00      	nop
 8002d46:	3750      	adds	r7, #80	@ 0x50
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200017c0 	.word	0x200017c0
 8002d50:	40014400 	.word	0x40014400

08002d54 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b09c      	sub	sp, #112	@ 0x70
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
 8002d84:	615a      	str	r2, [r3, #20]
 8002d86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	2234      	movs	r2, #52	@ 0x34
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f009 fbf0 	bl	800c574 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002d94:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002d96:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec8 <MX_TIM20_Init+0x174>)
 8002d98:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da0:	4b48      	ldr	r3, [pc, #288]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002da6:	4b47      	ldr	r3, [pc, #284]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002da8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dac:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dae:	4b45      	ldr	r3, [pc, #276]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002db4:	4b43      	ldr	r3, [pc, #268]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dba:	4b42      	ldr	r3, [pc, #264]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002dc0:	4840      	ldr	r0, [pc, #256]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002dc2:	f004 f8b1 	bl	8006f28 <HAL_TIM_Base_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8002dcc:	f7ff fbe4 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dd4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002dd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4839      	ldr	r0, [pc, #228]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002dde:	f005 f91d 	bl	800801c <HAL_TIM_ConfigClockSource>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8002de8:	f7ff fbd6 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002dec:	4835      	ldr	r0, [pc, #212]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002dee:	f004 fa55 	bl	800729c <HAL_TIM_PWM_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8002df8:	f7ff fbce 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002e08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	482d      	ldr	r0, [pc, #180]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002e10:	f006 f8ea 	bl	8008fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8002e1a:	f7ff fbbd 	bl	8002598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1e:	2360      	movs	r3, #96	@ 0x60
 8002e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e26:	2300      	movs	r3, #0
 8002e28:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e3e:	2200      	movs	r2, #0
 8002e40:	4619      	mov	r1, r3
 8002e42:	4820      	ldr	r0, [pc, #128]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002e44:	f004 ffd6 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8002e4e:	f7ff fba3 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e56:	2208      	movs	r2, #8
 8002e58:	4619      	mov	r1, r3
 8002e5a:	481a      	ldr	r0, [pc, #104]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002e5c:	f004 ffca 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8002e66:	f7ff fb97 	bl	8002598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4807      	ldr	r0, [pc, #28]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002ea8:	f006 f934 	bl	8009114 <HAL_TIMEx_ConfigBreakDeadTime>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8002eb2:	f7ff fb71 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8002eb6:	4803      	ldr	r0, [pc, #12]	@ (8002ec4 <MX_TIM20_Init+0x170>)
 8002eb8:	f000 f908 	bl	80030cc <HAL_TIM_MspPostInit>

}
 8002ebc:	bf00      	nop
 8002ebe:	3770      	adds	r7, #112	@ 0x70
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	2000188c 	.word	0x2000188c
 8002ec8:	40015000 	.word	0x40015000

08002ecc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd0 <HAL_TIM_Base_MspInit+0x104>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d11c      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ede:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002ee4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ee8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eea:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2018      	movs	r0, #24
 8002efc:	f001 fe91 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002f00:	2018      	movs	r0, #24
 8002f02:	f001 fea8 	bl	8004c56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2019      	movs	r0, #25
 8002f0c:	f001 fe89 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002f10:	2019      	movs	r0, #25
 8002f12:	f001 fea0 	bl	8004c56 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8002f16:	e056      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f20:	d114      	bne.n	8002f4c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f22:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f2e:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	201c      	movs	r0, #28
 8002f40:	f001 fe6f 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f44:	201c      	movs	r0, #28
 8002f46:	f001 fe86 	bl	8004c56 <HAL_NVIC_EnableIRQ>
}
 8002f4a:	e03c      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a21      	ldr	r2, [pc, #132]	@ (8002fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10c      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f56:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f62:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
}
 8002f6e:	e02a      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a19      	ldr	r2, [pc, #100]	@ (8002fdc <HAL_TIM_Base_MspInit+0x110>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d114      	bne.n	8002fa4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002f7a:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7e:	4a15      	ldr	r2, [pc, #84]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f84:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f86:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2019      	movs	r0, #25
 8002f98:	f001 fe43 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002f9c:	2019      	movs	r0, #25
 8002f9e:	f001 fe5a 	bl	8004c56 <HAL_NVIC_EnableIRQ>
}
 8002fa2:	e010      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <HAL_TIM_Base_MspInit+0x114>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10b      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb2:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002fb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x108>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
}
 8002fc6:	bf00      	nop
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40013400 	.word	0x40013400
 8002fdc:	40014400 	.word	0x40014400
 8002fe0:	40015000 	.word	0x40015000

08002fe4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	@ 0x30
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fec:	f107 031c 	add.w	r3, r7, #28
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2f      	ldr	r2, [pc, #188]	@ (80030c0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d129      	bne.n	800305a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003006:	4b2f      	ldr	r3, [pc, #188]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300a:	4a2e      	ldr	r2, [pc, #184]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	6593      	str	r3, [r2, #88]	@ 0x58
 8003012:	4b2c      	ldr	r3, [pc, #176]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301e:	4b29      	ldr	r3, [pc, #164]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	4a28      	ldr	r2, [pc, #160]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800302a:	4b26      	ldr	r3, [pc, #152]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8003036:	23c0      	movs	r3, #192	@ 0xc0
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003046:	2302      	movs	r3, #2
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	f107 031c 	add.w	r3, r7, #28
 800304e:	4619      	mov	r1, r3
 8003050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003054:	f002 f958 	bl	8005308 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003058:	e02e      	b.n	80030b8 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1a      	ldr	r2, [pc, #104]	@ (80030c8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d129      	bne.n	80030b8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003064:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	4a16      	ldr	r2, [pc, #88]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003070:	4b14      	ldr	r3, [pc, #80]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307c:	4b11      	ldr	r3, [pc, #68]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800307e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003080:	4a10      	ldr	r2, [pc, #64]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003088:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800308a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8003094:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80030a6:	230a      	movs	r3, #10
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030aa:	f107 031c 	add.w	r3, r7, #28
 80030ae:	4619      	mov	r1, r3
 80030b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030b4:	f002 f928 	bl	8005308 <HAL_GPIO_Init>
}
 80030b8:	bf00      	nop
 80030ba:	3730      	adds	r7, #48	@ 0x30
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40000800 	.word	0x40000800

080030cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	@ 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a31      	ldr	r2, [pc, #196]	@ (80031b0 <HAL_TIM_MspPostInit+0xe4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d11d      	bne.n	800312a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ee:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030fa:	4b2e      	ldr	r3, [pc, #184]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8003106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800310a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003118:	2304      	movs	r3, #4
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	4825      	ldr	r0, [pc, #148]	@ (80031b8 <HAL_TIM_MspPostInit+0xec>)
 8003124:	f002 f8f0 	bl	8005308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003128:	e03d      	b.n	80031a6 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a23      	ldr	r2, [pc, #140]	@ (80031bc <HAL_TIM_MspPostInit+0xf0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d138      	bne.n	80031a6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003134:	4b1f      	ldr	r3, [pc, #124]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 8003136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003138:	4a1e      	ldr	r2, [pc, #120]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003140:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 8003142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 800314e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003150:	4a18      	ldr	r2, [pc, #96]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003158:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <HAL_TIM_MspPostInit+0xe8>)
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8003164:	2304      	movs	r3, #4
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003174:	2303      	movs	r3, #3
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4810      	ldr	r0, [pc, #64]	@ (80031c0 <HAL_TIM_MspPostInit+0xf4>)
 8003180:	f002 f8c2 	bl	8005308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8003184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003196:	2306      	movs	r3, #6
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4805      	ldr	r0, [pc, #20]	@ (80031b8 <HAL_TIM_MspPostInit+0xec>)
 80031a2:	f002 f8b1 	bl	8005308 <HAL_GPIO_Init>
}
 80031a6:	bf00      	nop
 80031a8:	3728      	adds	r7, #40	@ 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40013400 	.word	0x40013400
 80031b4:	40021000 	.word	0x40021000
 80031b8:	48000800 	.word	0x48000800
 80031bc:	40015000 	.word	0x40015000
 80031c0:	48000400 	.word	0x48000400

080031c4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 80031ca:	4a24      	ldr	r2, [pc, #144]	@ (800325c <MX_USART2_UART_Init+0x98>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80031ce:	4b22      	ldr	r3, [pc, #136]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 80031d0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80031d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80031d6:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 80031d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031dc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031de:	4b1e      	ldr	r3, [pc, #120]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80031e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 80031e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 80031ee:	220c      	movs	r2, #12
 80031f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f2:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f8:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031fe:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 8003200:	2200      	movs	r2, #0
 8003202:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003204:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 8003206:	2200      	movs	r2, #0
 8003208:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800320a:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 800320c:	2200      	movs	r2, #0
 800320e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003210:	4811      	ldr	r0, [pc, #68]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 8003212:	f006 f863 	bl	80092dc <HAL_UART_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800321c:	f7ff f9bc 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003220:	2100      	movs	r1, #0
 8003222:	480d      	ldr	r0, [pc, #52]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 8003224:	f008 fbe5 	bl	800b9f2 <HAL_UARTEx_SetTxFifoThreshold>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800322e:	f7ff f9b3 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003232:	2100      	movs	r1, #0
 8003234:	4808      	ldr	r0, [pc, #32]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 8003236:	f008 fc1a 	bl	800ba6e <HAL_UARTEx_SetRxFifoThreshold>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003240:	f7ff f9aa 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003244:	4804      	ldr	r0, [pc, #16]	@ (8003258 <MX_USART2_UART_Init+0x94>)
 8003246:	f008 fb9b 	bl	800b980 <HAL_UARTEx_DisableFifoMode>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003250:	f7ff f9a2 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20001958 	.word	0x20001958
 800325c:	40004400 	.word	0x40004400

08003260 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b09e      	sub	sp, #120	@ 0x78
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003278:	f107 0310 	add.w	r3, r7, #16
 800327c:	2254      	movs	r2, #84	@ 0x54
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f009 f977 	bl	800c574 <memset>
  if(uartHandle->Instance==USART2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a37      	ldr	r2, [pc, #220]	@ (8003368 <HAL_UART_MspInit+0x108>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d167      	bne.n	8003360 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003290:	2302      	movs	r3, #2
 8003292:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	4618      	mov	r0, r3
 800329e:	f002 ffc7 	bl	8006230 <HAL_RCCEx_PeriphCLKConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032a8:	f7ff f976 	bl	8002598 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032ac:	4b2f      	ldr	r3, [pc, #188]	@ (800336c <HAL_UART_MspInit+0x10c>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b0:	4a2e      	ldr	r2, [pc, #184]	@ (800336c <HAL_UART_MspInit+0x10c>)
 80032b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b8:	4b2c      	ldr	r3, [pc, #176]	@ (800336c <HAL_UART_MspInit+0x10c>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c4:	4b29      	ldr	r3, [pc, #164]	@ (800336c <HAL_UART_MspInit+0x10c>)
 80032c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c8:	4a28      	ldr	r2, [pc, #160]	@ (800336c <HAL_UART_MspInit+0x10c>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032d0:	4b26      	ldr	r3, [pc, #152]	@ (800336c <HAL_UART_MspInit+0x10c>)
 80032d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032dc:	230c      	movs	r3, #12
 80032de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e8:	2300      	movs	r3, #0
 80032ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032ec:	2307      	movs	r3, #7
 80032ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032f4:	4619      	mov	r1, r3
 80032f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032fa:	f002 f805 	bl	8005308 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80032fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <HAL_UART_MspInit+0x110>)
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <HAL_UART_MspInit+0x114>)
 8003302:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003304:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <HAL_UART_MspInit+0x110>)
 8003306:	221b      	movs	r2, #27
 8003308:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800330a:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <HAL_UART_MspInit+0x110>)
 800330c:	2210      	movs	r2, #16
 800330e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003310:	4b17      	ldr	r3, [pc, #92]	@ (8003370 <HAL_UART_MspInit+0x110>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003316:	4b16      	ldr	r3, [pc, #88]	@ (8003370 <HAL_UART_MspInit+0x110>)
 8003318:	2280      	movs	r2, #128	@ 0x80
 800331a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <HAL_UART_MspInit+0x110>)
 800331e:	2200      	movs	r2, #0
 8003320:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003322:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <HAL_UART_MspInit+0x110>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003328:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <HAL_UART_MspInit+0x110>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <HAL_UART_MspInit+0x110>)
 8003330:	2200      	movs	r2, #0
 8003332:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003334:	480e      	ldr	r0, [pc, #56]	@ (8003370 <HAL_UART_MspInit+0x110>)
 8003336:	f001 fca9 	bl	8004c8c <HAL_DMA_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003340:	f7ff f92a 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <HAL_UART_MspInit+0x110>)
 8003348:	67da      	str	r2, [r3, #124]	@ 0x7c
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_UART_MspInit+0x110>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003350:	2200      	movs	r2, #0
 8003352:	2100      	movs	r1, #0
 8003354:	2026      	movs	r0, #38	@ 0x26
 8003356:	f001 fc64 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800335a:	2026      	movs	r0, #38	@ 0x26
 800335c:	f001 fc7b 	bl	8004c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003360:	bf00      	nop
 8003362:	3778      	adds	r7, #120	@ 0x78
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40004400 	.word	0x40004400
 800336c:	40021000 	.word	0x40021000
 8003370:	20001a24 	.word	0x20001a24
 8003374:	40020008 	.word	0x40020008

08003378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003378:	480d      	ldr	r0, [pc, #52]	@ (80033b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800337a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800337c:	f7ff fa5a 	bl	8002834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003380:	480c      	ldr	r0, [pc, #48]	@ (80033b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003382:	490d      	ldr	r1, [pc, #52]	@ (80033b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003384:	4a0d      	ldr	r2, [pc, #52]	@ (80033bc <LoopForever+0xe>)
  movs r3, #0
 8003386:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003388:	e002      	b.n	8003390 <LoopCopyDataInit>

0800338a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800338c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800338e:	3304      	adds	r3, #4

08003390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003394:	d3f9      	bcc.n	800338a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003396:	4a0a      	ldr	r2, [pc, #40]	@ (80033c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003398:	4c0a      	ldr	r4, [pc, #40]	@ (80033c4 <LoopForever+0x16>)
  movs r3, #0
 800339a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800339c:	e001      	b.n	80033a2 <LoopFillZerobss>

0800339e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800339e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a0:	3204      	adds	r2, #4

080033a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a4:	d3fb      	bcc.n	800339e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033a6:	f009 f8f3 	bl	800c590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033aa:	f7fe fc05 	bl	8001bb8 <main>

080033ae <LoopForever>:

LoopForever:
    b LoopForever
 80033ae:	e7fe      	b.n	80033ae <LoopForever>
  ldr   r0, =_estack
 80033b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033b8:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80033bc:	0800c6a0 	.word	0x0800c6a0
  ldr r2, =_sbss
 80033c0:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80033c4:	20001bc0 	.word	0x20001bc0

080033c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033c8:	e7fe      	b.n	80033c8 <ADC1_2_IRQHandler>

080033ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d4:	2003      	movs	r0, #3
 80033d6:	f001 fc19 	bl	8004c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033da:	2000      	movs	r0, #0
 80033dc:	f000 f80e 	bl	80033fc <HAL_InitTick>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	71fb      	strb	r3, [r7, #7]
 80033ea:	e001      	b.n	80033f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033ec:	f7ff f978 	bl	80026e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033f0:	79fb      	ldrb	r3, [r7, #7]

}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003408:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <HAL_InitTick+0x68>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d022      	beq.n	8003456 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003410:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_InitTick+0x6c>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <HAL_InitTick+0x68>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800341c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	4618      	mov	r0, r3
 8003426:	f001 fc24 	bl	8004c72 <HAL_SYSTICK_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10f      	bne.n	8003450 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b0f      	cmp	r3, #15
 8003434:	d809      	bhi.n	800344a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003436:	2200      	movs	r2, #0
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	f04f 30ff 	mov.w	r0, #4294967295
 800343e:	f001 fbf0 	bl	8004c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <HAL_InitTick+0x70>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	e007      	b.n	800345a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e004      	b.n	800345a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	e001      	b.n	800345a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000210 	.word	0x20000210
 8003468:	20000208 	.word	0x20000208
 800346c:	2000020c 	.word	0x2000020c

08003470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_IncTick+0x1c>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_IncTick+0x20>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4413      	add	r3, r2
 800347e:	4a03      	ldr	r2, [pc, #12]	@ (800348c <HAL_IncTick+0x1c>)
 8003480:	6013      	str	r3, [r2, #0]
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	20001a84 	.word	0x20001a84
 8003490:	20000210 	.word	0x20000210

08003494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return uwTick;
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <HAL_GetTick+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20001a84 	.word	0x20001a84

080034ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff ffee 	bl	8003494 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d004      	beq.n	80034d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_Delay+0x40>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034d0:	bf00      	nop
 80034d2:	f7ff ffdf 	bl	8003494 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d8f7      	bhi.n	80034d2 <HAL_Delay+0x26>
  {
  }
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000210 	.word	0x20000210

080034f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3360      	adds	r3, #96	@ 0x60
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <LL_ADC_SetOffset+0x44>)
 800357a:	4013      	ands	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	03fff000 	.word	0x03fff000

080035a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3360      	adds	r3, #96	@ 0x60
 80035ae:	461a      	mov	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3360      	adds	r3, #96	@ 0x60
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003602:	b480      	push	{r7}
 8003604:	b087      	sub	sp, #28
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3360      	adds	r3, #96	@ 0x60
 8003612:	461a      	mov	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	431a      	orrs	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3360      	adds	r3, #96	@ 0x60
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	431a      	orrs	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	615a      	str	r2, [r3, #20]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3330      	adds	r3, #48	@ 0x30
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	4413      	add	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	211f      	movs	r1, #31
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	0e9b      	lsrs	r3, r3, #26
 80036cc:	f003 011f 	and.w	r1, r3, #31
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	431a      	orrs	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3314      	adds	r3, #20
 80036fc:	461a      	mov	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	0e5b      	lsrs	r3, r3, #25
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	4413      	add	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	0d1b      	lsrs	r3, r3, #20
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2107      	movs	r1, #7
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	401a      	ands	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	0d1b      	lsrs	r3, r3, #20
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	431a      	orrs	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375c:	43db      	mvns	r3, r3
 800375e:	401a      	ands	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0318 	and.w	r3, r3, #24
 8003766:	4908      	ldr	r1, [pc, #32]	@ (8003788 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003768:	40d9      	lsrs	r1, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	400b      	ands	r3, r1
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	431a      	orrs	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	0007ffff 	.word	0x0007ffff

0800378c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 031f 	and.w	r3, r3, #31
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80037b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6093      	str	r3, [r2, #8]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e0:	d101      	bne.n	80037e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003804:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003808:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003830:	d101      	bne.n	8003836 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003854:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003858:	f043 0201 	orr.w	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <LL_ADC_IsEnabled+0x18>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <LL_ADC_IsEnabled+0x1a>
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d101      	bne.n	80038d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d101      	bne.n	80038f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e1a9      	b.n	8003c76 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd ffc5 	bl	80018c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff3f 	bl	80037cc <LL_ADC_IsDeepPowerDownEnabled>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff25 	bl	80037a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff5a 	bl	800381c <LL_ADC_IsInternalRegulatorEnabled>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d115      	bne.n	800399a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff3e 	bl	80037f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003978:	4b9c      	ldr	r3, [pc, #624]	@ (8003bec <HAL_ADC_Init+0x2e4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	4a9c      	ldr	r2, [pc, #624]	@ (8003bf0 <HAL_ADC_Init+0x2e8>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	3301      	adds	r3, #1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800398c:	e002      	b.n	8003994 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3b01      	subs	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f9      	bne.n	800398e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff3c 	bl	800381c <LL_ADC_IsInternalRegulatorEnabled>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10d      	bne.n	80039c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ae:	f043 0210 	orr.w	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff75 	bl	80038ba <LL_ADC_REG_IsConversionOngoing>
 80039d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 8142 	bne.w	8003c64 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 813e 	bne.w	8003c64 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80039f0:	f043 0202 	orr.w	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff35 	bl	800386c <LL_ADC_IsEnabled>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d141      	bne.n	8003a8c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a10:	d004      	beq.n	8003a1c <HAL_ADC_Init+0x114>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a77      	ldr	r2, [pc, #476]	@ (8003bf4 <HAL_ADC_Init+0x2ec>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10f      	bne.n	8003a3c <HAL_ADC_Init+0x134>
 8003a1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a20:	f7ff ff24 	bl	800386c <LL_ADC_IsEnabled>
 8003a24:	4604      	mov	r4, r0
 8003a26:	4873      	ldr	r0, [pc, #460]	@ (8003bf4 <HAL_ADC_Init+0x2ec>)
 8003a28:	f7ff ff20 	bl	800386c <LL_ADC_IsEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4323      	orrs	r3, r4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e012      	b.n	8003a62 <HAL_ADC_Init+0x15a>
 8003a3c:	486e      	ldr	r0, [pc, #440]	@ (8003bf8 <HAL_ADC_Init+0x2f0>)
 8003a3e:	f7ff ff15 	bl	800386c <LL_ADC_IsEnabled>
 8003a42:	4604      	mov	r4, r0
 8003a44:	486d      	ldr	r0, [pc, #436]	@ (8003bfc <HAL_ADC_Init+0x2f4>)
 8003a46:	f7ff ff11 	bl	800386c <LL_ADC_IsEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	431c      	orrs	r4, r3
 8003a4e:	486c      	ldr	r0, [pc, #432]	@ (8003c00 <HAL_ADC_Init+0x2f8>)
 8003a50:	f7ff ff0c 	bl	800386c <LL_ADC_IsEnabled>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4323      	orrs	r3, r4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d012      	beq.n	8003a8c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a6e:	d004      	beq.n	8003a7a <HAL_ADC_Init+0x172>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5f      	ldr	r2, [pc, #380]	@ (8003bf4 <HAL_ADC_Init+0x2ec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_Init+0x176>
 8003a7a:	4a62      	ldr	r2, [pc, #392]	@ (8003c04 <HAL_ADC_Init+0x2fc>)
 8003a7c:	e000      	b.n	8003a80 <HAL_ADC_Init+0x178>
 8003a7e:	4a62      	ldr	r2, [pc, #392]	@ (8003c08 <HAL_ADC_Init+0x300>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f7ff fd32 	bl	80034f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7f5b      	ldrb	r3, [r3, #29]
 8003a90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003a9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003aa2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003aaa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d106      	bne.n	8003ac8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	045b      	lsls	r3, r3, #17
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003adc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	4b48      	ldr	r3, [pc, #288]	@ (8003c0c <HAL_ADC_Init+0x304>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	69b9      	ldr	r1, [r7, #24]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fee4 	bl	80038e0 <LL_ADC_INJ_IsConversionOngoing>
 8003b18:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d17f      	bne.n	8003c20 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d17c      	bne.n	8003c20 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b2a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b32:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b42:	f023 0302 	bic.w	r3, r3, #2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	69b9      	ldr	r1, [r7, #24]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d017      	beq.n	8003b88 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b70:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6911      	ldr	r1, [r2, #16]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003b86:	e013      	b.n	8003bb0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d12a      	bne.n	8003c10 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bd0:	4311      	orrs	r1, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	611a      	str	r2, [r3, #16]
 8003bea:	e019      	b.n	8003c20 <HAL_ADC_Init+0x318>
 8003bec:	20000208 	.word	0x20000208
 8003bf0:	053e2d63 	.word	0x053e2d63
 8003bf4:	50000100 	.word	0x50000100
 8003bf8:	50000400 	.word	0x50000400
 8003bfc:	50000500 	.word	0x50000500
 8003c00:	50000600 	.word	0x50000600
 8003c04:	50000300 	.word	0x50000300
 8003c08:	50000700 	.word	0x50000700
 8003c0c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d10c      	bne.n	8003c42 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f023 010f 	bic.w	r1, r3, #15
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c40:	e007      	b.n	8003c52 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 020f 	bic.w	r2, r2, #15
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	f043 0201 	orr.w	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c62:	e007      	b.n	8003c74 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c68:	f043 0210 	orr.w	r2, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3724      	adds	r7, #36	@ 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}
 8003c7e:	bf00      	nop

08003c80 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c90:	d004      	beq.n	8003c9c <HAL_ADC_Start+0x1c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a67      	ldr	r2, [pc, #412]	@ (8003e34 <HAL_ADC_Start+0x1b4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_ADC_Start+0x20>
 8003c9c:	4b66      	ldr	r3, [pc, #408]	@ (8003e38 <HAL_ADC_Start+0x1b8>)
 8003c9e:	e000      	b.n	8003ca2 <HAL_ADC_Start+0x22>
 8003ca0:	4b66      	ldr	r3, [pc, #408]	@ (8003e3c <HAL_ADC_Start+0x1bc>)
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fd72 	bl	800378c <LL_ADC_GetMultimode>
 8003ca8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fe03 	bl	80038ba <LL_ADC_REG_IsConversionOngoing>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 80b4 	bne.w	8003e24 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_ADC_Start+0x4a>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0af      	b.n	8003e2a <HAL_ADC_Start+0x1aa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fd06 	bl	80046e4 <ADC_Enable>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 809b 	bne.w	8003e1a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a4d      	ldr	r2, [pc, #308]	@ (8003e34 <HAL_ADC_Start+0x1b4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_ADC_Start+0x96>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4e      	ldr	r2, [pc, #312]	@ (8003e40 <HAL_ADC_Start+0x1c0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d002      	beq.n	8003d12 <HAL_ADC_Start+0x92>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	e003      	b.n	8003d1a <HAL_ADC_Start+0x9a>
 8003d12:	4b4c      	ldr	r3, [pc, #304]	@ (8003e44 <HAL_ADC_Start+0x1c4>)
 8003d14:	e001      	b.n	8003d1a <HAL_ADC_Start+0x9a>
 8003d16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d002      	beq.n	8003d28 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d40:	d106      	bne.n	8003d50 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d46:	f023 0206 	bic.w	r2, r3, #6
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d4e:	e002      	b.n	8003d56 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	221c      	movs	r2, #28
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a32      	ldr	r2, [pc, #200]	@ (8003e34 <HAL_ADC_Start+0x1b4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_ADC_Start+0x104>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a32      	ldr	r2, [pc, #200]	@ (8003e40 <HAL_ADC_Start+0x1c0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d002      	beq.n	8003d80 <HAL_ADC_Start+0x100>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	e003      	b.n	8003d88 <HAL_ADC_Start+0x108>
 8003d80:	4b30      	ldr	r3, [pc, #192]	@ (8003e44 <HAL_ADC_Start+0x1c4>)
 8003d82:	e001      	b.n	8003d88 <HAL_ADC_Start+0x108>
 8003d84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d008      	beq.n	8003da2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d002      	beq.n	8003da2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b09      	cmp	r3, #9
 8003da0:	d114      	bne.n	8003dcc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003db8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fd64 	bl	8003892 <LL_ADC_REG_StartConversion>
 8003dca:	e02d      	b.n	8003e28 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <HAL_ADC_Start+0x1b4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_ADC_Start+0x176>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a16      	ldr	r2, [pc, #88]	@ (8003e40 <HAL_ADC_Start+0x1c0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d002      	beq.n	8003df2 <HAL_ADC_Start+0x172>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	e003      	b.n	8003dfa <HAL_ADC_Start+0x17a>
 8003df2:	4b14      	ldr	r3, [pc, #80]	@ (8003e44 <HAL_ADC_Start+0x1c4>)
 8003df4:	e001      	b.n	8003dfa <HAL_ADC_Start+0x17a>
 8003df6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003dfa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00f      	beq.n	8003e28 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e10:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e18:	e006      	b.n	8003e28 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003e22:	e001      	b.n	8003e28 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e24:	2302      	movs	r3, #2
 8003e26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	50000100 	.word	0x50000100
 8003e38:	50000300 	.word	0x50000300
 8003e3c:	50000700 	.word	0x50000700
 8003e40:	50000500 	.word	0x50000500
 8003e44:	50000400 	.word	0x50000400

08003e48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0b6      	sub	sp, #216	@ 0xd8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d102      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x24>
 8003e82:	2302      	movs	r3, #2
 8003e84:	f000 bc13 	b.w	80046ae <HAL_ADC_ConfigChannel+0x84a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fd10 	bl	80038ba <LL_ADC_REG_IsConversionOngoing>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 83f3 	bne.w	8004688 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f7ff fbf0 	bl	8003694 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fcfe 	bl	80038ba <LL_ADC_REG_IsConversionOngoing>
 8003ebe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fd0a 	bl	80038e0 <LL_ADC_INJ_IsConversionOngoing>
 8003ecc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ed0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 81d9 	bne.w	800428c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 81d4 	bne.w	800428c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eec:	d10f      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f7ff fbf7 	bl	80036ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fbb1 	bl	800366e <LL_ADC_SetSamplingTimeCommonConfig>
 8003f0c:	e00e      	b.n	8003f2c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f7ff fbe6 	bl	80036ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fba1 	bl	800366e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	08db      	lsrs	r3, r3, #3
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d022      	beq.n	8003f94 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6919      	ldr	r1, [r3, #16]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f5e:	f7ff fafb 	bl	8003558 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6919      	ldr	r1, [r3, #16]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f7ff fb47 	bl	8003602 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d102      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x126>
 8003f84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f88:	e000      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x128>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f7ff fb53 	bl	8003638 <LL_ADC_SetOffsetSaturation>
 8003f92:	e17b      	b.n	800428c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fb00 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x15c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff faf5 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	0e9b      	lsrs	r3, r3, #26
 8003fba:	f003 021f 	and.w	r2, r3, #31
 8003fbe:	e01e      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x19a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff faea 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e004      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x1b2>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	0e9b      	lsrs	r3, r3, #26
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	e018      	b.n	8004048 <HAL_ADC_ConfigChannel+0x1e4>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004022:	fa93 f3a3 	rbit	r3, r3
 8004026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800402a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800402e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800403a:	2320      	movs	r3, #32
 800403c:	e004      	b.n	8004048 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800403e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004048:	429a      	cmp	r2, r3
 800404a:	d106      	bne.n	800405a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fab9 	bl	80035cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fa9d 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8004066:	4603      	mov	r3, r0
 8004068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x222>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fa92 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 800407c:	4603      	mov	r3, r0
 800407e:	0e9b      	lsrs	r3, r3, #26
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	e01e      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x260>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fa87 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8004092:	4603      	mov	r3, r0
 8004094:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800409c:	fa93 f3a3 	rbit	r3, r3
 80040a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80040a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80040ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80040b4:	2320      	movs	r3, #32
 80040b6:	e004      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80040b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x278>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0e9b      	lsrs	r3, r3, #26
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	e018      	b.n	800410e <HAL_ADC_ConfigChannel+0x2aa>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80040f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80040f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004100:	2320      	movs	r3, #32
 8004102:	e004      	b.n	800410e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004104:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800410e:	429a      	cmp	r2, r3
 8004110:	d106      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2200      	movs	r2, #0
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fa56 	bl	80035cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fa3a 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 800412c:	4603      	mov	r3, r0
 800412e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <HAL_ADC_ConfigChannel+0x2e8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2102      	movs	r1, #2
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fa2f 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	0e9b      	lsrs	r3, r3, #26
 8004146:	f003 021f 	and.w	r2, r3, #31
 800414a:	e01e      	b.n	800418a <HAL_ADC_ConfigChannel+0x326>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2102      	movs	r1, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fa24 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800416a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800416e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800417a:	2320      	movs	r3, #32
 800417c:	e004      	b.n	8004188 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800417e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x33e>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	0e9b      	lsrs	r3, r3, #26
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	e016      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x36c>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80041b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80041ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80041c2:	2320      	movs	r3, #32
 80041c4:	e004      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80041c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d106      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2200      	movs	r2, #0
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff f9f5 	bl	80035cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2103      	movs	r1, #3
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff f9d9 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <HAL_ADC_ConfigChannel+0x3aa>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2103      	movs	r1, #3
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff f9ce 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	0e9b      	lsrs	r3, r3, #26
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	e017      	b.n	800423e <HAL_ADC_ConfigChannel+0x3da>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2103      	movs	r1, #3
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff f9c3 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 800421a:	4603      	mov	r3, r0
 800421c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004228:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800422a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004230:	2320      	movs	r3, #32
 8004232:	e003      	b.n	800423c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x3f2>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	0e9b      	lsrs	r3, r3, #26
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	e011      	b.n	800427a <HAL_ADC_ConfigChannel+0x416>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004266:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800426e:	2320      	movs	r3, #32
 8004270:	e003      	b.n	800427a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800427a:	429a      	cmp	r2, r3
 800427c:	d106      	bne.n	800428c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	2103      	movs	r1, #3
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff f9a0 	bl	80035cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff faeb 	bl	800386c <LL_ADC_IsEnabled>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	f040 813d 	bne.w	8004518 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6819      	ldr	r1, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7ff fa4a 	bl	8003744 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4aa2      	ldr	r2, [pc, #648]	@ (8004540 <HAL_ADC_ConfigChannel+0x6dc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f040 812e 	bne.w	8004518 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x480>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	3301      	adds	r3, #1
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2b09      	cmp	r3, #9
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e019      	b.n	8004318 <HAL_ADC_ConfigChannel+0x4b4>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ec:	fa93 f3a3 	rbit	r3, r3
 80042f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80042f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042f4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80042f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80042fc:	2320      	movs	r3, #32
 80042fe:	e003      	b.n	8004308 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004300:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	3301      	adds	r3, #1
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2b09      	cmp	r3, #9
 8004310:	bf94      	ite	ls
 8004312:	2301      	movls	r3, #1
 8004314:	2300      	movhi	r3, #0
 8004316:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004318:	2b00      	cmp	r3, #0
 800431a:	d079      	beq.n	8004410 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x4d4>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0e9b      	lsrs	r3, r3, #26
 800432e:	3301      	adds	r3, #1
 8004330:	069b      	lsls	r3, r3, #26
 8004332:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004336:	e015      	b.n	8004364 <HAL_ADC_ConfigChannel+0x500>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004348:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800434a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004350:	2320      	movs	r3, #32
 8004352:	e003      	b.n	800435c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	3301      	adds	r3, #1
 800435e:	069b      	lsls	r3, r3, #26
 8004360:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x520>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	3301      	adds	r3, #1
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	e017      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x550>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004394:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800439c:	2320      	movs	r3, #32
 800439e:	e003      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80043a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2101      	movs	r1, #1
 80043b0:	fa01 f303 	lsl.w	r3, r1, r3
 80043b4:	ea42 0103 	orr.w	r1, r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <HAL_ADC_ConfigChannel+0x576>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	3301      	adds	r3, #1
 80043cc:	f003 021f 	and.w	r2, r3, #31
 80043d0:	4613      	mov	r3, r2
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	4413      	add	r3, r2
 80043d6:	051b      	lsls	r3, r3, #20
 80043d8:	e018      	b.n	800440c <HAL_ADC_ConfigChannel+0x5a8>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80043e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80043ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80043f2:	2320      	movs	r3, #32
 80043f4:	e003      	b.n	80043fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80043f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	3301      	adds	r3, #1
 8004400:	f003 021f 	and.w	r2, r3, #31
 8004404:	4613      	mov	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800440c:	430b      	orrs	r3, r1
 800440e:	e07e      	b.n	800450e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004418:	2b00      	cmp	r3, #0
 800441a:	d107      	bne.n	800442c <HAL_ADC_ConfigChannel+0x5c8>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0e9b      	lsrs	r3, r3, #26
 8004422:	3301      	adds	r3, #1
 8004424:	069b      	lsls	r3, r3, #26
 8004426:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800442a:	e015      	b.n	8004458 <HAL_ADC_ConfigChannel+0x5f4>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004434:	fa93 f3a3 	rbit	r3, r3
 8004438:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004444:	2320      	movs	r3, #32
 8004446:	e003      	b.n	8004450 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	3301      	adds	r3, #1
 8004452:	069b      	lsls	r3, r3, #26
 8004454:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x614>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0e9b      	lsrs	r3, r3, #26
 800446a:	3301      	adds	r3, #1
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2101      	movs	r1, #1
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	e017      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x644>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	fa93 f3a3 	rbit	r3, r3
 8004484:	61fb      	str	r3, [r7, #28]
  return result;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004490:	2320      	movs	r3, #32
 8004492:	e003      	b.n	800449c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	3301      	adds	r3, #1
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2101      	movs	r1, #1
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	ea42 0103 	orr.w	r1, r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10d      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x670>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	0e9b      	lsrs	r3, r3, #26
 80044be:	3301      	adds	r3, #1
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	3b1e      	subs	r3, #30
 80044cc:	051b      	lsls	r3, r3, #20
 80044ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044d2:	e01b      	b.n	800450c <HAL_ADC_ConfigChannel+0x6a8>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	613b      	str	r3, [r7, #16]
  return result;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80044ec:	2320      	movs	r3, #32
 80044ee:	e003      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	fab3 f383 	clz	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	3301      	adds	r3, #1
 80044fa:	f003 021f 	and.w	r2, r3, #31
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	3b1e      	subs	r3, #30
 8004506:	051b      	lsls	r3, r3, #20
 8004508:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800450c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004512:	4619      	mov	r1, r3
 8004514:	f7ff f8ea 	bl	80036ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <HAL_ADC_ConfigChannel+0x6e0>)
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80be 	beq.w	80046a2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800452e:	d004      	beq.n	800453a <HAL_ADC_ConfigChannel+0x6d6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a04      	ldr	r2, [pc, #16]	@ (8004548 <HAL_ADC_ConfigChannel+0x6e4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10a      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x6ec>
 800453a:	4b04      	ldr	r3, [pc, #16]	@ (800454c <HAL_ADC_ConfigChannel+0x6e8>)
 800453c:	e009      	b.n	8004552 <HAL_ADC_ConfigChannel+0x6ee>
 800453e:	bf00      	nop
 8004540:	407f0000 	.word	0x407f0000
 8004544:	80080000 	.word	0x80080000
 8004548:	50000100 	.word	0x50000100
 800454c:	50000300 	.word	0x50000300
 8004550:	4b59      	ldr	r3, [pc, #356]	@ (80046b8 <HAL_ADC_ConfigChannel+0x854>)
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fff2 	bl	800353c <LL_ADC_GetCommonPathInternalCh>
 8004558:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a56      	ldr	r2, [pc, #344]	@ (80046bc <HAL_ADC_ConfigChannel+0x858>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_ADC_ConfigChannel+0x70c>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a55      	ldr	r2, [pc, #340]	@ (80046c0 <HAL_ADC_ConfigChannel+0x85c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d13a      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004574:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d134      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004584:	d005      	beq.n	8004592 <HAL_ADC_ConfigChannel+0x72e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a4e      	ldr	r2, [pc, #312]	@ (80046c4 <HAL_ADC_ConfigChannel+0x860>)
 800458c:	4293      	cmp	r3, r2
 800458e:	f040 8085 	bne.w	800469c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459a:	d004      	beq.n	80045a6 <HAL_ADC_ConfigChannel+0x742>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a49      	ldr	r2, [pc, #292]	@ (80046c8 <HAL_ADC_ConfigChannel+0x864>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x746>
 80045a6:	4a49      	ldr	r2, [pc, #292]	@ (80046cc <HAL_ADC_ConfigChannel+0x868>)
 80045a8:	e000      	b.n	80045ac <HAL_ADC_ConfigChannel+0x748>
 80045aa:	4a43      	ldr	r2, [pc, #268]	@ (80046b8 <HAL_ADC_ConfigChannel+0x854>)
 80045ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7fe ffad 	bl	8003516 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045bc:	4b44      	ldr	r3, [pc, #272]	@ (80046d0 <HAL_ADC_ConfigChannel+0x86c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	4a44      	ldr	r2, [pc, #272]	@ (80046d4 <HAL_ADC_ConfigChannel+0x870>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045d6:	e002      	b.n	80045de <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3b01      	subs	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f9      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045e4:	e05a      	b.n	800469c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a3b      	ldr	r2, [pc, #236]	@ (80046d8 <HAL_ADC_ConfigChannel+0x874>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d125      	bne.n	800463c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11f      	bne.n	800463c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a31      	ldr	r2, [pc, #196]	@ (80046c8 <HAL_ADC_ConfigChannel+0x864>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d104      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x7ac>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a34      	ldr	r2, [pc, #208]	@ (80046dc <HAL_ADC_ConfigChannel+0x878>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d047      	beq.n	80046a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004618:	d004      	beq.n	8004624 <HAL_ADC_ConfigChannel+0x7c0>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2a      	ldr	r2, [pc, #168]	@ (80046c8 <HAL_ADC_ConfigChannel+0x864>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x7c4>
 8004624:	4a29      	ldr	r2, [pc, #164]	@ (80046cc <HAL_ADC_ConfigChannel+0x868>)
 8004626:	e000      	b.n	800462a <HAL_ADC_ConfigChannel+0x7c6>
 8004628:	4a23      	ldr	r2, [pc, #140]	@ (80046b8 <HAL_ADC_ConfigChannel+0x854>)
 800462a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800462e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fe ff6e 	bl	8003516 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800463a:	e031      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a27      	ldr	r2, [pc, #156]	@ (80046e0 <HAL_ADC_ConfigChannel+0x87c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d12d      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d127      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1c      	ldr	r2, [pc, #112]	@ (80046c8 <HAL_ADC_ConfigChannel+0x864>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004664:	d004      	beq.n	8004670 <HAL_ADC_ConfigChannel+0x80c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a17      	ldr	r2, [pc, #92]	@ (80046c8 <HAL_ADC_ConfigChannel+0x864>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x810>
 8004670:	4a16      	ldr	r2, [pc, #88]	@ (80046cc <HAL_ADC_ConfigChannel+0x868>)
 8004672:	e000      	b.n	8004676 <HAL_ADC_ConfigChannel+0x812>
 8004674:	4a10      	ldr	r2, [pc, #64]	@ (80046b8 <HAL_ADC_ConfigChannel+0x854>)
 8004676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800467a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f7fe ff48 	bl	8003516 <LL_ADC_SetCommonPathInternalCh>
 8004686:	e00c      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800469a:	e002      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80046aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	37d8      	adds	r7, #216	@ 0xd8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	50000700 	.word	0x50000700
 80046bc:	c3210000 	.word	0xc3210000
 80046c0:	90c00010 	.word	0x90c00010
 80046c4:	50000600 	.word	0x50000600
 80046c8:	50000100 	.word	0x50000100
 80046cc:	50000300 	.word	0x50000300
 80046d0:	20000208 	.word	0x20000208
 80046d4:	053e2d63 	.word	0x053e2d63
 80046d8:	c7520000 	.word	0xc7520000
 80046dc:	50000500 	.word	0x50000500
 80046e0:	cb840000 	.word	0xcb840000

080046e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff f8b9 	bl	800386c <LL_ADC_IsEnabled>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d176      	bne.n	80047ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	4b3c      	ldr	r3, [pc, #240]	@ (80047f8 <ADC_Enable+0x114>)
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00d      	beq.n	800472a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	f043 0210 	orr.w	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e062      	b.n	80047f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff f888 	bl	8003844 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800473c:	d004      	beq.n	8004748 <ADC_Enable+0x64>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2e      	ldr	r2, [pc, #184]	@ (80047fc <ADC_Enable+0x118>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d101      	bne.n	800474c <ADC_Enable+0x68>
 8004748:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <ADC_Enable+0x11c>)
 800474a:	e000      	b.n	800474e <ADC_Enable+0x6a>
 800474c:	4b2d      	ldr	r3, [pc, #180]	@ (8004804 <ADC_Enable+0x120>)
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fef4 	bl	800353c <LL_ADC_GetCommonPathInternalCh>
 8004754:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800475a:	2b00      	cmp	r3, #0
 800475c:	d013      	beq.n	8004786 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800475e:	4b2a      	ldr	r3, [pc, #168]	@ (8004808 <ADC_Enable+0x124>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	4a29      	ldr	r2, [pc, #164]	@ (800480c <ADC_Enable+0x128>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	099b      	lsrs	r3, r3, #6
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004778:	e002      	b.n	8004780 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3b01      	subs	r3, #1
 800477e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f9      	bne.n	800477a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004786:	f7fe fe85 	bl	8003494 <HAL_GetTick>
 800478a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800478c:	e028      	b.n	80047e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f86a 	bl	800386c <LL_ADC_IsEnabled>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff f84e 	bl	8003844 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047a8:	f7fe fe74 	bl	8003494 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d914      	bls.n	80047e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d00d      	beq.n	80047e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c8:	f043 0210 	orr.w	r2, r3, #16
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d4:	f043 0201 	orr.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e007      	b.n	80047f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d1cf      	bne.n	800478e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	8000003f 	.word	0x8000003f
 80047fc:	50000100 	.word	0x50000100
 8004800:	50000300 	.word	0x50000300
 8004804:	50000700 	.word	0x50000700
 8004808:	20000208 	.word	0x20000208
 800480c:	053e2d63 	.word	0x053e2d63

08004810 <LL_ADC_IsEnabled>:
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <LL_ADC_IsEnabled+0x18>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <LL_ADC_IsEnabled+0x1a>
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <LL_ADC_REG_IsConversionOngoing>:
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d101      	bne.n	800484e <LL_ADC_REG_IsConversionOngoing+0x18>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b0a1      	sub	sp, #132	@ 0x84
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004876:	2302      	movs	r3, #2
 8004878:	e0e7      	b.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004882:	2300      	movs	r3, #0
 8004884:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004886:	2300      	movs	r3, #0
 8004888:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004892:	d102      	bne.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004894:	4b6f      	ldr	r3, [pc, #444]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	e009      	b.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a6e      	ldr	r2, [pc, #440]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d102      	bne.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80048a4:	4b6d      	ldr	r3, [pc, #436]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	e001      	b.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80048aa:	2300      	movs	r3, #0
 80048ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0be      	b.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ffb1 	bl	8004836 <LL_ADC_REG_IsConversionOngoing>
 80048d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ffab 	bl	8004836 <LL_ADC_REG_IsConversionOngoing>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 80a0 	bne.w	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80048e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 809c 	bne.w	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048f8:	d004      	beq.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a55      	ldr	r2, [pc, #340]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004904:	4b56      	ldr	r3, [pc, #344]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004906:	e000      	b.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004908:	4b56      	ldr	r3, [pc, #344]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800490a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d04b      	beq.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004914:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004926:	035b      	lsls	r3, r3, #13
 8004928:	430b      	orrs	r3, r1
 800492a:	431a      	orrs	r2, r3
 800492c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800492e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004938:	d004      	beq.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a45      	ldr	r2, [pc, #276]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10f      	bne.n	8004964 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004944:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004948:	f7ff ff62 	bl	8004810 <LL_ADC_IsEnabled>
 800494c:	4604      	mov	r4, r0
 800494e:	4841      	ldr	r0, [pc, #260]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004950:	f7ff ff5e 	bl	8004810 <LL_ADC_IsEnabled>
 8004954:	4603      	mov	r3, r0
 8004956:	4323      	orrs	r3, r4
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e012      	b.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004964:	483c      	ldr	r0, [pc, #240]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004966:	f7ff ff53 	bl	8004810 <LL_ADC_IsEnabled>
 800496a:	4604      	mov	r4, r0
 800496c:	483b      	ldr	r0, [pc, #236]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800496e:	f7ff ff4f 	bl	8004810 <LL_ADC_IsEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	431c      	orrs	r4, r3
 8004976:	483c      	ldr	r0, [pc, #240]	@ (8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004978:	f7ff ff4a 	bl	8004810 <LL_ADC_IsEnabled>
 800497c:	4603      	mov	r3, r0
 800497e:	4323      	orrs	r3, r4
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d056      	beq.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800498e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004996:	f023 030f 	bic.w	r3, r3, #15
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	6811      	ldr	r1, [r2, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	6892      	ldr	r2, [r2, #8]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	431a      	orrs	r2, r3
 80049a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049aa:	e047      	b.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049c0:	d004      	beq.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10f      	bne.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80049cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80049d0:	f7ff ff1e 	bl	8004810 <LL_ADC_IsEnabled>
 80049d4:	4604      	mov	r4, r0
 80049d6:	481f      	ldr	r0, [pc, #124]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049d8:	f7ff ff1a 	bl	8004810 <LL_ADC_IsEnabled>
 80049dc:	4603      	mov	r3, r0
 80049de:	4323      	orrs	r3, r4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e012      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80049ec:	481a      	ldr	r0, [pc, #104]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049ee:	f7ff ff0f 	bl	8004810 <LL_ADC_IsEnabled>
 80049f2:	4604      	mov	r4, r0
 80049f4:	4819      	ldr	r0, [pc, #100]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049f6:	f7ff ff0b 	bl	8004810 <LL_ADC_IsEnabled>
 80049fa:	4603      	mov	r3, r0
 80049fc:	431c      	orrs	r4, r3
 80049fe:	481a      	ldr	r0, [pc, #104]	@ (8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a00:	f7ff ff06 	bl	8004810 <LL_ADC_IsEnabled>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4323      	orrs	r3, r4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d012      	beq.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a1e:	f023 030f 	bic.w	r3, r3, #15
 8004a22:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a26:	e009      	b.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a3a:	e000      	b.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a46:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3784      	adds	r7, #132	@ 0x84
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd90      	pop	{r4, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	50000100 	.word	0x50000100
 8004a58:	50000400 	.word	0x50000400
 8004a5c:	50000500 	.word	0x50000500
 8004a60:	50000300 	.word	0x50000300
 8004a64:	50000700 	.word	0x50000700
 8004a68:	50000600 	.word	0x50000600

08004a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a9e:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	60d3      	str	r3, [r2, #12]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab8:	4b04      	ldr	r3, [pc, #16]	@ (8004acc <__NVIC_GetPriorityGrouping+0x18>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f003 0307 	and.w	r3, r3, #7
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000ed00 	.word	0xe000ed00

08004ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	db0b      	blt.n	8004afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	4907      	ldr	r1, [pc, #28]	@ (8004b08 <__NVIC_EnableIRQ+0x38>)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	2001      	movs	r0, #1
 8004af2:	fa00 f202 	lsl.w	r2, r0, r2
 8004af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000e100 	.word	0xe000e100

08004b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	6039      	str	r1, [r7, #0]
 8004b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	db0a      	blt.n	8004b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	490c      	ldr	r1, [pc, #48]	@ (8004b58 <__NVIC_SetPriority+0x4c>)
 8004b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2a:	0112      	lsls	r2, r2, #4
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	440b      	add	r3, r1
 8004b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b34:	e00a      	b.n	8004b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4908      	ldr	r1, [pc, #32]	@ (8004b5c <__NVIC_SetPriority+0x50>)
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	3b04      	subs	r3, #4
 8004b44:	0112      	lsls	r2, r2, #4
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	440b      	add	r3, r1
 8004b4a:	761a      	strb	r2, [r3, #24]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000e100 	.word	0xe000e100
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f1c3 0307 	rsb	r3, r3, #7
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	bf28      	it	cs
 8004b7e:	2304      	movcs	r3, #4
 8004b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3304      	adds	r3, #4
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d902      	bls.n	8004b90 <NVIC_EncodePriority+0x30>
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3b03      	subs	r3, #3
 8004b8e:	e000      	b.n	8004b92 <NVIC_EncodePriority+0x32>
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	43d9      	mvns	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	4313      	orrs	r3, r2
         );
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3724      	adds	r7, #36	@ 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd8:	d301      	bcc.n	8004bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e00f      	b.n	8004bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bde:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <SysTick_Config+0x40>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004be6:	210f      	movs	r1, #15
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bec:	f7ff ff8e 	bl	8004b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <SysTick_Config+0x40>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bf6:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <SysTick_Config+0x40>)
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	e000e010 	.word	0xe000e010

08004c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff29 	bl	8004a6c <__NVIC_SetPriorityGrouping>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	4603      	mov	r3, r0
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c30:	f7ff ff40 	bl	8004ab4 <__NVIC_GetPriorityGrouping>
 8004c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f7ff ff90 	bl	8004b60 <NVIC_EncodePriority>
 8004c40:	4602      	mov	r2, r0
 8004c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff5f 	bl	8004b0c <__NVIC_SetPriority>
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ff33 	bl	8004ad0 <__NVIC_EnableIRQ>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ffa4 	bl	8004bc8 <SysTick_Config>
 8004c80:	4603      	mov	r3, r0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e08d      	b.n	8004dba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4b47      	ldr	r3, [pc, #284]	@ (8004dc4 <HAL_DMA_Init+0x138>)
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d80f      	bhi.n	8004cca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b45      	ldr	r3, [pc, #276]	@ (8004dc8 <HAL_DMA_Init+0x13c>)
 8004cb2:	4413      	add	r3, r2
 8004cb4:	4a45      	ldr	r2, [pc, #276]	@ (8004dcc <HAL_DMA_Init+0x140>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	009a      	lsls	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a42      	ldr	r2, [pc, #264]	@ (8004dd0 <HAL_DMA_Init+0x144>)
 8004cc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cc8:	e00e      	b.n	8004ce8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b40      	ldr	r3, [pc, #256]	@ (8004dd4 <HAL_DMA_Init+0x148>)
 8004cd2:	4413      	add	r3, r2
 8004cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8004dcc <HAL_DMA_Init+0x140>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	009a      	lsls	r2, r3, #2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8004dd8 <HAL_DMA_Init+0x14c>)
 8004ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa82 	bl	8005244 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d48:	d102      	bne.n	8004d50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d010      	beq.n	8004d90 <HAL_DMA_Init+0x104>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d80c      	bhi.n	8004d90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 faa2 	bl	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	e008      	b.n	8004da2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40020407 	.word	0x40020407
 8004dc8:	bffdfff8 	.word	0xbffdfff8
 8004dcc:	cccccccd 	.word	0xcccccccd
 8004dd0:	40020000 	.word	0x40020000
 8004dd4:	bffdfbf8 	.word	0xbffdfbf8
 8004dd8:	40020400 	.word	0x40020400

08004ddc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_DMA_Start_IT+0x20>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e066      	b.n	8004eca <HAL_DMA_Start_IT+0xee>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d155      	bne.n	8004ebc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f9c7 	bl	80051c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 020e 	orr.w	r2, r2, #14
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e00f      	b.n	8004e74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 020a 	orr.w	r2, r2, #10
 8004e72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ea8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e005      	b.n	8004ec8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d005      	beq.n	8004ef6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e037      	b.n	8004f66 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 020e 	bic.w	r2, r2, #14
 8004f04:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f14:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2a:	f003 021f 	and.w	r2, r3, #31
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	2101      	movs	r1, #1
 8004f34:	fa01 f202 	lsl.w	r2, r1, r2
 8004f38:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f42:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f5a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f64:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
 8004fb6:	e047      	b.n	8005048 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 020e 	bic.w	r2, r2, #14
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fec:	f003 021f 	and.w	r2, r3, #31
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005004:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00c      	beq.n	8005028 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800501c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005026:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
    }
  }
  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2204      	movs	r2, #4
 8005074:	409a      	lsls	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d026      	beq.n	80050cc <HAL_DMA_IRQHandler+0x7a>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d021      	beq.n	80050cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0204 	bic.w	r2, r2, #4
 80050a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	f003 021f 	and.w	r2, r3, #31
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	2104      	movs	r1, #4
 80050b4:	fa01 f202 	lsl.w	r2, r1, r2
 80050b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d071      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050ca:	e06c      	b.n	80051a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2202      	movs	r2, #2
 80050d6:	409a      	lsls	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d02e      	beq.n	800513e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d029      	beq.n	800513e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 020a 	bic.w	r2, r2, #10
 8005106:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005114:	f003 021f 	and.w	r2, r3, #31
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	2102      	movs	r1, #2
 800511e:	fa01 f202 	lsl.w	r2, r1, r2
 8005122:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d038      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800513c:	e033      	b.n	80051a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2208      	movs	r2, #8
 8005148:	409a      	lsls	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d02a      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d025      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 020e 	bic.w	r2, r2, #14
 800516a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005170:	f003 021f 	and.w	r2, r3, #31
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	2101      	movs	r1, #1
 800517a:	fa01 f202 	lsl.w	r2, r1, r2
 800517e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
}
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f6:	f003 021f 	and.w	r2, r3, #31
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	2101      	movs	r1, #1
 8005200:	fa01 f202 	lsl.w	r2, r1, r2
 8005204:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b10      	cmp	r3, #16
 8005214:	d108      	bne.n	8005228 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005226:	e007      	b.n	8005238 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	4b16      	ldr	r3, [pc, #88]	@ (80052ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005254:	429a      	cmp	r2, r3
 8005256:	d802      	bhi.n	800525e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005258:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e001      	b.n	8005262 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800525e:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005260:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	3b08      	subs	r3, #8
 800526e:	4a12      	ldr	r2, [pc, #72]	@ (80052b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527c:	089b      	lsrs	r3, r3, #2
 800527e:	009a      	lsls	r2, r3, #2
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4413      	add	r3, r2
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a0b      	ldr	r2, [pc, #44]	@ (80052bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800528e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2201      	movs	r2, #1
 8005298:	409a      	lsls	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40020407 	.word	0x40020407
 80052b0:	40020800 	.word	0x40020800
 80052b4:	40020820 	.word	0x40020820
 80052b8:	cccccccd 	.word	0xcccccccd
 80052bc:	40020880 	.word	0x40020880

080052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	461a      	mov	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a08      	ldr	r2, [pc, #32]	@ (8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80052e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	1000823f 	.word	0x1000823f
 8005304:	40020940 	.word	0x40020940

08005308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005316:	e15a      	b.n	80055ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	2101      	movs	r1, #1
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 814c 	beq.w	80055c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d005      	beq.n	8005348 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005344:	2b02      	cmp	r3, #2
 8005346:	d130      	bne.n	80053aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	2203      	movs	r2, #3
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4013      	ands	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800537e:	2201      	movs	r2, #1
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4013      	ands	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	f003 0201 	and.w	r2, r3, #1
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d017      	beq.n	80053e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	2203      	movs	r2, #3
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	43db      	mvns	r3, r3
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4013      	ands	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d123      	bne.n	800543a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	08da      	lsrs	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3208      	adds	r2, #8
 80053fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	220f      	movs	r2, #15
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4013      	ands	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	08da      	lsrs	r2, r3, #3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3208      	adds	r2, #8
 8005434:	6939      	ldr	r1, [r7, #16]
 8005436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	2203      	movs	r2, #3
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4013      	ands	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 0203 	and.w	r2, r3, #3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80a6 	beq.w	80055c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800547c:	4b5b      	ldr	r3, [pc, #364]	@ (80055ec <HAL_GPIO_Init+0x2e4>)
 800547e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005480:	4a5a      	ldr	r2, [pc, #360]	@ (80055ec <HAL_GPIO_Init+0x2e4>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	6613      	str	r3, [r2, #96]	@ 0x60
 8005488:	4b58      	ldr	r3, [pc, #352]	@ (80055ec <HAL_GPIO_Init+0x2e4>)
 800548a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005494:	4a56      	ldr	r2, [pc, #344]	@ (80055f0 <HAL_GPIO_Init+0x2e8>)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	3302      	adds	r3, #2
 800549c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	220f      	movs	r2, #15
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4013      	ands	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80054be:	d01f      	beq.n	8005500 <HAL_GPIO_Init+0x1f8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a4c      	ldr	r2, [pc, #304]	@ (80055f4 <HAL_GPIO_Init+0x2ec>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d019      	beq.n	80054fc <HAL_GPIO_Init+0x1f4>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a4b      	ldr	r2, [pc, #300]	@ (80055f8 <HAL_GPIO_Init+0x2f0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_GPIO_Init+0x1f0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a4a      	ldr	r2, [pc, #296]	@ (80055fc <HAL_GPIO_Init+0x2f4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00d      	beq.n	80054f4 <HAL_GPIO_Init+0x1ec>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a49      	ldr	r2, [pc, #292]	@ (8005600 <HAL_GPIO_Init+0x2f8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <HAL_GPIO_Init+0x1e8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a48      	ldr	r2, [pc, #288]	@ (8005604 <HAL_GPIO_Init+0x2fc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d101      	bne.n	80054ec <HAL_GPIO_Init+0x1e4>
 80054e8:	2305      	movs	r3, #5
 80054ea:	e00a      	b.n	8005502 <HAL_GPIO_Init+0x1fa>
 80054ec:	2306      	movs	r3, #6
 80054ee:	e008      	b.n	8005502 <HAL_GPIO_Init+0x1fa>
 80054f0:	2304      	movs	r3, #4
 80054f2:	e006      	b.n	8005502 <HAL_GPIO_Init+0x1fa>
 80054f4:	2303      	movs	r3, #3
 80054f6:	e004      	b.n	8005502 <HAL_GPIO_Init+0x1fa>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e002      	b.n	8005502 <HAL_GPIO_Init+0x1fa>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <HAL_GPIO_Init+0x1fa>
 8005500:	2300      	movs	r3, #0
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	f002 0203 	and.w	r2, r2, #3
 8005508:	0092      	lsls	r2, r2, #2
 800550a:	4093      	lsls	r3, r2
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005512:	4937      	ldr	r1, [pc, #220]	@ (80055f0 <HAL_GPIO_Init+0x2e8>)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	3302      	adds	r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005520:	4b39      	ldr	r3, [pc, #228]	@ (8005608 <HAL_GPIO_Init+0x300>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	43db      	mvns	r3, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005544:	4a30      	ldr	r2, [pc, #192]	@ (8005608 <HAL_GPIO_Init+0x300>)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800554a:	4b2f      	ldr	r3, [pc, #188]	@ (8005608 <HAL_GPIO_Init+0x300>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	43db      	mvns	r3, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4013      	ands	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800556e:	4a26      	ldr	r2, [pc, #152]	@ (8005608 <HAL_GPIO_Init+0x300>)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005574:	4b24      	ldr	r3, [pc, #144]	@ (8005608 <HAL_GPIO_Init+0x300>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	43db      	mvns	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005598:	4a1b      	ldr	r2, [pc, #108]	@ (8005608 <HAL_GPIO_Init+0x300>)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800559e:	4b1a      	ldr	r3, [pc, #104]	@ (8005608 <HAL_GPIO_Init+0x300>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055c2:	4a11      	ldr	r2, [pc, #68]	@ (8005608 <HAL_GPIO_Init+0x300>)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	3301      	adds	r3, #1
 80055cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f47f ae9d 	bne.w	8005318 <HAL_GPIO_Init+0x10>
  }
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40010000 	.word	0x40010000
 80055f4:	48000400 	.word	0x48000400
 80055f8:	48000800 	.word	0x48000800
 80055fc:	48000c00 	.word	0x48000c00
 8005600:	48001000 	.word	0x48001000
 8005604:	48001400 	.word	0x48001400
 8005608:	40010400 	.word	0x40010400

0800560c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	807b      	strh	r3, [r7, #2]
 8005618:	4613      	mov	r3, r2
 800561a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800561c:	787b      	ldrb	r3, [r7, #1]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005622:	887a      	ldrh	r2, [r7, #2]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005628:	e002      	b.n	8005630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005646:	4b08      	ldr	r3, [pc, #32]	@ (8005668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	4013      	ands	r3, r2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d006      	beq.n	8005660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005652:	4a05      	ldr	r2, [pc, #20]	@ (8005668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc ff4e 	bl	80024fc <HAL_GPIO_EXTI_Callback>
  }
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40010400 	.word	0x40010400

0800566c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d141      	bne.n	80056fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800567a:	4b4b      	ldr	r3, [pc, #300]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005686:	d131      	bne.n	80056ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005688:	4b47      	ldr	r3, [pc, #284]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800568e:	4a46      	ldr	r2, [pc, #280]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005694:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005698:	4b43      	ldr	r3, [pc, #268]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056a0:	4a41      	ldr	r2, [pc, #260]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056a8:	4b40      	ldr	r3, [pc, #256]	@ (80057ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2232      	movs	r2, #50	@ 0x32
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
 80056b2:	4a3f      	ldr	r2, [pc, #252]	@ (80057b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	0c9b      	lsrs	r3, r3, #18
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056be:	e002      	b.n	80056c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056c6:	4b38      	ldr	r3, [pc, #224]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d2:	d102      	bne.n	80056da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f2      	bne.n	80056c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056da:	4b33      	ldr	r3, [pc, #204]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e6:	d158      	bne.n	800579a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e057      	b.n	800579c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056ec:	4b2e      	ldr	r3, [pc, #184]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056f2:	4a2d      	ldr	r2, [pc, #180]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80056fc:	e04d      	b.n	800579a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005704:	d141      	bne.n	800578a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005706:	4b28      	ldr	r3, [pc, #160]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800570e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005712:	d131      	bne.n	8005778 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005714:	4b24      	ldr	r3, [pc, #144]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800571a:	4a23      	ldr	r2, [pc, #140]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005720:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005724:	4b20      	ldr	r3, [pc, #128]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800572c:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005734:	4b1d      	ldr	r3, [pc, #116]	@ (80057ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2232      	movs	r2, #50	@ 0x32
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	4a1c      	ldr	r2, [pc, #112]	@ (80057b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
 8005744:	0c9b      	lsrs	r3, r3, #18
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800574a:	e002      	b.n	8005752 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3b01      	subs	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005752:	4b15      	ldr	r3, [pc, #84]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575e:	d102      	bne.n	8005766 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f2      	bne.n	800574c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005766:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800576e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005772:	d112      	bne.n	800579a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e011      	b.n	800579c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005778:	4b0b      	ldr	r3, [pc, #44]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800577e:	4a0a      	ldr	r2, [pc, #40]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005788:	e007      	b.n	800579a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800578a:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005792:	4a05      	ldr	r2, [pc, #20]	@ (80057a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005794:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005798:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40007000 	.word	0x40007000
 80057ac:	20000208 	.word	0x20000208
 80057b0:	431bde83 	.word	0x431bde83

080057b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a04      	ldr	r2, [pc, #16]	@ (80057d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057c2:	6093      	str	r3, [r2, #8]
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40007000 	.word	0x40007000

080057d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e2fe      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d075      	beq.n	80058de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057f2:	4b97      	ldr	r3, [pc, #604]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 030c 	and.w	r3, r3, #12
 80057fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057fc:	4b94      	ldr	r3, [pc, #592]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	2b0c      	cmp	r3, #12
 800580a:	d102      	bne.n	8005812 <HAL_RCC_OscConfig+0x3e>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d002      	beq.n	8005818 <HAL_RCC_OscConfig+0x44>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b08      	cmp	r3, #8
 8005816:	d10b      	bne.n	8005830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005818:	4b8d      	ldr	r3, [pc, #564]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d05b      	beq.n	80058dc <HAL_RCC_OscConfig+0x108>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d157      	bne.n	80058dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e2d9      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005838:	d106      	bne.n	8005848 <HAL_RCC_OscConfig+0x74>
 800583a:	4b85      	ldr	r3, [pc, #532]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a84      	ldr	r2, [pc, #528]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	e01d      	b.n	8005884 <HAL_RCC_OscConfig+0xb0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005850:	d10c      	bne.n	800586c <HAL_RCC_OscConfig+0x98>
 8005852:	4b7f      	ldr	r3, [pc, #508]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a7e      	ldr	r2, [pc, #504]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a7b      	ldr	r2, [pc, #492]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	e00b      	b.n	8005884 <HAL_RCC_OscConfig+0xb0>
 800586c:	4b78      	ldr	r3, [pc, #480]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a77      	ldr	r2, [pc, #476]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	4b75      	ldr	r3, [pc, #468]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a74      	ldr	r2, [pc, #464]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800587e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d013      	beq.n	80058b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fd fe02 	bl	8003494 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005894:	f7fd fdfe 	bl	8003494 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b64      	cmp	r3, #100	@ 0x64
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e29e      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0xc0>
 80058b2:	e014      	b.n	80058de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b4:	f7fd fdee 	bl	8003494 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058bc:	f7fd fdea 	bl	8003494 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b64      	cmp	r3, #100	@ 0x64
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e28a      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058ce:	4b60      	ldr	r3, [pc, #384]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f0      	bne.n	80058bc <HAL_RCC_OscConfig+0xe8>
 80058da:	e000      	b.n	80058de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d075      	beq.n	80059d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ea:	4b59      	ldr	r3, [pc, #356]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058f4:	4b56      	ldr	r3, [pc, #344]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d102      	bne.n	800590a <HAL_RCC_OscConfig+0x136>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d002      	beq.n	8005910 <HAL_RCC_OscConfig+0x13c>
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d11f      	bne.n	8005950 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005910:	4b4f      	ldr	r3, [pc, #316]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_OscConfig+0x154>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e25d      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005928:	4b49      	ldr	r3, [pc, #292]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	4946      	ldr	r1, [pc, #280]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005938:	4313      	orrs	r3, r2
 800593a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800593c:	4b45      	ldr	r3, [pc, #276]	@ (8005a54 <HAL_RCC_OscConfig+0x280>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f7fd fd5b 	bl	80033fc <HAL_InitTick>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d043      	beq.n	80059d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e249      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d023      	beq.n	80059a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005958:	4b3d      	ldr	r3, [pc, #244]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800595e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fd fd96 	bl	8003494 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800596c:	f7fd fd92 	bl	8003494 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e232      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800597e:	4b34      	ldr	r3, [pc, #208]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598a:	4b31      	ldr	r3, [pc, #196]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	061b      	lsls	r3, r3, #24
 8005998:	492d      	ldr	r1, [pc, #180]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 800599a:	4313      	orrs	r3, r2
 800599c:	604b      	str	r3, [r1, #4]
 800599e:	e01a      	b.n	80059d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80059a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fd fd72 	bl	8003494 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b4:	f7fd fd6e 	bl	8003494 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e20e      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059c6:	4b22      	ldr	r3, [pc, #136]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x1e0>
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d041      	beq.n	8005a66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01c      	beq.n	8005a24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ea:	4b19      	ldr	r3, [pc, #100]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80059ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f0:	4a17      	ldr	r2, [pc, #92]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fa:	f7fd fd4b 	bl	8003494 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a02:	f7fd fd47 	bl	8003494 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e1e7      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a14:	4b0e      	ldr	r3, [pc, #56]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0ef      	beq.n	8005a02 <HAL_RCC_OscConfig+0x22e>
 8005a22:	e020      	b.n	8005a66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a24:	4b0a      	ldr	r3, [pc, #40]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a2a:	4a09      	ldr	r2, [pc, #36]	@ (8005a50 <HAL_RCC_OscConfig+0x27c>)
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fd fd2e 	bl	8003494 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a3a:	e00d      	b.n	8005a58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3c:	f7fd fd2a 	bl	8003494 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d906      	bls.n	8005a58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e1ca      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000
 8005a54:	2000020c 	.word	0x2000020c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a58:	4b8c      	ldr	r3, [pc, #560]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1ea      	bne.n	8005a3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80a6 	beq.w	8005bc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a74:	2300      	movs	r3, #0
 8005a76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a78:	4b84      	ldr	r3, [pc, #528]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_OscConfig+0x2b4>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_RCC_OscConfig+0x2b6>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a92:	4a7e      	ldr	r2, [pc, #504]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aaa:	4b79      	ldr	r3, [pc, #484]	@ (8005c90 <HAL_RCC_OscConfig+0x4bc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d118      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ab6:	4b76      	ldr	r3, [pc, #472]	@ (8005c90 <HAL_RCC_OscConfig+0x4bc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a75      	ldr	r2, [pc, #468]	@ (8005c90 <HAL_RCC_OscConfig+0x4bc>)
 8005abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac2:	f7fd fce7 	bl	8003494 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aca:	f7fd fce3 	bl	8003494 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e183      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005adc:	4b6c      	ldr	r3, [pc, #432]	@ (8005c90 <HAL_RCC_OscConfig+0x4bc>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d108      	bne.n	8005b02 <HAL_RCC_OscConfig+0x32e>
 8005af0:	4b66      	ldr	r3, [pc, #408]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	4a65      	ldr	r2, [pc, #404]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b00:	e024      	b.n	8005b4c <HAL_RCC_OscConfig+0x378>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b05      	cmp	r3, #5
 8005b08:	d110      	bne.n	8005b2c <HAL_RCC_OscConfig+0x358>
 8005b0a:	4b60      	ldr	r3, [pc, #384]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b10:	4a5e      	ldr	r2, [pc, #376]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b12:	f043 0304 	orr.w	r3, r3, #4
 8005b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b20:	4a5a      	ldr	r2, [pc, #360]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b2a:	e00f      	b.n	8005b4c <HAL_RCC_OscConfig+0x378>
 8005b2c:	4b57      	ldr	r3, [pc, #348]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b32:	4a56      	ldr	r2, [pc, #344]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b3c:	4b53      	ldr	r3, [pc, #332]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b42:	4a52      	ldr	r2, [pc, #328]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d016      	beq.n	8005b82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b54:	f7fd fc9e 	bl	8003494 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b5a:	e00a      	b.n	8005b72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5c:	f7fd fc9a 	bl	8003494 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e138      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b72:	4b46      	ldr	r3, [pc, #280]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0ed      	beq.n	8005b5c <HAL_RCC_OscConfig+0x388>
 8005b80:	e015      	b.n	8005bae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b82:	f7fd fc87 	bl	8003494 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b88:	e00a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fd fc83 	bl	8003494 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e121      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ed      	bne.n	8005b8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb4:	4b35      	ldr	r3, [pc, #212]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	4a34      	ldr	r2, [pc, #208]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d03c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01c      	beq.n	8005c0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bda:	4a2c      	ldr	r2, [pc, #176]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fd fc56 	bl	8003494 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bec:	f7fd fc52 	bl	8003494 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e0f2      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bfe:	4b23      	ldr	r3, [pc, #140]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ef      	beq.n	8005bec <HAL_RCC_OscConfig+0x418>
 8005c0c:	e01b      	b.n	8005c46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c14:	4a1d      	ldr	r2, [pc, #116]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1e:	f7fd fc39 	bl	8003494 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c26:	f7fd fc35 	bl	8003494 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e0d5      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c38:	4b14      	ldr	r3, [pc, #80]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1ef      	bne.n	8005c26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 80c9 	beq.w	8005de2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c50:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 030c 	and.w	r3, r3, #12
 8005c58:	2b0c      	cmp	r3, #12
 8005c5a:	f000 8083 	beq.w	8005d64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d15e      	bne.n	8005d24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c66:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a08      	ldr	r2, [pc, #32]	@ (8005c8c <HAL_RCC_OscConfig+0x4b8>)
 8005c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c72:	f7fd fc0f 	bl	8003494 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c78:	e00c      	b.n	8005c94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7a:	f7fd fc0b 	bl	8003494 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d905      	bls.n	8005c94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e0ab      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c94:	4b55      	ldr	r3, [pc, #340]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ec      	bne.n	8005c7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ca0:	4b52      	ldr	r3, [pc, #328]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	4b52      	ldr	r3, [pc, #328]	@ (8005df0 <HAL_RCC_OscConfig+0x61c>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6a11      	ldr	r1, [r2, #32]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cb0:	3a01      	subs	r2, #1
 8005cb2:	0112      	lsls	r2, r2, #4
 8005cb4:	4311      	orrs	r1, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005cba:	0212      	lsls	r2, r2, #8
 8005cbc:	4311      	orrs	r1, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cc2:	0852      	lsrs	r2, r2, #1
 8005cc4:	3a01      	subs	r2, #1
 8005cc6:	0552      	lsls	r2, r2, #21
 8005cc8:	4311      	orrs	r1, r2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cce:	0852      	lsrs	r2, r2, #1
 8005cd0:	3a01      	subs	r2, #1
 8005cd2:	0652      	lsls	r2, r2, #25
 8005cd4:	4311      	orrs	r1, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cda:	06d2      	lsls	r2, r2, #27
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	4943      	ldr	r1, [pc, #268]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ce4:	4b41      	ldr	r3, [pc, #260]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a40      	ldr	r2, [pc, #256]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fd fbca 	bl	8003494 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fd fbc6 	bl	8003494 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e066      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d16:	4b35      	ldr	r3, [pc, #212]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0x530>
 8005d22:	e05e      	b.n	8005de2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d24:	4b31      	ldr	r3, [pc, #196]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a30      	ldr	r2, [pc, #192]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fd fbb0 	bl	8003494 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d38:	f7fd fbac 	bl	8003494 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e04c      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d4a:	4b28      	ldr	r3, [pc, #160]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d56:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	4924      	ldr	r1, [pc, #144]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005d5c:	4b25      	ldr	r3, [pc, #148]	@ (8005df4 <HAL_RCC_OscConfig+0x620>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	60cb      	str	r3, [r1, #12]
 8005d62:	e03e      	b.n	8005de2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e039      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d70:	4b1e      	ldr	r3, [pc, #120]	@ (8005dec <HAL_RCC_OscConfig+0x618>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f003 0203 	and.w	r2, r3, #3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d12c      	bne.n	8005dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d123      	bne.n	8005dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d11b      	bne.n	8005dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d113      	bne.n	8005dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d109      	bne.n	8005dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d001      	beq.n	8005de2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40021000 	.word	0x40021000
 8005df0:	019f800c 	.word	0x019f800c
 8005df4:	feeefffc 	.word	0xfeeefffc

08005df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e11e      	b.n	800604e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e10:	4b91      	ldr	r3, [pc, #580]	@ (8006058 <HAL_RCC_ClockConfig+0x260>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d910      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1e:	4b8e      	ldr	r3, [pc, #568]	@ (8006058 <HAL_RCC_ClockConfig+0x260>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f023 020f 	bic.w	r2, r3, #15
 8005e26:	498c      	ldr	r1, [pc, #560]	@ (8006058 <HAL_RCC_ClockConfig+0x260>)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8006058 <HAL_RCC_ClockConfig+0x260>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e106      	b.n	800604e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d073      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d129      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e54:	4b81      	ldr	r3, [pc, #516]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0f4      	b.n	800604e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e64:	f000 f99e 	bl	80061a4 <RCC_GetSysClockFreqFromPLLSource>
 8005e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4a7c      	ldr	r2, [pc, #496]	@ (8006060 <HAL_RCC_ClockConfig+0x268>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d93f      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e72:	4b7a      	ldr	r3, [pc, #488]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d033      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d12f      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e92:	4b72      	ldr	r3, [pc, #456]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e9a:	4a70      	ldr	r2, [pc, #448]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ea2:	2380      	movs	r3, #128	@ 0x80
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e024      	b.n	8005ef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0c6      	b.n	800604e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ec0:	4b66      	ldr	r3, [pc, #408]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0be      	b.n	800604e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ed0:	f000 f8ce 	bl	8006070 <HAL_RCC_GetSysClockFreq>
 8005ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4a61      	ldr	r2, [pc, #388]	@ (8006060 <HAL_RCC_ClockConfig+0x268>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d909      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ede:	4b5f      	ldr	r3, [pc, #380]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ee6:	4a5d      	ldr	r2, [pc, #372]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005eee:	2380      	movs	r3, #128	@ 0x80
 8005ef0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f023 0203 	bic.w	r2, r3, #3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4957      	ldr	r1, [pc, #348]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f04:	f7fd fac6 	bl	8003494 <HAL_GetTick>
 8005f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0a:	e00a      	b.n	8005f22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f0c:	f7fd fac2 	bl	8003494 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e095      	b.n	800604e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f22:	4b4e      	ldr	r3, [pc, #312]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 020c 	and.w	r2, r3, #12
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d1eb      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d023      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f4c:	4b43      	ldr	r3, [pc, #268]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	4a42      	ldr	r2, [pc, #264]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f64:	4b3d      	ldr	r3, [pc, #244]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f6c:	4a3b      	ldr	r2, [pc, #236]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f74:	4b39      	ldr	r3, [pc, #228]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4936      	ldr	r1, [pc, #216]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b80      	cmp	r3, #128	@ 0x80
 8005f8c:	d105      	bne.n	8005f9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f8e:	4b33      	ldr	r3, [pc, #204]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	4a32      	ldr	r2, [pc, #200]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005f94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8006058 <HAL_RCC_ClockConfig+0x260>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d21d      	bcs.n	8005fe4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8006058 <HAL_RCC_ClockConfig+0x260>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 020f 	bic.w	r2, r3, #15
 8005fb0:	4929      	ldr	r1, [pc, #164]	@ (8006058 <HAL_RCC_ClockConfig+0x260>)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fb8:	f7fd fa6c 	bl	8003494 <HAL_GetTick>
 8005fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	e00a      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc0:	f7fd fa68 	bl	8003494 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e03b      	b.n	800604e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b20      	ldr	r3, [pc, #128]	@ (8006058 <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d1ed      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	4917      	ldr	r1, [pc, #92]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800600e:	4b13      	ldr	r3, [pc, #76]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	490f      	ldr	r1, [pc, #60]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006022:	f000 f825 	bl	8006070 <HAL_RCC_GetSysClockFreq>
 8006026:	4602      	mov	r2, r0
 8006028:	4b0c      	ldr	r3, [pc, #48]	@ (800605c <HAL_RCC_ClockConfig+0x264>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	091b      	lsrs	r3, r3, #4
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	490c      	ldr	r1, [pc, #48]	@ (8006064 <HAL_RCC_ClockConfig+0x26c>)
 8006034:	5ccb      	ldrb	r3, [r1, r3]
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	fa22 f303 	lsr.w	r3, r2, r3
 800603e:	4a0a      	ldr	r2, [pc, #40]	@ (8006068 <HAL_RCC_ClockConfig+0x270>)
 8006040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <HAL_RCC_ClockConfig+0x274>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f7fd f9d8 	bl	80033fc <HAL_InitTick>
 800604c:	4603      	mov	r3, r0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40022000 	.word	0x40022000
 800605c:	40021000 	.word	0x40021000
 8006060:	04c4b400 	.word	0x04c4b400
 8006064:	0800c650 	.word	0x0800c650
 8006068:	20000208 	.word	0x20000208
 800606c:	2000020c 	.word	0x2000020c

08006070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006076:	4b2c      	ldr	r3, [pc, #176]	@ (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 030c 	and.w	r3, r3, #12
 800607e:	2b04      	cmp	r3, #4
 8006080:	d102      	bne.n	8006088 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006082:	4b2a      	ldr	r3, [pc, #168]	@ (800612c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	e047      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006088:	4b27      	ldr	r3, [pc, #156]	@ (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 030c 	and.w	r3, r3, #12
 8006090:	2b08      	cmp	r3, #8
 8006092:	d102      	bne.n	800609a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006094:	4b26      	ldr	r3, [pc, #152]	@ (8006130 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	e03e      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800609a:	4b23      	ldr	r3, [pc, #140]	@ (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 030c 	and.w	r3, r3, #12
 80060a2:	2b0c      	cmp	r3, #12
 80060a4:	d136      	bne.n	8006114 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060a6:	4b20      	ldr	r3, [pc, #128]	@ (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	3301      	adds	r3, #1
 80060bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d10c      	bne.n	80060de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006130 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	4a16      	ldr	r2, [pc, #88]	@ (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060ce:	68d2      	ldr	r2, [r2, #12]
 80060d0:	0a12      	lsrs	r2, r2, #8
 80060d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	617b      	str	r3, [r7, #20]
      break;
 80060dc:	e00c      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060de:	4a13      	ldr	r2, [pc, #76]	@ (800612c <HAL_RCC_GetSysClockFreq+0xbc>)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e6:	4a10      	ldr	r2, [pc, #64]	@ (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060e8:	68d2      	ldr	r2, [r2, #12]
 80060ea:	0a12      	lsrs	r2, r2, #8
 80060ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060f0:	fb02 f303 	mul.w	r3, r2, r3
 80060f4:	617b      	str	r3, [r7, #20]
      break;
 80060f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	0e5b      	lsrs	r3, r3, #25
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	3301      	adds	r3, #1
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	e001      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006118:	693b      	ldr	r3, [r7, #16]
}
 800611a:	4618      	mov	r0, r3
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40021000 	.word	0x40021000
 800612c:	00f42400 	.word	0x00f42400
 8006130:	016e3600 	.word	0x016e3600

08006134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006138:	4b03      	ldr	r3, [pc, #12]	@ (8006148 <HAL_RCC_GetHCLKFreq+0x14>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000208 	.word	0x20000208

0800614c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006150:	f7ff fff0 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4904      	ldr	r1, [pc, #16]	@ (8006174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800616c:	4618      	mov	r0, r3
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40021000 	.word	0x40021000
 8006174:	0800c660 	.word	0x0800c660

08006178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800617c:	f7ff ffda 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006180:	4602      	mov	r2, r0
 8006182:	4b06      	ldr	r3, [pc, #24]	@ (800619c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	0adb      	lsrs	r3, r3, #11
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	4904      	ldr	r1, [pc, #16]	@ (80061a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800618e:	5ccb      	ldrb	r3, [r1, r3]
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40021000 	.word	0x40021000
 80061a0:	0800c660 	.word	0x0800c660

080061a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	091b      	lsrs	r3, r3, #4
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d10c      	bne.n	80061e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061c8:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	4a14      	ldr	r2, [pc, #80]	@ (8006224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d2:	68d2      	ldr	r2, [r2, #12]
 80061d4:	0a12      	lsrs	r2, r2, #8
 80061d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061da:	fb02 f303 	mul.w	r3, r2, r3
 80061de:	617b      	str	r3, [r7, #20]
    break;
 80061e0:	e00c      	b.n	80061fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061e2:	4a12      	ldr	r2, [pc, #72]	@ (800622c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061ec:	68d2      	ldr	r2, [r2, #12]
 80061ee:	0a12      	lsrs	r2, r2, #8
 80061f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	617b      	str	r3, [r7, #20]
    break;
 80061fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061fc:	4b09      	ldr	r3, [pc, #36]	@ (8006224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	0e5b      	lsrs	r3, r3, #25
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	3301      	adds	r3, #1
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006216:	687b      	ldr	r3, [r7, #4]
}
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40021000 	.word	0x40021000
 8006228:	016e3600 	.word	0x016e3600
 800622c:	00f42400 	.word	0x00f42400

08006230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006238:	2300      	movs	r3, #0
 800623a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800623c:	2300      	movs	r3, #0
 800623e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8098 	beq.w	800637e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006252:	4b43      	ldr	r3, [pc, #268]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10d      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800625e:	4b40      	ldr	r3, [pc, #256]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006262:	4a3f      	ldr	r2, [pc, #252]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006268:	6593      	str	r3, [r2, #88]	@ 0x58
 800626a:	4b3d      	ldr	r3, [pc, #244]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800626c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006276:	2301      	movs	r3, #1
 8006278:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800627a:	4b3a      	ldr	r3, [pc, #232]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a39      	ldr	r2, [pc, #228]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006286:	f7fd f905 	bl	8003494 <HAL_GetTick>
 800628a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628c:	e009      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800628e:	f7fd f901 	bl	8003494 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d902      	bls.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	74fb      	strb	r3, [r7, #19]
        break;
 80062a0:	e005      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062a2:	4b30      	ldr	r3, [pc, #192]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0ef      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062ae:	7cfb      	ldrb	r3, [r7, #19]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d159      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01e      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d019      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062d0:	4b23      	ldr	r3, [pc, #140]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062dc:	4b20      	ldr	r3, [pc, #128]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062fc:	4a18      	ldr	r2, [pc, #96]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d016      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630e:	f7fd f8c1 	bl	8003494 <HAL_GetTick>
 8006312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006314:	e00b      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fd f8bd 	bl	8003494 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006324:	4293      	cmp	r3, r2
 8006326:	d902      	bls.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	74fb      	strb	r3, [r7, #19]
            break;
 800632c:	e006      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800632e:	4b0c      	ldr	r3, [pc, #48]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0ec      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800633c:	7cfb      	ldrb	r3, [r7, #19]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006342:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006350:	4903      	ldr	r1, [pc, #12]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006358:	e008      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800635a:	7cfb      	ldrb	r3, [r7, #19]
 800635c:	74bb      	strb	r3, [r7, #18]
 800635e:	e005      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006360:	40021000 	.word	0x40021000
 8006364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	7cfb      	ldrb	r3, [r7, #19]
 800636a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800636c:	7c7b      	ldrb	r3, [r7, #17]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d105      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006372:	4ba7      	ldr	r3, [pc, #668]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	4aa6      	ldr	r2, [pc, #664]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800637c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800638a:	4ba1      	ldr	r3, [pc, #644]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006390:	f023 0203 	bic.w	r2, r3, #3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	499d      	ldr	r1, [pc, #628]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063ac:	4b98      	ldr	r3, [pc, #608]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b2:	f023 020c 	bic.w	r2, r3, #12
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	4995      	ldr	r1, [pc, #596]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ce:	4b90      	ldr	r3, [pc, #576]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	498c      	ldr	r1, [pc, #560]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063f0:	4b87      	ldr	r3, [pc, #540]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	4984      	ldr	r1, [pc, #528]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006412:	4b7f      	ldr	r3, [pc, #508]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	497b      	ldr	r1, [pc, #492]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006434:	4b76      	ldr	r3, [pc, #472]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	4973      	ldr	r1, [pc, #460]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006456:	4b6e      	ldr	r3, [pc, #440]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	496a      	ldr	r1, [pc, #424]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006478:	4b65      	ldr	r3, [pc, #404]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	4962      	ldr	r1, [pc, #392]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800649a:	4b5d      	ldr	r3, [pc, #372]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	4959      	ldr	r1, [pc, #356]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064bc:	4b54      	ldr	r3, [pc, #336]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064c2:	f023 0203 	bic.w	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ca:	4951      	ldr	r1, [pc, #324]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064de:	4b4c      	ldr	r3, [pc, #304]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	4948      	ldr	r1, [pc, #288]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d015      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006500:	4b43      	ldr	r3, [pc, #268]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006506:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	4940      	ldr	r1, [pc, #256]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006520:	4b3b      	ldr	r3, [pc, #236]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	4a3a      	ldr	r2, [pc, #232]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800652a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006534:	2b00      	cmp	r3, #0
 8006536:	d015      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006538:	4b35      	ldr	r3, [pc, #212]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006546:	4932      	ldr	r1, [pc, #200]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006556:	d105      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006558:	4b2d      	ldr	r3, [pc, #180]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4a2c      	ldr	r2, [pc, #176]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006562:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006570:	4b27      	ldr	r3, [pc, #156]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006576:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	4924      	ldr	r1, [pc, #144]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800658e:	d105      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006590:	4b1f      	ldr	r3, [pc, #124]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a1e      	ldr	r2, [pc, #120]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800659a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d015      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065a8:	4b19      	ldr	r3, [pc, #100]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b6:	4916      	ldr	r1, [pc, #88]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065c6:	d105      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065c8:	4b11      	ldr	r3, [pc, #68]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4a10      	ldr	r2, [pc, #64]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d019      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	4908      	ldr	r1, [pc, #32]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065fe:	d109      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006600:	4b03      	ldr	r3, [pc, #12]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4a02      	ldr	r2, [pc, #8]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800660a:	60d3      	str	r3, [r2, #12]
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800660e:	bf00      	nop
 8006610:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d015      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006620:	4b29      	ldr	r3, [pc, #164]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006626:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662e:	4926      	ldr	r1, [pc, #152]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800663e:	d105      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006640:	4b21      	ldr	r3, [pc, #132]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4a20      	ldr	r2, [pc, #128]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800664a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d015      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006658:	4b1b      	ldr	r3, [pc, #108]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006666:	4918      	ldr	r1, [pc, #96]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006676:	d105      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006678:	4b13      	ldr	r3, [pc, #76]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4a12      	ldr	r2, [pc, #72]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800667e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006682:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d015      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006690:	4b0d      	ldr	r3, [pc, #52]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006696:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800669e:	490a      	ldr	r1, [pc, #40]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066ae:	d105      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b0:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a04      	ldr	r2, [pc, #16]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000

080066cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e09d      	b.n	800681a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d108      	bne.n	80066f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ee:	d009      	beq.n	8006704 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	61da      	str	r2, [r3, #28]
 80066f6:	e005      	b.n	8006704 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fb ff7e 	bl	8002620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800673a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006744:	d902      	bls.n	800674c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	e002      	b.n	8006752 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800674c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006750:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800675a:	d007      	beq.n	800676c <HAL_SPI_Init+0xa0>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006764:	d002      	beq.n	800676c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ae:	ea42 0103 	orr.w	r1, r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	f003 0204 	and.w	r2, r3, #4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80067e8:	ea42 0103 	orr.w	r1, r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006808:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b08a      	sub	sp, #40	@ 0x28
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006830:	2301      	movs	r3, #1
 8006832:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006834:	f7fc fe2e 	bl	8003494 <HAL_GetTick>
 8006838:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006840:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006848:	887b      	ldrh	r3, [r7, #2]
 800684a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800684c:	887b      	ldrh	r3, [r7, #2]
 800684e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006850:	7ffb      	ldrb	r3, [r7, #31]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d00c      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x4e>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800685c:	d106      	bne.n	800686c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <HAL_SPI_TransmitReceive+0x4a>
 8006866:	7ffb      	ldrb	r3, [r7, #31]
 8006868:	2b04      	cmp	r3, #4
 800686a:	d001      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800686c:	2302      	movs	r3, #2
 800686e:	e1f3      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x60>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x60>
 800687c:	887b      	ldrh	r3, [r7, #2]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e1e8      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_SPI_TransmitReceive+0x72>
 8006890:	2302      	movs	r3, #2
 8006892:	e1e1      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x436>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d003      	beq.n	80068b0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2205      	movs	r2, #5
 80068ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	887a      	ldrh	r2, [r7, #2]
 80068c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	887a      	ldrh	r2, [r7, #2]
 80068c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	887a      	ldrh	r2, [r7, #2]
 80068d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	887a      	ldrh	r2, [r7, #2]
 80068dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068f2:	d802      	bhi.n	80068fa <HAL_SPI_TransmitReceive+0xd8>
 80068f4:	8abb      	ldrh	r3, [r7, #20]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d908      	bls.n	800690c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	e007      	b.n	800691c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800691a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006926:	2b40      	cmp	r3, #64	@ 0x40
 8006928:	d007      	beq.n	800693a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006938:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006942:	f240 8083 	bls.w	8006a4c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <HAL_SPI_TransmitReceive+0x132>
 800694e:	8afb      	ldrh	r3, [r7, #22]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d16f      	bne.n	8006a34 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006958:	881a      	ldrh	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	1c9a      	adds	r2, r3, #2
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006978:	e05c      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b02      	cmp	r3, #2
 8006986:	d11b      	bne.n	80069c0 <HAL_SPI_TransmitReceive+0x19e>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d016      	beq.n	80069c0 <HAL_SPI_TransmitReceive+0x19e>
 8006992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006994:	2b01      	cmp	r3, #1
 8006996:	d113      	bne.n	80069c0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	881a      	ldrh	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a8:	1c9a      	adds	r2, r3, #2
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d11c      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x1e6>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e4:	b292      	uxth	r2, r2
 80069e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ec:	1c9a      	adds	r2, r3, #2
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a04:	2301      	movs	r3, #1
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a08:	f7fc fd44 	bl	8003494 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d80d      	bhi.n	8006a34 <HAL_SPI_TransmitReceive+0x212>
 8006a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d009      	beq.n	8006a34 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e111      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d19d      	bne.n	800697a <HAL_SPI_TransmitReceive+0x158>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d197      	bne.n	800697a <HAL_SPI_TransmitReceive+0x158>
 8006a4a:	e0e5      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_SPI_TransmitReceive+0x23a>
 8006a54:	8afb      	ldrh	r3, [r7, #22]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	f040 80d1 	bne.w	8006bfe <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d912      	bls.n	8006a8c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	881a      	ldrh	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	1c9a      	adds	r2, r3, #2
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b02      	subs	r3, #2
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a8a:	e0b8      	b.n	8006bfe <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	7812      	ldrb	r2, [r2, #0]
 8006a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab2:	e0a4      	b.n	8006bfe <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d134      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x30a>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d02f      	beq.n	8006b2c <HAL_SPI_TransmitReceive+0x30a>
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d12c      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d912      	bls.n	8006b02 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	1c9a      	adds	r2, r3, #2
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b02      	subs	r3, #2
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b00:	e012      	b.n	8006b28 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	7812      	ldrb	r2, [r2, #0]
 8006b0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d148      	bne.n	8006bcc <HAL_SPI_TransmitReceive+0x3aa>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d042      	beq.n	8006bcc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d923      	bls.n	8006b9a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	b292      	uxth	r2, r2
 8006b5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b64:	1c9a      	adds	r2, r3, #2
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b02      	subs	r3, #2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d81f      	bhi.n	8006bc8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b96:	605a      	str	r2, [r3, #4]
 8006b98:	e016      	b.n	8006bc8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f103 020c 	add.w	r2, r3, #12
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba6:	7812      	ldrb	r2, [r2, #0]
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bcc:	f7fc fc62 	bl	8003494 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d803      	bhi.n	8006be4 <HAL_SPI_TransmitReceive+0x3c2>
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d102      	bne.n	8006bea <HAL_SPI_TransmitReceive+0x3c8>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e02c      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f47f af55 	bne.w	8006ab4 <HAL_SPI_TransmitReceive+0x292>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f47f af4e 	bne.w	8006ab4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c18:	6a3a      	ldr	r2, [r7, #32]
 8006c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 f93d 	bl	8006e9c <SPI_EndRxTxTransaction>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e00e      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006c56:	2300      	movs	r3, #0
  }
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3728      	adds	r7, #40	@ 0x28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c70:	f7fc fc10 	bl	8003494 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c78:	1a9b      	subs	r3, r3, r2
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c80:	f7fc fc08 	bl	8003494 <HAL_GetTick>
 8006c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c86:	4b39      	ldr	r3, [pc, #228]	@ (8006d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	015b      	lsls	r3, r3, #5
 8006c8c:	0d1b      	lsrs	r3, r3, #20
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	fb02 f303 	mul.w	r3, r2, r3
 8006c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c96:	e054      	b.n	8006d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d050      	beq.n	8006d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ca0:	f7fc fbf8 	bl	8003494 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d902      	bls.n	8006cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d13d      	bne.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cce:	d111      	bne.n	8006cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd8:	d004      	beq.n	8006ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce2:	d107      	bne.n	8006cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cfc:	d10f      	bne.n	8006d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e017      	b.n	8006d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	bf0c      	ite	eq
 8006d52:	2301      	moveq	r3, #1
 8006d54:	2300      	movne	r3, #0
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d19b      	bne.n	8006c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000208 	.word	0x20000208

08006d70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	@ 0x28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d82:	f7fc fb87 	bl	8003494 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	4413      	add	r3, r2
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006d92:	f7fc fb7f 	bl	8003494 <HAL_GetTick>
 8006d96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006da0:	4b3d      	ldr	r3, [pc, #244]	@ (8006e98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	00da      	lsls	r2, r3, #3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	0d1b      	lsrs	r3, r3, #20
 8006db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db2:	fb02 f303 	mul.w	r3, r2, r3
 8006db6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006db8:	e060      	b.n	8006e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006dc0:	d107      	bne.n	8006dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d050      	beq.n	8006e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dda:	f7fc fb5b 	bl	8003494 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d902      	bls.n	8006df0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d13d      	bne.n	8006e6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e08:	d111      	bne.n	8006e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e12:	d004      	beq.n	8006e1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e1c:	d107      	bne.n	8006e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e36:	d10f      	bne.n	8006e58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e010      	b.n	8006e8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	4013      	ands	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d196      	bne.n	8006dba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3728      	adds	r7, #40	@ 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000208 	.word	0x20000208

08006e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff ff5b 	bl	8006d70 <SPI_WaitFifoStateUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e027      	b.n	8006f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2180      	movs	r1, #128	@ 0x80
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff fec0 	bl	8006c60 <SPI_WaitFlagStateUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eea:	f043 0220 	orr.w	r2, r3, #32
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e014      	b.n	8006f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff ff34 	bl	8006d70 <SPI_WaitFifoStateUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f12:	f043 0220 	orr.w	r2, r3, #32
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e000      	b.n	8006f20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e054      	b.n	8006fe4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d111      	bne.n	8006f6a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 ffd4 	bl	8008efc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a23      	ldr	r2, [pc, #140]	@ (8006fec <HAL_TIM_Base_Init+0xc4>)
 8006f60:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f001 fb1d 	bl	80085bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	08002ecd 	.word	0x08002ecd

08006ff0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d001      	beq.n	8007008 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e04c      	b.n	80070a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a26      	ldr	r2, [pc, #152]	@ (80070b0 <HAL_TIM_Base_Start+0xc0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d022      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007022:	d01d      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a22      	ldr	r2, [pc, #136]	@ (80070b4 <HAL_TIM_Base_Start+0xc4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d018      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a21      	ldr	r2, [pc, #132]	@ (80070b8 <HAL_TIM_Base_Start+0xc8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1f      	ldr	r2, [pc, #124]	@ (80070bc <HAL_TIM_Base_Start+0xcc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1e      	ldr	r2, [pc, #120]	@ (80070c0 <HAL_TIM_Base_Start+0xd0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1c      	ldr	r2, [pc, #112]	@ (80070c4 <HAL_TIM_Base_Start+0xd4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIM_Base_Start+0x70>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1b      	ldr	r2, [pc, #108]	@ (80070c8 <HAL_TIM_Base_Start+0xd8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d115      	bne.n	800708c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	4b19      	ldr	r3, [pc, #100]	@ (80070cc <HAL_TIM_Base_Start+0xdc>)
 8007068:	4013      	ands	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b06      	cmp	r3, #6
 8007070:	d015      	beq.n	800709e <HAL_TIM_Base_Start+0xae>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007078:	d011      	beq.n	800709e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0201 	orr.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708a:	e008      	b.n	800709e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	e000      	b.n	80070a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800
 80070bc:	40000c00 	.word	0x40000c00
 80070c0:	40013400 	.word	0x40013400
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40015000 	.word	0x40015000
 80070cc:	00010007 	.word	0x00010007

080070d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d001      	beq.n	80070e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e054      	b.n	8007192 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0201 	orr.w	r2, r2, #1
 80070fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a26      	ldr	r2, [pc, #152]	@ (80071a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d022      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x80>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007112:	d01d      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x80>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a22      	ldr	r2, [pc, #136]	@ (80071a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d018      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x80>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a21      	ldr	r2, [pc, #132]	@ (80071a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d013      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x80>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1f      	ldr	r2, [pc, #124]	@ (80071ac <HAL_TIM_Base_Start_IT+0xdc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00e      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x80>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1e      	ldr	r2, [pc, #120]	@ (80071b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d009      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x80>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1c      	ldr	r2, [pc, #112]	@ (80071b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d004      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x80>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1b      	ldr	r2, [pc, #108]	@ (80071b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d115      	bne.n	800717c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	4b19      	ldr	r3, [pc, #100]	@ (80071bc <HAL_TIM_Base_Start_IT+0xec>)
 8007158:	4013      	ands	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b06      	cmp	r3, #6
 8007160:	d015      	beq.n	800718e <HAL_TIM_Base_Start_IT+0xbe>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007168:	d011      	beq.n	800718e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0201 	orr.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717a:	e008      	b.n	800718e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e000      	b.n	8007190 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40000400 	.word	0x40000400
 80071a8:	40000800 	.word	0x40000800
 80071ac:	40000c00 	.word	0x40000c00
 80071b0:	40013400 	.word	0x40013400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40015000 	.word	0x40015000
 80071bc:	00010007 	.word	0x00010007

080071c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e054      	b.n	800727c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d111      	bne.n	8007202 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fe88 	bl	8008efc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a23      	ldr	r2, [pc, #140]	@ (8007284 <HAL_TIM_OC_Init+0xc4>)
 80071f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f001 f9d1 	bl	80085bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	08007289 	.word	0x08007289

08007288 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e054      	b.n	8007358 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d111      	bne.n	80072de <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fe1a 	bl	8008efc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d102      	bne.n	80072d6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a23      	ldr	r2, [pc, #140]	@ (8007360 <HAL_TIM_PWM_Init+0xc4>)
 80072d4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2202      	movs	r2, #2
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f001 f963 	bl	80085bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	08007365 	.word	0x08007365

08007364 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d109      	bne.n	800739c <HAL_TIM_PWM_Start+0x24>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b01      	cmp	r3, #1
 8007392:	bf14      	ite	ne
 8007394:	2301      	movne	r3, #1
 8007396:	2300      	moveq	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	e03c      	b.n	8007416 <HAL_TIM_PWM_Start+0x9e>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d109      	bne.n	80073b6 <HAL_TIM_PWM_Start+0x3e>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	bf14      	ite	ne
 80073ae:	2301      	movne	r3, #1
 80073b0:	2300      	moveq	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	e02f      	b.n	8007416 <HAL_TIM_PWM_Start+0x9e>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d109      	bne.n	80073d0 <HAL_TIM_PWM_Start+0x58>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	bf14      	ite	ne
 80073c8:	2301      	movne	r3, #1
 80073ca:	2300      	moveq	r3, #0
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	e022      	b.n	8007416 <HAL_TIM_PWM_Start+0x9e>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b0c      	cmp	r3, #12
 80073d4:	d109      	bne.n	80073ea <HAL_TIM_PWM_Start+0x72>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b01      	cmp	r3, #1
 80073e0:	bf14      	ite	ne
 80073e2:	2301      	movne	r3, #1
 80073e4:	2300      	moveq	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	e015      	b.n	8007416 <HAL_TIM_PWM_Start+0x9e>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b10      	cmp	r3, #16
 80073ee:	d109      	bne.n	8007404 <HAL_TIM_PWM_Start+0x8c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	bf14      	ite	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	2300      	moveq	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	e008      	b.n	8007416 <HAL_TIM_PWM_Start+0x9e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	bf14      	ite	ne
 8007410:	2301      	movne	r3, #1
 8007412:	2300      	moveq	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e0a6      	b.n	800756c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <HAL_TIM_PWM_Start+0xb6>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800742c:	e023      	b.n	8007476 <HAL_TIM_PWM_Start+0xfe>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b04      	cmp	r3, #4
 8007432:	d104      	bne.n	800743e <HAL_TIM_PWM_Start+0xc6>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800743c:	e01b      	b.n	8007476 <HAL_TIM_PWM_Start+0xfe>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b08      	cmp	r3, #8
 8007442:	d104      	bne.n	800744e <HAL_TIM_PWM_Start+0xd6>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800744c:	e013      	b.n	8007476 <HAL_TIM_PWM_Start+0xfe>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b0c      	cmp	r3, #12
 8007452:	d104      	bne.n	800745e <HAL_TIM_PWM_Start+0xe6>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800745c:	e00b      	b.n	8007476 <HAL_TIM_PWM_Start+0xfe>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b10      	cmp	r3, #16
 8007462:	d104      	bne.n	800746e <HAL_TIM_PWM_Start+0xf6>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800746c:	e003      	b.n	8007476 <HAL_TIM_PWM_Start+0xfe>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2202      	movs	r2, #2
 8007472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2201      	movs	r2, #1
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	4618      	mov	r0, r3
 8007480:	f001 fd16 	bl	8008eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3a      	ldr	r2, [pc, #232]	@ (8007574 <HAL_TIM_PWM_Start+0x1fc>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d018      	beq.n	80074c0 <HAL_TIM_PWM_Start+0x148>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a39      	ldr	r2, [pc, #228]	@ (8007578 <HAL_TIM_PWM_Start+0x200>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d013      	beq.n	80074c0 <HAL_TIM_PWM_Start+0x148>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a37      	ldr	r2, [pc, #220]	@ (800757c <HAL_TIM_PWM_Start+0x204>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00e      	beq.n	80074c0 <HAL_TIM_PWM_Start+0x148>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a36      	ldr	r2, [pc, #216]	@ (8007580 <HAL_TIM_PWM_Start+0x208>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d009      	beq.n	80074c0 <HAL_TIM_PWM_Start+0x148>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a34      	ldr	r2, [pc, #208]	@ (8007584 <HAL_TIM_PWM_Start+0x20c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <HAL_TIM_PWM_Start+0x148>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a33      	ldr	r2, [pc, #204]	@ (8007588 <HAL_TIM_PWM_Start+0x210>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d101      	bne.n	80074c4 <HAL_TIM_PWM_Start+0x14c>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <HAL_TIM_PWM_Start+0x14e>
 80074c4:	2300      	movs	r3, #0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d007      	beq.n	80074da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a25      	ldr	r2, [pc, #148]	@ (8007574 <HAL_TIM_PWM_Start+0x1fc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d022      	beq.n	800752a <HAL_TIM_PWM_Start+0x1b2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ec:	d01d      	beq.n	800752a <HAL_TIM_PWM_Start+0x1b2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a26      	ldr	r2, [pc, #152]	@ (800758c <HAL_TIM_PWM_Start+0x214>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d018      	beq.n	800752a <HAL_TIM_PWM_Start+0x1b2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a24      	ldr	r2, [pc, #144]	@ (8007590 <HAL_TIM_PWM_Start+0x218>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <HAL_TIM_PWM_Start+0x1b2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a23      	ldr	r2, [pc, #140]	@ (8007594 <HAL_TIM_PWM_Start+0x21c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00e      	beq.n	800752a <HAL_TIM_PWM_Start+0x1b2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a19      	ldr	r2, [pc, #100]	@ (8007578 <HAL_TIM_PWM_Start+0x200>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d009      	beq.n	800752a <HAL_TIM_PWM_Start+0x1b2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a18      	ldr	r2, [pc, #96]	@ (800757c <HAL_TIM_PWM_Start+0x204>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d004      	beq.n	800752a <HAL_TIM_PWM_Start+0x1b2>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a18      	ldr	r2, [pc, #96]	@ (8007588 <HAL_TIM_PWM_Start+0x210>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d115      	bne.n	8007556 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	4b19      	ldr	r3, [pc, #100]	@ (8007598 <HAL_TIM_PWM_Start+0x220>)
 8007532:	4013      	ands	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b06      	cmp	r3, #6
 800753a:	d015      	beq.n	8007568 <HAL_TIM_PWM_Start+0x1f0>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007542:	d011      	beq.n	8007568 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007554:	e008      	b.n	8007568 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e000      	b.n	800756a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007568:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40013400 	.word	0x40013400
 800757c:	40014000 	.word	0x40014000
 8007580:	40014400 	.word	0x40014400
 8007584:	40014800 	.word	0x40014800
 8007588:	40015000 	.word	0x40015000
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	00010007 	.word	0x00010007

0800759c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e04c      	b.n	800764a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d111      	bne.n	80075e0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 fc99 	bl	8008efc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d102      	bne.n	80075d8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a1f      	ldr	r2, [pc, #124]	@ (8007654 <HAL_TIM_OnePulse_Init+0xb8>)
 80075d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f000 ffe2 	bl	80085bc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0208 	bic.w	r2, r2, #8
 8007606:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6819      	ldr	r1, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	08007659 	.word	0x08007659

08007658 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800767c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007684:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800768c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007694:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d108      	bne.n	80076ae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d105      	bne.n	80076ae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076a2:	7b7b      	ldrb	r3, [r7, #13]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d102      	bne.n	80076ae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076a8:	7b3b      	ldrb	r3, [r7, #12]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d001      	beq.n	80076b2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e059      	b.n	8007766 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2202      	movs	r2, #2
 80076b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2202      	movs	r2, #2
 80076be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2202      	movs	r2, #2
 80076c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f042 0202 	orr.w	r2, r2, #2
 80076e0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f042 0204 	orr.w	r2, r2, #4
 80076f0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2201      	movs	r2, #1
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fbd8 	bl	8008eb0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2201      	movs	r2, #1
 8007706:	2104      	movs	r1, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f001 fbd1 	bl	8008eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a17      	ldr	r2, [pc, #92]	@ (8007770 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d018      	beq.n	800774a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a15      	ldr	r2, [pc, #84]	@ (8007774 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d013      	beq.n	800774a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a14      	ldr	r2, [pc, #80]	@ (8007778 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00e      	beq.n	800774a <HAL_TIM_OnePulse_Start_IT+0xde>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a12      	ldr	r2, [pc, #72]	@ (800777c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d009      	beq.n	800774a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a11      	ldr	r2, [pc, #68]	@ (8007780 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d004      	beq.n	800774a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a0f      	ldr	r2, [pc, #60]	@ (8007784 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d101      	bne.n	800774e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800774e:	2300      	movs	r3, #0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d007      	beq.n	8007764 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007762:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40012c00 	.word	0x40012c00
 8007774:	40013400 	.word	0x40013400
 8007778:	40014000 	.word	0x40014000
 800777c:	40014400 	.word	0x40014400
 8007780:	40014800 	.word	0x40014800
 8007784:	40015000 	.word	0x40015000

08007788 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e0a2      	b.n	80078e2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d111      	bne.n	80077cc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 fba3 	bl	8008efc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a4a      	ldr	r2, [pc, #296]	@ (80078ec <HAL_TIM_Encoder_Init+0x164>)
 80077c2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80077e2:	f023 0307 	bic.w	r3, r3, #7
 80077e6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3304      	adds	r3, #4
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f000 fee2 	bl	80085bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007820:	f023 0303 	bic.w	r3, r3, #3
 8007824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	4313      	orrs	r3, r2
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800783e:	f023 030c 	bic.w	r3, r3, #12
 8007842:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800784a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800784e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	4313      	orrs	r3, r2
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	011a      	lsls	r2, r3, #4
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	4313      	orrs	r3, r2
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	4313      	orrs	r3, r2
 8007874:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800787c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007884:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	4313      	orrs	r3, r2
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	08002fe5 	.word	0x08002fe5

080078f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007900:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007908:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007910:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007918:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d110      	bne.n	8007942 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d102      	bne.n	800792c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007926:	7b7b      	ldrb	r3, [r7, #13]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d001      	beq.n	8007930 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e069      	b.n	8007a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007940:	e031      	b.n	80079a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d110      	bne.n	800796a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d102      	bne.n	8007954 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800794e:	7b3b      	ldrb	r3, [r7, #12]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d001      	beq.n	8007958 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e055      	b.n	8007a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007968:	e01d      	b.n	80079a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d108      	bne.n	8007982 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d105      	bne.n	8007982 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007976:	7b7b      	ldrb	r3, [r7, #13]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d102      	bne.n	8007982 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800797c:	7b3b      	ldrb	r3, [r7, #12]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d001      	beq.n	8007986 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e03e      	b.n	8007a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2202      	movs	r2, #2
 800798a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2202      	movs	r2, #2
 8007992:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2202      	movs	r2, #2
 800799a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2202      	movs	r2, #2
 80079a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_TIM_Encoder_Start+0xc4>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d008      	beq.n	80079c4 <HAL_TIM_Encoder_Start+0xd4>
 80079b2:	e00f      	b.n	80079d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2201      	movs	r2, #1
 80079ba:	2100      	movs	r1, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 fa77 	bl	8008eb0 <TIM_CCxChannelCmd>
      break;
 80079c2:	e016      	b.n	80079f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2201      	movs	r2, #1
 80079ca:	2104      	movs	r1, #4
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 fa6f 	bl	8008eb0 <TIM_CCxChannelCmd>
      break;
 80079d2:	e00e      	b.n	80079f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2201      	movs	r2, #1
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 fa67 	bl	8008eb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2201      	movs	r2, #1
 80079e8:	2104      	movs	r1, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 fa60 	bl	8008eb0 <TIM_CCxChannelCmd>
      break;
 80079f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0201 	orr.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d026      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d021      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0202 	mvn.w	r2, #2
 8007a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	e009      	b.n	8007a76 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 0304 	and.w	r3, r3, #4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d026      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d021      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0204 	mvn.w	r2, #4
 8007a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	4798      	blx	r3
 8007ab8:	e009      	b.n	8007ace <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d026      	beq.n	8007b2c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d021      	beq.n	8007b2c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f06f 0208 	mvn.w	r2, #8
 8007af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2204      	movs	r2, #4
 8007af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
 8007b10:	e009      	b.n	8007b26 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 0310 	and.w	r3, r3, #16
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d026      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d021      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f06f 0210 	mvn.w	r2, #16
 8007b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2208      	movs	r2, #8
 8007b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
 8007b68:	e009      	b.n	8007b7e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00e      	beq.n	8007bac <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d009      	beq.n	8007bac <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f06f 0201 	mvn.w	r2, #1
 8007ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00e      	beq.n	8007bde <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00e      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00e      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f06f 0220 	mvn.w	r2, #32
 8007c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00e      	beq.n	8007c7e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d009      	beq.n	8007c7e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00e      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00e      	beq.n	8007cce <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cf6:	bf00      	nop
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_TIM_OC_ConfigChannel+0x1e>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e066      	b.n	8007dec <HAL_TIM_OC_ConfigChannel+0xec>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b14      	cmp	r3, #20
 8007d2a:	d857      	bhi.n	8007ddc <HAL_TIM_OC_ConfigChannel+0xdc>
 8007d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d89 	.word	0x08007d89
 8007d38:	08007ddd 	.word	0x08007ddd
 8007d3c:	08007ddd 	.word	0x08007ddd
 8007d40:	08007ddd 	.word	0x08007ddd
 8007d44:	08007d97 	.word	0x08007d97
 8007d48:	08007ddd 	.word	0x08007ddd
 8007d4c:	08007ddd 	.word	0x08007ddd
 8007d50:	08007ddd 	.word	0x08007ddd
 8007d54:	08007da5 	.word	0x08007da5
 8007d58:	08007ddd 	.word	0x08007ddd
 8007d5c:	08007ddd 	.word	0x08007ddd
 8007d60:	08007ddd 	.word	0x08007ddd
 8007d64:	08007db3 	.word	0x08007db3
 8007d68:	08007ddd 	.word	0x08007ddd
 8007d6c:	08007ddd 	.word	0x08007ddd
 8007d70:	08007ddd 	.word	0x08007ddd
 8007d74:	08007dc1 	.word	0x08007dc1
 8007d78:	08007ddd 	.word	0x08007ddd
 8007d7c:	08007ddd 	.word	0x08007ddd
 8007d80:	08007ddd 	.word	0x08007ddd
 8007d84:	08007dcf 	.word	0x08007dcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fcc8 	bl	8008724 <TIM_OC1_SetConfig>
      break;
 8007d94:	e025      	b.n	8007de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fd5b 	bl	8008858 <TIM_OC2_SetConfig>
      break;
 8007da2:	e01e      	b.n	8007de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fde8 	bl	8008980 <TIM_OC3_SetConfig>
      break;
 8007db0:	e017      	b.n	8007de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 fe73 	bl	8008aa4 <TIM_OC4_SetConfig>
      break;
 8007dbe:	e010      	b.n	8007de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 ff00 	bl	8008bcc <TIM_OC5_SetConfig>
      break;
 8007dcc:	e009      	b.n	8007de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 ff63 	bl	8008ca0 <TIM_OC6_SetConfig>
      break;
 8007dda:	e002      	b.n	8007de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
      break;
 8007de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d101      	bne.n	8007e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e0ff      	b.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b14      	cmp	r3, #20
 8007e1e:	f200 80f0 	bhi.w	8008002 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e22:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e7d 	.word	0x08007e7d
 8007e2c:	08008003 	.word	0x08008003
 8007e30:	08008003 	.word	0x08008003
 8007e34:	08008003 	.word	0x08008003
 8007e38:	08007ebd 	.word	0x08007ebd
 8007e3c:	08008003 	.word	0x08008003
 8007e40:	08008003 	.word	0x08008003
 8007e44:	08008003 	.word	0x08008003
 8007e48:	08007eff 	.word	0x08007eff
 8007e4c:	08008003 	.word	0x08008003
 8007e50:	08008003 	.word	0x08008003
 8007e54:	08008003 	.word	0x08008003
 8007e58:	08007f3f 	.word	0x08007f3f
 8007e5c:	08008003 	.word	0x08008003
 8007e60:	08008003 	.word	0x08008003
 8007e64:	08008003 	.word	0x08008003
 8007e68:	08007f81 	.word	0x08007f81
 8007e6c:	08008003 	.word	0x08008003
 8007e70:	08008003 	.word	0x08008003
 8007e74:	08008003 	.word	0x08008003
 8007e78:	08007fc1 	.word	0x08007fc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fc4e 	bl	8008724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0208 	orr.w	r2, r2, #8
 8007e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0204 	bic.w	r2, r2, #4
 8007ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6999      	ldr	r1, [r3, #24]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	619a      	str	r2, [r3, #24]
      break;
 8007eba:	e0a5      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fcc8 	bl	8008858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699a      	ldr	r2, [r3, #24]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6999      	ldr	r1, [r3, #24]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	021a      	lsls	r2, r3, #8
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	619a      	str	r2, [r3, #24]
      break;
 8007efc:	e084      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fd3b 	bl	8008980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0208 	orr.w	r2, r2, #8
 8007f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0204 	bic.w	r2, r2, #4
 8007f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69d9      	ldr	r1, [r3, #28]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	691a      	ldr	r2, [r3, #16]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	61da      	str	r2, [r3, #28]
      break;
 8007f3c:	e064      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68b9      	ldr	r1, [r7, #8]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fdad 	bl	8008aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69da      	ldr	r2, [r3, #28]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69d9      	ldr	r1, [r3, #28]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	021a      	lsls	r2, r3, #8
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	61da      	str	r2, [r3, #28]
      break;
 8007f7e:	e043      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fe20 	bl	8008bcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0208 	orr.w	r2, r2, #8
 8007f9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0204 	bic.w	r2, r2, #4
 8007faa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007fbe:	e023      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68b9      	ldr	r1, [r7, #8]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fe6a 	bl	8008ca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fda:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	021a      	lsls	r2, r3, #8
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008000:	e002      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	75fb      	strb	r3, [r7, #23]
      break;
 8008006:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop

0800801c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIM_ConfigClockSource+0x1c>
 8008034:	2302      	movs	r3, #2
 8008036:	e0f6      	b.n	8008226 <HAL_TIM_ConfigClockSource+0x20a>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008056:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800805a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a6f      	ldr	r2, [pc, #444]	@ (8008230 <HAL_TIM_ConfigClockSource+0x214>)
 8008072:	4293      	cmp	r3, r2
 8008074:	f000 80c1 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 8008078:	4a6d      	ldr	r2, [pc, #436]	@ (8008230 <HAL_TIM_ConfigClockSource+0x214>)
 800807a:	4293      	cmp	r3, r2
 800807c:	f200 80c6 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 8008080:	4a6c      	ldr	r2, [pc, #432]	@ (8008234 <HAL_TIM_ConfigClockSource+0x218>)
 8008082:	4293      	cmp	r3, r2
 8008084:	f000 80b9 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 8008088:	4a6a      	ldr	r2, [pc, #424]	@ (8008234 <HAL_TIM_ConfigClockSource+0x218>)
 800808a:	4293      	cmp	r3, r2
 800808c:	f200 80be 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 8008090:	4a69      	ldr	r2, [pc, #420]	@ (8008238 <HAL_TIM_ConfigClockSource+0x21c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	f000 80b1 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 8008098:	4a67      	ldr	r2, [pc, #412]	@ (8008238 <HAL_TIM_ConfigClockSource+0x21c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	f200 80b6 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 80080a0:	4a66      	ldr	r2, [pc, #408]	@ (800823c <HAL_TIM_ConfigClockSource+0x220>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	f000 80a9 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 80080a8:	4a64      	ldr	r2, [pc, #400]	@ (800823c <HAL_TIM_ConfigClockSource+0x220>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	f200 80ae 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 80080b0:	4a63      	ldr	r2, [pc, #396]	@ (8008240 <HAL_TIM_ConfigClockSource+0x224>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	f000 80a1 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 80080b8:	4a61      	ldr	r2, [pc, #388]	@ (8008240 <HAL_TIM_ConfigClockSource+0x224>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	f200 80a6 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 80080c0:	4a60      	ldr	r2, [pc, #384]	@ (8008244 <HAL_TIM_ConfigClockSource+0x228>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	f000 8099 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 80080c8:	4a5e      	ldr	r2, [pc, #376]	@ (8008244 <HAL_TIM_ConfigClockSource+0x228>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	f200 809e 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 80080d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080d4:	f000 8091 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 80080d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080dc:	f200 8096 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 80080e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080e4:	f000 8089 	beq.w	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 80080e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080ec:	f200 808e 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 80080f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080f4:	d03e      	beq.n	8008174 <HAL_TIM_ConfigClockSource+0x158>
 80080f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080fa:	f200 8087 	bhi.w	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 80080fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008102:	f000 8086 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1f6>
 8008106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800810a:	d87f      	bhi.n	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 800810c:	2b70      	cmp	r3, #112	@ 0x70
 800810e:	d01a      	beq.n	8008146 <HAL_TIM_ConfigClockSource+0x12a>
 8008110:	2b70      	cmp	r3, #112	@ 0x70
 8008112:	d87b      	bhi.n	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 8008114:	2b60      	cmp	r3, #96	@ 0x60
 8008116:	d050      	beq.n	80081ba <HAL_TIM_ConfigClockSource+0x19e>
 8008118:	2b60      	cmp	r3, #96	@ 0x60
 800811a:	d877      	bhi.n	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 800811c:	2b50      	cmp	r3, #80	@ 0x50
 800811e:	d03c      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x17e>
 8008120:	2b50      	cmp	r3, #80	@ 0x50
 8008122:	d873      	bhi.n	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 8008124:	2b40      	cmp	r3, #64	@ 0x40
 8008126:	d058      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x1be>
 8008128:	2b40      	cmp	r3, #64	@ 0x40
 800812a:	d86f      	bhi.n	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 800812c:	2b30      	cmp	r3, #48	@ 0x30
 800812e:	d064      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 8008130:	2b30      	cmp	r3, #48	@ 0x30
 8008132:	d86b      	bhi.n	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 8008134:	2b20      	cmp	r3, #32
 8008136:	d060      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 8008138:	2b20      	cmp	r3, #32
 800813a:	d867      	bhi.n	800820c <HAL_TIM_ConfigClockSource+0x1f0>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d05c      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 8008140:	2b10      	cmp	r3, #16
 8008142:	d05a      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x1de>
 8008144:	e062      	b.n	800820c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008156:	f000 fe8b 	bl	8008e70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	609a      	str	r2, [r3, #8]
      break;
 8008172:	e04f      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008184:	f000 fe74 	bl	8008e70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689a      	ldr	r2, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008196:	609a      	str	r2, [r3, #8]
      break;
 8008198:	e03c      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a6:	461a      	mov	r2, r3
 80081a8:	f000 fde6 	bl	8008d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2150      	movs	r1, #80	@ 0x50
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fe3f 	bl	8008e36 <TIM_ITRx_SetConfig>
      break;
 80081b8:	e02c      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081c6:	461a      	mov	r2, r3
 80081c8:	f000 fe05 	bl	8008dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2160      	movs	r1, #96	@ 0x60
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fe2f 	bl	8008e36 <TIM_ITRx_SetConfig>
      break;
 80081d8:	e01c      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e6:	461a      	mov	r2, r3
 80081e8:	f000 fdc6 	bl	8008d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2140      	movs	r1, #64	@ 0x40
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fe1f 	bl	8008e36 <TIM_ITRx_SetConfig>
      break;
 80081f8:	e00c      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f000 fe16 	bl	8008e36 <TIM_ITRx_SetConfig>
      break;
 800820a:	e003      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
      break;
 8008210:	e000      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008224:	7bfb      	ldrb	r3, [r7, #15]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	00100070 	.word	0x00100070
 8008234:	00100060 	.word	0x00100060
 8008238:	00100050 	.word	0x00100050
 800823c:	00100040 	.word	0x00100040
 8008240:	00100030 	.word	0x00100030
 8008244:	00100020 	.word	0x00100020

08008248 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	460b      	mov	r3, r1
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e14a      	b.n	80085ae <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	f040 80dd 	bne.w	80084e0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008326:	7afb      	ldrb	r3, [r7, #11]
 8008328:	2b1f      	cmp	r3, #31
 800832a:	f200 80d6 	bhi.w	80084da <HAL_TIM_RegisterCallback+0x1de>
 800832e:	a201      	add	r2, pc, #4	@ (adr r2, 8008334 <HAL_TIM_RegisterCallback+0x38>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	080083b5 	.word	0x080083b5
 8008338:	080083bd 	.word	0x080083bd
 800833c:	080083c5 	.word	0x080083c5
 8008340:	080083cd 	.word	0x080083cd
 8008344:	080083d5 	.word	0x080083d5
 8008348:	080083dd 	.word	0x080083dd
 800834c:	080083e5 	.word	0x080083e5
 8008350:	080083ed 	.word	0x080083ed
 8008354:	080083f5 	.word	0x080083f5
 8008358:	080083fd 	.word	0x080083fd
 800835c:	08008405 	.word	0x08008405
 8008360:	0800840d 	.word	0x0800840d
 8008364:	08008415 	.word	0x08008415
 8008368:	0800841d 	.word	0x0800841d
 800836c:	08008427 	.word	0x08008427
 8008370:	08008431 	.word	0x08008431
 8008374:	0800843b 	.word	0x0800843b
 8008378:	08008445 	.word	0x08008445
 800837c:	0800844f 	.word	0x0800844f
 8008380:	08008459 	.word	0x08008459
 8008384:	08008463 	.word	0x08008463
 8008388:	0800846d 	.word	0x0800846d
 800838c:	08008477 	.word	0x08008477
 8008390:	08008481 	.word	0x08008481
 8008394:	0800848b 	.word	0x0800848b
 8008398:	08008495 	.word	0x08008495
 800839c:	0800849f 	.word	0x0800849f
 80083a0:	080084a9 	.word	0x080084a9
 80083a4:	080084b3 	.word	0x080084b3
 80083a8:	080084bd 	.word	0x080084bd
 80083ac:	080084c7 	.word	0x080084c7
 80083b0:	080084d1 	.word	0x080084d1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80083ba:	e0f7      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80083c2:	e0f3      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80083ca:	e0ef      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80083d2:	e0eb      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80083da:	e0e7      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80083e2:	e0e3      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80083ea:	e0df      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80083f2:	e0db      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80083fa:	e0d7      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008402:	e0d3      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800840a:	e0cf      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008412:	e0cb      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800841a:	e0c7      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008424:	e0c2      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800842e:	e0bd      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008438:	e0b8      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008442:	e0b3      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800844c:	e0ae      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008456:	e0a9      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008460:	e0a4      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800846a:	e09f      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008474:	e09a      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800847e:	e095      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008488:	e090      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008492:	e08b      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800849c:	e086      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80084a6:	e081      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80084b0:	e07c      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80084ba:	e077      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80084c4:	e072      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80084ce:	e06d      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80084d8:	e068      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	75fb      	strb	r3, [r7, #23]
        break;
 80084de:	e065      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d15d      	bne.n	80085a8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	2b0d      	cmp	r3, #13
 80084f0:	d857      	bhi.n	80085a2 <HAL_TIM_RegisterCallback+0x2a6>
 80084f2:	a201      	add	r2, pc, #4	@ (adr r2, 80084f8 <HAL_TIM_RegisterCallback+0x1fc>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008531 	.word	0x08008531
 80084fc:	08008539 	.word	0x08008539
 8008500:	08008541 	.word	0x08008541
 8008504:	08008549 	.word	0x08008549
 8008508:	08008551 	.word	0x08008551
 800850c:	08008559 	.word	0x08008559
 8008510:	08008561 	.word	0x08008561
 8008514:	08008569 	.word	0x08008569
 8008518:	08008571 	.word	0x08008571
 800851c:	08008579 	.word	0x08008579
 8008520:	08008581 	.word	0x08008581
 8008524:	08008589 	.word	0x08008589
 8008528:	08008591 	.word	0x08008591
 800852c:	08008599 	.word	0x08008599
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008536:	e039      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800853e:	e035      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008546:	e031      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800854e:	e02d      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008556:	e029      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800855e:	e025      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008566:	e021      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800856e:	e01d      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008576:	e019      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800857e:	e015      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008586:	e011      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800858e:	e00d      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008596:	e009      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80085a0:	e004      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	75fb      	strb	r3, [r7, #23]
        break;
 80085a6:	e001      	b.n	80085ac <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop

080085bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a4c      	ldr	r2, [pc, #304]	@ (8008700 <TIM_Base_SetConfig+0x144>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d017      	beq.n	8008604 <TIM_Base_SetConfig+0x48>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085da:	d013      	beq.n	8008604 <TIM_Base_SetConfig+0x48>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a49      	ldr	r2, [pc, #292]	@ (8008704 <TIM_Base_SetConfig+0x148>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00f      	beq.n	8008604 <TIM_Base_SetConfig+0x48>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a48      	ldr	r2, [pc, #288]	@ (8008708 <TIM_Base_SetConfig+0x14c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00b      	beq.n	8008604 <TIM_Base_SetConfig+0x48>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a47      	ldr	r2, [pc, #284]	@ (800870c <TIM_Base_SetConfig+0x150>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d007      	beq.n	8008604 <TIM_Base_SetConfig+0x48>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a46      	ldr	r2, [pc, #280]	@ (8008710 <TIM_Base_SetConfig+0x154>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_Base_SetConfig+0x48>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a45      	ldr	r2, [pc, #276]	@ (8008714 <TIM_Base_SetConfig+0x158>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d108      	bne.n	8008616 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800860a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a39      	ldr	r2, [pc, #228]	@ (8008700 <TIM_Base_SetConfig+0x144>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d023      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008624:	d01f      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a36      	ldr	r2, [pc, #216]	@ (8008704 <TIM_Base_SetConfig+0x148>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01b      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a35      	ldr	r2, [pc, #212]	@ (8008708 <TIM_Base_SetConfig+0x14c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d017      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a34      	ldr	r2, [pc, #208]	@ (800870c <TIM_Base_SetConfig+0x150>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a33      	ldr	r2, [pc, #204]	@ (8008710 <TIM_Base_SetConfig+0x154>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00f      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a33      	ldr	r2, [pc, #204]	@ (8008718 <TIM_Base_SetConfig+0x15c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00b      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a32      	ldr	r2, [pc, #200]	@ (800871c <TIM_Base_SetConfig+0x160>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d007      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a31      	ldr	r2, [pc, #196]	@ (8008720 <TIM_Base_SetConfig+0x164>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d003      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a2c      	ldr	r2, [pc, #176]	@ (8008714 <TIM_Base_SetConfig+0x158>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d108      	bne.n	8008678 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800866c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a18      	ldr	r2, [pc, #96]	@ (8008700 <TIM_Base_SetConfig+0x144>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d013      	beq.n	80086cc <TIM_Base_SetConfig+0x110>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008710 <TIM_Base_SetConfig+0x154>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00f      	beq.n	80086cc <TIM_Base_SetConfig+0x110>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <TIM_Base_SetConfig+0x15c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00b      	beq.n	80086cc <TIM_Base_SetConfig+0x110>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a19      	ldr	r2, [pc, #100]	@ (800871c <TIM_Base_SetConfig+0x160>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d007      	beq.n	80086cc <TIM_Base_SetConfig+0x110>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a18      	ldr	r2, [pc, #96]	@ (8008720 <TIM_Base_SetConfig+0x164>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d003      	beq.n	80086cc <TIM_Base_SetConfig+0x110>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a13      	ldr	r2, [pc, #76]	@ (8008714 <TIM_Base_SetConfig+0x158>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d103      	bne.n	80086d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d105      	bne.n	80086f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f023 0201 	bic.w	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	611a      	str	r2, [r3, #16]
  }
}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40012c00 	.word	0x40012c00
 8008704:	40000400 	.word	0x40000400
 8008708:	40000800 	.word	0x40000800
 800870c:	40000c00 	.word	0x40000c00
 8008710:	40013400 	.word	0x40013400
 8008714:	40015000 	.word	0x40015000
 8008718:	40014000 	.word	0x40014000
 800871c:	40014400 	.word	0x40014400
 8008720:	40014800 	.word	0x40014800

08008724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	f023 0201 	bic.w	r2, r3, #1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f023 0302 	bic.w	r3, r3, #2
 8008770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	4313      	orrs	r3, r2
 800877a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a30      	ldr	r2, [pc, #192]	@ (8008840 <TIM_OC1_SetConfig+0x11c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d013      	beq.n	80087ac <TIM_OC1_SetConfig+0x88>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a2f      	ldr	r2, [pc, #188]	@ (8008844 <TIM_OC1_SetConfig+0x120>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00f      	beq.n	80087ac <TIM_OC1_SetConfig+0x88>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a2e      	ldr	r2, [pc, #184]	@ (8008848 <TIM_OC1_SetConfig+0x124>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d00b      	beq.n	80087ac <TIM_OC1_SetConfig+0x88>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a2d      	ldr	r2, [pc, #180]	@ (800884c <TIM_OC1_SetConfig+0x128>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d007      	beq.n	80087ac <TIM_OC1_SetConfig+0x88>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a2c      	ldr	r2, [pc, #176]	@ (8008850 <TIM_OC1_SetConfig+0x12c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d003      	beq.n	80087ac <TIM_OC1_SetConfig+0x88>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a2b      	ldr	r2, [pc, #172]	@ (8008854 <TIM_OC1_SetConfig+0x130>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d10c      	bne.n	80087c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f023 0308 	bic.w	r3, r3, #8
 80087b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f023 0304 	bic.w	r3, r3, #4
 80087c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008840 <TIM_OC1_SetConfig+0x11c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d013      	beq.n	80087f6 <TIM_OC1_SetConfig+0xd2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008844 <TIM_OC1_SetConfig+0x120>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00f      	beq.n	80087f6 <TIM_OC1_SetConfig+0xd2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008848 <TIM_OC1_SetConfig+0x124>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00b      	beq.n	80087f6 <TIM_OC1_SetConfig+0xd2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a1a      	ldr	r2, [pc, #104]	@ (800884c <TIM_OC1_SetConfig+0x128>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_OC1_SetConfig+0xd2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a19      	ldr	r2, [pc, #100]	@ (8008850 <TIM_OC1_SetConfig+0x12c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_OC1_SetConfig+0xd2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a18      	ldr	r2, [pc, #96]	@ (8008854 <TIM_OC1_SetConfig+0x130>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d111      	bne.n	800881a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	621a      	str	r2, [r3, #32]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	40012c00 	.word	0x40012c00
 8008844:	40013400 	.word	0x40013400
 8008848:	40014000 	.word	0x40014000
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800
 8008854:	40015000 	.word	0x40015000

08008858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	f023 0210 	bic.w	r2, r3, #16
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800888a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	021b      	lsls	r3, r3, #8
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	4313      	orrs	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0320 	bic.w	r3, r3, #32
 80088a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a2c      	ldr	r2, [pc, #176]	@ (8008968 <TIM_OC2_SetConfig+0x110>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d007      	beq.n	80088cc <TIM_OC2_SetConfig+0x74>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a2b      	ldr	r2, [pc, #172]	@ (800896c <TIM_OC2_SetConfig+0x114>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d003      	beq.n	80088cc <TIM_OC2_SetConfig+0x74>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008970 <TIM_OC2_SetConfig+0x118>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d10d      	bne.n	80088e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4313      	orrs	r3, r2
 80088de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008968 <TIM_OC2_SetConfig+0x110>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d013      	beq.n	8008918 <TIM_OC2_SetConfig+0xc0>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1e      	ldr	r2, [pc, #120]	@ (800896c <TIM_OC2_SetConfig+0x114>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00f      	beq.n	8008918 <TIM_OC2_SetConfig+0xc0>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008974 <TIM_OC2_SetConfig+0x11c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d00b      	beq.n	8008918 <TIM_OC2_SetConfig+0xc0>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a1d      	ldr	r2, [pc, #116]	@ (8008978 <TIM_OC2_SetConfig+0x120>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d007      	beq.n	8008918 <TIM_OC2_SetConfig+0xc0>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a1c      	ldr	r2, [pc, #112]	@ (800897c <TIM_OC2_SetConfig+0x124>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_OC2_SetConfig+0xc0>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a17      	ldr	r2, [pc, #92]	@ (8008970 <TIM_OC2_SetConfig+0x118>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d113      	bne.n	8008940 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800891e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4313      	orrs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	621a      	str	r2, [r3, #32]
}
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	40012c00 	.word	0x40012c00
 800896c:	40013400 	.word	0x40013400
 8008970:	40015000 	.word	0x40015000
 8008974:	40014000 	.word	0x40014000
 8008978:	40014400 	.word	0x40014400
 800897c:	40014800 	.word	0x40014800

08008980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0303 	bic.w	r3, r3, #3
 80089ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a2b      	ldr	r2, [pc, #172]	@ (8008a8c <TIM_OC3_SetConfig+0x10c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d007      	beq.n	80089f2 <TIM_OC3_SetConfig+0x72>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008a90 <TIM_OC3_SetConfig+0x110>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d003      	beq.n	80089f2 <TIM_OC3_SetConfig+0x72>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a29      	ldr	r2, [pc, #164]	@ (8008a94 <TIM_OC3_SetConfig+0x114>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d10d      	bne.n	8008a0e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a1e      	ldr	r2, [pc, #120]	@ (8008a8c <TIM_OC3_SetConfig+0x10c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d013      	beq.n	8008a3e <TIM_OC3_SetConfig+0xbe>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a1d      	ldr	r2, [pc, #116]	@ (8008a90 <TIM_OC3_SetConfig+0x110>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00f      	beq.n	8008a3e <TIM_OC3_SetConfig+0xbe>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a1d      	ldr	r2, [pc, #116]	@ (8008a98 <TIM_OC3_SetConfig+0x118>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d00b      	beq.n	8008a3e <TIM_OC3_SetConfig+0xbe>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a1c      	ldr	r2, [pc, #112]	@ (8008a9c <TIM_OC3_SetConfig+0x11c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d007      	beq.n	8008a3e <TIM_OC3_SetConfig+0xbe>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa0 <TIM_OC3_SetConfig+0x120>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d003      	beq.n	8008a3e <TIM_OC3_SetConfig+0xbe>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a16      	ldr	r2, [pc, #88]	@ (8008a94 <TIM_OC3_SetConfig+0x114>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d113      	bne.n	8008a66 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	011b      	lsls	r3, r3, #4
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	621a      	str	r2, [r3, #32]
}
 8008a80:	bf00      	nop
 8008a82:	371c      	adds	r7, #28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	40012c00 	.word	0x40012c00
 8008a90:	40013400 	.word	0x40013400
 8008a94:	40015000 	.word	0x40015000
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40014400 	.word	0x40014400
 8008aa0:	40014800 	.word	0x40014800

08008aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	031b      	lsls	r3, r3, #12
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a2c      	ldr	r2, [pc, #176]	@ (8008bb4 <TIM_OC4_SetConfig+0x110>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d007      	beq.n	8008b18 <TIM_OC4_SetConfig+0x74>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8008bb8 <TIM_OC4_SetConfig+0x114>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d003      	beq.n	8008b18 <TIM_OC4_SetConfig+0x74>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a2a      	ldr	r2, [pc, #168]	@ (8008bbc <TIM_OC4_SetConfig+0x118>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d10d      	bne.n	8008b34 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	031b      	lsls	r3, r3, #12
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb4 <TIM_OC4_SetConfig+0x110>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d013      	beq.n	8008b64 <TIM_OC4_SetConfig+0xc0>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008bb8 <TIM_OC4_SetConfig+0x114>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00f      	beq.n	8008b64 <TIM_OC4_SetConfig+0xc0>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a1e      	ldr	r2, [pc, #120]	@ (8008bc0 <TIM_OC4_SetConfig+0x11c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d00b      	beq.n	8008b64 <TIM_OC4_SetConfig+0xc0>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc4 <TIM_OC4_SetConfig+0x120>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d007      	beq.n	8008b64 <TIM_OC4_SetConfig+0xc0>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a1c      	ldr	r2, [pc, #112]	@ (8008bc8 <TIM_OC4_SetConfig+0x124>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_OC4_SetConfig+0xc0>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a17      	ldr	r2, [pc, #92]	@ (8008bbc <TIM_OC4_SetConfig+0x118>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d113      	bne.n	8008b8c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	019b      	lsls	r3, r3, #6
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	019b      	lsls	r3, r3, #6
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	621a      	str	r2, [r3, #32]
}
 8008ba6:	bf00      	nop
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40012c00 	.word	0x40012c00
 8008bb8:	40013400 	.word	0x40013400
 8008bbc:	40015000 	.word	0x40015000
 8008bc0:	40014000 	.word	0x40014000
 8008bc4:	40014400 	.word	0x40014400
 8008bc8:	40014800 	.word	0x40014800

08008bcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	041b      	lsls	r3, r3, #16
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a19      	ldr	r2, [pc, #100]	@ (8008c88 <TIM_OC5_SetConfig+0xbc>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d013      	beq.n	8008c4e <TIM_OC5_SetConfig+0x82>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a18      	ldr	r2, [pc, #96]	@ (8008c8c <TIM_OC5_SetConfig+0xc0>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00f      	beq.n	8008c4e <TIM_OC5_SetConfig+0x82>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a17      	ldr	r2, [pc, #92]	@ (8008c90 <TIM_OC5_SetConfig+0xc4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00b      	beq.n	8008c4e <TIM_OC5_SetConfig+0x82>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a16      	ldr	r2, [pc, #88]	@ (8008c94 <TIM_OC5_SetConfig+0xc8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d007      	beq.n	8008c4e <TIM_OC5_SetConfig+0x82>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a15      	ldr	r2, [pc, #84]	@ (8008c98 <TIM_OC5_SetConfig+0xcc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d003      	beq.n	8008c4e <TIM_OC5_SetConfig+0x82>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a14      	ldr	r2, [pc, #80]	@ (8008c9c <TIM_OC5_SetConfig+0xd0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d109      	bne.n	8008c62 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	621a      	str	r2, [r3, #32]
}
 8008c7c:	bf00      	nop
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	40012c00 	.word	0x40012c00
 8008c8c:	40013400 	.word	0x40013400
 8008c90:	40014000 	.word	0x40014000
 8008c94:	40014400 	.word	0x40014400
 8008c98:	40014800 	.word	0x40014800
 8008c9c:	40015000 	.word	0x40015000

08008ca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	051b      	lsls	r3, r3, #20
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d60 <TIM_OC6_SetConfig+0xc0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d013      	beq.n	8008d24 <TIM_OC6_SetConfig+0x84>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a19      	ldr	r2, [pc, #100]	@ (8008d64 <TIM_OC6_SetConfig+0xc4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00f      	beq.n	8008d24 <TIM_OC6_SetConfig+0x84>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a18      	ldr	r2, [pc, #96]	@ (8008d68 <TIM_OC6_SetConfig+0xc8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00b      	beq.n	8008d24 <TIM_OC6_SetConfig+0x84>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a17      	ldr	r2, [pc, #92]	@ (8008d6c <TIM_OC6_SetConfig+0xcc>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d007      	beq.n	8008d24 <TIM_OC6_SetConfig+0x84>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a16      	ldr	r2, [pc, #88]	@ (8008d70 <TIM_OC6_SetConfig+0xd0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_OC6_SetConfig+0x84>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a15      	ldr	r2, [pc, #84]	@ (8008d74 <TIM_OC6_SetConfig+0xd4>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d109      	bne.n	8008d38 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	029b      	lsls	r3, r3, #10
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	621a      	str	r2, [r3, #32]
}
 8008d52:	bf00      	nop
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	40012c00 	.word	0x40012c00
 8008d64:	40013400 	.word	0x40013400
 8008d68:	40014000 	.word	0x40014000
 8008d6c:	40014400 	.word	0x40014400
 8008d70:	40014800 	.word	0x40014800
 8008d74:	40015000 	.word	0x40015000

08008d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	f023 0201 	bic.w	r2, r3, #1
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f023 030a 	bic.w	r3, r3, #10
 8008db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	621a      	str	r2, [r3, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b087      	sub	sp, #28
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	f023 0210 	bic.w	r2, r3, #16
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	031b      	lsls	r3, r3, #12
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	621a      	str	r2, [r3, #32]
}
 8008e2a:	bf00      	nop
 8008e2c:	371c      	adds	r7, #28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b085      	sub	sp, #20
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	f043 0307 	orr.w	r3, r3, #7
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	609a      	str	r2, [r3, #8]
}
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	021a      	lsls	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	609a      	str	r2, [r3, #8]
}
 8008ea4:	bf00      	nop
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f003 031f 	and.w	r3, r3, #31
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a1a      	ldr	r2, [r3, #32]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	401a      	ands	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1a      	ldr	r2, [r3, #32]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f003 031f 	and.w	r3, r3, #31
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a26      	ldr	r2, [pc, #152]	@ (8008fa0 <TIM_ResetCallback+0xa4>)
 8008f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a25      	ldr	r2, [pc, #148]	@ (8008fa4 <TIM_ResetCallback+0xa8>)
 8008f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a24      	ldr	r2, [pc, #144]	@ (8008fa8 <TIM_ResetCallback+0xac>)
 8008f18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a23      	ldr	r2, [pc, #140]	@ (8008fac <TIM_ResetCallback+0xb0>)
 8008f20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a22      	ldr	r2, [pc, #136]	@ (8008fb0 <TIM_ResetCallback+0xb4>)
 8008f28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a21      	ldr	r2, [pc, #132]	@ (8008fb4 <TIM_ResetCallback+0xb8>)
 8008f30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a20      	ldr	r2, [pc, #128]	@ (8008fb8 <TIM_ResetCallback+0xbc>)
 8008f38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fbc <TIM_ResetCallback+0xc0>)
 8008f40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a1e      	ldr	r2, [pc, #120]	@ (8008fc0 <TIM_ResetCallback+0xc4>)
 8008f48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc4 <TIM_ResetCallback+0xc8>)
 8008f50:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a1c      	ldr	r2, [pc, #112]	@ (8008fc8 <TIM_ResetCallback+0xcc>)
 8008f58:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8008fcc <TIM_ResetCallback+0xd0>)
 8008f60:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a1a      	ldr	r2, [pc, #104]	@ (8008fd0 <TIM_ResetCallback+0xd4>)
 8008f68:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a19      	ldr	r2, [pc, #100]	@ (8008fd4 <TIM_ResetCallback+0xd8>)
 8008f70:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a18      	ldr	r2, [pc, #96]	@ (8008fd8 <TIM_ResetCallback+0xdc>)
 8008f78:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a17      	ldr	r2, [pc, #92]	@ (8008fdc <TIM_ResetCallback+0xe0>)
 8008f80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a16      	ldr	r2, [pc, #88]	@ (8008fe0 <TIM_ResetCallback+0xe4>)
 8008f88:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a15      	ldr	r2, [pc, #84]	@ (8008fe4 <TIM_ResetCallback+0xe8>)
 8008f90:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	08002585 	.word	0x08002585
 8008fa4:	08008249 	.word	0x08008249
 8008fa8:	080082c1 	.word	0x080082c1
 8008fac:	080082d5 	.word	0x080082d5
 8008fb0:	08008271 	.word	0x08008271
 8008fb4:	08008285 	.word	0x08008285
 8008fb8:	0800825d 	.word	0x0800825d
 8008fbc:	08008299 	.word	0x08008299
 8008fc0:	080082ad 	.word	0x080082ad
 8008fc4:	080082e9 	.word	0x080082e9
 8008fc8:	0800923d 	.word	0x0800923d
 8008fcc:	08009251 	.word	0x08009251
 8008fd0:	08009265 	.word	0x08009265
 8008fd4:	08009279 	.word	0x08009279
 8008fd8:	0800928d 	.word	0x0800928d
 8008fdc:	080092a1 	.word	0x080092a1
 8008fe0:	080092b5 	.word	0x080092b5
 8008fe4:	080092c9 	.word	0x080092c9

08008fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e074      	b.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a34      	ldr	r2, [pc, #208]	@ (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d009      	beq.n	800903e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a33      	ldr	r2, [pc, #204]	@ (80090fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d004      	beq.n	800903e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a31      	ldr	r2, [pc, #196]	@ (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d108      	bne.n	8009050 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009044:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a21      	ldr	r2, [pc, #132]	@ (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d022      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009080:	d01d      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a1f      	ldr	r2, [pc, #124]	@ (8009104 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d018      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a1d      	ldr	r2, [pc, #116]	@ (8009108 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d013      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a1c      	ldr	r2, [pc, #112]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00e      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a15      	ldr	r2, [pc, #84]	@ (80090fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d009      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a18      	ldr	r2, [pc, #96]	@ (8009110 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d004      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a11      	ldr	r2, [pc, #68]	@ (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d10c      	bne.n	80090d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40012c00 	.word	0x40012c00
 80090fc:	40013400 	.word	0x40013400
 8009100:	40015000 	.word	0x40015000
 8009104:	40000400 	.word	0x40000400
 8009108:	40000800 	.word	0x40000800
 800910c:	40000c00 	.word	0x40000c00
 8009110:	40014000 	.word	0x40014000

08009114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009128:	2b01      	cmp	r3, #1
 800912a:	d101      	bne.n	8009130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800912c:	2302      	movs	r3, #2
 800912e:	e078      	b.n	8009222 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	4313      	orrs	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a1c      	ldr	r2, [pc, #112]	@ (8009230 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d009      	beq.n	80091d6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a1b      	ldr	r2, [pc, #108]	@ (8009234 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d004      	beq.n	80091d6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a19      	ldr	r2, [pc, #100]	@ (8009238 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d11c      	bne.n	8009210 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	051b      	lsls	r3, r3, #20
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920c:	4313      	orrs	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	40012c00 	.word	0x40012c00
 8009234:	40013400 	.word	0x40013400
 8009238:	40015000 	.word	0x40015000

0800923c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e050      	b.n	8009390 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d114      	bne.n	8009322 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fe37 	bl	8009f74 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800930c:	2b00      	cmp	r3, #0
 800930e:	d103      	bne.n	8009318 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a21      	ldr	r2, [pc, #132]	@ (8009398 <HAL_UART_Init+0xbc>)
 8009314:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2224      	movs	r2, #36	@ 0x24
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0201 	bic.w	r2, r2, #1
 8009338:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 f964 	bl	800a610 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fe65 	bl	800a018 <UART_SetConfig>
 800934e:	4603      	mov	r3, r0
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e01b      	b.n	8009390 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f042 0201 	orr.w	r2, r2, #1
 8009386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 f9e3 	bl	800a754 <UART_CheckIdleState>
 800938e:	4603      	mov	r3, r0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	08003261 	.word	0x08003261

0800939c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	460b      	mov	r3, r1
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e09c      	b.n	8009502 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d16c      	bne.n	80094ac <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80093d2:	7afb      	ldrb	r3, [r7, #11]
 80093d4:	2b0c      	cmp	r3, #12
 80093d6:	d85e      	bhi.n	8009496 <HAL_UART_RegisterCallback+0xfa>
 80093d8:	a201      	add	r2, pc, #4	@ (adr r2, 80093e0 <HAL_UART_RegisterCallback+0x44>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	08009415 	.word	0x08009415
 80093e4:	0800941f 	.word	0x0800941f
 80093e8:	08009429 	.word	0x08009429
 80093ec:	08009433 	.word	0x08009433
 80093f0:	0800943d 	.word	0x0800943d
 80093f4:	08009447 	.word	0x08009447
 80093f8:	08009451 	.word	0x08009451
 80093fc:	0800945b 	.word	0x0800945b
 8009400:	08009465 	.word	0x08009465
 8009404:	0800946f 	.word	0x0800946f
 8009408:	08009479 	.word	0x08009479
 800940c:	08009483 	.word	0x08009483
 8009410:	0800948d 	.word	0x0800948d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800941c:	e070      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009426:	e06b      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009430:	e066      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800943a:	e061      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009444:	e05c      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800944e:	e057      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009458:	e052      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009462:	e04d      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800946c:	e048      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009476:	e043      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009480:	e03e      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800948a:	e039      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009494:	e034      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800949c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	75fb      	strb	r3, [r7, #23]
        break;
 80094aa:	e029      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d11a      	bne.n	80094ec <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	2b0b      	cmp	r3, #11
 80094ba:	d002      	beq.n	80094c2 <HAL_UART_RegisterCallback+0x126>
 80094bc:	2b0c      	cmp	r3, #12
 80094be:	d005      	beq.n	80094cc <HAL_UART_RegisterCallback+0x130>
 80094c0:	e009      	b.n	80094d6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80094ca:	e019      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80094d4:	e014      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	75fb      	strb	r3, [r7, #23]
        break;
 80094ea:	e009      	b.n	8009500 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009500:	7dfb      	ldrb	r3, [r7, #23]
}
 8009502:	4618      	mov	r0, r3
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop

08009510 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08a      	sub	sp, #40	@ 0x28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4613      	mov	r3, r2
 800951c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009524:	2b20      	cmp	r3, #32
 8009526:	d137      	bne.n	8009598 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <HAL_UART_Receive_IT+0x24>
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e030      	b.n	800959a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a18      	ldr	r2, [pc, #96]	@ (80095a4 <HAL_UART_Receive_IT+0x94>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d01f      	beq.n	8009588 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d018      	beq.n	8009588 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	613b      	str	r3, [r7, #16]
   return(result);
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800956a:	627b      	str	r3, [r7, #36]	@ 0x24
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009574:	623b      	str	r3, [r7, #32]
 8009576:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	69f9      	ldr	r1, [r7, #28]
 800957a:	6a3a      	ldr	r2, [r7, #32]
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	61bb      	str	r3, [r7, #24]
   return(result);
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e6      	bne.n	8009556 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009588:	88fb      	ldrh	r3, [r7, #6]
 800958a:	461a      	mov	r2, r3
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f001 f9f8 	bl	800a984 <UART_Start_Receive_IT>
 8009594:	4603      	mov	r3, r0
 8009596:	e000      	b.n	800959a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009598:	2302      	movs	r3, #2
  }
}
 800959a:	4618      	mov	r0, r3
 800959c:	3728      	adds	r7, #40	@ 0x28
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	40008000 	.word	0x40008000

080095a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	@ 0x28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095bc:	2b20      	cmp	r3, #32
 80095be:	d167      	bne.n	8009690 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <HAL_UART_Transmit_DMA+0x24>
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e060      	b.n	8009692 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	88fa      	ldrh	r2, [r7, #6]
 80095da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	88fa      	ldrh	r2, [r7, #6]
 80095e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2221      	movs	r2, #33	@ 0x21
 80095f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d028      	beq.n	8009650 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009602:	4a26      	ldr	r2, [pc, #152]	@ (800969c <HAL_UART_Transmit_DMA+0xf4>)
 8009604:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800960a:	4a25      	ldr	r2, [pc, #148]	@ (80096a0 <HAL_UART_Transmit_DMA+0xf8>)
 800960c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009612:	4a24      	ldr	r2, [pc, #144]	@ (80096a4 <HAL_UART_Transmit_DMA+0xfc>)
 8009614:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800961a:	2200      	movs	r2, #0
 800961c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009626:	4619      	mov	r1, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3328      	adds	r3, #40	@ 0x28
 800962e:	461a      	mov	r2, r3
 8009630:	88fb      	ldrh	r3, [r7, #6]
 8009632:	f7fb fbd3 	bl	8004ddc <HAL_DMA_Start_IT>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d009      	beq.n	8009650 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2210      	movs	r2, #16
 8009640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2220      	movs	r2, #32
 8009648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e020      	b.n	8009692 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2240      	movs	r2, #64	@ 0x40
 8009656:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3308      	adds	r3, #8
 800965e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	e853 3f00 	ldrex	r3, [r3]
 8009666:	613b      	str	r3, [r7, #16]
   return(result);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3308      	adds	r3, #8
 8009676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009678:	623a      	str	r2, [r7, #32]
 800967a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	69f9      	ldr	r1, [r7, #28]
 800967e:	6a3a      	ldr	r2, [r7, #32]
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	61bb      	str	r3, [r7, #24]
   return(result);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e5      	bne.n	8009658 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	e000      	b.n	8009692 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009690:	2302      	movs	r3, #2
  }
}
 8009692:	4618      	mov	r0, r3
 8009694:	3728      	adds	r7, #40	@ 0x28
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	0800ad17 	.word	0x0800ad17
 80096a0:	0800adb5 	.word	0x0800adb5
 80096a4:	0800add5 	.word	0x0800add5

080096a8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b09a      	sub	sp, #104	@ 0x68
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80096d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e6      	bne.n	80096b0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3308      	adds	r3, #8
 80096e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096f8:	f023 0301 	bic.w	r3, r3, #1
 80096fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3308      	adds	r3, #8
 8009704:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009706:	643a      	str	r2, [r7, #64]	@ 0x40
 8009708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800970c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800970e:	e841 2300 	strex	r3, r2, [r1]
 8009712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1e3      	bne.n	80096e2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800971e:	2b01      	cmp	r3, #1
 8009720:	d118      	bne.n	8009754 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	f023 0310 	bic.w	r3, r3, #16
 8009736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009742:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e6      	bne.n	8009722 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800975e:	2b40      	cmp	r3, #64	@ 0x40
 8009760:	d13b      	bne.n	80097da <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	60bb      	str	r3, [r7, #8]
   return(result);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009778:	65bb      	str	r3, [r7, #88]	@ 0x58
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009782:	61ba      	str	r2, [r7, #24]
 8009784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6979      	ldr	r1, [r7, #20]
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	613b      	str	r3, [r7, #16]
   return(result);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e5      	bne.n	8009762 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01c      	beq.n	80097da <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a6:	2200      	movs	r2, #0
 80097a8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fb fb8e 	bl	8004ed2 <HAL_DMA_Abort>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00e      	beq.n	80097da <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fb fcf4 	bl	80051b0 <HAL_DMA_GetError>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d105      	bne.n	80097da <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2210      	movs	r2, #16
 80097d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e017      	b.n	800980a <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	220f      	movs	r2, #15
 80097e8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	699a      	ldr	r2, [r3, #24]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0208 	orr.w	r2, r2, #8
 80097f8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3768      	adds	r7, #104	@ 0x68
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b0ba      	sub	sp, #232	@ 0xe8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800983a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800983e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009842:	4013      	ands	r3, r2
 8009844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d11b      	bne.n	8009888 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009854:	f003 0320 	and.w	r3, r3, #32
 8009858:	2b00      	cmp	r3, #0
 800985a:	d015      	beq.n	8009888 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800985c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009860:	f003 0320 	and.w	r3, r3, #32
 8009864:	2b00      	cmp	r3, #0
 8009866:	d105      	bne.n	8009874 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800986c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8312 	beq.w	8009ea2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	4798      	blx	r3
      }
      return;
 8009886:	e30c      	b.n	8009ea2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 8129 	beq.w	8009ae4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009892:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009896:	4b90      	ldr	r3, [pc, #576]	@ (8009ad8 <HAL_UART_IRQHandler+0x2c4>)
 8009898:	4013      	ands	r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800989e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80098a2:	4b8e      	ldr	r3, [pc, #568]	@ (8009adc <HAL_UART_IRQHandler+0x2c8>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 811c 	beq.w	8009ae4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d011      	beq.n	80098dc <HAL_UART_IRQHandler+0xc8>
 80098b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2201      	movs	r2, #1
 80098ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098d2:	f043 0201 	orr.w	r2, r3, #1
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d011      	beq.n	800990c <HAL_UART_IRQHandler+0xf8>
 80098e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2202      	movs	r2, #2
 80098fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009902:	f043 0204 	orr.w	r2, r3, #4
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d011      	beq.n	800993c <HAL_UART_IRQHandler+0x128>
 8009918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2204      	movs	r2, #4
 800992a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009932:	f043 0202 	orr.w	r2, r3, #2
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800993c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009940:	f003 0308 	and.w	r3, r3, #8
 8009944:	2b00      	cmp	r3, #0
 8009946:	d017      	beq.n	8009978 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b00      	cmp	r3, #0
 8009952:	d105      	bne.n	8009960 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009954:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009958:	4b5f      	ldr	r3, [pc, #380]	@ (8009ad8 <HAL_UART_IRQHandler+0x2c4>)
 800995a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2208      	movs	r2, #8
 8009966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800996e:	f043 0208 	orr.w	r2, r3, #8
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800997c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009980:	2b00      	cmp	r3, #0
 8009982:	d012      	beq.n	80099aa <HAL_UART_IRQHandler+0x196>
 8009984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009988:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00c      	beq.n	80099aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a0:	f043 0220 	orr.w	r2, r3, #32
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 8278 	beq.w	8009ea6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d013      	beq.n	80099ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d105      	bne.n	80099da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d007      	beq.n	80099ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099fe:	2b40      	cmp	r3, #64	@ 0x40
 8009a00:	d005      	beq.n	8009a0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d058      	beq.n	8009ac0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 f91b 	bl	800ac4a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a1e:	2b40      	cmp	r3, #64	@ 0x40
 8009a20:	d148      	bne.n	8009ab4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3308      	adds	r3, #8
 8009a28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3308      	adds	r3, #8
 8009a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1d9      	bne.n	8009a22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d017      	beq.n	8009aa8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a7e:	4a18      	ldr	r2, [pc, #96]	@ (8009ae0 <HAL_UART_IRQHandler+0x2cc>)
 8009a80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fb fa7b 	bl	8004f84 <HAL_DMA_Abort_IT>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01f      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa6:	e015      	b.n	8009ad4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab2:	e00f      	b.n	8009ad4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009abe:	e009      	b.n	8009ad4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009ad2:	e1e8      	b.n	8009ea6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad4:	bf00      	nop
    return;
 8009ad6:	e1e6      	b.n	8009ea6 <HAL_UART_IRQHandler+0x692>
 8009ad8:	10000001 	.word	0x10000001
 8009adc:	04000120 	.word	0x04000120
 8009ae0:	0800ae59 	.word	0x0800ae59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	f040 8176 	bne.w	8009dda <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af2:	f003 0310 	and.w	r3, r3, #16
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 816f 	beq.w	8009dda <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b00:	f003 0310 	and.w	r3, r3, #16
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8168 	beq.w	8009dda <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2210      	movs	r2, #16
 8009b10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b1c:	2b40      	cmp	r3, #64	@ 0x40
 8009b1e:	f040 80dc 	bne.w	8009cda <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 80b1 	beq.w	8009c9c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b44:	429a      	cmp	r2, r3
 8009b46:	f080 80a9 	bcs.w	8009c9c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f040 8087 	bne.w	8009c76 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1da      	bne.n	8009b68 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bc4:	f023 0301 	bic.w	r3, r3, #1
 8009bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009bd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009bda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e1      	bne.n	8009bb2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e3      	bne.n	8009bee <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2220      	movs	r2, #32
 8009c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c44:	f023 0310 	bic.w	r3, r3, #16
 8009c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	461a      	mov	r2, r3
 8009c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c5e:	e841 2300 	strex	r3, r2, [r1]
 8009c62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1e4      	bne.n	8009c34 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fb f92e 	bl	8004ed2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	1a8a      	subs	r2, r1, r2
 8009c92:	b292      	uxth	r2, r2
 8009c94:	4611      	mov	r1, r2
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009c9a:	e106      	b.n	8009eaa <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	f040 80ff 	bne.w	8009eaa <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	f040 80f5 	bne.w	8009eaa <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	4798      	blx	r3
      return;
 8009cd8:	e0e7      	b.n	8009eaa <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 80d9 	beq.w	8009eae <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 80d4 	beq.w	8009eae <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0e:	e853 3f00 	ldrex	r3, [r3]
 8009d12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d30:	e841 2300 	strex	r3, r2, [r1]
 8009d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e4      	bne.n	8009d06 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3308      	adds	r3, #8
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d52:	f023 0301 	bic.w	r3, r3, #1
 8009d56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3308      	adds	r3, #8
 8009d60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d64:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e1      	bne.n	8009d3c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	e853 3f00 	ldrex	r3, [r3]
 8009d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f023 0310 	bic.w	r3, r3, #16
 8009da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	461a      	mov	r2, r3
 8009daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009dae:	61fb      	str	r3, [r7, #28]
 8009db0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	69b9      	ldr	r1, [r7, #24]
 8009db4:	69fa      	ldr	r2, [r7, #28]
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	617b      	str	r3, [r7, #20]
   return(result);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e4      	bne.n	8009d8c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009dce:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009dd8:	e069      	b.n	8009eae <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <HAL_UART_IRQHandler+0x5f4>
 8009de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009dfa:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e06:	e055      	b.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d014      	beq.n	8009e3e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d105      	bne.n	8009e2c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d008      	beq.n	8009e3e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d03e      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	4798      	blx	r3
    }
    return;
 8009e3c:	e039      	b.n	8009eb2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d009      	beq.n	8009e5e <HAL_UART_IRQHandler+0x64a>
 8009e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f812 	bl	800ae80 <UART_EndTransmit_IT>
    return;
 8009e5c:	e02a      	b.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00b      	beq.n	8009e82 <HAL_UART_IRQHandler+0x66e>
 8009e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d005      	beq.n	8009e82 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e80:	e018      	b.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d012      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
 8009e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	da0e      	bge.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ea0:	e008      	b.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009ea2:	bf00      	nop
 8009ea4:	e006      	b.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009ea6:	bf00      	nop
 8009ea8:	e004      	b.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009eaa:	bf00      	nop
 8009eac:	e002      	b.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009eae:	bf00      	nop
 8009eb0:	e000      	b.n	8009eb4 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009eb2:	bf00      	nop
  }
}
 8009eb4:	37e8      	adds	r7, #232	@ 0xe8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop

08009ebc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8009fe8 <UART_InitCallbacksToDefault+0x74>)
 8009f80:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a19      	ldr	r2, [pc, #100]	@ (8009fec <UART_InitCallbacksToDefault+0x78>)
 8009f88:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a18      	ldr	r2, [pc, #96]	@ (8009ff0 <UART_InitCallbacksToDefault+0x7c>)
 8009f90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a17      	ldr	r2, [pc, #92]	@ (8009ff4 <UART_InitCallbacksToDefault+0x80>)
 8009f98:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a16      	ldr	r2, [pc, #88]	@ (8009ff8 <UART_InitCallbacksToDefault+0x84>)
 8009fa0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a15      	ldr	r2, [pc, #84]	@ (8009ffc <UART_InitCallbacksToDefault+0x88>)
 8009fa8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a14      	ldr	r2, [pc, #80]	@ (800a000 <UART_InitCallbacksToDefault+0x8c>)
 8009fb0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a13      	ldr	r2, [pc, #76]	@ (800a004 <UART_InitCallbacksToDefault+0x90>)
 8009fb8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a12      	ldr	r2, [pc, #72]	@ (800a008 <UART_InitCallbacksToDefault+0x94>)
 8009fc0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a11      	ldr	r2, [pc, #68]	@ (800a00c <UART_InitCallbacksToDefault+0x98>)
 8009fc8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a10      	ldr	r2, [pc, #64]	@ (800a010 <UART_InitCallbacksToDefault+0x9c>)
 8009fd0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a0f      	ldr	r2, [pc, #60]	@ (800a014 <UART_InitCallbacksToDefault+0xa0>)
 8009fd8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	08009ed1 	.word	0x08009ed1
 8009fec:	08009ebd 	.word	0x08009ebd
 8009ff0:	08009ef9 	.word	0x08009ef9
 8009ff4:	08009ee5 	.word	0x08009ee5
 8009ff8:	08009f0d 	.word	0x08009f0d
 8009ffc:	08009f21 	.word	0x08009f21
 800a000:	08009f35 	.word	0x08009f35
 800a004:	08009f49 	.word	0x08009f49
 800a008:	0800b945 	.word	0x0800b945
 800a00c:	0800b959 	.word	0x0800b959
 800a010:	0800b96d 	.word	0x0800b96d
 800a014:	08009f5d 	.word	0x08009f5d

0800a018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a01c:	b08c      	sub	sp, #48	@ 0x30
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	689a      	ldr	r2, [r3, #8]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	431a      	orrs	r2, r3
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	431a      	orrs	r2, r3
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	4baa      	ldr	r3, [pc, #680]	@ (800a2f0 <UART_SetConfig+0x2d8>)
 800a048:	4013      	ands	r3, r2
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	6812      	ldr	r2, [r2, #0]
 800a04e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a050:	430b      	orrs	r3, r1
 800a052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a9f      	ldr	r2, [pc, #636]	@ (800a2f4 <UART_SetConfig+0x2dc>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d004      	beq.n	800a084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a080:	4313      	orrs	r3, r2
 800a082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a08e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	6812      	ldr	r2, [r2, #0]
 800a096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a098:	430b      	orrs	r3, r1
 800a09a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a2:	f023 010f 	bic.w	r1, r3, #15
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a90      	ldr	r2, [pc, #576]	@ (800a2f8 <UART_SetConfig+0x2e0>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d125      	bne.n	800a108 <UART_SetConfig+0xf0>
 800a0bc:	4b8f      	ldr	r3, [pc, #572]	@ (800a2fc <UART_SetConfig+0x2e4>)
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0c2:	f003 0303 	and.w	r3, r3, #3
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d81a      	bhi.n	800a100 <UART_SetConfig+0xe8>
 800a0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d0 <UART_SetConfig+0xb8>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0e1 	.word	0x0800a0e1
 800a0d4:	0800a0f1 	.word	0x0800a0f1
 800a0d8:	0800a0e9 	.word	0x0800a0e9
 800a0dc:	0800a0f9 	.word	0x0800a0f9
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e6:	e116      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ee:	e112      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f6:	e10e      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a0f8:	2308      	movs	r3, #8
 800a0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0fe:	e10a      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a100:	2310      	movs	r3, #16
 800a102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a106:	e106      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a7c      	ldr	r2, [pc, #496]	@ (800a300 <UART_SetConfig+0x2e8>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d138      	bne.n	800a184 <UART_SetConfig+0x16c>
 800a112:	4b7a      	ldr	r3, [pc, #488]	@ (800a2fc <UART_SetConfig+0x2e4>)
 800a114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a118:	f003 030c 	and.w	r3, r3, #12
 800a11c:	2b0c      	cmp	r3, #12
 800a11e:	d82d      	bhi.n	800a17c <UART_SetConfig+0x164>
 800a120:	a201      	add	r2, pc, #4	@ (adr r2, 800a128 <UART_SetConfig+0x110>)
 800a122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a126:	bf00      	nop
 800a128:	0800a15d 	.word	0x0800a15d
 800a12c:	0800a17d 	.word	0x0800a17d
 800a130:	0800a17d 	.word	0x0800a17d
 800a134:	0800a17d 	.word	0x0800a17d
 800a138:	0800a16d 	.word	0x0800a16d
 800a13c:	0800a17d 	.word	0x0800a17d
 800a140:	0800a17d 	.word	0x0800a17d
 800a144:	0800a17d 	.word	0x0800a17d
 800a148:	0800a165 	.word	0x0800a165
 800a14c:	0800a17d 	.word	0x0800a17d
 800a150:	0800a17d 	.word	0x0800a17d
 800a154:	0800a17d 	.word	0x0800a17d
 800a158:	0800a175 	.word	0x0800a175
 800a15c:	2300      	movs	r3, #0
 800a15e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a162:	e0d8      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a164:	2302      	movs	r3, #2
 800a166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a16a:	e0d4      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a16c:	2304      	movs	r3, #4
 800a16e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a172:	e0d0      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a174:	2308      	movs	r3, #8
 800a176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a17a:	e0cc      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a17c:	2310      	movs	r3, #16
 800a17e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a182:	e0c8      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a5e      	ldr	r2, [pc, #376]	@ (800a304 <UART_SetConfig+0x2ec>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d125      	bne.n	800a1da <UART_SetConfig+0x1c2>
 800a18e:	4b5b      	ldr	r3, [pc, #364]	@ (800a2fc <UART_SetConfig+0x2e4>)
 800a190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a194:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a198:	2b30      	cmp	r3, #48	@ 0x30
 800a19a:	d016      	beq.n	800a1ca <UART_SetConfig+0x1b2>
 800a19c:	2b30      	cmp	r3, #48	@ 0x30
 800a19e:	d818      	bhi.n	800a1d2 <UART_SetConfig+0x1ba>
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	d00a      	beq.n	800a1ba <UART_SetConfig+0x1a2>
 800a1a4:	2b20      	cmp	r3, #32
 800a1a6:	d814      	bhi.n	800a1d2 <UART_SetConfig+0x1ba>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <UART_SetConfig+0x19a>
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d008      	beq.n	800a1c2 <UART_SetConfig+0x1aa>
 800a1b0:	e00f      	b.n	800a1d2 <UART_SetConfig+0x1ba>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1b8:	e0ad      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c0:	e0a9      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a1c2:	2304      	movs	r3, #4
 800a1c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c8:	e0a5      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a1ca:	2308      	movs	r3, #8
 800a1cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d0:	e0a1      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a1d2:	2310      	movs	r3, #16
 800a1d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d8:	e09d      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a4a      	ldr	r2, [pc, #296]	@ (800a308 <UART_SetConfig+0x2f0>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d125      	bne.n	800a230 <UART_SetConfig+0x218>
 800a1e4:	4b45      	ldr	r3, [pc, #276]	@ (800a2fc <UART_SetConfig+0x2e4>)
 800a1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a1ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1f0:	d016      	beq.n	800a220 <UART_SetConfig+0x208>
 800a1f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1f4:	d818      	bhi.n	800a228 <UART_SetConfig+0x210>
 800a1f6:	2b80      	cmp	r3, #128	@ 0x80
 800a1f8:	d00a      	beq.n	800a210 <UART_SetConfig+0x1f8>
 800a1fa:	2b80      	cmp	r3, #128	@ 0x80
 800a1fc:	d814      	bhi.n	800a228 <UART_SetConfig+0x210>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <UART_SetConfig+0x1f0>
 800a202:	2b40      	cmp	r3, #64	@ 0x40
 800a204:	d008      	beq.n	800a218 <UART_SetConfig+0x200>
 800a206:	e00f      	b.n	800a228 <UART_SetConfig+0x210>
 800a208:	2300      	movs	r3, #0
 800a20a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a20e:	e082      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a210:	2302      	movs	r3, #2
 800a212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a216:	e07e      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a218:	2304      	movs	r3, #4
 800a21a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a21e:	e07a      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a220:	2308      	movs	r3, #8
 800a222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a226:	e076      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a228:	2310      	movs	r3, #16
 800a22a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a22e:	e072      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a35      	ldr	r2, [pc, #212]	@ (800a30c <UART_SetConfig+0x2f4>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d12a      	bne.n	800a290 <UART_SetConfig+0x278>
 800a23a:	4b30      	ldr	r3, [pc, #192]	@ (800a2fc <UART_SetConfig+0x2e4>)
 800a23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a240:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a244:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a248:	d01a      	beq.n	800a280 <UART_SetConfig+0x268>
 800a24a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a24e:	d81b      	bhi.n	800a288 <UART_SetConfig+0x270>
 800a250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a254:	d00c      	beq.n	800a270 <UART_SetConfig+0x258>
 800a256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a25a:	d815      	bhi.n	800a288 <UART_SetConfig+0x270>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <UART_SetConfig+0x250>
 800a260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a264:	d008      	beq.n	800a278 <UART_SetConfig+0x260>
 800a266:	e00f      	b.n	800a288 <UART_SetConfig+0x270>
 800a268:	2300      	movs	r3, #0
 800a26a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a26e:	e052      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a270:	2302      	movs	r3, #2
 800a272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a276:	e04e      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a278:	2304      	movs	r3, #4
 800a27a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a27e:	e04a      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a280:	2308      	movs	r3, #8
 800a282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a286:	e046      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a288:	2310      	movs	r3, #16
 800a28a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a28e:	e042      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a17      	ldr	r2, [pc, #92]	@ (800a2f4 <UART_SetConfig+0x2dc>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d13a      	bne.n	800a310 <UART_SetConfig+0x2f8>
 800a29a:	4b18      	ldr	r3, [pc, #96]	@ (800a2fc <UART_SetConfig+0x2e4>)
 800a29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a2a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a2a8:	d01a      	beq.n	800a2e0 <UART_SetConfig+0x2c8>
 800a2aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a2ae:	d81b      	bhi.n	800a2e8 <UART_SetConfig+0x2d0>
 800a2b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2b4:	d00c      	beq.n	800a2d0 <UART_SetConfig+0x2b8>
 800a2b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2ba:	d815      	bhi.n	800a2e8 <UART_SetConfig+0x2d0>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <UART_SetConfig+0x2b0>
 800a2c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2c4:	d008      	beq.n	800a2d8 <UART_SetConfig+0x2c0>
 800a2c6:	e00f      	b.n	800a2e8 <UART_SetConfig+0x2d0>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ce:	e022      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2d6:	e01e      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a2d8:	2304      	movs	r3, #4
 800a2da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2de:	e01a      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a2e0:	2308      	movs	r3, #8
 800a2e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2e6:	e016      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a2e8:	2310      	movs	r3, #16
 800a2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ee:	e012      	b.n	800a316 <UART_SetConfig+0x2fe>
 800a2f0:	cfff69f3 	.word	0xcfff69f3
 800a2f4:	40008000 	.word	0x40008000
 800a2f8:	40013800 	.word	0x40013800
 800a2fc:	40021000 	.word	0x40021000
 800a300:	40004400 	.word	0x40004400
 800a304:	40004800 	.word	0x40004800
 800a308:	40004c00 	.word	0x40004c00
 800a30c:	40005000 	.word	0x40005000
 800a310:	2310      	movs	r3, #16
 800a312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4aae      	ldr	r2, [pc, #696]	@ (800a5d4 <UART_SetConfig+0x5bc>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	f040 8097 	bne.w	800a450 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a322:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a326:	2b08      	cmp	r3, #8
 800a328:	d823      	bhi.n	800a372 <UART_SetConfig+0x35a>
 800a32a:	a201      	add	r2, pc, #4	@ (adr r2, 800a330 <UART_SetConfig+0x318>)
 800a32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a330:	0800a355 	.word	0x0800a355
 800a334:	0800a373 	.word	0x0800a373
 800a338:	0800a35d 	.word	0x0800a35d
 800a33c:	0800a373 	.word	0x0800a373
 800a340:	0800a363 	.word	0x0800a363
 800a344:	0800a373 	.word	0x0800a373
 800a348:	0800a373 	.word	0x0800a373
 800a34c:	0800a373 	.word	0x0800a373
 800a350:	0800a36b 	.word	0x0800a36b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a354:	f7fb fefa 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 800a358:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a35a:	e010      	b.n	800a37e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a35c:	4b9e      	ldr	r3, [pc, #632]	@ (800a5d8 <UART_SetConfig+0x5c0>)
 800a35e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a360:	e00d      	b.n	800a37e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a362:	f7fb fe85 	bl	8006070 <HAL_RCC_GetSysClockFreq>
 800a366:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a368:	e009      	b.n	800a37e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a36a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a36e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a370:	e005      	b.n	800a37e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a37c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 8130 	beq.w	800a5e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38a:	4a94      	ldr	r2, [pc, #592]	@ (800a5dc <UART_SetConfig+0x5c4>)
 800a38c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a390:	461a      	mov	r2, r3
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	fbb3 f3f2 	udiv	r3, r3, r2
 800a398:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	4413      	add	r3, r2
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d305      	bcc.n	800a3b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d903      	bls.n	800a3be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a3bc:	e113      	b.n	800a5e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	60bb      	str	r3, [r7, #8]
 800a3c4:	60fa      	str	r2, [r7, #12]
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ca:	4a84      	ldr	r2, [pc, #528]	@ (800a5dc <UART_SetConfig+0x5c4>)
 800a3cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	603b      	str	r3, [r7, #0]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3e0:	f7f5 ff1a 	bl	8000218 <__aeabi_uldivmod>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	f04f 0200 	mov.w	r2, #0
 800a3f0:	f04f 0300 	mov.w	r3, #0
 800a3f4:	020b      	lsls	r3, r1, #8
 800a3f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3fa:	0202      	lsls	r2, r0, #8
 800a3fc:	6979      	ldr	r1, [r7, #20]
 800a3fe:	6849      	ldr	r1, [r1, #4]
 800a400:	0849      	lsrs	r1, r1, #1
 800a402:	2000      	movs	r0, #0
 800a404:	460c      	mov	r4, r1
 800a406:	4605      	mov	r5, r0
 800a408:	eb12 0804 	adds.w	r8, r2, r4
 800a40c:	eb43 0905 	adc.w	r9, r3, r5
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	469a      	mov	sl, r3
 800a418:	4693      	mov	fp, r2
 800a41a:	4652      	mov	r2, sl
 800a41c:	465b      	mov	r3, fp
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	f7f5 fef9 	bl	8000218 <__aeabi_uldivmod>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4613      	mov	r3, r2
 800a42c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a434:	d308      	bcc.n	800a448 <UART_SetConfig+0x430>
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a43c:	d204      	bcs.n	800a448 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6a3a      	ldr	r2, [r7, #32]
 800a444:	60da      	str	r2, [r3, #12]
 800a446:	e0ce      	b.n	800a5e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a44e:	e0ca      	b.n	800a5e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	69db      	ldr	r3, [r3, #28]
 800a454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a458:	d166      	bne.n	800a528 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a45a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a45e:	2b08      	cmp	r3, #8
 800a460:	d827      	bhi.n	800a4b2 <UART_SetConfig+0x49a>
 800a462:	a201      	add	r2, pc, #4	@ (adr r2, 800a468 <UART_SetConfig+0x450>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a48d 	.word	0x0800a48d
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a49d 	.word	0x0800a49d
 800a474:	0800a4b3 	.word	0x0800a4b3
 800a478:	0800a4a3 	.word	0x0800a4a3
 800a47c:	0800a4b3 	.word	0x0800a4b3
 800a480:	0800a4b3 	.word	0x0800a4b3
 800a484:	0800a4b3 	.word	0x0800a4b3
 800a488:	0800a4ab 	.word	0x0800a4ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a48c:	f7fb fe5e 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 800a490:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a492:	e014      	b.n	800a4be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a494:	f7fb fe70 	bl	8006178 <HAL_RCC_GetPCLK2Freq>
 800a498:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a49a:	e010      	b.n	800a4be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a49c:	4b4e      	ldr	r3, [pc, #312]	@ (800a5d8 <UART_SetConfig+0x5c0>)
 800a49e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4a0:	e00d      	b.n	800a4be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4a2:	f7fb fde5 	bl	8006070 <HAL_RCC_GetSysClockFreq>
 800a4a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4a8:	e009      	b.n	800a4be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4b0:	e005      	b.n	800a4be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 8090 	beq.w	800a5e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ca:	4a44      	ldr	r2, [pc, #272]	@ (800a5dc <UART_SetConfig+0x5c4>)
 800a4cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4d8:	005a      	lsls	r2, r3, #1
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	085b      	lsrs	r3, r3, #1
 800a4e0:	441a      	add	r2, r3
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	2b0f      	cmp	r3, #15
 800a4f0:	d916      	bls.n	800a520 <UART_SetConfig+0x508>
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4f8:	d212      	bcs.n	800a520 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	f023 030f 	bic.w	r3, r3, #15
 800a502:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	085b      	lsrs	r3, r3, #1
 800a508:	b29b      	uxth	r3, r3
 800a50a:	f003 0307 	and.w	r3, r3, #7
 800a50e:	b29a      	uxth	r2, r3
 800a510:	8bfb      	ldrh	r3, [r7, #30]
 800a512:	4313      	orrs	r3, r2
 800a514:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	8bfa      	ldrh	r2, [r7, #30]
 800a51c:	60da      	str	r2, [r3, #12]
 800a51e:	e062      	b.n	800a5e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a526:	e05e      	b.n	800a5e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a528:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a52c:	2b08      	cmp	r3, #8
 800a52e:	d828      	bhi.n	800a582 <UART_SetConfig+0x56a>
 800a530:	a201      	add	r2, pc, #4	@ (adr r2, 800a538 <UART_SetConfig+0x520>)
 800a532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a536:	bf00      	nop
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a565 	.word	0x0800a565
 800a540:	0800a56d 	.word	0x0800a56d
 800a544:	0800a583 	.word	0x0800a583
 800a548:	0800a573 	.word	0x0800a573
 800a54c:	0800a583 	.word	0x0800a583
 800a550:	0800a583 	.word	0x0800a583
 800a554:	0800a583 	.word	0x0800a583
 800a558:	0800a57b 	.word	0x0800a57b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a55c:	f7fb fdf6 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 800a560:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a562:	e014      	b.n	800a58e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a564:	f7fb fe08 	bl	8006178 <HAL_RCC_GetPCLK2Freq>
 800a568:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a56a:	e010      	b.n	800a58e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a56c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5d8 <UART_SetConfig+0x5c0>)
 800a56e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a570:	e00d      	b.n	800a58e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a572:	f7fb fd7d 	bl	8006070 <HAL_RCC_GetSysClockFreq>
 800a576:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a578:	e009      	b.n	800a58e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a57a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a57e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a580:	e005      	b.n	800a58e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a582:	2300      	movs	r3, #0
 800a584:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a58c:	bf00      	nop
    }

    if (pclk != 0U)
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	2b00      	cmp	r3, #0
 800a592:	d028      	beq.n	800a5e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a598:	4a10      	ldr	r2, [pc, #64]	@ (800a5dc <UART_SetConfig+0x5c4>)
 800a59a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	441a      	add	r2, r3
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	2b0f      	cmp	r3, #15
 800a5bc:	d910      	bls.n	800a5e0 <UART_SetConfig+0x5c8>
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5c4:	d20c      	bcs.n	800a5e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60da      	str	r2, [r3, #12]
 800a5d0:	e009      	b.n	800a5e6 <UART_SetConfig+0x5ce>
 800a5d2:	bf00      	nop
 800a5d4:	40008000 	.word	0x40008000
 800a5d8:	00f42400 	.word	0x00f42400
 800a5dc:	0800c668 	.word	0x0800c668
      }
      else
      {
        ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2200      	movs	r2, #0
 800a600:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a602:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a606:	4618      	mov	r0, r3
 800a608:	3730      	adds	r7, #48	@ 0x30
 800a60a:	46bd      	mov	sp, r7
 800a60c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61c:	f003 0308 	and.w	r3, r3, #8
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00a      	beq.n	800a63a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00a      	beq.n	800a67e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00a      	beq.n	800a6c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01a      	beq.n	800a726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a70a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a70e:	d10a      	bne.n	800a726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	430a      	orrs	r2, r1
 800a724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	430a      	orrs	r2, r1
 800a746:	605a      	str	r2, [r3, #4]
  }
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b098      	sub	sp, #96	@ 0x60
 800a758:	af02      	add	r7, sp, #8
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a764:	f7f8 fe96 	bl	8003494 <HAL_GetTick>
 800a768:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0308 	and.w	r3, r3, #8
 800a774:	2b08      	cmp	r3, #8
 800a776:	d12f      	bne.n	800a7d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a778:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a780:	2200      	movs	r2, #0
 800a782:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f88e 	bl	800a8a8 <UART_WaitOnFlagUntilTimeout>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d022      	beq.n	800a7d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e6      	bne.n	800a792 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e063      	b.n	800a8a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d149      	bne.n	800a87a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f857 	bl	800a8a8 <UART_WaitOnFlagUntilTimeout>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d03c      	beq.n	800a87a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	623b      	str	r3, [r7, #32]
   return(result);
 800a80e:	6a3b      	ldr	r3, [r7, #32]
 800a810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a814:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	461a      	mov	r2, r3
 800a81c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a81e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a820:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a826:	e841 2300 	strex	r3, r2, [r1]
 800a82a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e6      	bne.n	800a800 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3308      	adds	r3, #8
 800a838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	e853 3f00 	ldrex	r3, [r3]
 800a840:	60fb      	str	r3, [r7, #12]
   return(result);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f023 0301 	bic.w	r3, r3, #1
 800a848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a852:	61fa      	str	r2, [r7, #28]
 800a854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	69b9      	ldr	r1, [r7, #24]
 800a858:	69fa      	ldr	r2, [r7, #28]
 800a85a:	e841 2300 	strex	r3, r2, [r1]
 800a85e:	617b      	str	r3, [r7, #20]
   return(result);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1e5      	bne.n	800a832 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2220      	movs	r2, #32
 800a86a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e012      	b.n	800a8a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2220      	movs	r2, #32
 800a87e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2220      	movs	r2, #32
 800a886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3758      	adds	r7, #88	@ 0x58
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8b8:	e04f      	b.n	800a95a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c0:	d04b      	beq.n	800a95a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8c2:	f7f8 fde7 	bl	8003494 <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d302      	bcc.n	800a8d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	e04e      	b.n	800a97a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0304 	and.w	r3, r3, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d037      	beq.n	800a95a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2b80      	cmp	r3, #128	@ 0x80
 800a8ee:	d034      	beq.n	800a95a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b40      	cmp	r3, #64	@ 0x40
 800a8f4:	d031      	beq.n	800a95a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	f003 0308 	and.w	r3, r3, #8
 800a900:	2b08      	cmp	r3, #8
 800a902:	d110      	bne.n	800a926 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2208      	movs	r2, #8
 800a90a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 f99c 	bl	800ac4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2208      	movs	r2, #8
 800a916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e029      	b.n	800a97a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	69db      	ldr	r3, [r3, #28]
 800a92c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a934:	d111      	bne.n	800a95a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a93e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 f982 	bl	800ac4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2220      	movs	r2, #32
 800a94a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e00f      	b.n	800a97a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	69da      	ldr	r2, [r3, #28]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	4013      	ands	r3, r2
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	429a      	cmp	r2, r3
 800a968:	bf0c      	ite	eq
 800a96a:	2301      	moveq	r3, #1
 800a96c:	2300      	movne	r3, #0
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	461a      	mov	r2, r3
 800a972:	79fb      	ldrb	r3, [r7, #7]
 800a974:	429a      	cmp	r2, r3
 800a976:	d0a0      	beq.n	800a8ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a984:	b480      	push	{r7}
 800a986:	b0a3      	sub	sp, #140	@ 0x8c
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	88fa      	ldrh	r2, [r7, #6]
 800a99c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	88fa      	ldrh	r2, [r7, #6]
 800a9a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9b6:	d10e      	bne.n	800a9d6 <UART_Start_Receive_IT+0x52>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d105      	bne.n	800a9cc <UART_Start_Receive_IT+0x48>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a9c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a9ca:	e02d      	b.n	800aa28 <UART_Start_Receive_IT+0xa4>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	22ff      	movs	r2, #255	@ 0xff
 800a9d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a9d4:	e028      	b.n	800aa28 <UART_Start_Receive_IT+0xa4>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10d      	bne.n	800a9fa <UART_Start_Receive_IT+0x76>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d104      	bne.n	800a9f0 <UART_Start_Receive_IT+0x6c>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	22ff      	movs	r2, #255	@ 0xff
 800a9ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a9ee:	e01b      	b.n	800aa28 <UART_Start_Receive_IT+0xa4>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	227f      	movs	r2, #127	@ 0x7f
 800a9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a9f8:	e016      	b.n	800aa28 <UART_Start_Receive_IT+0xa4>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa02:	d10d      	bne.n	800aa20 <UART_Start_Receive_IT+0x9c>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d104      	bne.n	800aa16 <UART_Start_Receive_IT+0x92>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	227f      	movs	r2, #127	@ 0x7f
 800aa10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aa14:	e008      	b.n	800aa28 <UART_Start_Receive_IT+0xa4>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	223f      	movs	r2, #63	@ 0x3f
 800aa1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aa1e:	e003      	b.n	800aa28 <UART_Start_Receive_IT+0xa4>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2222      	movs	r2, #34	@ 0x22
 800aa34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa42:	e853 3f00 	ldrex	r3, [r3]
 800aa46:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800aa48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa4a:	f043 0301 	orr.w	r3, r3, #1
 800aa4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3308      	adds	r3, #8
 800aa58:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800aa5c:	673a      	str	r2, [r7, #112]	@ 0x70
 800aa5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800aa62:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800aa6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e3      	bne.n	800aa38 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa78:	d14f      	bne.n	800ab1a <UART_Start_Receive_IT+0x196>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa80:	88fa      	ldrh	r2, [r7, #6]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d349      	bcc.n	800ab1a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa8e:	d107      	bne.n	800aaa0 <UART_Start_Receive_IT+0x11c>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d103      	bne.n	800aaa0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4a47      	ldr	r2, [pc, #284]	@ (800abb8 <UART_Start_Receive_IT+0x234>)
 800aa9c:	675a      	str	r2, [r3, #116]	@ 0x74
 800aa9e:	e002      	b.n	800aaa6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4a46      	ldr	r2, [pc, #280]	@ (800abbc <UART_Start_Receive_IT+0x238>)
 800aaa4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d01a      	beq.n	800aae4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aab6:	e853 3f00 	ldrex	r3, [r3]
 800aaba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aabc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aabe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aad2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800aad6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aad8:	e841 2300 	strex	r3, r2, [r1]
 800aadc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800aade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e4      	bne.n	800aaae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3308      	adds	r3, #8
 800aaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaee:	e853 3f00 	ldrex	r3, [r3]
 800aaf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aafa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3308      	adds	r3, #8
 800ab02:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ab04:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ab06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab0c:	e841 2300 	strex	r3, r2, [r1]
 800ab10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ab12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1e5      	bne.n	800aae4 <UART_Start_Receive_IT+0x160>
 800ab18:	e046      	b.n	800aba8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab22:	d107      	bne.n	800ab34 <UART_Start_Receive_IT+0x1b0>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d103      	bne.n	800ab34 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4a24      	ldr	r2, [pc, #144]	@ (800abc0 <UART_Start_Receive_IT+0x23c>)
 800ab30:	675a      	str	r2, [r3, #116]	@ 0x74
 800ab32:	e002      	b.n	800ab3a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4a23      	ldr	r2, [pc, #140]	@ (800abc4 <UART_Start_Receive_IT+0x240>)
 800ab38:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d019      	beq.n	800ab76 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	e853 3f00 	ldrex	r3, [r3]
 800ab4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab52:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ab56:	677b      	str	r3, [r7, #116]	@ 0x74
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab62:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab68:	e841 2300 	strex	r3, r2, [r1]
 800ab6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1e6      	bne.n	800ab42 <UART_Start_Receive_IT+0x1be>
 800ab74:	e018      	b.n	800aba8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	e853 3f00 	ldrex	r3, [r3]
 800ab82:	613b      	str	r3, [r7, #16]
   return(result);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f043 0320 	orr.w	r3, r3, #32
 800ab8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	461a      	mov	r2, r3
 800ab92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab94:	623b      	str	r3, [r7, #32]
 800ab96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	69f9      	ldr	r1, [r7, #28]
 800ab9a:	6a3a      	ldr	r2, [r7, #32]
 800ab9c:	e841 2300 	strex	r3, r2, [r1]
 800aba0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e6      	bne.n	800ab76 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	378c      	adds	r7, #140	@ 0x8c
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	0800b5cd 	.word	0x0800b5cd
 800abbc:	0800b25d 	.word	0x0800b25d
 800abc0:	0800b09d 	.word	0x0800b09d
 800abc4:	0800aedd 	.word	0x0800aedd

0800abc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abc8:	b480      	push	{r7}
 800abca:	b08f      	sub	sp, #60	@ 0x3c
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	e853 3f00 	ldrex	r3, [r3]
 800abdc:	61fb      	str	r3, [r7, #28]
   return(result);
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800abe4:	637b      	str	r3, [r7, #52]	@ 0x34
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	461a      	mov	r2, r3
 800abec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abf0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abf6:	e841 2300 	strex	r3, r2, [r1]
 800abfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1e6      	bne.n	800abd0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3308      	adds	r3, #8
 800ac08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	e853 3f00 	ldrex	r3, [r3]
 800ac10:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac18:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3308      	adds	r3, #8
 800ac20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac22:	61ba      	str	r2, [r7, #24]
 800ac24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	6979      	ldr	r1, [r7, #20]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	e841 2300 	strex	r3, r2, [r1]
 800ac2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e5      	bne.n	800ac02 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ac3e:	bf00      	nop
 800ac40:	373c      	adds	r7, #60	@ 0x3c
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b095      	sub	sp, #84	@ 0x54
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac5a:	e853 3f00 	ldrex	r3, [r3]
 800ac5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac70:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac78:	e841 2300 	strex	r3, r2, [r1]
 800ac7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1e6      	bne.n	800ac52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3308      	adds	r3, #8
 800ac8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	e853 3f00 	ldrex	r3, [r3]
 800ac92:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac9a:	f023 0301 	bic.w	r3, r3, #1
 800ac9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3308      	adds	r3, #8
 800aca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800acaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acb0:	e841 2300 	strex	r3, r2, [r1]
 800acb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1e3      	bne.n	800ac84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d118      	bne.n	800acf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	f023 0310 	bic.w	r3, r3, #16
 800acd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ace2:	61bb      	str	r3, [r7, #24]
 800ace4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6979      	ldr	r1, [r7, #20]
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	613b      	str	r3, [r7, #16]
   return(result);
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e6      	bne.n	800acc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad0a:	bf00      	nop
 800ad0c:	3754      	adds	r7, #84	@ 0x54
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b090      	sub	sp, #64	@ 0x40
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 0320 	and.w	r3, r3, #32
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d137      	bne.n	800ada2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ad32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad34:	2200      	movs	r2, #0
 800ad36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	623b      	str	r3, [r7, #32]
   return(result);
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad50:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad5a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad62:	e841 2300 	strex	r3, r2, [r1]
 800ad66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e5      	bne.n	800ad3a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8c:	61fb      	str	r3, [r7, #28]
 800ad8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	69b9      	ldr	r1, [r7, #24]
 800ad92:	69fa      	ldr	r2, [r7, #28]
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	617b      	str	r3, [r7, #20]
   return(result);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e6      	bne.n	800ad6e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ada0:	e004      	b.n	800adac <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800ada2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ada8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800adaa:	4798      	blx	r3
}
 800adac:	bf00      	nop
 800adae:	3740      	adds	r7, #64	@ 0x40
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ade8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adf0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adfc:	2b80      	cmp	r3, #128	@ 0x80
 800adfe:	d109      	bne.n	800ae14 <UART_DMAError+0x40>
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b21      	cmp	r3, #33	@ 0x21
 800ae04:	d106      	bne.n	800ae14 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ae0e:	6978      	ldr	r0, [r7, #20]
 800ae10:	f7ff feda 	bl	800abc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae1e:	2b40      	cmp	r3, #64	@ 0x40
 800ae20:	d109      	bne.n	800ae36 <UART_DMAError+0x62>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b22      	cmp	r3, #34	@ 0x22
 800ae26:	d106      	bne.n	800ae36 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ae30:	6978      	ldr	r0, [r7, #20]
 800ae32:	f7ff ff0a 	bl	800ac4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae3c:	f043 0210 	orr.w	r2, r3, #16
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae4c:	6978      	ldr	r0, [r7, #20]
 800ae4e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae50:	bf00      	nop
 800ae52:	3718      	adds	r7, #24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae78:	bf00      	nop
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	e853 3f00 	ldrex	r3, [r3]
 800ae94:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae9c:	61fb      	str	r3, [r7, #28]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	61bb      	str	r3, [r7, #24]
 800aea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeaa:	6979      	ldr	r1, [r7, #20]
 800aeac:	69ba      	ldr	r2, [r7, #24]
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e6      	bne.n	800ae88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2220      	movs	r2, #32
 800aebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aed2:	bf00      	nop
 800aed4:	3720      	adds	r7, #32
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b09c      	sub	sp, #112	@ 0x70
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aeea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aef4:	2b22      	cmp	r3, #34	@ 0x22
 800aef6:	f040 80c2 	bne.w	800b07e <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800af08:	b2d9      	uxtb	r1, r3
 800af0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af14:	400a      	ands	r2, r1
 800af16:	b2d2      	uxtb	r2, r2
 800af18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af1e:	1c5a      	adds	r2, r3, #1
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	3b01      	subs	r3, #1
 800af2e:	b29a      	uxth	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f040 80a5 	bne.w	800b08e <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af4c:	e853 3f00 	ldrex	r3, [r3]
 800af50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af6a:	e841 2300 	strex	r3, r2, [r1]
 800af6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1e6      	bne.n	800af44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	3308      	adds	r3, #8
 800af7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af88:	f023 0301 	bic.w	r3, r3, #1
 800af8c:	667b      	str	r3, [r7, #100]	@ 0x64
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3308      	adds	r3, #8
 800af94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800af96:	647a      	str	r2, [r7, #68]	@ 0x44
 800af98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af9e:	e841 2300 	strex	r3, r2, [r1]
 800afa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1e5      	bne.n	800af76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2220      	movs	r2, #32
 800afae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a35      	ldr	r2, [pc, #212]	@ (800b098 <UART_RxISR_8BIT+0x1bc>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d01f      	beq.n	800b008 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d018      	beq.n	800b008 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afde:	e853 3f00 	ldrex	r3, [r3]
 800afe2:	623b      	str	r3, [r7, #32]
   return(result);
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800afea:	663b      	str	r3, [r7, #96]	@ 0x60
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	461a      	mov	r2, r3
 800aff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aff4:	633b      	str	r3, [r7, #48]	@ 0x30
 800aff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800affa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800affc:	e841 2300 	strex	r3, r2, [r1]
 800b000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e6      	bne.n	800afd6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d130      	bne.n	800b072 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	e853 3f00 	ldrex	r3, [r3]
 800b022:	60fb      	str	r3, [r7, #12]
   return(result);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f023 0310 	bic.w	r3, r3, #16
 800b02a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	461a      	mov	r2, r3
 800b032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b034:	61fb      	str	r3, [r7, #28]
 800b036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b038:	69b9      	ldr	r1, [r7, #24]
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	e841 2300 	strex	r3, r2, [r1]
 800b040:	617b      	str	r3, [r7, #20]
   return(result);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e6      	bne.n	800b016 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	69db      	ldr	r3, [r3, #28]
 800b04e:	f003 0310 	and.w	r3, r3, #16
 800b052:	2b10      	cmp	r3, #16
 800b054:	d103      	bne.n	800b05e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2210      	movs	r2, #16
 800b05c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b06a:	4611      	mov	r1, r2
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b070:	e00d      	b.n	800b08e <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	4798      	blx	r3
}
 800b07c:	e007      	b.n	800b08e <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	699a      	ldr	r2, [r3, #24]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0208 	orr.w	r2, r2, #8
 800b08c:	619a      	str	r2, [r3, #24]
}
 800b08e:	bf00      	nop
 800b090:	3770      	adds	r7, #112	@ 0x70
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	40008000 	.word	0x40008000

0800b09c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b09c      	sub	sp, #112	@ 0x70
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b0aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0b4:	2b22      	cmp	r3, #34	@ 0x22
 800b0b6:	f040 80c2 	bne.w	800b23e <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b0ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b0ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0de:	1c9a      	adds	r2, r3, #2
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f040 80a5 	bne.w	800b24e <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b118:	667b      	str	r3, [r7, #100]	@ 0x64
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b122:	657b      	str	r3, [r7, #84]	@ 0x54
 800b124:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b126:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b128:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b12a:	e841 2300 	strex	r3, r2, [r1]
 800b12e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1e6      	bne.n	800b104 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	3308      	adds	r3, #8
 800b13c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b140:	e853 3f00 	ldrex	r3, [r3]
 800b144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	f023 0301 	bic.w	r3, r3, #1
 800b14c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3308      	adds	r3, #8
 800b154:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b156:	643a      	str	r2, [r7, #64]	@ 0x40
 800b158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b15c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e5      	bne.n	800b136 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2220      	movs	r2, #32
 800b16e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a35      	ldr	r2, [pc, #212]	@ (800b258 <UART_RxISR_16BIT+0x1bc>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d01f      	beq.n	800b1c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d018      	beq.n	800b1c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	e853 3f00 	ldrex	r3, [r3]
 800b1a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b1aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1bc:	e841 2300 	strex	r3, r2, [r1]
 800b1c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1e6      	bne.n	800b196 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d130      	bne.n	800b232 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f023 0310 	bic.w	r3, r3, #16
 800b1ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1f4:	61bb      	str	r3, [r7, #24]
 800b1f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f8:	6979      	ldr	r1, [r7, #20]
 800b1fa:	69ba      	ldr	r2, [r7, #24]
 800b1fc:	e841 2300 	strex	r3, r2, [r1]
 800b200:	613b      	str	r3, [r7, #16]
   return(result);
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1e6      	bne.n	800b1d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	69db      	ldr	r3, [r3, #28]
 800b20e:	f003 0310 	and.w	r3, r3, #16
 800b212:	2b10      	cmp	r3, #16
 800b214:	d103      	bne.n	800b21e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2210      	movs	r2, #16
 800b21c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b22a:	4611      	mov	r1, r2
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b230:	e00d      	b.n	800b24e <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
}
 800b23c:	e007      	b.n	800b24e <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	699a      	ldr	r2, [r3, #24]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f042 0208 	orr.w	r2, r2, #8
 800b24c:	619a      	str	r2, [r3, #24]
}
 800b24e:	bf00      	nop
 800b250:	3770      	adds	r7, #112	@ 0x70
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	40008000 	.word	0x40008000

0800b25c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b0ac      	sub	sp, #176	@ 0xb0
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b26a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b292:	2b22      	cmp	r3, #34	@ 0x22
 800b294:	f040 8189 	bne.w	800b5aa <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b29e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b2a2:	e12c      	b.n	800b4fe <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b2ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b2b2:	b2d9      	uxtb	r1, r3
 800b2b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2be:	400a      	ands	r2, r1
 800b2c0:	b2d2      	uxtb	r2, r2
 800b2c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b2ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2ee:	f003 0307 	and.w	r3, r3, #7
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d055      	beq.n	800b3a2 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d011      	beq.n	800b326 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00b      	beq.n	800b326 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2201      	movs	r2, #1
 800b314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b31c:	f043 0201 	orr.w	r2, r3, #1
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b32a:	f003 0302 	and.w	r3, r3, #2
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d011      	beq.n	800b356 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00b      	beq.n	800b356 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2202      	movs	r2, #2
 800b344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b34c:	f043 0204 	orr.w	r2, r3, #4
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d011      	beq.n	800b386 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00b      	beq.n	800b386 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2204      	movs	r2, #4
 800b374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b37c:	f043 0202 	orr.w	r2, r3, #2
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d008      	beq.n	800b3a2 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f040 80a7 	bne.w	800b4fe <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3b8:	e853 3f00 	ldrex	r3, [r3]
 800b3bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b3be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b3d4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b3d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b3da:	e841 2300 	strex	r3, r2, [r1]
 800b3de:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b3e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1e4      	bne.n	800b3b0 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3308      	adds	r3, #8
 800b3ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3f0:	e853 3f00 	ldrex	r3, [r3]
 800b3f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b3f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3fc:	f023 0301 	bic.w	r3, r3, #1
 800b400:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3308      	adds	r3, #8
 800b40a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b40e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b410:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b412:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b414:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b416:	e841 2300 	strex	r3, r2, [r1]
 800b41a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b41c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1e1      	bne.n	800b3e6 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2220      	movs	r2, #32
 800b426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a62      	ldr	r2, [pc, #392]	@ (800b5c4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d021      	beq.n	800b484 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d01a      	beq.n	800b484 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b456:	e853 3f00 	ldrex	r3, [r3]
 800b45a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b45c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b45e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b470:	657b      	str	r3, [r7, #84]	@ 0x54
 800b472:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b474:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b476:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b478:	e841 2300 	strex	r3, r2, [r1]
 800b47c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b47e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1e4      	bne.n	800b44e <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d132      	bne.n	800b4f2 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b49a:	e853 3f00 	ldrex	r3, [r3]
 800b49e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	f023 0310 	bic.w	r3, r3, #16
 800b4a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4bc:	e841 2300 	strex	r3, r2, [r1]
 800b4c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1e4      	bne.n	800b492 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	f003 0310 	and.w	r3, r3, #16
 800b4d2:	2b10      	cmp	r3, #16
 800b4d4:	d103      	bne.n	800b4de <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2210      	movs	r2, #16
 800b4dc:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b4f0:	e010      	b.n	800b514 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	4798      	blx	r3
        break;
 800b4fc:	e00a      	b.n	800b514 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b4fe:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b502:	2b00      	cmp	r3, #0
 800b504:	d006      	beq.n	800b514 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800b506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f47f aec8 	bne.w	800b2a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b51a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b51e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b522:	2b00      	cmp	r3, #0
 800b524:	d049      	beq.n	800b5ba <UART_RxISR_8BIT_FIFOEN+0x35e>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b52c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b530:	429a      	cmp	r2, r3
 800b532:	d242      	bcs.n	800b5ba <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3308      	adds	r3, #8
 800b53a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	e853 3f00 	ldrex	r3, [r3]
 800b542:	61fb      	str	r3, [r7, #28]
   return(result);
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b54a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3308      	adds	r3, #8
 800b554:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b558:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b55a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b55e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b560:	e841 2300 	strex	r3, r2, [r1]
 800b564:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1e3      	bne.n	800b534 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a16      	ldr	r2, [pc, #88]	@ (800b5c8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800b570:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	e853 3f00 	ldrex	r3, [r3]
 800b57e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	f043 0320 	orr.w	r3, r3, #32
 800b586:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b594:	61bb      	str	r3, [r7, #24]
 800b596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b598:	6979      	ldr	r1, [r7, #20]
 800b59a:	69ba      	ldr	r2, [r7, #24]
 800b59c:	e841 2300 	strex	r3, r2, [r1]
 800b5a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1e4      	bne.n	800b572 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5a8:	e007      	b.n	800b5ba <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699a      	ldr	r2, [r3, #24]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f042 0208 	orr.w	r2, r2, #8
 800b5b8:	619a      	str	r2, [r3, #24]
}
 800b5ba:	bf00      	nop
 800b5bc:	37b0      	adds	r7, #176	@ 0xb0
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	40008000 	.word	0x40008000
 800b5c8:	0800aedd 	.word	0x0800aedd

0800b5cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b0ae      	sub	sp, #184	@ 0xb8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b5da:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	69db      	ldr	r3, [r3, #28]
 800b5e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b602:	2b22      	cmp	r3, #34	@ 0x22
 800b604:	f040 818d 	bne.w	800b922 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b60e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b612:	e130      	b.n	800b876 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b61a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b626:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b62a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b62e:	4013      	ands	r3, r2
 800b630:	b29a      	uxth	r2, r3
 800b632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b636:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b63c:	1c9a      	adds	r2, r3, #2
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b648:	b29b      	uxth	r3, r3
 800b64a:	3b01      	subs	r3, #1
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	69db      	ldr	r3, [r3, #28]
 800b65a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b65e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b662:	f003 0307 	and.w	r3, r3, #7
 800b666:	2b00      	cmp	r3, #0
 800b668:	d055      	beq.n	800b716 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b66a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	2b00      	cmp	r3, #0
 800b674:	d011      	beq.n	800b69a <UART_RxISR_16BIT_FIFOEN+0xce>
 800b676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b67a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00b      	beq.n	800b69a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2201      	movs	r2, #1
 800b688:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b690:	f043 0201 	orr.w	r2, r3, #1
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b69a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b69e:	f003 0302 	and.w	r3, r3, #2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d011      	beq.n	800b6ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b6a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00b      	beq.n	800b6ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6c0:	f043 0204 	orr.w	r2, r3, #4
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d011      	beq.n	800b6fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b6d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00b      	beq.n	800b6fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2204      	movs	r2, #4
 800b6e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6f0:	f043 0202 	orr.w	r2, r3, #2
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b700:	2b00      	cmp	r3, #0
 800b702:	d008      	beq.n	800b716 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f040 80a9 	bne.w	800b876 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	461a      	mov	r2, r3
 800b742:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b746:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b74a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b74e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b752:	e841 2300 	strex	r3, r2, [r1]
 800b756:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e2      	bne.n	800b724 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3308      	adds	r3, #8
 800b764:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b768:	e853 3f00 	ldrex	r3, [r3]
 800b76c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b76e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b774:	f023 0301 	bic.w	r3, r3, #1
 800b778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3308      	adds	r3, #8
 800b782:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b788:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b78c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b78e:	e841 2300 	strex	r3, r2, [r1]
 800b792:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e1      	bne.n	800b75e <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2220      	movs	r2, #32
 800b79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a62      	ldr	r2, [pc, #392]	@ (800b93c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d021      	beq.n	800b7fc <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d01a      	beq.n	800b7fc <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ce:	e853 3f00 	ldrex	r3, [r3]
 800b7d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b7da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b7e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7f0:	e841 2300 	strex	r3, r2, [r1]
 800b7f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b7f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e4      	bne.n	800b7c6 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b800:	2b01      	cmp	r3, #1
 800b802:	d132      	bne.n	800b86a <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	e853 3f00 	ldrex	r3, [r3]
 800b816:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b81a:	f023 0310 	bic.w	r3, r3, #16
 800b81e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b82c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b82e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b834:	e841 2300 	strex	r3, r2, [r1]
 800b838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1e4      	bne.n	800b80a <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	69db      	ldr	r3, [r3, #28]
 800b846:	f003 0310 	and.w	r3, r3, #16
 800b84a:	2b10      	cmp	r3, #16
 800b84c:	d103      	bne.n	800b856 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2210      	movs	r2, #16
 800b854:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b862:	4611      	mov	r1, r2
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b868:	e010      	b.n	800b88c <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	4798      	blx	r3
        break;
 800b874:	e00a      	b.n	800b88c <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b876:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d006      	beq.n	800b88c <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800b87e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b882:	f003 0320 	and.w	r3, r3, #32
 800b886:	2b00      	cmp	r3, #0
 800b888:	f47f aec4 	bne.w	800b614 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b892:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b896:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d049      	beq.n	800b932 <UART_RxISR_16BIT_FIFOEN+0x366>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b8a4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d242      	bcs.n	800b932 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b6:	e853 3f00 	ldrex	r3, [r3]
 800b8ba:	623b      	str	r3, [r7, #32]
   return(result);
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b8d0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8d8:	e841 2300 	strex	r3, r2, [r1]
 800b8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e3      	bne.n	800b8ac <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a16      	ldr	r2, [pc, #88]	@ (800b940 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800b8e8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f043 0320 	orr.w	r3, r3, #32
 800b8fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b90c:	61fb      	str	r3, [r7, #28]
 800b90e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	69b9      	ldr	r1, [r7, #24]
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	617b      	str	r3, [r7, #20]
   return(result);
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e4      	bne.n	800b8ea <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b920:	e007      	b.n	800b932 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	699a      	ldr	r2, [r3, #24]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f042 0208 	orr.w	r2, r2, #8
 800b930:	619a      	str	r2, [r3, #24]
}
 800b932:	bf00      	nop
 800b934:	37b8      	adds	r7, #184	@ 0xb8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	40008000 	.word	0x40008000
 800b940:	0800b09d 	.word	0x0800b09d

0800b944 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d101      	bne.n	800b996 <HAL_UARTEx_DisableFifoMode+0x16>
 800b992:	2302      	movs	r3, #2
 800b994:	e027      	b.n	800b9e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2224      	movs	r2, #36	@ 0x24
 800b9a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f022 0201 	bic.w	r2, r2, #1
 800b9bc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b9c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d101      	bne.n	800ba0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba06:	2302      	movs	r3, #2
 800ba08:	e02d      	b.n	800ba66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2224      	movs	r2, #36	@ 0x24
 800ba16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f022 0201 	bic.w	r2, r2, #1
 800ba30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	683a      	ldr	r2, [r7, #0]
 800ba42:	430a      	orrs	r2, r1
 800ba44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f850 	bl	800baec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2220      	movs	r2, #32
 800ba58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d101      	bne.n	800ba86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba82:	2302      	movs	r3, #2
 800ba84:	e02d      	b.n	800bae2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2224      	movs	r2, #36	@ 0x24
 800ba92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f022 0201 	bic.w	r2, r2, #1
 800baac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	430a      	orrs	r2, r1
 800bac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f812 	bl	800baec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d108      	bne.n	800bb0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb0c:	e031      	b.n	800bb72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb0e:	2308      	movs	r3, #8
 800bb10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb12:	2308      	movs	r3, #8
 800bb14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	0e5b      	lsrs	r3, r3, #25
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	f003 0307 	and.w	r3, r3, #7
 800bb24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	0f5b      	lsrs	r3, r3, #29
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	f003 0307 	and.w	r3, r3, #7
 800bb34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	7b3a      	ldrb	r2, [r7, #12]
 800bb3a:	4911      	ldr	r1, [pc, #68]	@ (800bb80 <UARTEx_SetNbDataToProcess+0x94>)
 800bb3c:	5c8a      	ldrb	r2, [r1, r2]
 800bb3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb42:	7b3a      	ldrb	r2, [r7, #12]
 800bb44:	490f      	ldr	r1, [pc, #60]	@ (800bb84 <UARTEx_SetNbDataToProcess+0x98>)
 800bb46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb48:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	7b7a      	ldrb	r2, [r7, #13]
 800bb58:	4909      	ldr	r1, [pc, #36]	@ (800bb80 <UARTEx_SetNbDataToProcess+0x94>)
 800bb5a:	5c8a      	ldrb	r2, [r1, r2]
 800bb5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb60:	7b7a      	ldrb	r2, [r7, #13]
 800bb62:	4908      	ldr	r1, [pc, #32]	@ (800bb84 <UARTEx_SetNbDataToProcess+0x98>)
 800bb64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb66:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb72:	bf00      	nop
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	0800c680 	.word	0x0800c680
 800bb84:	0800c688 	.word	0x0800c688

0800bb88 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	ed93 7a06 	vldr	s14, [r3, #24]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	edd3 7a07 	vldr	s15, [r3, #28]
 800bb9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	edd3 7a08 	vldr	s15, [r3, #32]
 800bba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	edd3 7a06 	vldr	s15, [r3, #24]
 800bbb8:	eeb1 7a67 	vneg.f32	s14, s15
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	edd3 7a08 	vldr	s15, [r3, #32]
 800bbc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bbc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a1a      	ldr	r2, [r3, #32]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d006      	beq.n	800bbec <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	330c      	adds	r3, #12
 800bbe2:	220c      	movs	r2, #12
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 fcc4 	bl	800c574 <memset>
  }

}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b08b      	sub	sp, #44	@ 0x2c
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	885b      	ldrh	r3, [r3, #2]
 800bc1c:	fb02 f303 	mul.w	r3, r2, r3
 800bc20:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bc26:	e013      	b.n	800bc50 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2a:	1d1a      	adds	r2, r3, #4
 800bc2c:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc2e:	ed93 7a00 	vldr	s14, [r3]
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	1d1a      	adds	r2, r3, #4
 800bc36:	623a      	str	r2, [r7, #32]
 800bc38:	edd3 7a00 	vldr	s15, [r3]
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	1d1a      	adds	r2, r3, #4
 800bc40:	61fa      	str	r2, [r7, #28]
 800bc42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc46:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e8      	bne.n	800bc28 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bc56:	2300      	movs	r3, #0
 800bc58:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800bc5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	372c      	adds	r7, #44	@ 0x2c
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	607b      	str	r3, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	817b      	strh	r3, [r7, #10]
 800bc78:	4613      	mov	r3, r2
 800bc7a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	897a      	ldrh	r2, [r7, #10]
 800bc80:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	893a      	ldrh	r2, [r7, #8]
 800bc86:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	605a      	str	r2, [r3, #4]
}
 800bc8e:	bf00      	nop
 800bc90:	3714      	adds	r7, #20
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	b0bb      	sub	sp, #236	@ 0xec
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	885b      	ldrh	r3, [r3, #2]
 800bcba:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800bcbc:	f04f 0300 	mov.w	r3, #0
 800bcc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bcc4:	f04f 0300 	mov.w	r3, #0
 800bcc8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800bcca:	2300      	movs	r3, #0
 800bccc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800bcd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800bcd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800bcdc:	e03b      	b.n	800bd56 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800bcde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bce0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bcea:	e00c      	b.n	800bd06 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800bcec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcf0:	1d1a      	adds	r2, r3, #4
 800bcf2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bcf6:	f04f 0200 	mov.w	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
        j--;
 800bcfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd00:	3b01      	subs	r3, #1
 800bd02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bd06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1ee      	bne.n	800bcec <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800bd0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd12:	1d1a      	adds	r2, r3, #4
 800bd14:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bd18:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800bd1c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800bd1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bd22:	3b01      	subs	r3, #1
 800bd24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bd28:	e00c      	b.n	800bd44 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800bd2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd2e:	1d1a      	adds	r2, r3, #4
 800bd30:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bd34:	f04f 0200 	mov.w	r2, #0
 800bd38:	601a      	str	r2, [r3, #0]
        j--;
 800bd3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bd44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1ee      	bne.n	800bd2a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800bd4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bd50:	3b01      	subs	r3, #1
 800bd52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800bd56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1bf      	bne.n	800bcde <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd64:	e2c7      	b.n	800c2f6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800bd66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd6a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	885b      	ldrh	r3, [r3, #2]
 800bd74:	3301      	adds	r3, #1
 800bd76:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800bd7a:	fb01 f303 	mul.w	r3, r1, r3
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4413      	add	r3, r2
 800bd82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800bd86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800bd90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bd98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bda2:	e02c      	b.n	800bdfe <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	885b      	ldrh	r3, [r3, #2]
 800bdac:	4619      	mov	r1, r3
 800bdae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bdb2:	fb03 f101 	mul.w	r1, r3, r1
 800bdb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdba:	440b      	add	r3, r1
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800bdc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800bdcc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800bdd0:	eeb0 7ae7 	vabs.f32	s14, s15
 800bdd4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bdd8:	eef0 7ae7 	vabs.f32	s15, s15
 800bddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde4:	dd06      	ble.n	800bdf4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800bde6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bdea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800bdee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bdf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bdfe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800be02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be04:	429a      	cmp	r2, r3
 800be06:	d3cd      	bcc.n	800bda4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800be08:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800be0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be14:	f000 809b 	beq.w	800bf4e <arm_mat_inverse_f32+0x2b4>
 800be18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800be1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be20:	429a      	cmp	r2, r3
 800be22:	f000 8094 	beq.w	800bf4e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be4a:	fb03 f202 	mul.w	r2, r3, r2
 800be4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800be5a:	4413      	add	r3, r2
 800be5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800be66:	fb03 f202 	mul.w	r2, r3, r2
 800be6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be6e:	4413      	add	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800be76:	4413      	add	r3, r2
 800be78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be7c:	2300      	movs	r3, #0
 800be7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800be82:	e018      	b.n	800beb6 <arm_mat_inverse_f32+0x21c>
 800be84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be90:	1d1a      	adds	r2, r3, #4
 800be92:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800be96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bea2:	1d1a      	adds	r2, r3, #4
 800bea4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800bea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800beb0:	3301      	adds	r3, #1
 800beb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800beb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800beba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bebc:	429a      	cmp	r2, r3
 800bebe:	dbe1      	blt.n	800be84 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	885b      	ldrh	r3, [r3, #2]
 800bed4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bed8:	643b      	str	r3, [r7, #64]	@ 0x40
 800beda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bedc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bede:	fb02 f303 	mul.w	r3, r2, r3
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bee8:	4413      	add	r3, r2
 800beea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800beee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bef0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bef4:	fb02 f303 	mul.w	r3, r2, r3
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800befe:	4413      	add	r3, r2
 800bf00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bf04:	2300      	movs	r3, #0
 800bf06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf0a:	e018      	b.n	800bf3e <arm_mat_inverse_f32+0x2a4>
 800bf0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf18:	1d1a      	adds	r2, r3, #4
 800bf1a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bf1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bf22:	6812      	ldr	r2, [r2, #0]
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf2a:	1d1a      	adds	r2, r3, #4
 800bf2c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bf30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bf32:	601a      	str	r2, [r3, #0]
 800bf34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bf38:	3301      	adds	r3, #1
 800bf3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bf42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf44:	429a      	cmp	r2, r3
 800bf46:	dbe1      	blt.n	800bf0c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800bf4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d009      	beq.n	800bf6a <arm_mat_inverse_f32+0x2d0>
 800bf56:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bf5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf62:	d102      	bne.n	800bf6a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800bf64:	f06f 0304 	mvn.w	r3, #4
 800bf68:	e208      	b.n	800c37c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800bf6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf6e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800bf72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf76:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	885b      	ldrh	r3, [r3, #2]
 800bf86:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf96:	fb03 f202 	mul.w	r2, r3, r2
 800bf9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800bfa6:	4413      	add	r3, r2
 800bfa8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bfac:	2300      	movs	r3, #0
 800bfae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bfb2:	e011      	b.n	800bfd8 <arm_mat_inverse_f32+0x33e>
 800bfb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bfb8:	1d1a      	adds	r2, r3, #4
 800bfba:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800bfbe:	ed93 7a00 	vldr	s14, [r3]
 800bfc2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bfc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfca:	edc3 7a00 	vstr	s15, [r3]
 800bfce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bfd8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	dbe8      	blt.n	800bfb4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	885b      	ldrh	r3, [r3, #2]
 800bfee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bff8:	fb02 f303 	mul.w	r3, r2, r3
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c002:	4413      	add	r3, r2
 800c004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c008:	2300      	movs	r3, #0
 800c00a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c00e:	e011      	b.n	800c034 <arm_mat_inverse_f32+0x39a>
 800c010:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c014:	1d1a      	adds	r2, r3, #4
 800c016:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800c01a:	ed93 7a00 	vldr	s14, [r3]
 800c01e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c026:	edc3 7a00 	vstr	s15, [r3]
 800c02a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c02e:	3301      	adds	r3, #1
 800c030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c034:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800c038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03a:	429a      	cmp	r2, r3
 800c03c:	dbe8      	blt.n	800c010 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800c044:	e0ae      	b.n	800c1a4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	885b      	ldrh	r3, [r3, #2]
 800c04e:	4619      	mov	r1, r3
 800c050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c054:	fb03 f101 	mul.w	r1, r3, r1
 800c058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c05c:	440b      	add	r3, r1
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	885b      	ldrh	r3, [r3, #2]
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	613b      	str	r3, [r7, #16]
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c096:	fb03 f202 	mul.w	r2, r3, r2
 800c09a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c0b0:	fb03 f202 	mul.w	r2, r3, r2
 800c0b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c0cc:	e01a      	b.n	800c104 <arm_mat_inverse_f32+0x46a>
 800c0ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0d2:	1d1a      	adds	r2, r3, #4
 800c0d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c0d8:	ed93 7a00 	vldr	s14, [r3]
 800c0dc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c0e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c0e8:	1d1a      	adds	r2, r3, #4
 800c0ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c0ee:	ed93 7a00 	vldr	s14, [r3]
 800c0f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0f6:	edc3 7a00 	vstr	s15, [r3]
 800c0fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c0fe:	3301      	adds	r3, #1
 800c100:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c104:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	dbdf      	blt.n	800c0ce <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	885b      	ldrh	r3, [r3, #2]
 800c122:	60fb      	str	r3, [r7, #12]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	60bb      	str	r3, [r7, #8]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c12e:	fb02 f303 	mul.w	r3, r2, r3
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c138:	4413      	add	r3, r2
 800c13a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c142:	fb02 f303 	mul.w	r3, r2, r3
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c14c:	4413      	add	r3, r2
 800c14e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c152:	2300      	movs	r3, #0
 800c154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c158:	e01a      	b.n	800c190 <arm_mat_inverse_f32+0x4f6>
 800c15a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c15e:	1d1a      	adds	r2, r3, #4
 800c160:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c164:	ed93 7a00 	vldr	s14, [r3]
 800c168:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c174:	1d1a      	adds	r2, r3, #4
 800c176:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c17a:	ed93 7a00 	vldr	s14, [r3]
 800c17e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c182:	edc3 7a00 	vstr	s15, [r3]
 800c186:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c18a:	3301      	adds	r3, #1
 800c18c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c190:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	429a      	cmp	r2, r3
 800c198:	dbdf      	blt.n	800c15a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800c19a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c19e:	3301      	adds	r3, #1
 800c1a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c1a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c1a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	f4ff af4b 	bcc.w	800c046 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c1b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c1b8:	e092      	b.n	800c2e0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	885b      	ldrh	r3, [r3, #2]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c1c8:	fb03 f101 	mul.w	r1, r3, r1
 800c1cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c1d0:	440b      	add	r3, r1
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	885b      	ldrh	r3, [r3, #2]
 800c1f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	623b      	str	r3, [r7, #32]
 800c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c202:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c206:	fb03 f202 	mul.w	r2, r3, r2
 800c20a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c20e:	4413      	add	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c214:	4413      	add	r3, r2
 800c216:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c21c:	fb03 f202 	mul.w	r2, r3, r2
 800c220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c22a:	4413      	add	r3, r2
 800c22c:	677b      	str	r3, [r7, #116]	@ 0x74
 800c22e:	2300      	movs	r3, #0
 800c230:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c232:	e014      	b.n	800c25e <arm_mat_inverse_f32+0x5c4>
 800c234:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c236:	1d1a      	adds	r2, r3, #4
 800c238:	677a      	str	r2, [r7, #116]	@ 0x74
 800c23a:	ed93 7a00 	vldr	s14, [r3]
 800c23e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c24c:	ed93 7a00 	vldr	s14, [r3]
 800c250:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c254:	edc3 7a00 	vstr	s15, [r3]
 800c258:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c25a:	3301      	adds	r3, #1
 800c25c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c25e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	429a      	cmp	r2, r3
 800c264:	dbe6      	blt.n	800c234 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	885b      	ldrh	r3, [r3, #2]
 800c276:	61fb      	str	r3, [r7, #28]
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	61bb      	str	r3, [r7, #24]
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c282:	fb02 f303 	mul.w	r3, r2, r3
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c28a:	4413      	add	r3, r2
 800c28c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c292:	fb02 f303 	mul.w	r3, r2, r3
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c29a:	4413      	add	r3, r2
 800c29c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c29e:	2300      	movs	r3, #0
 800c2a0:	673b      	str	r3, [r7, #112]	@ 0x70
 800c2a2:	e014      	b.n	800c2ce <arm_mat_inverse_f32+0x634>
 800c2a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2a6:	1d1a      	adds	r2, r3, #4
 800c2a8:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c2aa:	ed93 7a00 	vldr	s14, [r3]
 800c2ae:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2b8:	1d1a      	adds	r2, r3, #4
 800c2ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c2bc:	ed93 7a00 	vldr	s14, [r3]
 800c2c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2c4:	edc3 7a00 	vstr	s15, [r3]
 800c2c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800c2ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	dbe6      	blt.n	800c2a4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c2d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c2da:	3301      	adds	r3, #1
 800c2dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c2e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c2e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	f4ff af67 	bcc.w	800c1ba <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800c2ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c2fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	f4ff ad32 	bcc.w	800bd66 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c302:	2300      	movs	r3, #0
 800c304:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800c308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d033      	beq.n	800c378 <arm_mat_inverse_f32+0x6de>
 800c310:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c314:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31c:	d12c      	bne.n	800c378 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800c324:	2300      	movs	r3, #0
 800c326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c32a:	e010      	b.n	800c34e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800c32c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c334:	4413      	add	r3, r2
 800c336:	edd3 7a00 	vldr	s15, [r3]
 800c33a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c342:	d10d      	bne.n	800c360 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800c344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c348:	3301      	adds	r3, #1
 800c34a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c34e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c350:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c352:	fb02 f303 	mul.w	r3, r2, r3
 800c356:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d3e6      	bcc.n	800c32c <arm_mat_inverse_f32+0x692>
 800c35e:	e000      	b.n	800c362 <arm_mat_inverse_f32+0x6c8>
            break;
 800c360:	bf00      	nop
      }

      if (i == numRows * numCols)
 800c362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c364:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c366:	fb02 f303 	mul.w	r3, r2, r3
 800c36a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c36e:	429a      	cmp	r2, r3
 800c370:	d102      	bne.n	800c378 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800c372:	23fb      	movs	r3, #251	@ 0xfb
 800c374:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800c378:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	37ec      	adds	r7, #236	@ 0xec
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c388:	b480      	push	{r7}
 800c38a:	b093      	sub	sp, #76	@ 0x4c
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	885b      	ldrh	r3, [r3, #2]
 800c3bc:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	885b      	ldrh	r3, [r3, #2]
 800c3c2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3c8:	8b7b      	ldrh	r3, [r7, #26]
 800c3ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800c3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	69fa      	ldr	r2, [r7, #28]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800c3d6:	8b3b      	ldrh	r3, [r7, #24]
 800c3d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800c3e0:	f04f 0300 	mov.w	r3, #0
 800c3e4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800c3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800c3ea:	8afb      	ldrh	r3, [r7, #22]
 800c3ec:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800c3ee:	e017      	b.n	800c420 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800c3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3f2:	1d1a      	adds	r2, r3, #4
 800c3f4:	647a      	str	r2, [r7, #68]	@ 0x44
 800c3f6:	ed93 7a00 	vldr	s14, [r3]
 800c3fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3fc:	edd3 7a00 	vldr	s15, [r3]
 800c400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c404:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800c408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c40c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800c410:	8b3b      	ldrh	r3, [r7, #24]
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c416:	4413      	add	r3, r2
 800c418:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800c41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41c:	3b01      	subs	r3, #1
 800c41e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800c420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e4      	bne.n	800c3f0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800c426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c428:	1d1a      	adds	r2, r3, #4
 800c42a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c42c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c42e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800c430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c432:	3b01      	subs	r3, #1
 800c434:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800c436:	8b3a      	ldrh	r2, [r7, #24]
 800c438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	6a3a      	ldr	r2, [r7, #32]
 800c440:	4413      	add	r3, r2
 800c442:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800c444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1ca      	bne.n	800c3e0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800c44a:	8b3b      	ldrh	r3, [r7, #24]
 800c44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c44e:	4413      	add	r3, r2
 800c450:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800c452:	8afb      	ldrh	r3, [r7, #22]
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c458:	4413      	add	r3, r2
 800c45a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800c45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45e:	3b01      	subs	r3, #1
 800c460:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800c462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1b1      	bne.n	800c3cc <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c468:	2300      	movs	r3, #0
 800c46a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800c46c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c470:	4618      	mov	r0, r3
 800c472:	374c      	adds	r7, #76	@ 0x4c
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b08b      	sub	sp, #44	@ 0x2c
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	885b      	ldrh	r3, [r3, #2]
 800c4a4:	fb02 f303 	mul.w	r3, r2, r3
 800c4a8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c4ae:	e013      	b.n	800c4d8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b2:	1d1a      	adds	r2, r3, #4
 800c4b4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4b6:	ed93 7a00 	vldr	s14, [r3]
 800c4ba:	6a3b      	ldr	r3, [r7, #32]
 800c4bc:	1d1a      	adds	r2, r3, #4
 800c4be:	623a      	str	r2, [r7, #32]
 800c4c0:	edd3 7a00 	vldr	s15, [r3]
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	1d1a      	adds	r2, r3, #4
 800c4c8:	61fa      	str	r2, [r7, #28]
 800c4ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4ce:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1e8      	bne.n	800c4b0 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c4e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	372c      	adds	r7, #44	@ 0x2c
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b08b      	sub	sp, #44	@ 0x2c
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	881b      	ldrh	r3, [r3, #0]
 800c50c:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	885b      	ldrh	r3, [r3, #2]
 800c512:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800c514:	89fb      	ldrh	r3, [r7, #14]
 800c516:	61bb      	str	r3, [r7, #24]
 800c518:	2300      	movs	r3, #0
 800c51a:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	693a      	ldr	r2, [r7, #16]
 800c522:	4413      	add	r3, r2
 800c524:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800c526:	89bb      	ldrh	r3, [r7, #12]
 800c528:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800c52a:	e00d      	b.n	800c548 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800c52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52e:	1d1a      	adds	r2, r3, #4
 800c530:	627a      	str	r2, [r7, #36]	@ 0x24
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800c538:	89fb      	ldrh	r3, [r7, #14]
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	6a3a      	ldr	r2, [r7, #32]
 800c53e:	4413      	add	r3, r2
 800c540:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	3b01      	subs	r3, #1
 800c546:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1ee      	bne.n	800c52c <arm_mat_trans_f32+0x3a>
      }

      i++;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	3301      	adds	r3, #1
 800c552:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	3b01      	subs	r3, #1
 800c558:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1dd      	bne.n	800c51c <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c560:	2300      	movs	r3, #0
 800c562:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800c564:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	372c      	adds	r7, #44	@ 0x2c
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <memset>:
 800c574:	4402      	add	r2, r0
 800c576:	4603      	mov	r3, r0
 800c578:	4293      	cmp	r3, r2
 800c57a:	d100      	bne.n	800c57e <memset+0xa>
 800c57c:	4770      	bx	lr
 800c57e:	f803 1b01 	strb.w	r1, [r3], #1
 800c582:	e7f9      	b.n	800c578 <memset+0x4>

0800c584 <__errno>:
 800c584:	4b01      	ldr	r3, [pc, #4]	@ (800c58c <__errno+0x8>)
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20000214 	.word	0x20000214

0800c590 <__libc_init_array>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	4d0d      	ldr	r5, [pc, #52]	@ (800c5c8 <__libc_init_array+0x38>)
 800c594:	4c0d      	ldr	r4, [pc, #52]	@ (800c5cc <__libc_init_array+0x3c>)
 800c596:	1b64      	subs	r4, r4, r5
 800c598:	10a4      	asrs	r4, r4, #2
 800c59a:	2600      	movs	r6, #0
 800c59c:	42a6      	cmp	r6, r4
 800c59e:	d109      	bne.n	800c5b4 <__libc_init_array+0x24>
 800c5a0:	4d0b      	ldr	r5, [pc, #44]	@ (800c5d0 <__libc_init_array+0x40>)
 800c5a2:	4c0c      	ldr	r4, [pc, #48]	@ (800c5d4 <__libc_init_array+0x44>)
 800c5a4:	f000 f848 	bl	800c638 <_init>
 800c5a8:	1b64      	subs	r4, r4, r5
 800c5aa:	10a4      	asrs	r4, r4, #2
 800c5ac:	2600      	movs	r6, #0
 800c5ae:	42a6      	cmp	r6, r4
 800c5b0:	d105      	bne.n	800c5be <__libc_init_array+0x2e>
 800c5b2:	bd70      	pop	{r4, r5, r6, pc}
 800c5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b8:	4798      	blx	r3
 800c5ba:	3601      	adds	r6, #1
 800c5bc:	e7ee      	b.n	800c59c <__libc_init_array+0xc>
 800c5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c2:	4798      	blx	r3
 800c5c4:	3601      	adds	r6, #1
 800c5c6:	e7f2      	b.n	800c5ae <__libc_init_array+0x1e>
 800c5c8:	0800c698 	.word	0x0800c698
 800c5cc:	0800c698 	.word	0x0800c698
 800c5d0:	0800c698 	.word	0x0800c698
 800c5d4:	0800c69c 	.word	0x0800c69c

0800c5d8 <memcpy>:
 800c5d8:	440a      	add	r2, r1
 800c5da:	4291      	cmp	r1, r2
 800c5dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5e0:	d100      	bne.n	800c5e4 <memcpy+0xc>
 800c5e2:	4770      	bx	lr
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ee:	4291      	cmp	r1, r2
 800c5f0:	d1f9      	bne.n	800c5e6 <memcpy+0xe>
 800c5f2:	bd10      	pop	{r4, pc}

0800c5f4 <sqrtf>:
 800c5f4:	b508      	push	{r3, lr}
 800c5f6:	ed2d 8b02 	vpush	{d8}
 800c5fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c5fe:	f000 f817 	bl	800c630 <__ieee754_sqrtf>
 800c602:	eeb4 8a48 	vcmp.f32	s16, s16
 800c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60a:	d60c      	bvs.n	800c626 <sqrtf+0x32>
 800c60c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c62c <sqrtf+0x38>
 800c610:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c618:	d505      	bpl.n	800c626 <sqrtf+0x32>
 800c61a:	f7ff ffb3 	bl	800c584 <__errno>
 800c61e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c622:	2321      	movs	r3, #33	@ 0x21
 800c624:	6003      	str	r3, [r0, #0]
 800c626:	ecbd 8b02 	vpop	{d8}
 800c62a:	bd08      	pop	{r3, pc}
 800c62c:	00000000 	.word	0x00000000

0800c630 <__ieee754_sqrtf>:
 800c630:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c634:	4770      	bx	lr
	...

0800c638 <_init>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	bf00      	nop
 800c63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c63e:	bc08      	pop	{r3}
 800c640:	469e      	mov	lr, r3
 800c642:	4770      	bx	lr

0800c644 <_fini>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	bf00      	nop
 800c648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64a:	bc08      	pop	{r3}
 800c64c:	469e      	mov	lr, r3
 800c64e:	4770      	bx	lr
