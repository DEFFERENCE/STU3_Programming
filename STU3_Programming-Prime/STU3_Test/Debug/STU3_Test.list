
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111c4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  080113a0  080113a0  000123a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117f8  080117f8  00013268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080117f8  080117f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011800  08011800  00013268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011800  08011800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011804  08011804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  08011808  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  20000268  08011a70  00013268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f6c  08011a70  00013f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b7a  00000000  00000000  00013298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6a  00000000  00000000  0003ce12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00041b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001682  00000000  00000000  00043880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b510  00000000  00000000  00044f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028732  00000000  00000000  00070412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011acd0  00000000  00000000  00098b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b3814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085a8  00000000  00000000  001b3858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001bbe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000268 	.word	0x20000268
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08011384 	.word	0x08011384

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000026c 	.word	0x2000026c
 8000214:	08011384 	.word	0x08011384

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b988 	b.w	8001114 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	468e      	mov	lr, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	4688      	mov	r8, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	d962      	bls.n	8000ef8 <__udivmoddi4+0xdc>
 8000e32:	fab2 f682 	clz	r6, r2
 8000e36:	b14e      	cbz	r6, 8000e4c <__udivmoddi4+0x30>
 8000e38:	f1c6 0320 	rsb	r3, r6, #32
 8000e3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000e40:	fa20 f303 	lsr.w	r3, r0, r3
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	ea43 0808 	orr.w	r8, r3, r8
 8000e4a:	40b4      	lsls	r4, r6
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fb01 f20c 	mul.w	r2, r1, ip
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e70:	f080 80ea 	bcs.w	8001048 <__udivmoddi4+0x22c>
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f240 80e7 	bls.w	8001048 <__udivmoddi4+0x22c>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	1a9a      	subs	r2, r3, r2
 8000e80:	b2a3      	uxth	r3, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e92:	459c      	cmp	ip, r3
 8000e94:	d909      	bls.n	8000eaa <__udivmoddi4+0x8e>
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	f080 80d6 	bcs.w	800104c <__udivmoddi4+0x230>
 8000ea0:	459c      	cmp	ip, r3
 8000ea2:	f240 80d3 	bls.w	800104c <__udivmoddi4+0x230>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eae:	eba3 030c 	sub.w	r3, r3, ip
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11d      	cbz	r5, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40f3      	lsrs	r3, r6
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e9c5 3200 	strd	r3, r2, [r5]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d905      	bls.n	8000ed2 <__udivmoddi4+0xb6>
 8000ec6:	b10d      	cbz	r5, 8000ecc <__udivmoddi4+0xb0>
 8000ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e7f5      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ed2:	fab3 f183 	clz	r1, r3
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d146      	bne.n	8000f68 <__udivmoddi4+0x14c>
 8000eda:	4573      	cmp	r3, lr
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0xc8>
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	f200 8105 	bhi.w	80010ee <__udivmoddi4+0x2d2>
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	4690      	mov	r8, r2
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0e5      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ef6:	e7e2      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	f000 8090 	beq.w	800101e <__udivmoddi4+0x202>
 8000efe:	fab2 f682 	clz	r6, r2
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	f040 80a4 	bne.w	8001050 <__udivmoddi4+0x234>
 8000f08:	1a8a      	subs	r2, r1, r2
 8000f0a:	0c03      	lsrs	r3, r0, #16
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	b2bc      	uxth	r4, r7
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f22:	fb04 f20c 	mul.w	r2, r4, ip
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x11e>
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x11c>
 8000f32:	429a      	cmp	r2, r3
 8000f34:	f200 80e0 	bhi.w	80010f8 <__udivmoddi4+0x2dc>
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f48:	fb02 f404 	mul.w	r4, r2, r4
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x144>
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x142>
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	f200 80ca 	bhi.w	80010f2 <__udivmoddi4+0x2d6>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	1b1b      	subs	r3, r3, r4
 8000f62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f66:	e7a5      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f68:	f1c1 0620 	rsb	r6, r1, #32
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	fa0e f401 	lsl.w	r4, lr, r1
 8000f78:	fa20 f306 	lsr.w	r3, r0, r6
 8000f7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f84:	4323      	orrs	r3, r4
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	fa1f fc87 	uxth.w	ip, r7
 8000f8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000f92:	0c1c      	lsrs	r4, r3, #16
 8000f94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	d909      	bls.n	8000fbc <__udivmoddi4+0x1a0>
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fae:	f080 809c 	bcs.w	80010ea <__udivmoddi4+0x2ce>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f240 8099 	bls.w	80010ea <__udivmoddi4+0x2ce>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	eba4 040e 	sub.w	r4, r4, lr
 8000fc0:	fa1f fe83 	uxth.w	lr, r3
 8000fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fcc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fd4:	45a4      	cmp	ip, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x1ce>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fde:	f080 8082 	bcs.w	80010e6 <__udivmoddi4+0x2ca>
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d97f      	bls.n	80010e6 <__udivmoddi4+0x2ca>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fee:	eba4 040c 	sub.w	r4, r4, ip
 8000ff2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ff6:	4564      	cmp	r4, ip
 8000ff8:	4673      	mov	r3, lr
 8000ffa:	46e1      	mov	r9, ip
 8000ffc:	d362      	bcc.n	80010c4 <__udivmoddi4+0x2a8>
 8000ffe:	d05f      	beq.n	80010c0 <__udivmoddi4+0x2a4>
 8001000:	b15d      	cbz	r5, 800101a <__udivmoddi4+0x1fe>
 8001002:	ebb8 0203 	subs.w	r2, r8, r3
 8001006:	eb64 0409 	sbc.w	r4, r4, r9
 800100a:	fa04 f606 	lsl.w	r6, r4, r6
 800100e:	fa22 f301 	lsr.w	r3, r2, r1
 8001012:	431e      	orrs	r6, r3
 8001014:	40cc      	lsrs	r4, r1
 8001016:	e9c5 6400 	strd	r6, r4, [r5]
 800101a:	2100      	movs	r1, #0
 800101c:	e74f      	b.n	8000ebe <__udivmoddi4+0xa2>
 800101e:	fbb1 fcf2 	udiv	ip, r1, r2
 8001022:	0c01      	lsrs	r1, r0, #16
 8001024:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001028:	b280      	uxth	r0, r0
 800102a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800102e:	463b      	mov	r3, r7
 8001030:	4638      	mov	r0, r7
 8001032:	463c      	mov	r4, r7
 8001034:	46b8      	mov	r8, r7
 8001036:	46be      	mov	lr, r7
 8001038:	2620      	movs	r6, #32
 800103a:	fbb1 f1f7 	udiv	r1, r1, r7
 800103e:	eba2 0208 	sub.w	r2, r2, r8
 8001042:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001046:	e766      	b.n	8000f16 <__udivmoddi4+0xfa>
 8001048:	4601      	mov	r1, r0
 800104a:	e718      	b.n	8000e7e <__udivmoddi4+0x62>
 800104c:	4610      	mov	r0, r2
 800104e:	e72c      	b.n	8000eaa <__udivmoddi4+0x8e>
 8001050:	f1c6 0220 	rsb	r2, r6, #32
 8001054:	fa2e f302 	lsr.w	r3, lr, r2
 8001058:	40b7      	lsls	r7, r6
 800105a:	40b1      	lsls	r1, r6
 800105c:	fa20 f202 	lsr.w	r2, r0, r2
 8001060:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001064:	430a      	orrs	r2, r1
 8001066:	fbb3 f8fe 	udiv	r8, r3, lr
 800106a:	b2bc      	uxth	r4, r7
 800106c:	fb0e 3318 	mls	r3, lr, r8, r3
 8001070:	0c11      	lsrs	r1, r2, #16
 8001072:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001076:	fb08 f904 	mul.w	r9, r8, r4
 800107a:	40b0      	lsls	r0, r6
 800107c:	4589      	cmp	r9, r1
 800107e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001082:	b280      	uxth	r0, r0
 8001084:	d93e      	bls.n	8001104 <__udivmoddi4+0x2e8>
 8001086:	1879      	adds	r1, r7, r1
 8001088:	f108 3cff 	add.w	ip, r8, #4294967295
 800108c:	d201      	bcs.n	8001092 <__udivmoddi4+0x276>
 800108e:	4589      	cmp	r9, r1
 8001090:	d81f      	bhi.n	80010d2 <__udivmoddi4+0x2b6>
 8001092:	eba1 0109 	sub.w	r1, r1, r9
 8001096:	fbb1 f9fe 	udiv	r9, r1, lr
 800109a:	fb09 f804 	mul.w	r8, r9, r4
 800109e:	fb0e 1119 	mls	r1, lr, r9, r1
 80010a2:	b292      	uxth	r2, r2
 80010a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a8:	4542      	cmp	r2, r8
 80010aa:	d229      	bcs.n	8001100 <__udivmoddi4+0x2e4>
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80010b2:	d2c4      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b4:	4542      	cmp	r2, r8
 80010b6:	d2c2      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b8:	f1a9 0102 	sub.w	r1, r9, #2
 80010bc:	443a      	add	r2, r7
 80010be:	e7be      	b.n	800103e <__udivmoddi4+0x222>
 80010c0:	45f0      	cmp	r8, lr
 80010c2:	d29d      	bcs.n	8001000 <__udivmoddi4+0x1e4>
 80010c4:	ebbe 0302 	subs.w	r3, lr, r2
 80010c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010cc:	3801      	subs	r0, #1
 80010ce:	46e1      	mov	r9, ip
 80010d0:	e796      	b.n	8001000 <__udivmoddi4+0x1e4>
 80010d2:	eba7 0909 	sub.w	r9, r7, r9
 80010d6:	4449      	add	r1, r9
 80010d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7db      	b.n	800109e <__udivmoddi4+0x282>
 80010e6:	4673      	mov	r3, lr
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1ce>
 80010ea:	4650      	mov	r0, sl
 80010ec:	e766      	b.n	8000fbc <__udivmoddi4+0x1a0>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e6fd      	b.n	8000eee <__udivmoddi4+0xd2>
 80010f2:	443b      	add	r3, r7
 80010f4:	3a02      	subs	r2, #2
 80010f6:	e733      	b.n	8000f60 <__udivmoddi4+0x144>
 80010f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010fc:	443b      	add	r3, r7
 80010fe:	e71c      	b.n	8000f3a <__udivmoddi4+0x11e>
 8001100:	4649      	mov	r1, r9
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x222>
 8001104:	eba1 0109 	sub.w	r1, r1, r9
 8001108:	46c4      	mov	ip, r8
 800110a:	fbb1 f9fe 	udiv	r9, r1, lr
 800110e:	fb09 f804 	mul.w	r8, r9, r4
 8001112:	e7c4      	b.n	800109e <__udivmoddi4+0x282>

08001114 <__aeabi_idiv0>:
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <sign>:
#include <math.h>

/**
 * @brief Sign function: returns +1, -1, or 0 based on input value.
 */
int8_t sign(float32_t x) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0.0f) {
 8001122:	edd7 7a01 	vldr	s15, [r7, #4]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd01      	ble.n	8001134 <sign+0x1c>
        return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e00a      	b.n	800114a <sign+0x32>
    } else if (x < 0.0f) {
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d502      	bpl.n	8001148 <sign+0x30>
        return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e000      	b.n	800114a <sign+0x32>
    } else {
        return 0;
 8001148:	2300      	movs	r3, #0
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Backlash_Update>:
 * @param pos_ref Desired reference position.
 * @param pos_act Actual measured position.
 * @param vel Measured or estimated velocity.
 * @return Compensated position to use in control.
 */
float32_t Backlash_Update(BacklashController *ctrl, float32_t pos_ref, float32_t pos_act, float32_t vel) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001162:	edc7 0a01 	vstr	s1, [r7, #4]
 8001166:	ed87 1a00 	vstr	s2, [r7]
    int8_t direction_now = sign(vel);
 800116a:	ed97 0a00 	vldr	s0, [r7]
 800116e:	f7ff ffd3 	bl	8001118 <sign>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]

    // Detect direction change
    if (direction_now != ctrl->direction_prev && direction_now != 0) {
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800117c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001180:	429a      	cmp	r2, r3
 8001182:	d01a      	beq.n	80011ba <Backlash_Update+0x64>
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d016      	beq.n	80011ba <Backlash_Update+0x64>
        ctrl->direction_prev = direction_now;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	7dfa      	ldrb	r2, [r7, #23]
 8001190:	721a      	strb	r2, [r3, #8]
        ctrl->state = TRANSITION;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	725a      	strb	r2, [r3, #9]

        if (direction_now > 0) {
 8001198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd04      	ble.n	80011aa <Backlash_Update+0x54>
            ctrl->backlash_offset = ctrl->backlash_width;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	e007      	b.n	80011ba <Backlash_Update+0x64>
        } else {
            ctrl->backlash_offset = -ctrl->backlash_width;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eef1 7a67 	vneg.f32	s15, s15
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }

    // Apply backlash offset to reference
    float32_t pos_ref_compensated = pos_ref + ctrl->backlash_offset;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if backlash has been taken up
    if (ctrl->state == TRANSITION) {
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11e      	bne.n	8001214 <Backlash_Update+0xbe>
        if (fabsf(pos_ref - pos_act) >= ctrl->backlash_width) {
 80011d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	db0e      	blt.n	8001214 <Backlash_Update+0xbe>
            if (direction_now > 0) {
 80011f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd03      	ble.n	8001206 <Backlash_Update+0xb0>
                ctrl->state = ENGAGED_POS;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	725a      	strb	r2, [r3, #9]
 8001204:	e002      	b.n	800120c <Backlash_Update+0xb6>
            } else {
                ctrl->state = ENGAGED_NEG;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	22ff      	movs	r2, #255	@ 0xff
 800120a:	725a      	strb	r2, [r3, #9]
            }
            ctrl->backlash_offset = 0.0f;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
        }
    }

    return pos_ref_compensated;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	ee07 3a90 	vmov	s15, r3
}
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <modbus_heartbeat>:

void modbus_heartbeat_init(ModbusHandleTypedef *hmodbus) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
}

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	//if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001234:	801a      	strh	r2, [r3, #0]
	//}
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <modbus_Base_System_Status>:

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 8001242:	b480      	push	{r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	3302      	adds	r3, #2
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	73fb      	strb	r3, [r7, #15]
	return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <modbus_servo_Status>:

void modbus_servo_Status(ModbusHandleTypedef *hmodbus, uint8_t Pen_status) {
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x03].U16 = Pen_status;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	3306      	adds	r3, #6
 8001274:	78fa      	ldrb	r2, [r7, #3]
 8001276:	b292      	uxth	r2, r2
 8001278:	801a      	strh	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <modbus_write_servo_up>:

uint8_t modbus_write_servo_up(ModbusHandleTypedef *hmodbus) {
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x04].U16;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	3308      	adds	r3, #8
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	73fb      	strb	r3, [r7, #15]
//	if (status == 1) {
//		if (hmodbus->RegisterAddress[0x05].U16 == 1) {
//			hmodbus->RegisterAddress[0x05].U16 = 0;
//		}
//	}
	return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]

}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <modbus_write_servo_down>:
uint8_t modbus_write_servo_down(ModbusHandleTypedef *hmodbus) {
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x05].U16;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	330a      	adds	r3, #10
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	73fb      	strb	r3, [r7, #15]
//		if (hmodbus->RegisterAddress[0x04].U16 == 1) {
//			hmodbus->RegisterAddress[0x04].U16 = 0;
//		}
//
//	}
	return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <R_Theta_moving_Status>:

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	3320      	adds	r3, #32
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	b292      	uxth	r2, r2
 80012dc:	801a      	strh	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b089      	sub	sp, #36	@ 0x24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	61f8      	str	r0, [r7, #28]
 80012f2:	ed87 0a06 	vstr	s0, [r7, #24]
 80012f6:	edc7 0a05 	vstr	s1, [r7, #20]
 80012fa:	ed87 1a04 	vstr	s2, [r7, #16]
 80012fe:	edc7 1a03 	vstr	s3, [r7, #12]
 8001302:	ed87 2a02 	vstr	s4, [r7, #8]
 8001306:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = format_robot_to_base(r_pos);
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f103 0422 	add.w	r4, r3, #34	@ 0x22
 8001312:	ed97 0a06 	vldr	s0, [r7, #24]
 8001316:	f000 fd0d 	bl	8001d34 <format_robot_to_base>
 800131a:	4603      	mov	r3, r0
 800131c:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x12].U16 = format_robot_to_base(theta_pos);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8001326:	ed97 0a05 	vldr	s0, [r7, #20]
 800132a:	f000 fd03 	bl	8001d34 <format_robot_to_base>
 800132e:	4603      	mov	r3, r0
 8001330:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x13].U16 = format_robot_to_base(r_Velo);
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800133a:	ed97 0a04 	vldr	s0, [r7, #16]
 800133e:	f000 fcf9 	bl	8001d34 <format_robot_to_base>
 8001342:	4603      	mov	r3, r0
 8001344:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x14].U16 = format_robot_to_base(theta_Velo);
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800134e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001352:	f000 fcef 	bl	8001d34 <format_robot_to_base>
 8001356:	4603      	mov	r3, r0
 8001358:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x15].U16 = format_robot_to_base(r_accel);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f103 042a 	add.w	r4, r3, #42	@ 0x2a
 8001362:	ed97 0a02 	vldr	s0, [r7, #8]
 8001366:	f000 fce5 	bl	8001d34 <format_robot_to_base>
 800136a:	4603      	mov	r3, r0
 800136c:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8001376:	ed97 0a01 	vldr	s0, [r7, #4]
 800137a:	f000 fcdb 	bl	8001d34 <format_robot_to_base>
 800137e:	4603      	mov	r3, r0
 8001380:	8023      	strh	r3, [r4, #0]
}
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}

0800138a <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, uint8_t index) //
{
 800138a:	b590      	push	{r4, r7, lr}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	ed87 0a02 	vstr	s0, [r7, #8]
 8001396:	edc7 0a01 	vstr	s1, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
	if (index >= 0 && index <= 9) {
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	d818      	bhi.n	80013d6 <set_Target_Position_ten_points+0x4c>
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = format_robot_to_base(
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	3310      	adds	r3, #16
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	18d4      	adds	r4, r2, r3
 80013b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b4:	f000 fcbe 	bl	8001d34 <format_robot_to_base>
 80013b8:	4603      	mov	r3, r0
 80013ba:	8023      	strh	r3, [r4, #0]
				r_pos);
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	3321      	adds	r3, #33	@ 0x21
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	18d4      	adds	r4, r2, r3
				format_robot_to_base(theta_pos);
 80013ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80013ce:	f000 fcb1 	bl	8001d34 <format_robot_to_base>
 80013d2:	4603      	mov	r3, r0
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
 80013d4:	8023      	strh	r3, [r4, #0]
	}
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}

080013de <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	3380      	adds	r3, #128	@ 0x80
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_r_position);
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fcc0 	bl	8001d78 <format_base_to_robot>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001400:	ee17 3a90 	vmov	r3, s15
 8001404:	b29b      	uxth	r3, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	3382      	adds	r3, #130	@ 0x82
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_theta_position);
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fca8 	bl	8001d78 <format_base_to_robot>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	b29b      	uxth	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <Coordinate_Base_to_Robot>:

Robot_goal_point Coordinate_Base_to_Robot(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b090      	sub	sp, #64	@ 0x40
 8001444:	af00      	add	r7, sp, #0
 8001446:	6178      	str	r0, [r7, #20]
 8001448:	ed87 0a04 	vstr	s0, [r7, #16]
 800144c:	edc7 0a03 	vstr	s1, [r7, #12]

	Goal_point->r_goal_position = 0;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	605a      	str	r2, [r3, #4]

	float prismatic_pos;
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f7ff f83d 	bl	80004e0 <__aeabi_f2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	ed9f 1bd3 	vldr	d1, [pc, #844]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 800146e:	ec43 2b10 	vmov	d0, r2, r3
 8001472:	f00e f91b 	bl	800f6ac <pow>
 8001476:	ec51 0b10 	vmov	r0, r1, d0
 800147a:	a3d1      	add	r3, pc, #836	@ (adr r3, 80017c0 <Coordinate_Base_to_Robot+0x380>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7fe fed0 	bl	8000224 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fb50 	bl	8000b30 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	63bb      	str	r3, [r7, #56]	@ 0x38
	float gamma = 2 * r_position * Offet;
 8001494:	edd7 7a04 	vldr	s15, [r7, #16]
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 80017c8 <Coordinate_Base_to_Robot+0x388>
 80014a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 80014a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	db35      	blt.n	8001522 <Coordinate_Base_to_Robot+0xe2>
 80014b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ba:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d82c      	bhi.n	8001522 <Coordinate_Base_to_Robot+0xe2>
			{
		//Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90)));
 80014c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014cc:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 80014d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f000 fc02 	bl	8001ce0 <degree_to_rad>
 80014dc:	eef0 7a40 	vmov.f32	s15, s0
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f00e f9c8 	bl	800f878 <cosf>
 80014e8:	eeb0 7a40 	vmov.f32	s14, s0
 80014ec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7fe ffee 	bl	80004e0 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ec43 2b10 	vmov	d0, r2, r3
 800150c:	f00e f93e 	bl	800f78c <sqrt>
 8001510:	ec53 2b10 	vmov	r2, r3, d0
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb0a 	bl	8000b30 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001520:	e0b9      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position + 90));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
 8001526:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	db35      	blt.n	80015a0 <Coordinate_Base_to_Robot+0x160>
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 800153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d82c      	bhi.n	80015a0 <Coordinate_Base_to_Robot+0x160>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 8001546:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f000 fbc3 	bl	8001ce0 <degree_to_rad>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	f00e f989 	bl	800f878 <cosf>
 8001566:	eeb0 7a40 	vmov.f32	s14, s0
 800156a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157a:	ee17 0a90 	vmov	r0, s15
 800157e:	f7fe ffaf 	bl	80004e0 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	ec43 2b10 	vmov	d0, r2, r3
 800158a:	f00e f8ff 	bl	800f78c <sqrt>
 800158e:	ec53 2b10 	vmov	r2, r3, d0
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff facb 	bl	8000b30 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800159e:	e07a      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(180 - theta_position));
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 80015a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d835      	bhi.n	800161a <Coordinate_Base_to_Robot+0x1da>
 80015ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b2:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80017cc <Coordinate_Base_to_Robot+0x38c>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	db2c      	blt.n	800161a <Coordinate_Base_to_Robot+0x1da>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 80015c0:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	f000 fb86 	bl	8001ce0 <degree_to_rad>
 80015d4:	eef0 7a40 	vmov.f32	s15, s0
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	f00e f94c 	bl	800f878 <cosf>
 80015e0:	eeb0 7a40 	vmov.f32	s14, s0
 80015e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80015f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f4:	ee17 0a90 	vmov	r0, s15
 80015f8:	f7fe ff72 	bl	80004e0 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b10 	vmov	d0, r2, r3
 8001604:	f00e f8c2 	bl	800f78c <sqrt>
 8001608:	ec53 2b10 	vmov	r2, r3, d0
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fa8e 	bl	8000b30 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001618:	e03d      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position - 90));
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 800161a:	edd7 7a03 	vldr	s15, [r7, #12]
 800161e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80017cc <Coordinate_Base_to_Robot+0x38c>
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d834      	bhi.n	8001696 <Coordinate_Base_to_Robot+0x256>
 800162c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001630:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80017d0 <Coordinate_Base_to_Robot+0x390>
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	db2b      	blt.n	8001696 <Coordinate_Base_to_Robot+0x256>
			{
//		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(90 - theta_position));
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 800163e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 8001642:	edd7 7a03 	vldr	s15, [r7, #12]
 8001646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	f000 fb47 	bl	8001ce0 <degree_to_rad>
 8001652:	eef0 7a40 	vmov.f32	s15, s0
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f00e f90d 	bl	800f878 <cosf>
 800165e:	eeb0 7a40 	vmov.f32	s14, s0
 8001662:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800166e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001672:	ee17 0a90 	vmov	r0, s15
 8001676:	f7fe ff33 	bl	80004e0 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	ec43 2b10 	vmov	d0, r2, r3
 8001682:	f00e f883 	bl	800f78c <sqrt>
 8001686:	ec53 2b10 	vmov	r2, r3, d0
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fa4f 	bl	8000b30 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	float up = pow(r_position, 2) - pow(prismatic_pos, 2) - pow(Offet, 2);
 8001696:	6938      	ldr	r0, [r7, #16]
 8001698:	f7fe ff22 	bl	80004e0 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 80016a4:	ec43 2b10 	vmov	d0, r2, r3
 80016a8:	f00e f800 	bl	800f6ac <pow>
 80016ac:	ec55 4b10 	vmov	r4, r5, d0
 80016b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80016b2:	f7fe ff15 	bl	80004e0 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d fff3 	bl	800f6ac <pow>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe fda7 	bl	8000220 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	a339      	add	r3, pc, #228	@ (adr r3, 80017c0 <Coordinate_Base_to_Robot+0x380>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe fd9e 	bl	8000220 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa20 	bl	8000b30 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
	float down = -2 * prismatic_pos * Offet;
 80016f4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80016f8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80016fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001700:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80017c8 <Coordinate_Base_to_Robot+0x388>
 8001704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001708:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float arc = acosf(up/down);
 800170c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001710:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001714:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001718:	eeb0 0a66 	vmov.f32	s0, s13
 800171c:	f00e f862 	bl	800f7e4 <acosf>
 8001720:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float alpha = rad_to_degree(arc);
 8001724:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001728:	f000 faae 	bl	8001c88 <rad_to_degree>
 800172c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 8001730:	edd7 7a03 	vldr	s15, [r7, #12]
 8001734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	db18      	blt.n	8001770 <Coordinate_Base_to_Robot+0x330>
 800173e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001742:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d80f      	bhi.n	8001770 <Coordinate_Base_to_Robot+0x330>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 8001750:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001754:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	f000 fabe 	bl	8001ce0 <degree_to_rad>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	edc3 7a01 	vstr	s15, [r3, #4]
 800176e:	e07c      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90))));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001770:	edd7 7a03 	vldr	s15, [r7, #12]
 8001774:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	db30      	blt.n	80017e4 <Coordinate_Base_to_Robot+0x3a4>
 8001782:	edd7 7a03 	vldr	s15, [r7, #12]
 8001786:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 800178a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d827      	bhi.n	80017e4 <Coordinate_Base_to_Robot+0x3a4>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001794:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001798:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 800179c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f000 fa9c 	bl	8001ce0 <degree_to_rad>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	edc3 7a01 	vstr	s15, [r3, #4]
 80017b2:	e05a      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
 80017b4:	f3af 8000 	nop.w
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40000000 	.word	0x40000000
 80017c0:	00000000 	.word	0x00000000
 80017c4:	41058880 	.word	0x41058880
 80017c8:	43d20000 	.word	0x43d20000
 80017cc:	c2b40000 	.word	0xc2b40000
 80017d0:	c3340000 	.word	0xc3340000
 80017d4:	43340000 	.word	0x43340000
 80017d8:	43870000 	.word	0x43870000
 80017dc:	43b40000 	.word	0x43b40000
 80017e0:	42b40000 	.word	0x42b40000
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(180 - theta_position))));
	} else if (theta_position <= 180 && theta_position >= 270) // quadrant 3
 80017e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 80017ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	d818      	bhi.n	8001828 <Coordinate_Base_to_Robot+0x3e8>
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	db0f      	blt.n	8001828 <Coordinate_Base_to_Robot+0x3e8>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001808:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800180c:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	f000 fa62 	bl	8001ce0 <degree_to_rad>
 800181c:	eef0 7a40 	vmov.f32	s15, s0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	edc3 7a01 	vstr	s15, [r3, #4]
 8001826:	e020      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position - 90))));
	} else if (theta_position <= 270 && theta_position >= 360) // quadrant 4
 8001828:	edd7 7a03 	vldr	s15, [r7, #12]
 800182c:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d817      	bhi.n	800186a <Coordinate_Base_to_Robot+0x42a>
 800183a:	edd7 7a03 	vldr	s15, [r7, #12]
 800183e:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80017dc <Coordinate_Base_to_Robot+0x39c>
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	db0e      	blt.n	800186a <Coordinate_Base_to_Robot+0x42a>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 800184c:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001850:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f000 fa40 	bl	8001ce0 <degree_to_rad>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	edc3 7a01 	vstr	s15, [r3, #4]
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(90 - theta_position))));
	}

//	Goal_point->r_goal_position = format_base_to_robot(prismatic_pos);
	Goal_point->r_goal_position = prismatic_pos;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800186e:	601a      	str	r2, [r3, #0]

	return *Goal_point;
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187a:	e883 0003 	stmia.w	r3, {r0, r1}
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	ee07 2a10 	vmov	s14, r2
 8001886:	ee07 3a90 	vmov	s15, r3
}
 800188a:	eeb0 0a47 	vmov.f32	s0, s14
 800188e:	eef0 0a67 	vmov.f32	s1, s15
 8001892:	3740      	adds	r7, #64	@ 0x40
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}

08001898 <Coordinate_Robot_to_Base>:

Robot_goal_point Coordinate_Robot_to_Base(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b092      	sub	sp, #72	@ 0x48
 800189c:	af00      	add	r7, sp, #0
 800189e:	6178      	str	r0, [r7, #20]
 80018a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80018a4:	edc7 0a03 	vstr	s1, [r7, #12]

	float theta_position_deg = rad_to_degree(theta_position);
 80018a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ac:	f000 f9ec 	bl	8001c88 <rad_to_degree>
 80018b0:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	Goal_point->r_goal_position = 0;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]

	int quadrant = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
	if (theta_position_deg >= 0 && theta_position_deg <= 90) {
 80018c8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	db1f      	blt.n	8001916 <Coordinate_Robot_to_Base+0x7e>
 80018d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018da:	ed9f 7ad5 	vldr	s14, [pc, #852]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	d816      	bhi.n	8001916 <Coordinate_Robot_to_Base+0x7e>
		if (sinf(theta_position) * r_position >= Offet) {
 80018e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ec:	f00e f810 	bl	800f910 <sinf>
 80018f0:	eeb0 7a40 	vmov.f32	s14, s0
 80018f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	db02      	blt.n	8001910 <Coordinate_Robot_to_Base+0x78>
			quadrant = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (sinf(theta_position) * r_position >= Offet) {
 800190e:	e022      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 4;
 8001910:	2304      	movs	r3, #4
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
		if (sinf(theta_position) * r_position >= Offet) {
 8001914:	e01f      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		}
	} else {
		if (cosf(theta_position - degree_to_rad(90.0)) * r_position >= Offet) {
 8001916:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 800191a:	f000 f9e1 	bl	8001ce0 <degree_to_rad>
 800191e:	eeb0 7a40 	vmov.f32	s14, s0
 8001922:	edd7 7a03 	vldr	s15, [r7, #12]
 8001926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	f00d ffa3 	bl	800f878 <cosf>
 8001932:	eeb0 7a40 	vmov.f32	s14, s0
 8001936:	edd7 7a04 	vldr	s15, [r7, #16]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	db02      	blt.n	8001952 <Coordinate_Robot_to_Base+0xba>
			quadrant = 2;
 800194c:	2302      	movs	r3, #2
 800194e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001950:	e001      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 3;
 8001952:	2303      	movs	r3, #3
 8001954:	647b      	str	r3, [r7, #68]	@ 0x44
		}
	}
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001956:	6938      	ldr	r0, [r7, #16]
 8001958:	f7fe fdc2 	bl	80004e0 <__aeabi_f2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	ed9f 1bab 	vldr	d1, [pc, #684]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001964:	ec43 2b10 	vmov	d0, r2, r3
 8001968:	f00d fea0 	bl	800f6ac <pow>
 800196c:	ec51 0b10 	vmov	r0, r1, d0
 8001970:	a3a9      	add	r3, pc, #676	@ (adr r3, 8001c18 <Coordinate_Robot_to_Base+0x380>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fc55 	bl	8000224 <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f8d5 	bl	8000b30 <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
	float gamma = -2 * r_position * Offet;
 800198a:	edd7 7a04 	vldr	s15, [r7, #16]
 800198e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float Prismatic_pos;
	float theta;
	if (quadrant == 1) // quadrant 1
 80019a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d12a      	bne.n	80019fe <Coordinate_Robot_to_Base+0x166>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 80019a8:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 80019ac:	f000 f998 	bl	8001ce0 <degree_to_rad>
 80019b0:	eeb0 7a40 	vmov.f32	s14, s0
 80019b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	f00d ff5a 	bl	800f878 <cosf>
 80019c4:	eeb0 7a40 	vmov.f32	s14, s0
 80019c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 80019d8:	ee17 0a90 	vmov	r0, s15
 80019dc:	f7fe fd80 	bl	80004e0 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ec43 2b10 	vmov	d0, r2, r3
 80019e8:	f00d fed0 	bl	800f78c <sqrt>
 80019ec:	ec53 2b10 	vmov	r2, r3, d0
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f89c 	bl	8000b30 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80019fc:	e085      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 2) // quadrant 2
 80019fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d12a      	bne.n	8001a5a <Coordinate_Robot_to_Base+0x1c2>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001a04:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001a08:	f000 f96a 	bl	8001ce0 <degree_to_rad>
 8001a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f00d ff2c 	bl	800f878 <cosf>
 8001a20:	eeb0 7a40 	vmov.f32	s14, s0
 8001a24:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001a34:	ee17 0a90 	vmov	r0, s15
 8001a38:	f7fe fd52 	bl	80004e0 <__aeabi_f2d>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	ec43 2b10 	vmov	d0, r2, r3
 8001a44:	f00d fea2 	bl	800f78c <sqrt>
 8001a48:	ec53 2b10 	vmov	r2, r3, d0
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f86e 	bl	8000b30 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a58:	e057      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 3) // quadrant 3
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d12a      	bne.n	8001ab6 <Coordinate_Robot_to_Base+0x21e>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001a60:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001a64:	f000 f93c 	bl	8001ce0 <degree_to_rad>
 8001a68:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	f00d fefe 	bl	800f878 <cosf>
 8001a7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a80:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd24 	bl	80004e0 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	ec43 2b10 	vmov	d0, r2, r3
 8001aa0:	f00d fe74 	bl	800f78c <sqrt>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f840 	bl	8000b30 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ab4:	e029      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>
	} else  // quadrant 4
	{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 8001ab6:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001aba:	f000 f911 	bl	8001ce0 <degree_to_rad>
 8001abe:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	f00d fed3 	bl	800f878 <cosf>
 8001ad2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001ae6:	ee17 0a90 	vmov	r0, s15
 8001aea:	f7fe fcf9 	bl	80004e0 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	ec43 2b10 	vmov	d0, r2, r3
 8001af6:	f00d fe49 	bl	800f78c <sqrt>
 8001afa:	ec53 2b10 	vmov	r2, r3, d0
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f815 	bl	8000b30 <__aeabi_d2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	float up = pow(r_position, 2) - pow(Prismatic_pos, 2) - pow(Offet, 2);
 8001b0a:	6938      	ldr	r0, [r7, #16]
 8001b0c:	f7fe fce8 	bl	80004e0 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001b18:	ec43 2b10 	vmov	d0, r2, r3
 8001b1c:	f00d fdc6 	bl	800f6ac <pow>
 8001b20:	ec55 4b10 	vmov	r4, r5, d0
 8001b24:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b26:	f7fe fcdb 	bl	80004e0 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001b32:	ec43 2b10 	vmov	d0, r2, r3
 8001b36:	f00d fdb9 	bl	800f6ac <pow>
 8001b3a:	ec53 2b10 	vmov	r2, r3, d0
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe fb6d 	bl	8000220 <__aeabi_dsub>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	a332      	add	r3, pc, #200	@ (adr r3, 8001c18 <Coordinate_Robot_to_Base+0x380>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fb64 	bl	8000220 <__aeabi_dsub>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7fe ffe6 	bl	8000b30 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float down = (-2 * Prismatic_pos * Offet);
 8001b68:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b6c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b74:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float alpha = acosf(up/down);
 8001b80:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b84:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b8c:	eeb0 0a66 	vmov.f32	s0, s13
 8001b90:	f00d fe28 	bl	800f7e4 <acosf>
 8001b94:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (quadrant == 1) // quadrant 1
 8001b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d116      	bne.n	8001bcc <Coordinate_Robot_to_Base+0x334>
			{
		theta = rad_to_degree(alpha) - 90.0;
 8001b9e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001ba2:	f000 f871 	bl	8001c88 <rad_to_degree>
 8001ba6:	ee10 3a10 	vmov	r3, s0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fc98 	bl	80004e0 <__aeabi_f2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <Coordinate_Robot_to_Base+0x38c>)
 8001bb6:	f7fe fb33 	bl	8000220 <__aeabi_dsub>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ffb5 	bl	8000b30 <__aeabi_d2f>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bca:	e041      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>

	} else if (quadrant == 2) // quadrant 2
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d10c      	bne.n	8001bec <Coordinate_Robot_to_Base+0x354>
			{
		theta = 270 - rad_to_degree(alpha);
 8001bd2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bd6:	f000 f857 	bl	8001c88 <rad_to_degree>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001c28 <Coordinate_Robot_to_Base+0x390>
 8001be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001bea:	e031      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>

	} else if (quadrant == 3) // quadrant 3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d120      	bne.n	8001c34 <Coordinate_Robot_to_Base+0x39c>
			{
		theta = -90 - rad_to_degree(alpha);
 8001bf2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bf6:	f000 f847 	bl	8001c88 <rad_to_degree>
 8001bfa:	eef0 7a40 	vmov.f32	s15, s0
 8001bfe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001c2c <Coordinate_Robot_to_Base+0x394>
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001c0a:	e021      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>
 8001c0c:	f3af 8000 	nop.w
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40000000 	.word	0x40000000
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	41058880 	.word	0x41058880
 8001c20:	43d20000 	.word	0x43d20000
 8001c24:	40568000 	.word	0x40568000
 8001c28:	43870000 	.word	0x43870000
 8001c2c:	c2b40000 	.word	0xc2b40000
 8001c30:	42b40000 	.word	0x42b40000
	} else  // quadrant 4
	{
		theta = -1 * (90 - rad_to_degree(alpha));
 8001c34:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001c38:	f000 f826 	bl	8001c88 <rad_to_degree>
 8001c3c:	eef0 7a40 	vmov.f32	s15, s0
 8001c40:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	eef1 7a67 	vneg.f32	s15, s15
 8001c4c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	}
//	Goal_point->r_goal_position = format_robot_to_base(Prismatic_pos);
//	Goal_point->theta_goal_position = format_robot_to_base(theta);
	Goal_point->r_goal_position = Prismatic_pos;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c54:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = theta;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c5a:	605a      	str	r2, [r3, #4]
	return *Goal_point;
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c66:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	ee07 2a10 	vmov	s14, r2
 8001c72:	ee07 3a90 	vmov	s15, r3
}
 8001c76:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7a:	eef0 0a67 	vmov.f32	s1, s15
 8001c7e:	3748      	adds	r7, #72	@ 0x48
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	0000      	movs	r0, r0
	...

08001c88 <rad_to_degree>:

float rad_to_degree(float rad) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (rad * 180.0) / 3.142;
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fc24 	bl	80004e0 <__aeabi_f2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <rad_to_degree+0x50>)
 8001c9e:	f7fe fc77 	bl	8000590 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	a309      	add	r3, pc, #36	@ (adr r3, 8001cd0 <rad_to_degree+0x48>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f7fe fd98 	bl	80007e4 <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff38 	bl	8000b30 <__aeabi_d2f>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	ee07 3a90 	vmov	s15, r3
}
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	e5604189 	.word	0xe5604189
 8001cd4:	400922d0 	.word	0x400922d0
 8001cd8:	40668000 	.word	0x40668000
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <degree_to_rad>:
float degree_to_rad(float degree) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (degree * 3.142) / 180.0;
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fbf8 	bl	80004e0 <__aeabi_f2d>
 8001cf0:	a30e      	add	r3, pc, #56	@ (adr r3, 8001d2c <degree_to_rad+0x4c>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc4b 	bl	8000590 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <degree_to_rad+0x48>)
 8001d08:	f7fe fd6c 	bl	80007e4 <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ff0c 	bl	8000b30 <__aeabi_d2f>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	ee07 3a90 	vmov	s15, r3
}
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40668000 	.word	0x40668000
 8001d2c:	e5604189 	.word	0xe5604189
 8001d30:	400922d0 	.word	0x400922d0

08001d34 <format_robot_to_base>:
uint16_t format_robot_to_base(float degree) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint16_t) (roundf(degree) * 10.0);
 8001d3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d42:	f00d ff17 	bl	800fb74 <roundf>
 8001d46:	ee10 3a10 	vmov	r3, s0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbc8 	bl	80004e0 <__aeabi_f2d>
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <format_robot_to_base+0x40>)
 8001d56:	f7fe fc1b 	bl	8000590 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fec5 	bl	8000af0 <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29b      	uxth	r3, r3
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40240000 	.word	0x40240000

08001d78 <format_base_to_robot>:
float format_base_to_robot(uint16_t degree) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	return (float) (degree / 10.0);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb99 	bl	80004bc <__aeabi_i2d>
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <format_base_to_robot+0x38>)
 8001d90:	f7fe fd28 	bl	80007e4 <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe fec8 	bl	8000b30 <__aeabi_d2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	ee07 3a90 	vmov	s15, r3
}
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40240000 	.word	0x40240000

08001db4 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 10.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001dc4:	213c      	movs	r1, #60	@ 0x3c
 8001dc6:	6838      	ldr	r0, [r7, #0]
 8001dc8:	f008 fdee 	bl	800a9a8 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	dd05      	ble.n	8001e3e <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8001e38:	3b60      	subs	r3, #96	@ 0x60
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e008      	b.n	8001e50 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a48      	ldr	r2, [pc, #288]	@ (8001f64 <Encoder_Update+0x15c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	da04      	bge.n	8001e50 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001e4c:	3360      	adds	r3, #96	@ 0x60
 8001e4e:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001f68 <Encoder_Update+0x160>
 8001e64:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e68:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001f6c <Encoder_Update+0x164>
 8001e6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e8a:	ed97 7a00 	vldr	s14, [r7]
 8001e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ea4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ea8:	ed97 7a00 	vldr	s14, [r7]
 8001eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ebc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001f70 <Encoder_Update+0x168>
 8001ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ef0:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001f6c <Encoder_Update+0x164>
 8001ef4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ef8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001f16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f1a:	ed97 7a00 	vldr	s14, [r7]
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001f34:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f38:	ed97 7a00 	vldr	s14, [r7]
 8001f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	ffff8ad0 	.word	0xffff8ad0
 8001f68:	40c90fda 	.word	0x40c90fda
 8001f6c:	463b8000 	.word	0x463b8000
 8001f70:	42651738 	.word	0x42651738

08001f74 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	ee07 3a90 	vmov	s15, r3
}
 8001f84:	eeb0 0a67 	vmov.f32	s0, s15
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	ee07 3a90 	vmov	s15, r3
}
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	ee07 3a90 	vmov	s15, r3
}
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <Encoder_GetDegree>:

float Encoder_GetDegree(Encoder *enc) {
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return enc->position_degree;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	ee07 3a90 	vmov	s15, r3
}
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <Encoder_GetPosition_mm>:

float Encoder_GetPosition_mm(Encoder *enc) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	ee07 3a90 	vmov	s15, r3
}
 8001ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	ee07 3a90 	vmov	s15, r3
}
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <Encoder_GetAcceleration_mm>:

float Encoder_GetAcceleration_mm(Encoder *enc) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    return enc->acceleration_mm;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	ee07 3a90 	vmov	s15, r3
}
 8002038:	eeb0 0a67 	vmov.f32	s0, s15
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
//	HAL_Delay(1);
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002054:	4811      	ldr	r0, [pc, #68]	@ (800209c <PS2_ReadData+0x54>)
 8002056:	f006 fb35 	bl	80086c4 <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	e00f      	b.n	8002080 <PS2_ReadData+0x38>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <PS2_ReadData+0x58>)
 8002064:	1899      	adds	r1, r3, r2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a0e      	ldr	r2, [pc, #56]	@ (80020a4 <PS2_ReadData+0x5c>)
 800206a:	441a      	add	r2, r3
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <PS2_ReadData+0x60>)
 8002076:	f007 fc30 	bl	80098da <HAL_SPI_TransmitReceive>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b07      	cmp	r3, #7
 8002084:	ddec      	ble.n	8002060 <PS2_ReadData+0x18>
//		HAL_Delay(5);
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800208c:	4803      	ldr	r0, [pc, #12]	@ (800209c <PS2_ReadData+0x54>)
 800208e:	f006 fb19 	bl	80086c4 <HAL_GPIO_WritePin>
//	HAL_Delay(5);
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	48000800 	.word	0x48000800
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000284 	.word	0x20000284
 80020a8:	2000170c 	.word	0x2000170c

080020ac <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <PS2_ButtonCircle+0x20>)
 80020b2:	791b      	ldrb	r3, [r3, #4]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	20000284 	.word	0x20000284

080020d0 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <PS2_ButtonSquare+0x1c>)
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	09db      	lsrs	r3, r3, #7
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	20000284 	.word	0x20000284

080020f0 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <PS2_ButtonTriangle+0x20>)
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000284 	.word	0x20000284

08002114 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <PS2_ButtonCross+0x20>)
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	20000284 	.word	0x20000284

08002138 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <PS2_ButtonR1+0x20>)
 800213e:	791b      	ldrb	r3, [r3, #4]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20000284 	.word	0x20000284

0800215c <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <PS2_ButtonR2+0x20>)
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	20000284 	.word	0x20000284

08002180 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <PS2_ButtonSelect+0x20>)
 8002186:	78db      	ldrb	r3, [r3, #3]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000284 	.word	0x20000284

080021a4 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <PS2_ButtonStart+0x20>)
 80021aa:	78db      	ldrb	r3, [r3, #3]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	20000284 	.word	0x20000284

080021c8 <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <PS2_ButtonL2+0x20>)
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	20000284 	.word	0x20000284

080021ec <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3370      	adds	r3, #112	@ 0x70
 80021fa:	2204      	movs	r2, #4
 80021fc:	2104      	movs	r1, #4
 80021fe:	f00c fd90 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 0008 	add.w	r0, r3, #8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	33b0      	adds	r3, #176	@ 0xb0
 800220c:	2204      	movs	r2, #4
 800220e:	2104      	movs	r1, #4
 8002210:	f00c fd87 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0010 	add.w	r0, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	33f0      	adds	r3, #240	@ 0xf0
 800221e:	2204      	movs	r2, #4
 8002220:	2104      	movs	r1, #4
 8002222:	f00c fd7e 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f103 0018 	add.w	r0, r3, #24
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002232:	2204      	movs	r2, #4
 8002234:	2104      	movs	r1, #4
 8002236:	f00c fd74 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f103 0020 	add.w	r0, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002246:	2204      	movs	r2, #4
 8002248:	2104      	movs	r1, #4
 800224a:	f00c fd6a 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800225a:	2204      	movs	r2, #4
 800225c:	2104      	movs	r1, #4
 800225e:	f00c fd60 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800226e:	2204      	movs	r2, #4
 8002270:	2104      	movs	r1, #4
 8002272:	f00c fd56 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002282:	2201      	movs	r2, #1
 8002284:	2104      	movs	r1, #4
 8002286:	f00c fd4c 	bl	800ed22 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8002296:	2201      	movs	r2, #1
 8002298:	2104      	movs	r1, #4
 800229a:	f00c fd42 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80022aa:	2201      	movs	r2, #1
 80022ac:	2104      	movs	r1, #4
 80022ae:	f00c fd38 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022be:	2201      	movs	r2, #1
 80022c0:	2104      	movs	r1, #4
 80022c2:	f00c fd2e 	bl	800ed22 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022d2:	2204      	movs	r2, #4
 80022d4:	2104      	movs	r1, #4
 80022d6:	f00c fd24 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80022e6:	2204      	movs	r2, #4
 80022e8:	2104      	movs	r1, #4
 80022ea:	f00c fd1a 	bl	800ed22 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80022fa:	2204      	movs	r2, #4
 80022fc:	2104      	movs	r1, #4
 80022fe:	f00c fd10 	bl	800ed22 <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e00b      	b.n	8002320 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	338c      	adds	r3, #140	@ 0x8c
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3301      	adds	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b03      	cmp	r3, #3
 8002324:	ddf0      	ble.n	8002308 <Kalman_Init+0x11c>
    }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e01c      	b.n	800237c <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	e013      	b.n	8002370 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d101      	bne.n	8002354 <Kalman_SetProcessNoise+0x24>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	e001      	b.n	8002358 <Kalman_SetProcessNoise+0x28>
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	0091      	lsls	r1, r2, #2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	440a      	add	r2, r1
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	324c      	adds	r2, #76	@ 0x4c
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	440a      	add	r2, r1
 8002368:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b03      	cmp	r3, #3
 8002374:	dde8      	ble.n	8002348 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3301      	adds	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b03      	cmp	r3, #3
 8002380:	dddf      	ble.n	8002342 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e01c      	b.n	80023dc <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	e013      	b.n	80023d0 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d101      	bne.n	80023b4 <Kalman_SetMeasurementNoise+0x24>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	e001      	b.n	80023b8 <Kalman_SetMeasurementNoise+0x28>
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	0091      	lsls	r1, r2, #2
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	440a      	add	r2, r1
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	325c      	adds	r2, #92	@ 0x5c
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	440a      	add	r2, r1
 80023c8:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	dde8      	ble.n	80023a8 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	dddf      	ble.n	80023a2 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3358      	adds	r3, #88	@ 0x58
 8002424:	461a      	mov	r2, r3
 8002426:	f00d f80b 	bl	800f440 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f103 0008 	add.w	r0, r3, #8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3360      	adds	r3, #96	@ 0x60
 800243a:	461a      	mov	r2, r3
 800243c:	f00d f800 	bl	800f440 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3340      	adds	r3, #64	@ 0x40
 8002450:	461a      	mov	r2, r3
 8002452:	f00c fc2b 	bl	800ecac <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3358      	adds	r3, #88	@ 0x58
 8002462:	461a      	mov	r2, r3
 8002464:	f00c ffec 	bl	800f440 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3360      	adds	r3, #96	@ 0x60
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f00d f89a 	bl	800f5aa <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3328      	adds	r3, #40	@ 0x28
 8002486:	461a      	mov	r2, r3
 8002488:	f00c ffda 	bl	800f440 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f103 0118 	add.w	r1, r3, #24
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3328      	adds	r3, #40	@ 0x28
 800249c:	461a      	mov	r2, r3
 800249e:	f00c fc05 	bl	800ecac <arm_mat_add_f32>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e00e      	b.n	80024d8 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3394      	adds	r3, #148	@ 0x94
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3304      	adds	r3, #4
 80024d0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	dded      	ble.n	80024ba <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f103 0210 	add.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3360      	adds	r3, #96	@ 0x60
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f00d f85d 	bl	800f5aa <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3358      	adds	r3, #88	@ 0x58
 8002500:	461a      	mov	r2, r3
 8002502:	f00c ff9d 	bl	800f440 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f103 0010 	add.w	r0, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3368      	adds	r3, #104	@ 0x68
 8002516:	461a      	mov	r2, r3
 8002518:	f00c ff92 	bl	800f440 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 0120 	add.w	r1, r3, #32
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3368      	adds	r3, #104	@ 0x68
 800252c:	461a      	mov	r2, r3
 800252e:	f00c fbbd 	bl	800ecac <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3368      	adds	r3, #104	@ 0x68
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f00c fc07 	bl	800ed52 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3330      	adds	r3, #48	@ 0x30
 8002554:	461a      	mov	r2, r3
 8002556:	f00c ff73 	bl	800f440 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f103 0010 	add.w	r0, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3348      	adds	r3, #72	@ 0x48
 800256a:	461a      	mov	r2, r3
 800256c:	f00c ff68 	bl	800f440 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e01c      	b.n	80025b0 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	3394      	adds	r3, #148	@ 0x94
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	ed93 7a00 	vldr	s14, [r3]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	3390      	adds	r3, #144	@ 0x90
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3390      	adds	r3, #144	@ 0x90
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	dddf      	ble.n	8002576 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3348      	adds	r3, #72	@ 0x48
 80025c6:	461a      	mov	r2, r3
 80025c8:	f00c ff3a 	bl	800f440 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e01c      	b.n	800260c <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	338c      	adds	r3, #140	@ 0x8c
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3390      	adds	r3, #144	@ 0x90
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	338c      	adds	r3, #140	@ 0x8c
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b03      	cmp	r3, #3
 8002610:	dddf      	ble.n	80025d2 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e00b      	b.n	8002630 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	3398      	adds	r3, #152	@ 0x98
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3301      	adds	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	ddf0      	ble.n	8002618 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e00e      	b.n	800265a <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	3398      	adds	r3, #152	@ 0x98
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002652:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b03      	cmp	r3, #3
 800265e:	dded      	ble.n	800263c <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f103 0110 	add.w	r1, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3360      	adds	r3, #96	@ 0x60
 8002670:	461a      	mov	r2, r3
 8002672:	f00c fee5 	bl	800f440 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3358      	adds	r3, #88	@ 0x58
 8002686:	461a      	mov	r2, r3
 8002688:	f00c ff54 	bl	800f534 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3328      	adds	r3, #40	@ 0x28
 800269c:	461a      	mov	r2, r3
 800269e:	f00c fecf 	bl	800f440 <arm_mat_mult_f32>
}
 80026a2:	bf00      	nop
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <modbus_1t5_Timeout+0x1c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	751a      	strb	r2, [r3, #20]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	2000028c 	.word	0x2000028c

080026cc <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <modbus_3t5_Timeout+0x1c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2201      	movs	r2, #1
 80026da:	755a      	strb	r2, [r3, #21]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	2000028c 	.word	0x2000028c

080026ec <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <modbus_UART_Recived+0x60>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80026fe:	4b13      	ldr	r3, [pc, #76]	@ (800274c <modbus_UART_Recived+0x60>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	b289      	uxth	r1, r1
 800270a:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 800270e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002712:	d210      	bcs.n	8002736 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <modbus_UART_Recived+0x60>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68d8      	ldr	r0, [r3, #12]
 800271a:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <modbus_UART_Recived+0x60>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <modbus_UART_Recived+0x60>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002726:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800272a:	4413      	add	r3, r2
 800272c:	3302      	adds	r3, #2
 800272e:	2201      	movs	r2, #1
 8002730:	4619      	mov	r1, r3
 8002732:	f009 ff49 	bl	800c5c8 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <modbus_UART_Recived+0x60>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000028c 	.word	0x2000028c

08002750 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800275a:	4a24      	ldr	r2, [pc, #144]	@ (80027ec <Modbus_init+0x9c>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002760:	4b22      	ldr	r3, [pc, #136]	@ (80027ec <Modbus_init+0x9c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002768:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <Modbus_init+0x9c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	4a20      	ldr	r2, [pc, #128]	@ (80027f0 <Modbus_init+0xa0>)
 8002770:	2114      	movs	r1, #20
 8002772:	4618      	mov	r0, r3
 8002774:	f008 fe1e 	bl	800b3b4 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002778:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <Modbus_init+0x9c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <Modbus_init+0xa4>)
 8002780:	210e      	movs	r1, #14
 8002782:	4618      	mov	r0, r3
 8002784:	f008 fe16 	bl	800b3b4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002788:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <Modbus_init+0x9c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <Modbus_init+0xa8>)
 8002790:	2103      	movs	r1, #3
 8002792:	4618      	mov	r0, r3
 8002794:	f009 fe5e 	bl	800c454 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <Modbus_init+0x9c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68d8      	ldr	r0, [r3, #12]
 800279e:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <Modbus_init+0x9c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <Modbus_init+0x9c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80027aa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80027ae:	4413      	add	r3, r2
 80027b0:	3302      	adds	r3, #2
 80027b2:	2201      	movs	r2, #1
 80027b4:	4619      	mov	r1, r3
 80027b6:	f009 ff07 	bl	800c5c8 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80027ba:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <Modbus_init+0x9c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10c      	bne.n	80027e4 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <Modbus_init+0x9c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f007 fcd9 	bl	800a188 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <Modbus_init+0x9c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f007 ffa0 	bl	800a724 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2000028c 	.word	0x2000028c
 80027f0:	080026ad 	.word	0x080026ad
 80027f4:	080026cd 	.word	0x080026cd
 80027f8:	080026ed 	.word	0x080026ed

080027fc <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002808:	23ff      	movs	r3, #255	@ 0xff
 800280a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800280c:	23ff      	movs	r3, #255	@ 0xff
 800280e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002810:	e013      	b.n	800283a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	7bbb      	ldrb	r3, [r7, #14]
 800281c:	4053      	eors	r3, r2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002822:	4a10      	ldr	r2, [pc, #64]	@ (8002864 <CRC16+0x68>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4413      	add	r3, r2
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	4053      	eors	r3, r2
 800282e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002830:	4a0d      	ldr	r2, [pc, #52]	@ (8002868 <CRC16+0x6c>)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800283a:	883b      	ldrh	r3, [r7, #0]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	803a      	strh	r2, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e6      	bne.n	8002812 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	b21b      	sxth	r3, r3
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7bbb      	ldrb	r3, [r7, #14]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b21b      	sxth	r3, r3
 8002854:	b29b      	uxth	r3, r3
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000108 	.word	0x20000108
 8002868:	20000008 	.word	0x20000008

0800286c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002872:	4b80      	ldr	r3, [pc, #512]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	3b01      	subs	r3, #1
 800287a:	2b03      	cmp	r3, #3
 800287c:	d80a      	bhi.n	8002894 <Modbus_Protocal_Worker+0x28>
 800287e:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <Modbus_Protocal_Worker+0x18>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	0800289f 	.word	0x0800289f
 8002888:	08002a3d 	.word	0x08002a3d
 800288c:	08002929 	.word	0x08002929
 8002890:	0800294f 	.word	0x0800294f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002894:	4b77      	ldr	r3, [pc, #476]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	761a      	strb	r2, [r3, #24]
		break;
 800289c:	e0e6      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800289e:	4b75      	ldr	r3, [pc, #468]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80028aa:	f000 f9d5 	bl	8002c58 <Modbus_Emission>
 80028ae:	e01c      	b.n	80028ea <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80028b0:	4b70      	ldr	r3, [pc, #448]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	7d9b      	ldrb	r3, [r3, #22]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d017      	beq.n	80028ea <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80028ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80028c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80028ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b67      	ldr	r3, [pc, #412]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80028e2:	4b64      	ldr	r3, [pc, #400]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2203      	movs	r2, #3
 80028e8:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80028ea:	4b62      	ldr	r3, [pc, #392]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	f040 80b2 	bne.w	8002a5e <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80028fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002904:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68d8      	ldr	r0, [r3, #12]
 800290a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002916:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800291a:	4413      	add	r3, r2
 800291c:	3302      	adds	r3, #2
 800291e:	2201      	movs	r2, #1
 8002920:	4619      	mov	r1, r3
 8002922:	f009 fe51 	bl	800c5c8 <HAL_UART_Receive_IT>
		}
		break;
 8002926:	e09a      	b.n	8002a5e <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002928:	4b52      	ldr	r3, [pc, #328]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	7d1b      	ldrb	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8097 	beq.w	8002a62 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8002934:	4b4f      	ldr	r3, [pc, #316]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800293c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	22fe      	movs	r2, #254	@ 0xfe
 8002942:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002944:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	761a      	strb	r2, [r3, #24]
		}
		break;
 800294c:	e089      	b.n	8002a62 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800294e:	4b49      	ldr	r3, [pc, #292]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	7d9b      	ldrb	r3, [r3, #22]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8002958:	4b46      	ldr	r3, [pc, #280]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002964:	4b43      	ldr	r3, [pc, #268]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22ff      	movs	r2, #255	@ 0xff
 800296a:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800296c:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002974:	f113 0f02 	cmn.w	r3, #2
 8002978:	d150      	bne.n	8002a1c <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800297a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002982:	4b3c      	ldr	r3, [pc, #240]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800298a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002992:	3b02      	subs	r3, #2
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f7ff ff30 	bl	80027fc <CRC16>
 800299c:	4603      	mov	r3, r0
 800299e:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80029a0:	793a      	ldrb	r2, [r7, #4]
 80029a2:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029ae:	3b02      	subs	r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10c      	bne.n	80029d4 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80029ba:	797a      	ldrb	r2, [r7, #5]
 80029bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029c8:	3b01      	subs	r3, #1
 80029ca:	440b      	add	r3, r1
 80029cc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d004      	beq.n	80029de <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80029d4:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	22ff      	movs	r2, #255	@ 0xff
 80029da:	75da      	strb	r2, [r3, #23]
				break;
 80029dc:	e046      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80029de:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d113      	bne.n	8002a18 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80029f0:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80029f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002a00:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a0a:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f00c fe3f 	bl	800f690 <memcpy>

			//execute command
			Modbus_frame_response();
 8002a12:	f000 f909 	bl	8002c28 <Modbus_frame_response>
 8002a16:	e001      	b.n	8002a1c <Modbus_Protocal_Worker+0x1b0>
				break;
 8002a18:	bf00      	nop
					}
		break;


	}
}
 8002a1a:	e027      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	7d5b      	ldrb	r3, [r3, #21]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01f      	beq.n	8002a66 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f009 fe93 	bl	800c760 <HAL_UART_AbortReceive>
		break;
 8002a3a:	e014      	b.n	8002a66 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d10f      	bne.n	8002a6a <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002a54:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	761a      	strb	r2, [r3, #24]
		break;
 8002a5c:	e005      	b.n	8002a6a <Modbus_Protocal_Worker+0x1fe>
		break;
 8002a5e:	bf00      	nop
 8002a60:	e004      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a6a:	bf00      	nop
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000028c 	.word	0x2000028c

08002a78 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	7e9b      	ldrb	r3, [r3, #26]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4a1a      	ldr	r2, [pc, #104]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	7ed2      	ldrb	r2, [r2, #27]
 8002a8e:	4413      	add	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d903      	bls.n	8002aa6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f000 f8a0 	bl	8002be4 <ModbusErrorReply>
			 return;
 8002aa4:	e023      	b.n	8002aee <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002aa6:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	440b      	add	r3, r1
 8002ab6:	7f12      	ldrb	r2, [r2, #28]
 8002ab8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002aba:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	7f52      	ldrb	r2, [r2, #29]
 8002acc:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8002ad6:	4b07      	ldr	r3, [pc, #28]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002adc:	2208      	movs	r2, #8
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f00c fdd6 	bl	800f690 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2205      	movs	r2, #5
 8002aea:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000028c 	.word	0x2000028c

08002af8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002afe:	4b38      	ldr	r3, [pc, #224]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	7f1b      	ldrb	r3, [r3, #28]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	4a35      	ldr	r2, [pc, #212]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	7f52      	ldrb	r2, [r2, #29]
 8002b0e:	4413      	add	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002b12:	4b33      	ldr	r3, [pc, #204]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	7e9b      	ldrb	r3, [r3, #26]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4a30      	ldr	r2, [pc, #192]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	7ed2      	ldrb	r2, [r2, #27]
 8002b22:	4413      	add	r3, r2
 8002b24:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <modbusRead1Register+0x3a>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002b30:	d903      	bls.n	8002b3a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002b32:	2003      	movs	r0, #3
 8002b34:	f000 f856 	bl	8002be4 <ModbusErrorReply>
		 return;
 8002b38:	e04e      	b.n	8002bd8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002b3a:	88ba      	ldrh	r2, [r7, #4]
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d808      	bhi.n	8002b58 <modbusRead1Register+0x60>
 8002b46:	88ba      	ldrh	r2, [r7, #4]
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d903      	bls.n	8002b60 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f000 f843 	bl	8002be4 <ModbusErrorReply>
		 return;
 8002b5e:	e03b      	b.n	8002bd8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002b60:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002b7a:	2400      	movs	r4, #0
 8002b7c:	e020      	b.n	8002bc0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	4423      	add	r3, r4
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	18d1      	adds	r1, r2, r3
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	1c63      	adds	r3, r4, #1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	7849      	ldrb	r1, [r1, #1]
 8002b96:	4413      	add	r3, r2
 8002b98:	460a      	mov	r2, r1
 8002b9a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	4423      	add	r3, r4
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	18d1      	adds	r1, r2, r3
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	0063      	lsls	r3, r4, #1
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	7809      	ldrb	r1, [r1, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	460a      	mov	r2, r1
 8002bba:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8002bbe:	3401      	adds	r4, #1
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	429c      	cmp	r4, r3
 8002bc4:	dbdb      	blt.n	8002b7e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0052      	lsls	r2, r2, #1
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000028c 	.word	0x2000028c

08002be4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	7e5a      	ldrb	r2, [r3, #25]
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	79fa      	ldrb	r2, [r7, #7]
 8002c08:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000028c 	.word	0x2000028c

08002c28 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <Modbus_frame_response+0x2c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	7e5b      	ldrb	r3, [r3, #25]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d004      	beq.n	8002c40 <Modbus_frame_response+0x18>
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d105      	bne.n	8002c46 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002c3a:	f7ff ff1d 	bl	8002a78 <modbusWrite1Register>
		break;
 8002c3e:	e006      	b.n	8002c4e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002c40:	f7ff ff5a 	bl	8002af8 <modbusRead1Register>
		break;
 8002c44:	e003      	b.n	8002c4e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f7ff ffcc 	bl	8002be4 <ModbusErrorReply>
		break;
 8002c4c:	bf00      	nop

	}
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000028c 	.word	0x2000028c

08002c58 <Modbus_Emission>:

void Modbus_Emission()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d15d      	bne.n	8002d28 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002c6c:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002c7a:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8002c82:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002c84:	4b32      	ldr	r3, [pc, #200]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8002c8c:	4b30      	ldr	r3, [pc, #192]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8002c94:	461a      	mov	r2, r3
 8002c96:	f00c fcfb 	bl	800f690 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3203      	adds	r2, #3
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002cb0:	4b27      	ldr	r3, [pc, #156]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002cb8:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002cc0:	3b02      	subs	r3, #2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7ff fd99 	bl	80027fc <CRC16>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002cce:	4b20      	ldr	r3, [pc, #128]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002cda:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002cdc:	7939      	ldrb	r1, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002cf2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002cf4:	7979      	ldrb	r1, [r7, #5]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d10d      	bne.n	8002d28 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002d12:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d1e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d22:	461a      	mov	r2, r3
 8002d24:	f009 fc9c 	bl	800c660 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002d28:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2202      	movs	r2, #2
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000028c 	.word	0x2000028c

08002d54 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8002d54:	b4b0      	push	{r4, r5, r7}
 8002d56:	b09f      	sub	sp, #124	@ 0x7c
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002d5c:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002d60:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002d64:	ed87 2b08 	vstr	d2, [r7, #32]
 8002d68:	ed87 3b06 	vstr	d3, [r7, #24]
 8002d6c:	ed87 4b04 	vstr	d4, [r7, #16]
 8002d70:	ed87 5b02 	vstr	d5, [r7, #8]
 8002d74:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002d78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002d7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d84:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002d88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d8c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d94:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dac:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8002db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db2:	461d      	mov	r5, r3
 8002db4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002dcc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002dce:	377c      	adds	r7, #124	@ 0x7c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bcb0      	pop	{r4, r5, r7}
 8002dd4:	4770      	bx	lr

08002dd6 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8002dd6:	b4b0      	push	{r4, r5, r7}
 8002dd8:	b09f      	sub	sp, #124	@ 0x7c
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002dde:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002de2:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002de6:	ed87 2b08 	vstr	d2, [r7, #32]
 8002dea:	ed87 3b06 	vstr	d3, [r7, #24]
 8002dee:	ed87 4b04 	vstr	d4, [r7, #16]
 8002df2:	ed87 5b02 	vstr	d5, [r7, #8]
 8002df6:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002dfa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dfe:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e06:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e16:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002e1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e1e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e26:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e2e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8002e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e34:	461d      	mov	r5, r3
 8002e36:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e4a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002e4e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e50:	377c      	adds	r7, #124	@ 0x7c
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bcb0      	pop	{r4, r5, r7}
 8002e56:	4770      	bx	lr

08002e58 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	@ 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6178      	str	r0, [r7, #20]
 8002e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e6c:	edc7 1a01 	vstr	s3, [r7, #4]
 8002e70:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8002e74:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e80:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8002e84:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	db02      	blt.n	8002e98 <InitTrajectorySegment+0x40>
 8002e92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e96:	e000      	b.n	8002e9a <InitTrajectorySegment+0x42>
 8002e98:	4b49      	ldr	r3, [pc, #292]	@ (8002fc0 <InitTrajectorySegment+0x168>)
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8002e9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ea0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ea4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8002ea8:	edd7 6a02 	vldr	s13, [r7, #8]
 8002eac:	ed97 7a01 	vldr	s14, [r7, #4]
 8002eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8002eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ebc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ec4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ecc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed4:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8002ed8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002edc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ee0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	d524      	bpl.n	8002f38 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8002eee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002ef2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002efa:	eeb0 0a66 	vmov.f32	s0, s13
 8002efe:	f00c fc9d 	bl	800f83c <sqrtf>
 8002f02:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8002f0e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8002f1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	edc3 7a02 	vstr	s15, [r3, #8]
 8002f36:	e027      	b.n	8002f88 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8002f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f40:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f48:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8002f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f50:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8002f5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f62:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8002f76:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8002f94:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002faa:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb0:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	3730      	adds	r7, #48	@ 0x30
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	bf800000 	.word	0xbf800000

08002fc4 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b08f      	sub	sp, #60	@ 0x3c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fd6:	ed97 7a00 	vldr	s14, [r7]
 8002fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fde:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8002fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d503      	bpl.n	8002ff8 <GetTrajectoryPosition+0x34>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	e0b4      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ffe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	db03      	blt.n	8003014 <GetTrajectoryPosition+0x50>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003012:	e0a6      	b.n	8003162 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	edd3 7a04 	vldr	s15, [r3, #16]
 800302c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003038:	d512      	bpl.n	8003060 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 800303a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800303e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003042:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003046:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800304a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003056:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800305a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305e:	e080      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	ed93 7a04 	vldr	s14, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	edd3 7a05 	vldr	s15, [r3, #20]
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	d525      	bpl.n	80030ca <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8003084:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003088:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800308c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003090:	edd7 7a04 	vldr	s15, [r7, #16]
 8003094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003098:	edd7 7a04 	vldr	s15, [r7, #16]
 800309c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a8:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 80030ac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80030b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80030bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c8:	e04b      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80030d6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 80030fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003102:	edd7 7a08 	vldr	s15, [r7, #32]
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	ed97 7a07 	vldr	s14, [r7, #28]
 800310e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003112:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8003116:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800311a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800311e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003122:	edd7 7a08 	vldr	s15, [r7, #32]
 8003126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312a:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 800312e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003132:	edd7 7a05 	vldr	s15, [r7, #20]
 8003136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313a:	edd7 7a06 	vldr	s15, [r7, #24]
 800313e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003142:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003146:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800314a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800314e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003152:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003156:	edd7 7a05 	vldr	s15, [r7, #20]
 800315a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315e:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8003162:	eeb0 0a67 	vmov.f32	s0, s15
 8003166:	373c      	adds	r7, #60	@ 0x3c
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003182:	ed97 7a00 	vldr	s14, [r7]
 8003186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 800318e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	d502      	bpl.n	80031a2 <GetTrajectoryVelocity+0x32>
 800319c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800324c <GetTrajectoryVelocity+0xdc>
 80031a0:	e04d      	b.n	800323e <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80031a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	db02      	blt.n	80031bc <GetTrajectoryVelocity+0x4c>
 80031b6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800324c <GetTrajectoryVelocity+0xdc>
 80031ba:	e040      	b.n	800323e <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80031ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80031d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	d506      	bpl.n	80031ea <GetTrajectoryVelocity+0x7a>
        return a * t;
 80031dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80031e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e8:	e029      	b.n	800323e <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80031fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	d502      	bpl.n	800320e <GetTrajectoryVelocity+0x9e>
        return v;
 8003208:	edd7 7a03 	vldr	s15, [r7, #12]
 800320c:	e017      	b.n	800323e <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edd3 7a04 	vldr	s15, [r3, #16]
 8003214:	ed97 7a05 	vldr	s14, [r7, #20]
 8003218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003226:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 800322a:	ed97 7a04 	vldr	s14, [r7, #16]
 800322e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	ed97 7a03 	vldr	s14, [r7, #12]
 800323a:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	00000000 	.word	0x00000000

08003250 <InitHoldTrajectorySegment>:

void InitHoldTrajectorySegment(TrajectorySegment *seg, float pos, float duration, float t_start) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	ed87 0a02 	vstr	s0, [r7, #8]
 800325c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003260:	ed87 1a00 	vstr	s2, [r7]
	seg->start_pos = pos;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	601a      	str	r2, [r3, #0]
	seg->end_pos = pos;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	605a      	str	r2, [r3, #4]
	seg->v_max = 0.0f;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
	seg->a_max = 0.0f;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
	seg->t_accel = 0.0f;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
	seg->t_decel = 0.0f;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
	seg->t_const = duration;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	615a      	str	r2, [r3, #20]
	seg->t_total = duration;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	61da      	str	r2, [r3, #28]
	seg->t_start = t_start;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	@ 0x30
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80032b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	2220      	movs	r2, #32
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f00c f9af 	bl	800f62c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80032ce:	4b32      	ldr	r3, [pc, #200]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80032d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032d6:	4b30      	ldr	r3, [pc, #192]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80032dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032de:	4b2e      	ldr	r3, [pc, #184]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80032ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032f0:	4b29      	ldr	r3, [pc, #164]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032f6:	4b28      	ldr	r3, [pc, #160]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032f8:	2204      	movs	r2, #4
 80032fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80032fc:	4b26      	ldr	r3, [pc, #152]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003302:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003304:	2200      	movs	r2, #0
 8003306:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003308:	4b23      	ldr	r3, [pc, #140]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800330a:	2201      	movs	r2, #1
 800330c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800330e:	4b22      	ldr	r3, [pc, #136]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003318:	2200      	movs	r2, #0
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800331c:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003322:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800332a:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800332c:	2200      	movs	r2, #0
 800332e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003338:	4817      	ldr	r0, [pc, #92]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800333a:	f003 fb41 	bl	80069c0 <HAL_ADC_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003344:	f002 f9a2 	bl	800568c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800334c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003350:	4619      	mov	r1, r3
 8003352:	4811      	ldr	r0, [pc, #68]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003354:	f004 fade 	bl	8007914 <HAL_ADCEx_MultiModeConfigChannel>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800335e:	f002 f995 	bl	800568c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <MX_ADC1_Init+0xec>)
 8003364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003366:	2306      	movs	r3, #6
 8003368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800336e:	237f      	movs	r3, #127	@ 0x7f
 8003370:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003372:	2304      	movs	r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	4619      	mov	r1, r3
 800337e:	4806      	ldr	r0, [pc, #24]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003380:	f003 fdcc 	bl	8006f1c <HAL_ADC_ConfigChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800338a:	f002 f97f 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	3730      	adds	r7, #48	@ 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000290 	.word	0x20000290
 800339c:	04300002 	.word	0x04300002

080033a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033a6:	463b      	mov	r3, r7
 80033a8:	2220      	movs	r2, #32
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f00c f93d 	bl	800f62c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80033b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003464 <MX_ADC2_Init+0xc4>)
 80033b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80033be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033c6:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80033cc:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033d2:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033d8:	4b21      	ldr	r3, [pc, #132]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033da:	2204      	movs	r2, #4
 80033dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80033e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80033ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80033f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033fe:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003404:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <MX_ADC2_Init+0xc0>)
 800340e:	2200      	movs	r2, #0
 8003410:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003412:	4b13      	ldr	r3, [pc, #76]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800341a:	4811      	ldr	r0, [pc, #68]	@ (8003460 <MX_ADC2_Init+0xc0>)
 800341c:	f003 fad0 	bl	80069c0 <HAL_ADC_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8003426:	f002 f931 	bl	800568c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800342a:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <MX_ADC2_Init+0xc8>)
 800342c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800342e:	2306      	movs	r3, #6
 8003430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003436:	237f      	movs	r3, #127	@ 0x7f
 8003438:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800343a:	2304      	movs	r3, #4
 800343c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003442:	463b      	mov	r3, r7
 8003444:	4619      	mov	r1, r3
 8003446:	4806      	ldr	r0, [pc, #24]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003448:	f003 fd68 	bl	8006f1c <HAL_ADC_ConfigChannel>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8003452:	f002 f91b 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200002fc 	.word	0x200002fc
 8003464:	50000100 	.word	0x50000100
 8003468:	08600004 	.word	0x08600004

0800346c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0a0      	sub	sp, #128	@ 0x80
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	f107 0318 	add.w	r3, r7, #24
 8003488:	2254      	movs	r2, #84	@ 0x54
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f00c f8cd 	bl	800f62c <memset>
  if(adcHandle->Instance==ADC1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349a:	d13e      	bne.n	800351a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800349c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a8:	f107 0318 	add.w	r3, r7, #24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f005 ff1b 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80034b8:	f002 f8e8 	bl	800568c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034bc:	4b3a      	ldr	r3, [pc, #232]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a39      	ldr	r2, [pc, #228]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80034c6:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10b      	bne.n	80034e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80034ce:	4b37      	ldr	r3, [pc, #220]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	4a36      	ldr	r2, [pc, #216]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e6:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	4a30      	ldr	r2, [pc, #192]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f2:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80034fe:	2303      	movs	r3, #3
 8003500:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003502:	2303      	movs	r3, #3
 8003504:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800350e:	4619      	mov	r1, r3
 8003510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003514:	f004 ff54 	bl	80083c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003518:	e042      	b.n	80035a0 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <HAL_ADC_MspInit+0x144>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d13d      	bne.n	80035a0 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003528:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800352a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800352e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003530:	f107 0318 	add.w	r3, r7, #24
 8003534:	4618      	mov	r0, r3
 8003536:	f005 fed7 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8003540:	f002 f8a4 	bl	800568c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 800354c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10b      	bne.n	800356e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 800355c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003562:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003572:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800357a:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8003586:	2302      	movs	r3, #2
 8003588:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358a:	2303      	movs	r3, #3
 800358c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8003592:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003596:	4619      	mov	r1, r3
 8003598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800359c:	f004 ff10 	bl	80083c0 <HAL_GPIO_Init>
}
 80035a0:	bf00      	nop
 80035a2:	3780      	adds	r7, #128	@ 0x80
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000368 	.word	0x20000368
 80035ac:	40021000 	.word	0x40021000
 80035b0:	50000100 	.word	0x50000100

080035b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80035ba:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <MX_DMA_Init+0x50>)
 80035bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035be:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <MX_DMA_Init+0x50>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <MX_DMA_Init+0x50>)
 80035c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <MX_DMA_Init+0x50>)
 80035d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <MX_DMA_Init+0x50>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <MX_DMA_Init+0x50>)
 80035e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	200b      	movs	r0, #11
 80035f0:	f004 fb73 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035f4:	200b      	movs	r0, #11
 80035f6:	f004 fb8a 	bl	8007d0e <HAL_NVIC_EnableIRQ>

}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	@ 0x28
 800360c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800361e:	4b54      	ldr	r3, [pc, #336]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	4a53      	ldr	r2, [pc, #332]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800362a:	4b51      	ldr	r3, [pc, #324]	@ (8003770 <MX_GPIO_Init+0x168>)
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003636:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	4a4d      	ldr	r2, [pc, #308]	@ (8003770 <MX_GPIO_Init+0x168>)
 800363c:	f043 0320 	orr.w	r3, r3, #32
 8003640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003642:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	4b48      	ldr	r3, [pc, #288]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	4a47      	ldr	r2, [pc, #284]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800365a:	4b45      	ldr	r3, [pc, #276]	@ (8003770 <MX_GPIO_Init+0x168>)
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	4b42      	ldr	r3, [pc, #264]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a41      	ldr	r2, [pc, #260]	@ (8003770 <MX_GPIO_Init+0x168>)
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003672:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 800367e:	2200      	movs	r2, #0
 8003680:	2102      	movs	r1, #2
 8003682:	483c      	ldr	r0, [pc, #240]	@ (8003774 <MX_GPIO_Init+0x16c>)
 8003684:	f005 f81e 	bl	80086c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8003688:	2200      	movs	r2, #0
 800368a:	2140      	movs	r1, #64	@ 0x40
 800368c:	483a      	ldr	r0, [pc, #232]	@ (8003778 <MX_GPIO_Init+0x170>)
 800368e:	f005 f819 	bl	80086c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 8003692:	2201      	movs	r2, #1
 8003694:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003698:	4837      	ldr	r0, [pc, #220]	@ (8003778 <MX_GPIO_Init+0x170>)
 800369a:	f005 f813 	bl	80086c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 800369e:	2302      	movs	r3, #2
 80036a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	482f      	ldr	r0, [pc, #188]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036b6:	f004 fe83 	bl	80083c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80036ba:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 80036be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80036c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4828      	ldr	r0, [pc, #160]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036d2:	f004 fe75 	bl	80083c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Left_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_Left_Pin|Limit_Switch_Prismatic2_Pin;
 80036d6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80036da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	4821      	ldr	r0, [pc, #132]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036ee:	f004 fe67 	bl	80083c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 80036f2:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80036f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	481b      	ldr	r0, [pc, #108]	@ (8003778 <MX_GPIO_Init+0x170>)
 800370c:	f004 fe58 	bl	80083c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8003710:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003716:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800371a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4619      	mov	r1, r3
 8003726:	4814      	ldr	r0, [pc, #80]	@ (8003778 <MX_GPIO_Init+0x170>)
 8003728:	f004 fe4a 	bl	80083c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 800372c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003732:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	4619      	mov	r1, r3
 8003742:	480d      	ldr	r0, [pc, #52]	@ (8003778 <MX_GPIO_Init+0x170>)
 8003744:	f004 fe3c 	bl	80083c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2100      	movs	r1, #0
 800374c:	2017      	movs	r0, #23
 800374e:	f004 fac4 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003752:	2017      	movs	r0, #23
 8003754:	f004 fadb 	bl	8007d0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	2028      	movs	r0, #40	@ 0x28
 800375e:	f004 fabc 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003762:	2028      	movs	r0, #40	@ 0x28
 8003764:	f004 fad3 	bl	8007d0e <HAL_NVIC_EnableIRQ>

}
 8003768:	bf00      	nop
 800376a:	3728      	adds	r7, #40	@ 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	48000400 	.word	0x48000400
 8003778:	48000800 	.word	0x48000800
 800377c:	00000000 	.word	0x00000000

08003780 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	ed2d 8b04 	vpush	{d8-d9}
 8003788:	b0a4      	sub	sp, #144	@ 0x90
 800378a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800378c:	f002 fe9b 	bl	80064c6 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003790:	f001 fc1e 	bl	8004fd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003794:	f7ff ff38 	bl	8003608 <MX_GPIO_Init>
	MX_DMA_Init();
 8003798:	f7ff ff0c 	bl	80035b4 <MX_DMA_Init>
	MX_TIM3_Init();
 800379c:	f002 f97c 	bl	8005a98 <MX_TIM3_Init>
	MX_ADC1_Init();
 80037a0:	f7ff fd86 	bl	80032b0 <MX_ADC1_Init>
	MX_TIM1_Init();
 80037a4:	f002 f8d6 	bl	8005954 <MX_TIM1_Init>
	MX_TIM2_Init();
 80037a8:	f002 f928 	bl	80059fc <MX_TIM2_Init>
	MX_TIM4_Init();
 80037ac:	f002 f9ca 	bl	8005b44 <MX_TIM4_Init>
	MX_TIM20_Init();
 80037b0:	f002 fb4e 	bl	8005e50 <MX_TIM20_Init>
	MX_TIM8_Init();
 80037b4:	f002 fa1c 	bl	8005bf0 <MX_TIM8_Init>
	MX_TIM16_Init();
 80037b8:	f002 faca 	bl	8005d50 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 80037bc:	f002 fd80 	bl	80062c0 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 80037c0:	f7ff fdee 	bl	80033a0 <MX_ADC2_Init>
	MX_SPI1_Init();
 80037c4:	f001 ff68 	bl	8005698 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 80037c8:	48a7      	ldr	r0, [pc, #668]	@ (8003a68 <main+0x2e8>)
 80037ca:	f006 fc6d 	bl	800a0a8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80037ce:	48a7      	ldr	r0, [pc, #668]	@ (8003a6c <main+0x2ec>)
 80037d0:	f006 fc6a 	bl	800a0a8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80037d4:	210c      	movs	r1, #12
 80037d6:	48a5      	ldr	r0, [pc, #660]	@ (8003a6c <main+0x2ec>)
 80037d8:	f006 fe2a 	bl	800a430 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 80037dc:	2100      	movs	r1, #0
 80037de:	48a2      	ldr	r0, [pc, #648]	@ (8003a68 <main+0x2e8>)
 80037e0:	f006 fe26 	bl	800a430 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 80037e4:	2108      	movs	r1, #8
 80037e6:	48a0      	ldr	r0, [pc, #640]	@ (8003a68 <main+0x2e8>)
 80037e8:	f006 fe22 	bl	800a430 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 80037ec:	49a0      	ldr	r1, [pc, #640]	@ (8003a70 <main+0x2f0>)
 80037ee:	48a1      	ldr	r0, [pc, #644]	@ (8003a74 <main+0x2f4>)
 80037f0:	f7fe fae0 	bl	8001db4 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80037f4:	49a0      	ldr	r1, [pc, #640]	@ (8003a78 <main+0x2f8>)
 80037f6:	48a1      	ldr	r0, [pc, #644]	@ (8003a7c <main+0x2fc>)
 80037f8:	f7fe fadc 	bl	8001db4 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 80037fc:	48a0      	ldr	r0, [pc, #640]	@ (8003a80 <main+0x300>)
 80037fe:	f003 fa9b 	bl	8006d38 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8003802:	48a0      	ldr	r0, [pc, #640]	@ (8003a84 <main+0x304>)
 8003804:	f006 fcc0 	bl	800a188 <HAL_TIM_Base_Start_IT>

	uint64_t lastTick = 0;
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003814:	213c      	movs	r1, #60	@ 0x3c
 8003816:	4898      	ldr	r0, [pc, #608]	@ (8003a78 <main+0x2f8>)
 8003818:	f007 f8c6 	bl	800a9a8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800381c:	213c      	movs	r1, #60	@ 0x3c
 800381e:	4894      	ldr	r0, [pc, #592]	@ (8003a70 <main+0x2f0>)
 8003820:	f007 f8c2 	bl	800a9a8 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8003824:	4b98      	ldr	r3, [pc, #608]	@ (8003a88 <main+0x308>)
 8003826:	4a99      	ldr	r2, [pc, #612]	@ (8003a8c <main+0x30c>)
 8003828:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800382a:	4b97      	ldr	r3, [pc, #604]	@ (8003a88 <main+0x308>)
 800382c:	4a98      	ldr	r2, [pc, #608]	@ (8003a90 <main+0x310>)
 800382e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8003830:	4b95      	ldr	r3, [pc, #596]	@ (8003a88 <main+0x308>)
 8003832:	2215      	movs	r2, #21
 8003834:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8003836:	4b94      	ldr	r3, [pc, #592]	@ (8003a88 <main+0x308>)
 8003838:	22c8      	movs	r2, #200	@ 0xc8
 800383a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800383c:	4995      	ldr	r1, [pc, #596]	@ (8003a94 <main+0x314>)
 800383e:	4892      	ldr	r0, [pc, #584]	@ (8003a88 <main+0x308>)
 8003840:	f7fe ff86 	bl	8002750 <Modbus_init>

	Kalman_Init(&kf_pris);
 8003844:	4894      	ldr	r0, [pc, #592]	@ (8003a98 <main+0x318>)
 8003846:	f7fe fcd1 	bl	80021ec <Kalman_Init>

	kf_pris.A_data[0] = 1;
 800384a:	4b93      	ldr	r3, [pc, #588]	@ (8003a98 <main+0x318>)
 800384c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003850:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 8003852:	4b91      	ldr	r3, [pc, #580]	@ (8003a98 <main+0x318>)
 8003854:	4a91      	ldr	r2, [pc, #580]	@ (8003a9c <main+0x31c>)
 8003856:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 8003858:	4b8f      	ldr	r3, [pc, #572]	@ (8003a98 <main+0x318>)
 800385a:	4a91      	ldr	r2, [pc, #580]	@ (8003aa0 <main+0x320>)
 800385c:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 800385e:	4b8e      	ldr	r3, [pc, #568]	@ (8003a98 <main+0x318>)
 8003860:	4a90      	ldr	r2, [pc, #576]	@ (8003aa4 <main+0x324>)
 8003862:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 8003864:	4b8c      	ldr	r3, [pc, #560]	@ (8003a98 <main+0x318>)
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 800386e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a98 <main+0x318>)
 8003870:	4a8d      	ldr	r2, [pc, #564]	@ (8003aa8 <main+0x328>)
 8003872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 8003876:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <main+0x318>)
 8003878:	4a8c      	ldr	r2, [pc, #560]	@ (8003aac <main+0x32c>)
 800387a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 800387e:	4b86      	ldr	r3, [pc, #536]	@ (8003a98 <main+0x318>)
 8003880:	4a8b      	ldr	r2, [pc, #556]	@ (8003ab0 <main+0x330>)
 8003882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 8003886:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <main+0x318>)
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 8003890:	4b81      	ldr	r3, [pc, #516]	@ (8003a98 <main+0x318>)
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 800389a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a98 <main+0x318>)
 800389c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 80038a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003a98 <main+0x318>)
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 80038ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003a98 <main+0x318>)
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 80038b8:	4b77      	ldr	r3, [pc, #476]	@ (8003a98 <main+0x318>)
 80038ba:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab4 <main+0x334>)
 80038bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 80038c0:	4b75      	ldr	r3, [pc, #468]	@ (8003a98 <main+0x318>)
 80038c2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ab8 <main+0x338>)
 80038c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 80038c8:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <main+0x318>)
 80038ca:	4a7c      	ldr	r2, [pc, #496]	@ (8003abc <main+0x33c>)
 80038cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 80038d0:	4b71      	ldr	r3, [pc, #452]	@ (8003a98 <main+0x318>)
 80038d2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ac0 <main+0x340>)
 80038d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 80038d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a98 <main+0x318>)
 80038da:	4a7a      	ldr	r2, [pc, #488]	@ (8003ac4 <main+0x344>)
 80038dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 80038e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003a98 <main+0x318>)
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 80038ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003a98 <main+0x318>)
 80038ec:	4a76      	ldr	r2, [pc, #472]	@ (8003ac8 <main+0x348>)
 80038ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038f8:	e027      	b.n	800394a <main+0x1ca>
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003900:	e01a      	b.n	8003938 <main+0x1b8>
			kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8003902:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003906:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800390a:	429a      	cmp	r2, r3
 800390c:	d102      	bne.n	8003914 <main+0x194>
 800390e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003912:	e001      	b.n	8003918 <main+0x198>
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800391c:	0099      	lsls	r1, r3, #2
 800391e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003922:	440b      	add	r3, r1
 8003924:	495c      	ldr	r1, [pc, #368]	@ (8003a98 <main+0x318>)
 8003926:	333c      	adds	r3, #60	@ 0x3c
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800392e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003932:	3301      	adds	r3, #1
 8003934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003938:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800393c:	2b03      	cmp	r3, #3
 800393e:	dde0      	ble.n	8003902 <main+0x182>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8003940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003944:	3301      	adds	r3, #1
 8003946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800394a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800394e:	2b03      	cmp	r3, #3
 8003950:	ddd3      	ble.n	80038fa <main+0x17a>
		}
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 8003952:	4b51      	ldr	r3, [pc, #324]	@ (8003a98 <main+0x318>)
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 800395c:	4b4e      	ldr	r3, [pc, #312]	@ (8003a98 <main+0x318>)
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8003966:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <main+0x318>)
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 8003970:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <main+0x318>)
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 800397a:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003acc <main+0x34c>
 800397e:	4846      	ldr	r0, [pc, #280]	@ (8003a98 <main+0x318>)
 8003980:	f7fe fd06 	bl	8002390 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 8003984:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8003ad0 <main+0x350>
 8003988:	4843      	ldr	r0, [pc, #268]	@ (8003a98 <main+0x318>)
 800398a:	f7fe fcd1 	bl	8002330 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 800398e:	4851      	ldr	r0, [pc, #324]	@ (8003ad4 <main+0x354>)
 8003990:	f7fe fc2c 	bl	80021ec <Kalman_Init>

	kf_rev.A_data[0] = 1;
 8003994:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad4 <main+0x354>)
 8003996:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800399a:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 800399c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <main+0x354>)
 800399e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ad8 <main+0x358>)
 80039a0:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80039a2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <main+0x354>)
 80039a4:	4a4d      	ldr	r2, [pc, #308]	@ (8003adc <main+0x35c>)
 80039a6:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80039a8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <main+0x354>)
 80039aa:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae0 <main+0x360>)
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 80039ae:	4b49      	ldr	r3, [pc, #292]	@ (8003ad4 <main+0x354>)
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 80039b8:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <main+0x354>)
 80039ba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae4 <main+0x364>)
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 80039c0:	4b44      	ldr	r3, [pc, #272]	@ (8003ad4 <main+0x354>)
 80039c2:	4a49      	ldr	r2, [pc, #292]	@ (8003ae8 <main+0x368>)
 80039c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 80039c8:	4b42      	ldr	r3, [pc, #264]	@ (8003ad4 <main+0x354>)
 80039ca:	4a48      	ldr	r2, [pc, #288]	@ (8003aec <main+0x36c>)
 80039cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 80039d0:	4b40      	ldr	r3, [pc, #256]	@ (8003ad4 <main+0x354>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 80039da:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad4 <main+0x354>)
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 80039e4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <main+0x354>)
 80039e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 80039ee:	4b39      	ldr	r3, [pc, #228]	@ (8003ad4 <main+0x354>)
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 80039f8:	4b36      	ldr	r3, [pc, #216]	@ (8003ad4 <main+0x354>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 8003a02:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <main+0x354>)
 8003a04:	4a3a      	ldr	r2, [pc, #232]	@ (8003af0 <main+0x370>)
 8003a06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8003a0a:	4b32      	ldr	r3, [pc, #200]	@ (8003ad4 <main+0x354>)
 8003a0c:	4a39      	ldr	r2, [pc, #228]	@ (8003af4 <main+0x374>)
 8003a0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 8003a12:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <main+0x354>)
 8003a14:	4a38      	ldr	r2, [pc, #224]	@ (8003af8 <main+0x378>)
 8003a16:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad4 <main+0x354>)
 8003a1c:	4a37      	ldr	r2, [pc, #220]	@ (8003afc <main+0x37c>)
 8003a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8003a22:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad4 <main+0x354>)
 8003a24:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <main+0x380>)
 8003a26:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <main+0x354>)
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8003a34:	4b27      	ldr	r3, [pc, #156]	@ (8003ad4 <main+0x354>)
 8003a36:	4a33      	ldr	r2, [pc, #204]	@ (8003b04 <main+0x384>)
 8003a38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a40:	e076      	b.n	8003b30 <main+0x3b0>
		for (int j = 0; j < 4; j++) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a46:	e06d      	b.n	8003b24 <main+0x3a4>
			if (i == j) {
 8003a48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d15b      	bne.n	8003b08 <main+0x388>
				kf_rev.H_data[i * 4 + j] = 1.0f;
 8003a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a56:	4413      	add	r3, r2
 8003a58:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <main+0x354>)
 8003a5a:	333c      	adds	r3, #60	@ 0x3c
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e05a      	b.n	8003b1e <main+0x39e>
 8003a68:	20001c38 	.word	0x20001c38
 8003a6c:	20001aa0 	.word	0x20001aa0
 8003a70:	200019d4 	.word	0x200019d4
 8003a74:	2000036c 	.word	0x2000036c
 8003a78:	20001908 	.word	0x20001908
 8003a7c:	200003a0 	.word	0x200003a0
 8003a80:	20000290 	.word	0x20000290
 8003a84:	2000183c 	.word	0x2000183c
 8003a88:	200006f8 	.word	0x200006f8
 8003a8c:	20001d04 	.word	0x20001d04
 8003a90:	20001b6c 	.word	0x20001b6c
 8003a94:	20000bd0 	.word	0x20000bd0
 8003a98:	20000e8c 	.word	0x20000e8c
 8003a9c:	3a5c11e4 	.word	0x3a5c11e4
 8003aa0:	b4e160df 	.word	0xb4e160df
 8003aa4:	3757157b 	.word	0x3757157b
 8003aa8:	3f2dd97f 	.word	0x3f2dd97f
 8003aac:	ba5c11e4 	.word	0xba5c11e4
 8003ab0:	3cd20afa 	.word	0x3cd20afa
 8003ab4:	bd2c27a6 	.word	0xbd2c27a6
 8003ab8:	37b03ea2 	.word	0x37b03ea2
 8003abc:	bdc3e426 	.word	0xbdc3e426
 8003ac0:	36866b47 	.word	0x36866b47
 8003ac4:	3c034092 	.word	0x3c034092
 8003ac8:	3e90b0f2 	.word	0x3e90b0f2
 8003acc:	3c23d70a 	.word	0x3c23d70a
 8003ad0:	3f666666 	.word	0x3f666666
 8003ad4:	200011b0 	.word	0x200011b0
 8003ad8:	3a830bb9 	.word	0x3a830bb9
 8003adc:	b6327146 	.word	0xb6327146
 8003ae0:	33ae1e34 	.word	0x33ae1e34
 8003ae4:	3f7fe5c9 	.word	0x3f7fe5c9
 8003ae8:	bbae429e 	.word	0xbbae429e
 8003aec:	392a143b 	.word	0x392a143b
 8003af0:	c02fbe77 	.word	0xc02fbe77
 8003af4:	3bef4e01 	.word	0x3bef4e01
 8003af8:	3e0aa64c 	.word	0x3e0aa64c
 8003afc:	34012bd0 	.word	0x34012bd0
 8003b00:	397c4992 	.word	0x397c4992
 8003b04:	3fd7ae14 	.word	0x3fd7ae14
			} else {
				kf_rev.H_data[i * 4 + j] = 0.0f;
 8003b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b0e:	4413      	add	r3, r2
 8003b10:	4ac1      	ldr	r2, [pc, #772]	@ (8003e18 <main+0x698>)
 8003b12:	333c      	adds	r3, #60	@ 0x3c
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8003b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b20:	3301      	adds	r3, #1
 8003b22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	dd8e      	ble.n	8003a48 <main+0x2c8>
	for (int i = 0; i < 2; i++) {
 8003b2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	dd85      	ble.n	8003a42 <main+0x2c2>
			}
		}
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8003b36:	4bb8      	ldr	r3, [pc, #736]	@ (8003e18 <main+0x698>)
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8003b40:	4bb5      	ldr	r3, [pc, #724]	@ (8003e18 <main+0x698>)
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8003b4a:	4bb3      	ldr	r3, [pc, #716]	@ (8003e18 <main+0x698>)
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8003b54:	4bb0      	ldr	r3, [pc, #704]	@ (8003e18 <main+0x698>)
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8003b5e:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8003e1c <main+0x69c>
 8003b62:	48ad      	ldr	r0, [pc, #692]	@ (8003e18 <main+0x698>)
 8003b64:	f7fe fc14 	bl	8002390 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8003b68:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8003e20 <main+0x6a0>
 8003b6c:	48aa      	ldr	r0, [pc, #680]	@ (8003e18 <main+0x698>)
 8003b6e:	f7fe fbdf 	bl	8002330 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01,
 8003b72:	4cac      	ldr	r4, [pc, #688]	@ (8003e24 <main+0x6a4>)
 8003b74:	463b      	mov	r3, r7
 8003b76:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 8003db0 <main+0x630>
 8003b7a:	ed9f 5b8f 	vldr	d5, [pc, #572]	@ 8003db8 <main+0x638>
 8003b7e:	ed9f 4b90 	vldr	d4, [pc, #576]	@ 8003dc0 <main+0x640>
 8003b82:	ed9f 3b8f 	vldr	d3, [pc, #572]	@ 8003dc0 <main+0x640>
 8003b86:	ed9f 2b90 	vldr	d2, [pc, #576]	@ 8003dc8 <main+0x648>
 8003b8a:	ed9f 1b91 	vldr	d1, [pc, #580]	@ 8003dd0 <main+0x650>
 8003b8e:	ed9f 0b92 	vldr	d0, [pc, #584]	@ 8003dd8 <main+0x658>
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f8de 	bl	8002d54 <create_prismatic_motor>
 8003b98:	4625      	mov	r5, r4
 8003b9a:	463c      	mov	r4, r7
 8003b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bac:	e885 0003 	stmia.w	r5, {r0, r1}
			1.77e-01, 3.8719, 0.0016);
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00,
 8003bb0:	4c9d      	ldr	r4, [pc, #628]	@ (8003e28 <main+0x6a8>)
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8003de0 <main+0x660>
 8003bb8:	ed9f 5b8b 	vldr	d5, [pc, #556]	@ 8003de8 <main+0x668>
 8003bbc:	ed9f 4b8c 	vldr	d4, [pc, #560]	@ 8003df0 <main+0x670>
 8003bc0:	ed9f 3b8d 	vldr	d3, [pc, #564]	@ 8003df8 <main+0x678>
 8003bc4:	ed9f 2b8e 	vldr	d2, [pc, #568]	@ 8003e00 <main+0x680>
 8003bc8:	ed9f 1b8f 	vldr	d1, [pc, #572]	@ 8003e08 <main+0x688>
 8003bcc:	ed9f 0b90 	vldr	d0, [pc, #576]	@ 8003e10 <main+0x690>
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f900 	bl	8002dd6 <create_motor>
 8003bd6:	4625      	mov	r5, r4
 8003bd8:	463c      	mov	r4, r7
 8003bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bea:	e885 0003 	stmia.w	r5, {r0, r1}
			1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8003bee:	4b8f      	ldr	r3, [pc, #572]	@ (8003e2c <main+0x6ac>)
 8003bf0:	4a8f      	ldr	r2, [pc, #572]	@ (8003e30 <main+0x6b0>)
 8003bf2:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8003bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8003e2c <main+0x6ac>)
 8003bf6:	4a8f      	ldr	r2, [pc, #572]	@ (8003e34 <main+0x6b4>)
 8003bf8:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8003bfa:	4b8c      	ldr	r3, [pc, #560]	@ (8003e2c <main+0x6ac>)
 8003bfc:	4a8c      	ldr	r2, [pc, #560]	@ (8003e30 <main+0x6b0>)
 8003bfe:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8003c00:	2100      	movs	r1, #0
 8003c02:	488a      	ldr	r0, [pc, #552]	@ (8003e2c <main+0x6ac>)
 8003c04:	f00b f81c 	bl	800ec40 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8003c08:	4b8b      	ldr	r3, [pc, #556]	@ (8003e38 <main+0x6b8>)
 8003c0a:	4a8c      	ldr	r2, [pc, #560]	@ (8003e3c <main+0x6bc>)
 8003c0c:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8003c0e:	4b8a      	ldr	r3, [pc, #552]	@ (8003e38 <main+0x6b8>)
 8003c10:	4a88      	ldr	r2, [pc, #544]	@ (8003e34 <main+0x6b4>)
 8003c12:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8003c14:	4b88      	ldr	r3, [pc, #544]	@ (8003e38 <main+0x6b8>)
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4886      	ldr	r0, [pc, #536]	@ (8003e38 <main+0x6b8>)
 8003c20:	f00b f80e 	bl	800ec40 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 1.5;
 8003c24:	4b86      	ldr	r3, [pc, #536]	@ (8003e40 <main+0x6c0>)
 8003c26:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003c2a:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 0.8;
 8003c2c:	4b84      	ldr	r3, [pc, #528]	@ (8003e40 <main+0x6c0>)
 8003c2e:	4a85      	ldr	r2, [pc, #532]	@ (8003e44 <main+0x6c4>)
 8003c30:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 0.4;
 8003c32:	4b83      	ldr	r3, [pc, #524]	@ (8003e40 <main+0x6c0>)
 8003c34:	4a84      	ldr	r2, [pc, #528]	@ (8003e48 <main+0x6c8>)
 8003c36:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4881      	ldr	r0, [pc, #516]	@ (8003e40 <main+0x6c0>)
 8003c3c:	f00b f800 	bl	800ec40 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8003c40:	4b82      	ldr	r3, [pc, #520]	@ (8003e4c <main+0x6cc>)
 8003c42:	4a83      	ldr	r2, [pc, #524]	@ (8003e50 <main+0x6d0>)
 8003c44:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8003c46:	4b81      	ldr	r3, [pc, #516]	@ (8003e4c <main+0x6cc>)
 8003c48:	4a82      	ldr	r2, [pc, #520]	@ (8003e54 <main+0x6d4>)
 8003c4a:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8003c4c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e4c <main+0x6cc>)
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8003c54:	2100      	movs	r1, #0
 8003c56:	487d      	ldr	r0, [pc, #500]	@ (8003e4c <main+0x6cc>)
 8003c58:	f00a fff2 	bl	800ec40 <arm_pid_init_f32>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Emer_trick = HAL_GetTick();
 8003c5c:	f002 fc98 	bl	8006590 <HAL_GetTick>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4a7d      	ldr	r2, [pc, #500]	@ (8003e58 <main+0x6d8>)
 8003c64:	6013      	str	r3, [r2, #0]
		uint64_t currentTick = HAL_GetTick();
 8003c66:	f002 fc93 	bl	8006590 <HAL_GetTick>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	469a      	mov	sl, r3
 8003c70:	4693      	mov	fp, r2
 8003c72:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
		float dt = (currentTick - lastTick) / 1000.0f;
 8003c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c7e:	ebb0 0802 	subs.w	r8, r0, r2
 8003c82:	eb61 0903 	sbc.w	r9, r1, r3
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fd f869 	bl	8000d60 <__aeabi_ul2f>
 8003c8e:	ee06 0a90 	vmov	s13, r0
 8003c92:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003e5c <main+0x6dc>
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		Modbus_Protocal_Worker();
 8003c9e:	f7fe fde5 	bl	800286c <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8003ca2:	486f      	ldr	r0, [pc, #444]	@ (8003e60 <main+0x6e0>)
 8003ca4:	f7fd fabe 	bl	8001224 <modbus_heartbeat>
		Base_Sysytem_status = modbus_Base_System_Status(&hmodbus);
 8003ca8:	486d      	ldr	r0, [pc, #436]	@ (8003e60 <main+0x6e0>)
 8003caa:	f7fd faca 	bl	8001242 <modbus_Base_System_Status>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e64 <main+0x6e4>)
 8003cb4:	701a      	strb	r2, [r3, #0]
		PS2_ReadData();
 8003cb6:	f7fe f9c7 	bl	8002048 <PS2_ReadData>
		if (modbus_write_servo_up(&hmodbus) == 1) {
 8003cba:	4869      	ldr	r0, [pc, #420]	@ (8003e60 <main+0x6e0>)
 8003cbc:	f7fd fae3 	bl	8001286 <modbus_write_servo_up>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <main+0x54c>
			plotter = 1;
 8003cc6:	4b68      	ldr	r3, [pc, #416]	@ (8003e68 <main+0x6e8>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
		}
		if (modbus_write_servo_down(&hmodbus) == 1) {
 8003ccc:	4864      	ldr	r0, [pc, #400]	@ (8003e60 <main+0x6e0>)
 8003cce:	f7fd faea 	bl	80012a6 <modbus_write_servo_down>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d102      	bne.n	8003cde <main+0x55e>
			plotter = 2;
 8003cd8:	4b63      	ldr	r3, [pc, #396]	@ (8003e68 <main+0x6e8>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	601a      	str	r2, [r3, #0]
		}

		t_global = HAL_GetTick() / 1000.0f;
 8003cde:	f002 fc57 	bl	8006590 <HAL_GetTick>
 8003ce2:	ee07 0a90 	vmov	s15, r0
 8003ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cea:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8003e5c <main+0x6dc>
 8003cee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8003e6c <main+0x6ec>)
 8003cf4:	edc3 7a00 	vstr	s15, [r3]
//				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
//				servo_state = 0;
//			}
//		}

		if (dt >= 0.001f) {
 8003cf8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003cfc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8003e70 <main+0x6f0>
 8003d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	f2c0 862a 	blt.w	8004960 <main+0x11e0>

			HAL_ADC_Start(&hadc1);
 8003d0c:	4859      	ldr	r0, [pc, #356]	@ (8003e74 <main+0x6f4>)
 8003d0e:	f003 f813 	bl	8006d38 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8003d12:	4859      	ldr	r0, [pc, #356]	@ (8003e78 <main+0x6f8>)
 8003d14:	f003 f810 	bl	8006d38 <HAL_ADC_Start>
			adc_1 = HAL_ADC_GetValue(&hadc1);
 8003d18:	4856      	ldr	r0, [pc, #344]	@ (8003e74 <main+0x6f4>)
 8003d1a:	f003 f8f1 	bl	8006f00 <HAL_ADC_GetValue>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <main+0x6fc>)
 8003d24:	801a      	strh	r2, [r3, #0]
			adc_2 = HAL_ADC_GetValue(&hadc2);
 8003d26:	4854      	ldr	r0, [pc, #336]	@ (8003e78 <main+0x6f8>)
 8003d28:	f003 f8ea 	bl	8006f00 <HAL_ADC_GetValue>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	4b53      	ldr	r3, [pc, #332]	@ (8003e80 <main+0x700>)
 8003d32:	801a      	strh	r2, [r3, #0]

			Encoder_Update(&encoder1, dt);
 8003d34:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8003d38:	4852      	ldr	r0, [pc, #328]	@ (8003e84 <main+0x704>)
 8003d3a:	f7fe f865 	bl	8001e08 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8003d3e:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8003d42:	4851      	ldr	r0, [pc, #324]	@ (8003e88 <main+0x708>)
 8003d44:	f7fe f860 	bl	8001e08 <Encoder_Update>
			lastTick = currentTick;
 8003d48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003d4c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8003d50:	4b4e      	ldr	r3, [pc, #312]	@ (8003e8c <main+0x70c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	4a4e      	ldr	r2, [pc, #312]	@ (8003e90 <main+0x710>)
 8003d58:	6013      	str	r3, [r2, #0]
			QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e94 <main+0x714>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	4a4d      	ldr	r2, [pc, #308]	@ (8003e98 <main+0x718>)
 8003d62:	6013      	str	r3, [r2, #0]

			p1 = Encoder_GetPosition_mm(&encoder1);
 8003d64:	4847      	ldr	r0, [pc, #284]	@ (8003e84 <main+0x704>)
 8003d66:	f7fe f941 	bl	8001fec <Encoder_GetPosition_mm>
 8003d6a:	eef0 7a40 	vmov.f32	s15, s0
 8003d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e9c <main+0x71c>)
 8003d70:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity_mm(&encoder1);
 8003d74:	4843      	ldr	r0, [pc, #268]	@ (8003e84 <main+0x704>)
 8003d76:	f7fe f948 	bl	800200a <Encoder_GetVelocity_mm>
 8003d7a:	eef0 7a40 	vmov.f32	s15, s0
 8003d7e:	4b48      	ldr	r3, [pc, #288]	@ (8003ea0 <main+0x720>)
 8003d80:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration_mm(&encoder1);
 8003d84:	483f      	ldr	r0, [pc, #252]	@ (8003e84 <main+0x704>)
 8003d86:	f7fe f94f 	bl	8002028 <Encoder_GetAcceleration_mm>
 8003d8a:	eef0 7a40 	vmov.f32	s15, s0
 8003d8e:	4b45      	ldr	r3, [pc, #276]	@ (8003ea4 <main+0x724>)
 8003d90:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8003d94:	483c      	ldr	r0, [pc, #240]	@ (8003e88 <main+0x708>)
 8003d96:	f7fe f8ed 	bl	8001f74 <Encoder_GetPosition>
 8003d9a:	eef0 7a40 	vmov.f32	s15, s0
 8003d9e:	4b42      	ldr	r3, [pc, #264]	@ (8003ea8 <main+0x728>)
 8003da0:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8003da4:	4838      	ldr	r0, [pc, #224]	@ (8003e88 <main+0x708>)
 8003da6:	f7fe f8f4 	bl	8001f92 <Encoder_GetVelocity>
 8003daa:	eef0 7a40 	vmov.f32	s15, s0
 8003dae:	e07d      	b.n	8003eac <main+0x72c>
 8003db0:	eb1c432d 	.word	0xeb1c432d
 8003db4:	3f5a36e2 	.word	0x3f5a36e2
 8003db8:	b50b0f28 	.word	0xb50b0f28
 8003dbc:	400ef9a6 	.word	0x400ef9a6
 8003dc0:	9db22d0e 	.word	0x9db22d0e
 8003dc4:	3fc6a7ef 	.word	0x3fc6a7ef
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	3fec0000 	.word	0x3fec0000
 8003dd0:	3c968944 	.word	0x3c968944
 8003dd4:	3f3f969e 	.word	0x3f3f969e
 8003dd8:	05857aff 	.word	0x05857aff
 8003ddc:	3f2e03f7 	.word	0x3f2e03f7
 8003de0:	fa8f7db7 	.word	0xfa8f7db7
 8003de4:	3f3615eb 	.word	0x3f3615eb
 8003de8:	f9db22d1 	.word	0xf9db22d1
 8003dec:	3fe06a7e 	.word	0x3fe06a7e
 8003df0:	a7daa4fc 	.word	0xa7daa4fc
 8003df4:	3ff331e3 	.word	0x3ff331e3
 8003df8:	e147ae14 	.word	0xe147ae14
 8003dfc:	3ffa147a 	.word	0x3ffa147a
 8003e00:	df3b645a 	.word	0xdf3b645a
 8003e04:	3fe78d4f 	.word	0x3fe78d4f
 8003e08:	003eea21 	.word	0x003eea21
 8003e0c:	3f7c4da9 	.word	0x3f7c4da9
 8003e10:	4dd2f1aa 	.word	0x4dd2f1aa
 8003e14:	3fc81062 	.word	0x3fc81062
 8003e18:	200011b0 	.word	0x200011b0
 8003e1c:	3da3d70a 	.word	0x3da3d70a
 8003e20:	3df5c28f 	.word	0x3df5c28f
 8003e24:	200014d8 	.word	0x200014d8
 8003e28:	20001510 	.word	0x20001510
 8003e2c:	20000d88 	.word	0x20000d88
 8003e30:	3e99999a 	.word	0x3e99999a
 8003e34:	3c23d70a 	.word	0x3c23d70a
 8003e38:	20000dc8 	.word	0x20000dc8
 8003e3c:	3da3d70a 	.word	0x3da3d70a
 8003e40:	20000e08 	.word	0x20000e08
 8003e44:	3f4ccccd 	.word	0x3f4ccccd
 8003e48:	3ecccccd 	.word	0x3ecccccd
 8003e4c:	20000e44 	.word	0x20000e44
 8003e50:	40400000 	.word	0x40400000
 8003e54:	3dcccccd 	.word	0x3dcccccd
 8003e58:	200016f8 	.word	0x200016f8
 8003e5c:	447a0000 	.word	0x447a0000
 8003e60:	200006f8 	.word	0x200006f8
 8003e64:	20000d60 	.word	0x20000d60
 8003e68:	200016e8 	.word	0x200016e8
 8003e6c:	200006c0 	.word	0x200006c0
 8003e70:	3a83126f 	.word	0x3a83126f
 8003e74:	20000290 	.word	0x20000290
 8003e78:	200002fc 	.word	0x200002fc
 8003e7c:	200006f4 	.word	0x200006f4
 8003e80:	200006f6 	.word	0x200006f6
 8003e84:	2000036c 	.word	0x2000036c
 8003e88:	200003a0 	.word	0x200003a0
 8003e8c:	20001908 	.word	0x20001908
 8003e90:	200003d4 	.word	0x200003d4
 8003e94:	200019d4 	.word	0x200019d4
 8003e98:	200003d8 	.word	0x200003d8
 8003e9c:	200006d8 	.word	0x200006d8
 8003ea0:	200006dc 	.word	0x200006dc
 8003ea4:	200006e0 	.word	0x200006e0
 8003ea8:	200006e4 	.word	0x200006e4
 8003eac:	4bb0      	ldr	r3, [pc, #704]	@ (8004170 <main+0x9f0>)
 8003eae:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8003eb2:	48b0      	ldr	r0, [pc, #704]	@ (8004174 <main+0x9f4>)
 8003eb4:	f7fe f87c 	bl	8001fb0 <Encoder_GetAcceleration>
 8003eb8:	eef0 7a40 	vmov.f32	s15, s0
 8003ebc:	4bae      	ldr	r3, [pc, #696]	@ (8004178 <main+0x9f8>)
 8003ebe:	edc3 7a00 	vstr	s15, [r3]
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
//					NVIC_SystemReset();
//				}
//			}

			if (Base_Sysytem_status == Base_Home) {
 8003ec2:	4bae      	ldr	r3, [pc, #696]	@ (800417c <main+0x9fc>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d104      	bne.n	8003ed4 <main+0x754>

				R_Theta_moving_Status(&hmodbus, Home);
 8003eca:	2101      	movs	r1, #1
 8003ecc:	48ac      	ldr	r0, [pc, #688]	@ (8004180 <main+0xa00>)
 8003ece:	f7fd f9fa 	bl	80012c6 <R_Theta_moving_Status>
 8003ed2:	e305      	b.n	80044e0 <main+0xd60>
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
//					NVIC_SystemReset();
//				}

			} else if (Base_Sysytem_status == Base_Run_Jog_mode) {
 8003ed4:	4ba9      	ldr	r3, [pc, #676]	@ (800417c <main+0x9fc>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	f040 81c9 	bne.w	8004270 <main+0xaf0>

				R_Theta_moving_Status(&hmodbus, Run_Jog_mode);
 8003ede:	2102      	movs	r1, #2
 8003ee0:	48a7      	ldr	r0, [pc, #668]	@ (8004180 <main+0xa00>)
 8003ee2:	f7fd f9f0 	bl	80012c6 <R_Theta_moving_Status>

				Circle = PS2_ButtonCircle();
 8003ee6:	f7fe f8e1 	bl	80020ac <PS2_ButtonCircle>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461a      	mov	r2, r3
 8003eee:	4ba5      	ldr	r3, [pc, #660]	@ (8004184 <main+0xa04>)
 8003ef0:	601a      	str	r2, [r3, #0]
				Square = PS2_ButtonSquare();
 8003ef2:	f7fe f8ed 	bl	80020d0 <PS2_ButtonSquare>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4ba3      	ldr	r3, [pc, #652]	@ (8004188 <main+0xa08>)
 8003efc:	601a      	str	r2, [r3, #0]
				Triangle = PS2_ButtonTriangle();
 8003efe:	f7fe f8f7 	bl	80020f0 <PS2_ButtonTriangle>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	4ba1      	ldr	r3, [pc, #644]	@ (800418c <main+0xa0c>)
 8003f08:	601a      	str	r2, [r3, #0]
				Cross = PS2_ButtonCross();
 8003f0a:	f7fe f903 	bl	8002114 <PS2_ButtonCross>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b9f      	ldr	r3, [pc, #636]	@ (8004190 <main+0xa10>)
 8003f14:	601a      	str	r2, [r3, #0]
				R1 = PS2_ButtonR1();
 8003f16:	f7fe f90f 	bl	8002138 <PS2_ButtonR1>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b9d      	ldr	r3, [pc, #628]	@ (8004194 <main+0xa14>)
 8003f20:	601a      	str	r2, [r3, #0]
				R2 = PS2_ButtonR2();
 8003f22:	f7fe f91b 	bl	800215c <PS2_ButtonR2>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b9b      	ldr	r3, [pc, #620]	@ (8004198 <main+0xa18>)
 8003f2c:	601a      	str	r2, [r3, #0]
				Select = PS2_ButtonSelect();
 8003f2e:	f7fe f927 	bl	8002180 <PS2_ButtonSelect>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b99      	ldr	r3, [pc, #612]	@ (800419c <main+0xa1c>)
 8003f38:	601a      	str	r2, [r3, #0]
				Start = PS2_ButtonStart();
 8003f3a:	f7fe f933 	bl	80021a4 <PS2_ButtonStart>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b97      	ldr	r3, [pc, #604]	@ (80041a0 <main+0xa20>)
 8003f44:	601a      	str	r2, [r3, #0]
				L2 = PS2_ButtonL2();
 8003f46:	f7fe f93f 	bl	80021c8 <PS2_ButtonL2>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b95      	ldr	r3, [pc, #596]	@ (80041a4 <main+0xa24>)
 8003f50:	601a      	str	r2, [r3, #0]

				if (PS2_ButtonSquare()) {
 8003f52:	f7fe f8bd 	bl	80020d0 <PS2_ButtonSquare>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <main+0x7f2>
					// Move Right (Revolute)
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1); // 0 or 1
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2140      	movs	r1, #64	@ 0x40
 8003f60:	4891      	ldr	r0, [pc, #580]	@ (80041a8 <main+0xa28>)
 8003f62:	f004 fbaf 	bl	80086c4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 30000);
 8003f66:	4b91      	ldr	r3, [pc, #580]	@ (80041ac <main+0xa2c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f70:	e018      	b.n	8003fa4 <main+0x824>
				} else if (PS2_ButtonCircle()) {
 8003f72:	f7fe f89b 	bl	80020ac <PS2_ButtonCircle>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <main+0x812>
					// Move Left (Revolute)
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2140      	movs	r1, #64	@ 0x40
 8003f80:	4889      	ldr	r0, [pc, #548]	@ (80041a8 <main+0xa28>)
 8003f82:	f004 fb9f 	bl	80086c4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 30000);
 8003f86:	4b89      	ldr	r3, [pc, #548]	@ (80041ac <main+0xa2c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f90:	e008      	b.n	8003fa4 <main+0x824>
				} else {
					//float v_set = (Revolute_dis() / 18.0) * 65535.0;
					// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
					//__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, v_set);
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
 8003f92:	2200      	movs	r2, #0
 8003f94:	2140      	movs	r1, #64	@ 0x40
 8003f96:	4884      	ldr	r0, [pc, #528]	@ (80041a8 <main+0xa28>)
 8003f98:	f004 fb94 	bl	80086c4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
 8003f9c:	4b83      	ldr	r3, [pc, #524]	@ (80041ac <main+0xa2c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
				}

				if (PS2_ButtonTriangle()) {
 8003fa4:	f7fe f8a4 	bl	80020f0 <PS2_ButtonTriangle>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <main+0x844>
					// Move Up (Prismatic)
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); // 0 or 1
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	487f      	ldr	r0, [pc, #508]	@ (80041b0 <main+0xa30>)
 8003fb4:	f004 fb86 	bl	80086c4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 40000);
 8003fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80041ac <main+0xa2c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8003fc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fc2:	e018      	b.n	8003ff6 <main+0x876>
				} else if (PS2_ButtonCross()) {
 8003fc4:	f7fe f8a6 	bl	8002114 <PS2_ButtonCross>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <main+0x864>
					// Move Down (Prismatic)
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4877      	ldr	r0, [pc, #476]	@ (80041b0 <main+0xa30>)
 8003fd4:	f004 fb76 	bl	80086c4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 40000);
 8003fd8:	4b74      	ldr	r3, [pc, #464]	@ (80041ac <main+0xa2c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8003fe0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fe2:	e008      	b.n	8003ff6 <main+0x876>
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4871      	ldr	r0, [pc, #452]	@ (80041b0 <main+0xa30>)
 8003fea:	f004 fb6b 	bl	80086c4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
 8003fee:	4b6f      	ldr	r3, [pc, #444]	@ (80041ac <main+0xa2c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	635a      	str	r2, [r3, #52]	@ 0x34
				}

				if (PS2_ButtonR1()) {
 8003ff6:	f7fe f89f 	bl	8002138 <PS2_ButtonR1>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <main+0x88c>
					// Servo/Pen Move up
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 8004000:	4b6c      	ldr	r3, [pc, #432]	@ (80041b4 <main+0xa34>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004008:	641a      	str	r2, [r3, #64]	@ 0x40
 800400a:	e00e      	b.n	800402a <main+0x8aa>
				} else if (PS2_ButtonR2()) {
 800400c:	f7fe f8a6 	bl	800215c <PS2_ButtonR2>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <main+0x8a2>
					// Servo/Pen Move Down
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 8004016:	4b67      	ldr	r3, [pc, #412]	@ (80041b4 <main+0xa34>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004020:	e003      	b.n	800402a <main+0x8aa>
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8004022:	4b64      	ldr	r3, [pc, #400]	@ (80041b4 <main+0xa34>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				uint8_t selectPressed = PS2_ButtonL2();
 800402a:	f7fe f8cd 	bl	80021c8 <PS2_ButtonL2>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				static uint8_t prevSelect = 0;
				if (selectPressed && !prevSelect) {
 8004034:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004038:	2b00      	cmp	r3, #0
 800403a:	d072      	beq.n	8004122 <main+0x9a2>
 800403c:	4b5e      	ldr	r3, [pc, #376]	@ (80041b8 <main+0xa38>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d16e      	bne.n	8004122 <main+0x9a2>
					if (count < 11) {
 8004044:	4b5d      	ldr	r3, [pc, #372]	@ (80041bc <main+0xa3c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b0a      	cmp	r3, #10
 800404a:	dc6a      	bgt.n	8004122 <main+0x9a2>
//						float test[11] = { 0.0f, 25.0f, 50.0f, 75.0f, 75.0f,
//								0.0f, 95.0f, 0.0f, 0.0f, 100.0f };
						PrismaticTenPoints[count] = roundf(
								Encoder_GetPosition_mm(&encoder1) * 10.0f);
 800404c:	485c      	ldr	r0, [pc, #368]	@ (80041c0 <main+0xa40>)
 800404e:	f7fd ffcd 	bl	8001fec <Encoder_GetPosition_mm>
 8004052:	eef0 7a40 	vmov.f32	s15, s0
						PrismaticTenPoints[count] = roundf(
 8004056:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800405a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800405e:	4b57      	ldr	r3, [pc, #348]	@ (80041bc <main+0xa3c>)
 8004060:	681c      	ldr	r4, [r3, #0]
 8004062:	eeb0 0a67 	vmov.f32	s0, s15
 8004066:	f00b fd85 	bl	800fb74 <roundf>
 800406a:	eef0 7a40 	vmov.f32	s15, s0
 800406e:	4a55      	ldr	r2, [pc, #340]	@ (80041c4 <main+0xa44>)
 8004070:	00a3      	lsls	r3, r4, #2
 8004072:	4413      	add	r3, r2
 8004074:	edc3 7a00 	vstr	s15, [r3]
						RevoluteTenPoints_Degree[count] = roundf(
								(Encoder_GetDegree(&encoder2) / (100.0 / 30.0))
 8004078:	483e      	ldr	r0, [pc, #248]	@ (8004174 <main+0x9f4>)
 800407a:	f7fd ffa8 	bl	8001fce <Encoder_GetDegree>
 800407e:	ee10 3a10 	vmov	r3, s0
 8004082:	4618      	mov	r0, r3
 8004084:	f7fc fa2c 	bl	80004e0 <__aeabi_f2d>
 8004088:	a337      	add	r3, pc, #220	@ (adr r3, 8004168 <main+0x9e8>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f7fc fba9 	bl	80007e4 <__aeabi_ddiv>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
										* 10.0f);
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	4b4a      	ldr	r3, [pc, #296]	@ (80041c8 <main+0xa48>)
 80040a0:	f7fc fa76 	bl	8000590 <__aeabi_dmul>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
						RevoluteTenPoints_Degree[count] = roundf(
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7fc fd40 	bl	8000b30 <__aeabi_d2f>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b42      	ldr	r3, [pc, #264]	@ (80041bc <main+0xa3c>)
 80040b4:	681c      	ldr	r4, [r3, #0]
 80040b6:	ee00 2a10 	vmov	s0, r2
 80040ba:	f00b fd5b 	bl	800fb74 <roundf>
 80040be:	eef0 7a40 	vmov.f32	s15, s0
 80040c2:	4a42      	ldr	r2, [pc, #264]	@ (80041cc <main+0xa4c>)
 80040c4:	00a3      	lsls	r3, r4, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	edc3 7a00 	vstr	s15, [r3]
						PrismaticTenPoints_real[count] = Encoder_GetPosition_mm(
 80040cc:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <main+0xa3c>)
 80040ce:	681c      	ldr	r4, [r3, #0]
 80040d0:	483b      	ldr	r0, [pc, #236]	@ (80041c0 <main+0xa40>)
 80040d2:	f7fd ff8b 	bl	8001fec <Encoder_GetPosition_mm>
 80040d6:	eef0 7a40 	vmov.f32	s15, s0
 80040da:	4a3d      	ldr	r2, [pc, #244]	@ (80041d0 <main+0xa50>)
 80040dc:	00a3      	lsls	r3, r4, #2
 80040de:	4413      	add	r3, r2
 80040e0:	edc3 7a00 	vstr	s15, [r3]
								&encoder1);
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 80040e4:	4823      	ldr	r0, [pc, #140]	@ (8004174 <main+0x9f4>)
 80040e6:	f7fd ff45 	bl	8001f74 <Encoder_GetPosition>
 80040ea:	ee10 3a10 	vmov	r3, s0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc f9f6 	bl	80004e0 <__aeabi_f2d>
								&encoder2) / (100.0 / 30.0);
 80040f4:	a31c      	add	r3, pc, #112	@ (adr r3, 8004168 <main+0x9e8>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f7fc fb73 	bl	80007e4 <__aeabi_ddiv>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 8004102:	492e      	ldr	r1, [pc, #184]	@ (80041bc <main+0xa3c>)
 8004104:	680c      	ldr	r4, [r1, #0]
								&encoder2) / (100.0 / 30.0);
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	f7fc fd11 	bl	8000b30 <__aeabi_d2f>
 800410e:	4602      	mov	r2, r0
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 8004110:	4930      	ldr	r1, [pc, #192]	@ (80041d4 <main+0xa54>)
 8004112:	00a3      	lsls	r3, r4, #2
 8004114:	440b      	add	r3, r1
 8004116:	601a      	str	r2, [r3, #0]
//						PrismaticTenPoints_real[count] = test[count];
//						RevoluteTenPoints_real[count] = test[count] / 10.0f;
						count += 1;
 8004118:	4b28      	ldr	r3, [pc, #160]	@ (80041bc <main+0xa3c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <main+0xa3c>)
 8004120:	6013      	str	r3, [r2, #0]
					}
				}
				prevSelect = selectPressed;
 8004122:	4a25      	ldr	r2, [pc, #148]	@ (80041b8 <main+0xa38>)
 8004124:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004128:	7013      	strb	r3, [r2, #0]
//										+ Revolute[current_segment].t_total) {
//					if (current_segment < 9)
//						current_segment++;
//				}

				if (plotter == 1) // Pen_Up
 800412a:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <main+0xa58>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d109      	bne.n	8004146 <main+0x9c6>
				{
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 8004132:	4b20      	ldr	r3, [pc, #128]	@ (80041b4 <main+0xa34>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Up);
 800413c:	2102      	movs	r1, #2
 800413e:	4810      	ldr	r0, [pc, #64]	@ (8004180 <main+0xa00>)
 8004140:	f7fd f88f 	bl	8001262 <modbus_servo_Status>
 8004144:	e04e      	b.n	80041e4 <main+0xa64>
				} else if (plotter == 2) // Pen_Down
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <main+0xa58>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d146      	bne.n	80041dc <main+0xa5c>
//					if (status < 2000) {
//						status += 1;
//					} else {
//						status += 0;
//					}
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 800414e:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <main+0xa34>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Down);
 8004158:	2101      	movs	r1, #1
 800415a:	4809      	ldr	r0, [pc, #36]	@ (8004180 <main+0xa00>)
 800415c:	f7fd f881 	bl	8001262 <modbus_servo_Status>
 8004160:	e040      	b.n	80041e4 <main+0xa64>
 8004162:	bf00      	nop
 8004164:	f3af 8000 	nop.w
 8004168:	aaaaaaab 	.word	0xaaaaaaab
 800416c:	400aaaaa 	.word	0x400aaaaa
 8004170:	200006e8 	.word	0x200006e8
 8004174:	200003a0 	.word	0x200003a0
 8004178:	200006ec 	.word	0x200006ec
 800417c:	20000d60 	.word	0x20000d60
 8004180:	200006f8 	.word	0x200006f8
 8004184:	20001568 	.word	0x20001568
 8004188:	2000156c 	.word	0x2000156c
 800418c:	20001570 	.word	0x20001570
 8004190:	20001574 	.word	0x20001574
 8004194:	20001578 	.word	0x20001578
 8004198:	2000157c 	.word	0x2000157c
 800419c:	20001580 	.word	0x20001580
 80041a0:	20001584 	.word	0x20001584
 80041a4:	20001588 	.word	0x20001588
 80041a8:	48000800 	.word	0x48000800
 80041ac:	20001c38 	.word	0x20001c38
 80041b0:	48000400 	.word	0x48000400
 80041b4:	20001aa0 	.word	0x20001aa0
 80041b8:	20001708 	.word	0x20001708
 80041bc:	20000208 	.word	0x20000208
 80041c0:	2000036c 	.word	0x2000036c
 80041c4:	2000158c 	.word	0x2000158c
 80041c8:	40240000 	.word	0x40240000
 80041cc:	200015b8 	.word	0x200015b8
 80041d0:	200015e4 	.word	0x200015e4
 80041d4:	20001610 	.word	0x20001610
 80041d8:	200016e8 	.word	0x200016e8
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80041dc:	4b92      	ldr	r3, [pc, #584]	@ (8004428 <main+0xca8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2200      	movs	r2, #0
 80041e2:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				if (count == 11 && Num_point <= 9) {  // Set_Target 10 points
 80041e4:	4b91      	ldr	r3, [pc, #580]	@ (800442c <main+0xcac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b0b      	cmp	r3, #11
 80041ea:	f040 8179 	bne.w	80044e0 <main+0xd60>
 80041ee:	4b90      	ldr	r3, [pc, #576]	@ (8004430 <main+0xcb0>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b09      	cmp	r3, #9
 80041f4:	f200 8174 	bhi.w	80044e0 <main+0xd60>
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 80041f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004430 <main+0xcb0>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4a8d      	ldr	r2, [pc, #564]	@ (8004434 <main+0xcb4>)
 8004200:	441a      	add	r2, r3
							PrismaticTenPoints[Num_point + 1],
 8004202:	4b8b      	ldr	r3, [pc, #556]	@ (8004430 <main+0xcb0>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 8004208:	498b      	ldr	r1, [pc, #556]	@ (8004438 <main+0xcb8>)
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	edd3 7a00 	vldr	s15, [r3]
							RevoluteTenPoints_Degree[Num_point + 1]);
 8004212:	4b87      	ldr	r3, [pc, #540]	@ (8004430 <main+0xcb0>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 8004218:	4988      	ldr	r1, [pc, #544]	@ (800443c <main+0xcbc>)
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	ed93 7a00 	vldr	s14, [r3]
 8004222:	eef0 0a47 	vmov.f32	s1, s14
 8004226:	eeb0 0a67 	vmov.f32	s0, s15
 800422a:	4610      	mov	r0, r2
 800422c:	f7fd fb34 	bl	8001898 <Coordinate_Robot_to_Base>
					set_Target_Position_ten_points(&hmodbus,
 8004230:	4b7f      	ldr	r3, [pc, #508]	@ (8004430 <main+0xcb0>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	4a7f      	ldr	r2, [pc, #508]	@ (8004434 <main+0xcb4>)
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	4b7c      	ldr	r3, [pc, #496]	@ (8004430 <main+0xcb0>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	4a7c      	ldr	r2, [pc, #496]	@ (8004434 <main+0xcb4>)
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4413      	add	r3, r2
 8004248:	3304      	adds	r3, #4
 800424a:	ed93 7a00 	vldr	s14, [r3]
 800424e:	4b78      	ldr	r3, [pc, #480]	@ (8004430 <main+0xcb0>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	4619      	mov	r1, r3
 8004254:	eef0 0a47 	vmov.f32	s1, s14
 8004258:	eeb0 0a67 	vmov.f32	s0, s15
 800425c:	4878      	ldr	r0, [pc, #480]	@ (8004440 <main+0xcc0>)
 800425e:	f7fd f894 	bl	800138a <set_Target_Position_ten_points>
							Goal_point[Num_point].r_goal_position,
							Goal_point[Num_point].theta_goal_position,
							Num_point);
					Num_point += 1;
 8004262:	4b73      	ldr	r3, [pc, #460]	@ (8004430 <main+0xcb0>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b71      	ldr	r3, [pc, #452]	@ (8004430 <main+0xcb0>)
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e137      	b.n	80044e0 <main+0xd60>
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

			} else if (Base_Sysytem_status == Base_Run_Point_mode) {
 8004270:	4b74      	ldr	r3, [pc, #464]	@ (8004444 <main+0xcc4>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d11a      	bne.n	80042ae <main+0xb2e>

				Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 8004278:	4871      	ldr	r0, [pc, #452]	@ (8004440 <main+0xcc0>)
 800427a:	f7fd f8b0 	bl	80013de <modbus_set_goal_r_position>
 800427e:	4603      	mov	r3, r0
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004288:	4b6f      	ldr	r3, [pc, #444]	@ (8004448 <main+0xcc8>)
 800428a:	edc3 7a00 	vstr	s15, [r3]
				Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 800428e:	486c      	ldr	r0, [pc, #432]	@ (8004440 <main+0xcc0>)
 8004290:	f7fd f8bd 	bl	800140e <modbus_set_goal_theta_position>
 8004294:	4603      	mov	r3, r0
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	4b6b      	ldr	r3, [pc, #428]	@ (800444c <main+0xccc>)
 80042a0:	edc3 7a00 	vstr	s15, [r3]
				R_Theta_moving_Status(&hmodbus, Run_Point_mode);
 80042a4:	2104      	movs	r1, #4
 80042a6:	4866      	ldr	r0, [pc, #408]	@ (8004440 <main+0xcc0>)
 80042a8:	f7fd f80d 	bl	80012c6 <R_Theta_moving_Status>
 80042ac:	e118      	b.n	80044e0 <main+0xd60>

			}

			else if (Base_Sysytem_status == Base_Go_to_Target) {
 80042ae:	4b65      	ldr	r3, [pc, #404]	@ (8004444 <main+0xcc4>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	f040 8114 	bne.w	80044e0 <main+0xd60>

				R_Theta_moving_Status(&hmodbus, Go_to_Target);
 80042b8:	2108      	movs	r1, #8
 80042ba:	4861      	ldr	r0, [pc, #388]	@ (8004440 <main+0xcc0>)
 80042bc:	f7fd f803 	bl	80012c6 <R_Theta_moving_Status>

				state_go_to = 1;
 80042c0:	4b63      	ldr	r3, [pc, #396]	@ (8004450 <main+0xcd0>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

				if (!has_initialized_target_traj) {
 80042c6:	4b63      	ldr	r3, [pc, #396]	@ (8004454 <main+0xcd4>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d159      	bne.n	8004382 <main+0xc02>
					Coordinate_Base_to_Robot(&Go_to_point, Goal_r_position,
 80042ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004448 <main+0xcc8>)
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	4b5d      	ldr	r3, [pc, #372]	@ (800444c <main+0xccc>)
 80042d6:	ed93 7a00 	vldr	s14, [r3]
 80042da:	eef0 0a47 	vmov.f32	s1, s14
 80042de:	eeb0 0a67 	vmov.f32	s0, s15
 80042e2:	485d      	ldr	r0, [pc, #372]	@ (8004458 <main+0xcd8>)
 80042e4:	f7fd f8ac 	bl	8001440 <Coordinate_Base_to_Robot>
							Goal_theta_position);

					traj_start_time_target = HAL_GetTick() / 1000.0f;
 80042e8:	f002 f952 	bl	8006590 <HAL_GetTick>
 80042ec:	ee07 0a90 	vmov	s15, r0
 80042f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042f4:	eddf 6a59 	vldr	s13, [pc, #356]	@ 800445c <main+0xcdc>
 80042f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042fc:	4b58      	ldr	r3, [pc, #352]	@ (8004460 <main+0xce0>)
 80042fe:	edc3 7a00 	vstr	s15, [r3]
					has_initialized_target_traj = 1;
 8004302:	4b54      	ldr	r3, [pc, #336]	@ (8004454 <main+0xcd4>)
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]

					start_p = Go_to_point.r_goal_position;
 8004308:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <main+0xcd8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a55      	ldr	r2, [pc, #340]	@ (8004464 <main+0xce4>)
 800430e:	6013      	str	r3, [r2, #0]
					start_r = Go_to_point.theta_goal_position - 0.436332f + 0.02;
 8004310:	4b51      	ldr	r3, [pc, #324]	@ (8004458 <main+0xcd8>)
 8004312:	edd3 7a01 	vldr	s15, [r3, #4]
 8004316:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8004468 <main+0xce8>
 800431a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800431e:	ee17 0a90 	vmov	r0, s15
 8004322:	f7fc f8dd 	bl	80004e0 <__aeabi_f2d>
 8004326:	a33e      	add	r3, pc, #248	@ (adr r3, 8004420 <main+0xca0>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fb ff7a 	bl	8000224 <__adddf3>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	f7fc fbfa 	bl	8000b30 <__aeabi_d2f>
 800433c:	4603      	mov	r3, r0
 800433e:	4a4b      	ldr	r2, [pc, #300]	@ (800446c <main+0xcec>)
 8004340:	6013      	str	r3, [r2, #0]
					InitTrajectorySegment(&Prismatic[0], 0.0f, start_p,
 8004342:	4b48      	ldr	r3, [pc, #288]	@ (8004464 <main+0xce4>)
 8004344:	edd3 7a00 	vldr	s15, [r3]
 8004348:	ed9f 2a49 	vldr	s4, [pc, #292]	@ 8004470 <main+0xcf0>
 800434c:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8004474 <main+0xcf4>
 8004350:	ed9f 1a49 	vldr	s2, [pc, #292]	@ 8004478 <main+0xcf8>
 8004354:	eef0 0a67 	vmov.f32	s1, s15
 8004358:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8004470 <main+0xcf0>
 800435c:	4847      	ldr	r0, [pc, #284]	@ (800447c <main+0xcfc>)
 800435e:	f7fe fd7b 	bl	8002e58 <InitTrajectorySegment>
					v_max_pris, a_max_pris, 0.0f);
					InitTrajectorySegment(&Revolute[0], 0.0f, start_r,
 8004362:	4b42      	ldr	r3, [pc, #264]	@ (800446c <main+0xcec>)
 8004364:	edd3 7a00 	vldr	s15, [r3]
 8004368:	ed9f 2a41 	vldr	s4, [pc, #260]	@ 8004470 <main+0xcf0>
 800436c:	eddf 1a44 	vldr	s3, [pc, #272]	@ 8004480 <main+0xd00>
 8004370:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004374:	eef0 0a67 	vmov.f32	s1, s15
 8004378:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8004470 <main+0xcf0>
 800437c:	4841      	ldr	r0, [pc, #260]	@ (8004484 <main+0xd04>)
 800437e:	f7fe fd6b 	bl	8002e58 <InitTrajectorySegment>
					v_max_rev, a_max_rev, 0.0f);
				}

				float t_rel = t_global - traj_start_time_target;
 8004382:	4b41      	ldr	r3, [pc, #260]	@ (8004488 <main+0xd08>)
 8004384:	ed93 7a00 	vldr	s14, [r3]
 8004388:	4b35      	ldr	r3, [pc, #212]	@ (8004460 <main+0xce0>)
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004392:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				pos_pris = GetTrajectoryPosition(&Prismatic[0], t_rel);
 8004396:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800439a:	4838      	ldr	r0, [pc, #224]	@ (800447c <main+0xcfc>)
 800439c:	f7fe fe12 	bl	8002fc4 <GetTrajectoryPosition>
 80043a0:	eef0 7a40 	vmov.f32	s15, s0
 80043a4:	4b39      	ldr	r3, [pc, #228]	@ (800448c <main+0xd0c>)
 80043a6:	edc3 7a00 	vstr	s15, [r3]
				vel_pris = GetTrajectoryVelocity(&Prismatic[0], t_rel);
 80043aa:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 80043ae:	4833      	ldr	r0, [pc, #204]	@ (800447c <main+0xcfc>)
 80043b0:	f7fe fede 	bl	8003170 <GetTrajectoryVelocity>
 80043b4:	eef0 7a40 	vmov.f32	s15, s0
 80043b8:	4b35      	ldr	r3, [pc, #212]	@ (8004490 <main+0xd10>)
 80043ba:	edc3 7a00 	vstr	s15, [r3]
				pos_rev = GetTrajectoryPosition(&Revolute[0], t_rel);
 80043be:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 80043c2:	4830      	ldr	r0, [pc, #192]	@ (8004484 <main+0xd04>)
 80043c4:	f7fe fdfe 	bl	8002fc4 <GetTrajectoryPosition>
 80043c8:	eef0 7a40 	vmov.f32	s15, s0
 80043cc:	4b31      	ldr	r3, [pc, #196]	@ (8004494 <main+0xd14>)
 80043ce:	edc3 7a00 	vstr	s15, [r3]
				vel_rev = GetTrajectoryVelocity(&Revolute[0], t_rel);
 80043d2:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 80043d6:	482b      	ldr	r0, [pc, #172]	@ (8004484 <main+0xd04>)
 80043d8:	f7fe feca 	bl	8003170 <GetTrajectoryVelocity>
 80043dc:	eef0 7a40 	vmov.f32	s15, s0
 80043e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004498 <main+0xd18>)
 80043e2:	edc3 7a00 	vstr	s15, [r3]

				if (plotter == 1) // Pen_Up
 80043e6:	4b2d      	ldr	r3, [pc, #180]	@ (800449c <main+0xd1c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d109      	bne.n	8004402 <main+0xc82>
				{
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 80043ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <main+0xca8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80043f6:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Up);
 80043f8:	2102      	movs	r1, #2
 80043fa:	4811      	ldr	r0, [pc, #68]	@ (8004440 <main+0xcc0>)
 80043fc:	f7fc ff31 	bl	8001262 <modbus_servo_Status>
 8004400:	e052      	b.n	80044a8 <main+0xd28>
				} else if (plotter == 2) // Pen_Down
 8004402:	4b26      	ldr	r3, [pc, #152]	@ (800449c <main+0xd1c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d14a      	bne.n	80044a0 <main+0xd20>
//					if (status < 2000) {
//						status += 1;
//					} else {
//						status += 0;
//					}
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 800440a:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <main+0xca8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Down);
 8004414:	2101      	movs	r1, #1
 8004416:	480a      	ldr	r0, [pc, #40]	@ (8004440 <main+0xcc0>)
 8004418:	f7fc ff23 	bl	8001262 <modbus_servo_Status>
 800441c:	e044      	b.n	80044a8 <main+0xd28>
 800441e:	bf00      	nop
 8004420:	47ae147b 	.word	0x47ae147b
 8004424:	3f947ae1 	.word	0x3f947ae1
 8004428:	20001aa0 	.word	0x20001aa0
 800442c:	20000208 	.word	0x20000208
 8004430:	2000168c 	.word	0x2000168c
 8004434:	20001690 	.word	0x20001690
 8004438:	2000158c 	.word	0x2000158c
 800443c:	200015b8 	.word	0x200015b8
 8004440:	200006f8 	.word	0x200006f8
 8004444:	20000d60 	.word	0x20000d60
 8004448:	20000d64 	.word	0x20000d64
 800444c:	20000d68 	.word	0x20000d68
 8004450:	200016f0 	.word	0x200016f0
 8004454:	200006d4 	.word	0x200006d4
 8004458:	200016e0 	.word	0x200016e0
 800445c:	447a0000 	.word	0x447a0000
 8004460:	200006d0 	.word	0x200006d0
 8004464:	200006c8 	.word	0x200006c8
 8004468:	3edf66e8 	.word	0x3edf66e8
 800446c:	200006cc 	.word	0x200006cc
 8004470:	00000000 	.word	0x00000000
 8004474:	437a0000 	.word	0x437a0000
 8004478:	43fa0000 	.word	0x43fa0000
 800447c:	200003f0 	.word	0x200003f0
 8004480:	3ecccccd 	.word	0x3ecccccd
 8004484:	20000558 	.word	0x20000558
 8004488:	200006c0 	.word	0x200006c0
 800448c:	200003dc 	.word	0x200003dc
 8004490:	200003e0 	.word	0x200003e0
 8004494:	200003e4 	.word	0x200003e4
 8004498:	200003e8 	.word	0x200003e8
 800449c:	200016e8 	.word	0x200016e8
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80044a0:	4bc3      	ldr	r3, [pc, #780]	@ (80047b0 <main+0x1030>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2200      	movs	r2, #0
 80044a6:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				float t_end = Revolute[0].t_start + Revolute[0].t_total;
 80044a8:	4bc2      	ldr	r3, [pc, #776]	@ (80047b4 <main+0x1034>)
 80044aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80044ae:	4bc1      	ldr	r3, [pc, #772]	@ (80047b4 <main+0x1034>)
 80044b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80044b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

				if (t_global > t_end + 2.0f) {
 80044bc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80044c0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80044c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044c8:	4bbb      	ldr	r3, [pc, #748]	@ (80047b8 <main+0x1038>)
 80044ca:	edd3 7a00 	vldr	s15, [r3]
 80044ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	d503      	bpl.n	80044e0 <main+0xd60>
					R_Theta_moving_Status(&hmodbus, Idle);
 80044d8:	2100      	movs	r1, #0
 80044da:	48b8      	ldr	r0, [pc, #736]	@ (80047bc <main+0x103c>)
 80044dc:	f7fc fef3 	bl	80012c6 <R_Theta_moving_Status>
				}
			}

			if (Base_Sysytem_status != Base_Go_to_Target) {
 80044e0:	4bb7      	ldr	r3, [pc, #732]	@ (80047c0 <main+0x1040>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d005      	beq.n	80044f4 <main+0xd74>
				has_initialized_target_traj = 0;
 80044e8:	4bb6      	ldr	r3, [pc, #728]	@ (80047c4 <main+0x1044>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
				state_go_to = 0;
 80044ee:	4bb6      	ldr	r3, [pc, #728]	@ (80047c8 <main+0x1048>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
			}

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 80044f4:	48b5      	ldr	r0, [pc, #724]	@ (80047cc <main+0x104c>)
 80044f6:	f7fd fd79 	bl	8001fec <Encoder_GetPosition_mm>
 80044fa:	eef0 7a40 	vmov.f32	s15, s0
 80044fe:	4bb4      	ldr	r3, [pc, #720]	@ (80047d0 <main+0x1050>)
 8004500:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8004504:	48b1      	ldr	r0, [pc, #708]	@ (80047cc <main+0x104c>)
 8004506:	f7fd fd80 	bl	800200a <Encoder_GetVelocity_mm>
 800450a:	eef0 7a40 	vmov.f32	s15, s0
 800450e:	4bb0      	ldr	r3, [pc, #704]	@ (80047d0 <main+0x1050>)
 8004510:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 8004514:	4bae      	ldr	r3, [pc, #696]	@ (80047d0 <main+0x1050>)
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 800451c:	4bac      	ldr	r3, [pc, #688]	@ (80047d0 <main+0x1050>)
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 8004524:	4bab      	ldr	r3, [pc, #684]	@ (80047d4 <main+0x1054>)
 8004526:	edd3 7a00 	vldr	s15, [r3]
 800452a:	eeb0 0a67 	vmov.f32	s0, s15
 800452e:	48aa      	ldr	r0, [pc, #680]	@ (80047d8 <main+0x1058>)
 8004530:	f7fd ff5e 	bl	80023f0 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 8004534:	48a8      	ldr	r0, [pc, #672]	@ (80047d8 <main+0x1058>)
 8004536:	f7fd ff6b 	bl	8002410 <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 800453a:	49a5      	ldr	r1, [pc, #660]	@ (80047d0 <main+0x1050>)
 800453c:	48a6      	ldr	r0, [pc, #664]	@ (80047d8 <main+0x1058>)
 800453e:	f7fd ffb4 	bl	80024aa <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 8004542:	48a6      	ldr	r0, [pc, #664]	@ (80047dc <main+0x105c>)
 8004544:	f7fd fd16 	bl	8001f74 <Encoder_GetPosition>
 8004548:	ee10 3a10 	vmov	r3, s0
 800454c:	4618      	mov	r0, r3
 800454e:	f7fb ffc7 	bl	80004e0 <__aeabi_f2d>
 8004552:	a393      	add	r3, pc, #588	@ (adr r3, 80047a0 <main+0x1020>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fc f944 	bl	80007e4 <__aeabi_ddiv>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	f7fc fae4 	bl	8000b30 <__aeabi_d2f>
 8004568:	4603      	mov	r3, r0
 800456a:	4a9d      	ldr	r2, [pc, #628]	@ (80047e0 <main+0x1060>)
 800456c:	6013      	str	r3, [r2, #0]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 800456e:	489b      	ldr	r0, [pc, #620]	@ (80047dc <main+0x105c>)
 8004570:	f7fd fd0f 	bl	8001f92 <Encoder_GetVelocity>
 8004574:	ee10 3a10 	vmov	r3, s0
 8004578:	4618      	mov	r0, r3
 800457a:	f7fb ffb1 	bl	80004e0 <__aeabi_f2d>
 800457e:	a388      	add	r3, pc, #544	@ (adr r3, 80047a0 <main+0x1020>)
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f7fc f92e 	bl	80007e4 <__aeabi_ddiv>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	f7fc face 	bl	8000b30 <__aeabi_d2f>
 8004594:	4603      	mov	r3, r0
 8004596:	4a92      	ldr	r2, [pc, #584]	@ (80047e0 <main+0x1060>)
 8004598:	6053      	str	r3, [r2, #4]
			Measurement_Rev[2] = 0;
 800459a:	4b91      	ldr	r3, [pc, #580]	@ (80047e0 <main+0x1060>)
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 80045a2:	4b8f      	ldr	r3, [pc, #572]	@ (80047e0 <main+0x1060>)
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 80045aa:	4b8e      	ldr	r3, [pc, #568]	@ (80047e4 <main+0x1064>)
 80045ac:	edd3 7a00 	vldr	s15, [r3]
 80045b0:	eeb0 0a67 	vmov.f32	s0, s15
 80045b4:	488c      	ldr	r0, [pc, #560]	@ (80047e8 <main+0x1068>)
 80045b6:	f7fd ff1b 	bl	80023f0 <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 80045ba:	488b      	ldr	r0, [pc, #556]	@ (80047e8 <main+0x1068>)
 80045bc:	f7fd ff28 	bl	8002410 <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 80045c0:	4987      	ldr	r1, [pc, #540]	@ (80047e0 <main+0x1060>)
 80045c2:	4889      	ldr	r0, [pc, #548]	@ (80047e8 <main+0x1068>)
 80045c4:	f7fd ff71 	bl	80024aa <Kalman_Update>

			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 80045c8:	4880      	ldr	r0, [pc, #512]	@ (80047cc <main+0x104c>)
 80045ca:	f7fd fd0f 	bl	8001fec <Encoder_GetPosition_mm>
 80045ce:	eeb0 8a40 	vmov.f32	s16, s0
 80045d2:	4882      	ldr	r0, [pc, #520]	@ (80047dc <main+0x105c>)
 80045d4:	f7fd fcfb 	bl	8001fce <Encoder_GetDegree>
 80045d8:	eef0 8a40 	vmov.f32	s17, s0
 80045dc:	487b      	ldr	r0, [pc, #492]	@ (80047cc <main+0x104c>)
 80045de:	f7fd fd14 	bl	800200a <Encoder_GetVelocity_mm>
 80045e2:	eeb0 9a40 	vmov.f32	s18, s0
			Encoder_GetDegree(&encoder2), // theta_pos
			Encoder_GetVelocity_mm(&encoder1), // r_velo
			Encoder_GetVelocity(&encoder2) * 180.0 / 3.142, // theta_velo
 80045e6:	487d      	ldr	r0, [pc, #500]	@ (80047dc <main+0x105c>)
 80045e8:	f7fd fcd3 	bl	8001f92 <Encoder_GetVelocity>
 80045ec:	ee10 3a10 	vmov	r3, s0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fb ff75 	bl	80004e0 <__aeabi_f2d>
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	4b7c      	ldr	r3, [pc, #496]	@ (80047ec <main+0x106c>)
 80045fc:	f7fb ffc8 	bl	8000590 <__aeabi_dmul>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	a367      	add	r3, pc, #412	@ (adr r3, 80047a8 <main+0x1028>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fc f8e9 	bl	80007e4 <__aeabi_ddiv>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	f7fc fa89 	bl	8000b30 <__aeabi_d2f>
 800461e:	4604      	mov	r4, r0
 8004620:	486a      	ldr	r0, [pc, #424]	@ (80047cc <main+0x104c>)
 8004622:	f7fd fd01 	bl	8002028 <Encoder_GetAcceleration_mm>
 8004626:	eef0 9a40 	vmov.f32	s19, s0
			Encoder_GetAcceleration_mm(&encoder1), // r_accel
			Encoder_GetAcceleration(&encoder2) * 180.0 / 3.142); // theta_accel
 800462a:	486c      	ldr	r0, [pc, #432]	@ (80047dc <main+0x105c>)
 800462c:	f7fd fcc0 	bl	8001fb0 <Encoder_GetAcceleration>
 8004630:	ee10 3a10 	vmov	r3, s0
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb ff53 	bl	80004e0 <__aeabi_f2d>
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	4b6b      	ldr	r3, [pc, #428]	@ (80047ec <main+0x106c>)
 8004640:	f7fb ffa6 	bl	8000590 <__aeabi_dmul>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	a356      	add	r3, pc, #344	@ (adr r3, 80047a8 <main+0x1028>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fc f8c7 	bl	80007e4 <__aeabi_ddiv>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	f7fc fa67 	bl	8000b30 <__aeabi_d2f>
 8004662:	4603      	mov	r3, r0
 8004664:	ee02 3a90 	vmov	s5, r3
 8004668:	eeb0 2a69 	vmov.f32	s4, s19
 800466c:	ee01 4a90 	vmov	s3, r4
 8004670:	eeb0 1a49 	vmov.f32	s2, s18
 8004674:	eef0 0a68 	vmov.f32	s1, s17
 8004678:	eeb0 0a48 	vmov.f32	s0, s16
 800467c:	484f      	ldr	r0, [pc, #316]	@ (80047bc <main+0x103c>)
 800467e:	f7fc fe34 	bl	80012ea <modbus_Update_All>

			if (state_start == 1 || state_go_to == 1) {
 8004682:	4b5b      	ldr	r3, [pc, #364]	@ (80047f0 <main+0x1070>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d004      	beq.n	8004694 <main+0xf14>
 800468a:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <main+0x1048>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	f040 8166 	bne.w	8004960 <main+0x11e0>
				Revolute_dis();
 8004694:	f000 ffbc 	bl	8005610 <Revolute_dis>
				count_Tim2 += 1;
 8004698:	4b56      	ldr	r3, [pc, #344]	@ (80047f4 <main+0x1074>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	4a55      	ldr	r2, [pc, #340]	@ (80047f4 <main+0x1074>)
 80046a0:	6013      	str	r3, [r2, #0]
				// Velocity Control Prismatic
				velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 80046a2:	484a      	ldr	r0, [pc, #296]	@ (80047cc <main+0x104c>)
 80046a4:	f7fd fcb1 	bl	800200a <Encoder_GetVelocity_mm>
 80046a8:	eef0 7a40 	vmov.f32	s15, s0
 80046ac:	4b52      	ldr	r3, [pc, #328]	@ (80047f8 <main+0x1078>)
 80046ae:	edc3 7a00 	vstr	s15, [r3]
				//			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
				setvelocity_pris = vel_pris + V_pris_posi_PID;
 80046b2:	4b52      	ldr	r3, [pc, #328]	@ (80047fc <main+0x107c>)
 80046b4:	ed93 7a00 	vldr	s14, [r3]
 80046b8:	4b51      	ldr	r3, [pc, #324]	@ (8004800 <main+0x1080>)
 80046ba:	edd3 7a00 	vldr	s15, [r3]
 80046be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c2:	4b50      	ldr	r3, [pc, #320]	@ (8004804 <main+0x1084>)
 80046c4:	edc3 7a00 	vstr	s15, [r3]
				delta_velo_pris = setvelocity_pris - velocity_pris;
 80046c8:	4b4e      	ldr	r3, [pc, #312]	@ (8004804 <main+0x1084>)
 80046ca:	ed93 7a00 	vldr	s14, [r3]
 80046ce:	4b4a      	ldr	r3, [pc, #296]	@ (80047f8 <main+0x1078>)
 80046d0:	edd3 7a00 	vldr	s15, [r3]
 80046d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004808 <main+0x1088>)
 80046da:	edc3 7a00 	vstr	s15, [r3]
				//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
				V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 80046de:	4b4a      	ldr	r3, [pc, #296]	@ (8004808 <main+0x1088>)
 80046e0:	edd3 7a00 	vldr	s15, [r3]
 80046e4:	eeb0 0a67 	vmov.f32	s0, s15
 80046e8:	f000 fdb0 	bl	800524c <Prismatic_velocity_control>
 80046ec:	eef0 7a40 	vmov.f32	s15, s0
 80046f0:	4b38      	ldr	r3, [pc, #224]	@ (80047d4 <main+0x1054>)
 80046f2:	edc3 7a00 	vstr	s15, [r3]

				// Velocity Control revolute
				velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 80046f6:	4839      	ldr	r0, [pc, #228]	@ (80047dc <main+0x105c>)
 80046f8:	f7fd fc4b 	bl	8001f92 <Encoder_GetVelocity>
 80046fc:	ee10 3a10 	vmov	r3, s0
 8004700:	4618      	mov	r0, r3
 8004702:	f7fb feed 	bl	80004e0 <__aeabi_f2d>
 8004706:	a326      	add	r3, pc, #152	@ (adr r3, 80047a0 <main+0x1020>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f7fc f86a 	bl	80007e4 <__aeabi_ddiv>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	f7fc fa0a 	bl	8000b30 <__aeabi_d2f>
 800471c:	4603      	mov	r3, r0
 800471e:	4a3b      	ldr	r2, [pc, #236]	@ (800480c <main+0x108c>)
 8004720:	6013      	str	r3, [r2, #0]
				//			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
				setvelocity_rev = vel_rev + V_rev_posi_PID;
 8004722:	4b3b      	ldr	r3, [pc, #236]	@ (8004810 <main+0x1090>)
 8004724:	ed93 7a00 	vldr	s14, [r3]
 8004728:	4b3a      	ldr	r3, [pc, #232]	@ (8004814 <main+0x1094>)
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004732:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <main+0x1098>)
 8004734:	edc3 7a00 	vstr	s15, [r3]
				//			delta_velo_rev = setvelocity_rev - velocity_rev;
				delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 8004738:	4b37      	ldr	r3, [pc, #220]	@ (8004818 <main+0x1098>)
 800473a:	ed93 7a00 	vldr	s14, [r3]
 800473e:	4b2a      	ldr	r3, [pc, #168]	@ (80047e8 <main+0x1068>)
 8004740:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 8004744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004748:	4b34      	ldr	r3, [pc, #208]	@ (800481c <main+0x109c>)
 800474a:	edc3 7a00 	vstr	s15, [r3]
				V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 800474e:	4b33      	ldr	r3, [pc, #204]	@ (800481c <main+0x109c>)
 8004750:	edd3 7a00 	vldr	s15, [r3]
 8004754:	eeb0 0a67 	vmov.f32	s0, s15
 8004758:	f000 fe9e 	bl	8005498 <Revolute_velocity_control>
 800475c:	eef0 7a40 	vmov.f32	s15, s0
 8004760:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <main+0x1064>)
 8004762:	edc3 7a00 	vstr	s15, [r3]
				if (count_Tim2 >= 10) {
 8004766:	4b23      	ldr	r3, [pc, #140]	@ (80047f4 <main+0x1074>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b09      	cmp	r3, #9
 800476c:	f340 80f8 	ble.w	8004960 <main+0x11e0>
					// Position Control Prismatic
					position_pris = Encoder_GetPosition_mm(&encoder1);
 8004770:	4816      	ldr	r0, [pc, #88]	@ (80047cc <main+0x104c>)
 8004772:	f7fd fc3b 	bl	8001fec <Encoder_GetPosition_mm>
 8004776:	eef0 7a40 	vmov.f32	s15, s0
 800477a:	4b29      	ldr	r3, [pc, #164]	@ (8004820 <main+0x10a0>)
 800477c:	edc3 7a00 	vstr	s15, [r3]
					//				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
					setposition_pris = pos_pris;
 8004780:	4b28      	ldr	r3, [pc, #160]	@ (8004824 <main+0x10a4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a28      	ldr	r2, [pc, #160]	@ (8004828 <main+0x10a8>)
 8004786:	6013      	str	r3, [r2, #0]
					delta_posi_pris = setposition_pris - position_pris;
 8004788:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <main+0x10a8>)
 800478a:	ed93 7a00 	vldr	s14, [r3]
 800478e:	4b24      	ldr	r3, [pc, #144]	@ (8004820 <main+0x10a0>)
 8004790:	edd3 7a00 	vldr	s15, [r3]
 8004794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004798:	4b24      	ldr	r3, [pc, #144]	@ (800482c <main+0x10ac>)
 800479a:	edc3 7a00 	vstr	s15, [r3]
 800479e:	e047      	b.n	8004830 <main+0x10b0>
 80047a0:	aaaaaaab 	.word	0xaaaaaaab
 80047a4:	400aaaaa 	.word	0x400aaaaa
 80047a8:	e5604189 	.word	0xe5604189
 80047ac:	400922d0 	.word	0x400922d0
 80047b0:	20001aa0 	.word	0x20001aa0
 80047b4:	20000558 	.word	0x20000558
 80047b8:	200006c0 	.word	0x200006c0
 80047bc:	200006f8 	.word	0x200006f8
 80047c0:	20000d60 	.word	0x20000d60
 80047c4:	200006d4 	.word	0x200006d4
 80047c8:	200016f0 	.word	0x200016f0
 80047cc:	2000036c 	.word	0x2000036c
 80047d0:	20001548 	.word	0x20001548
 80047d4:	20000df4 	.word	0x20000df4
 80047d8:	20000e8c 	.word	0x20000e8c
 80047dc:	200003a0 	.word	0x200003a0
 80047e0:	20001558 	.word	0x20001558
 80047e4:	20000e70 	.word	0x20000e70
 80047e8:	200011b0 	.word	0x200011b0
 80047ec:	40668000 	.word	0x40668000
 80047f0:	200016ec 	.word	0x200016ec
 80047f4:	20000d78 	.word	0x20000d78
 80047f8:	20000dec 	.word	0x20000dec
 80047fc:	200003e0 	.word	0x200003e0
 8004800:	20000db4 	.word	0x20000db4
 8004804:	20000df0 	.word	0x20000df0
 8004808:	20000e04 	.word	0x20000e04
 800480c:	20000e68 	.word	0x20000e68
 8004810:	200003e8 	.word	0x200003e8
 8004814:	20000e34 	.word	0x20000e34
 8004818:	20000e6c 	.word	0x20000e6c
 800481c:	20000e80 	.word	0x20000e80
 8004820:	20000dac 	.word	0x20000dac
 8004824:	200003dc 	.word	0x200003dc
 8004828:	20000db0 	.word	0x20000db0
 800482c:	20000dc4 	.word	0x20000dc4
					if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 8004830:	4ba7      	ldr	r3, [pc, #668]	@ (8004ad0 <main+0x1350>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fb fe53 	bl	80004e0 <__aeabi_f2d>
 800483a:	a39f      	add	r3, pc, #636	@ (adr r3, 8004ab8 <main+0x1338>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fc f922 	bl	8000a88 <__aeabi_dcmple>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d015      	beq.n	8004876 <main+0x10f6>
 800484a:	4ba1      	ldr	r3, [pc, #644]	@ (8004ad0 <main+0x1350>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fb fe46 	bl	80004e0 <__aeabi_f2d>
 8004854:	a39a      	add	r3, pc, #616	@ (adr r3, 8004ac0 <main+0x1340>)
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f7fc f91f 	bl	8000a9c <__aeabi_dcmpge>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <main+0x10f6>
						V_pris_posi_PID = 0;
 8004864:	4b9b      	ldr	r3, [pc, #620]	@ (8004ad4 <main+0x1354>)
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
						V_pris_velo_PID = 0;
 800486c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ad8 <main+0x1358>)
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e00b      	b.n	800488e <main+0x110e>
					} else {
						V_pris_posi_PID = Prismatic_position_control(
 8004876:	4b96      	ldr	r3, [pc, #600]	@ (8004ad0 <main+0x1350>)
 8004878:	edd3 7a00 	vldr	s15, [r3]
 800487c:	eeb0 0a67 	vmov.f32	s0, s15
 8004880:	f000 fc6c 	bl	800515c <Prismatic_position_control>
 8004884:	eef0 7a40 	vmov.f32	s15, s0
 8004888:	4b92      	ldr	r3, [pc, #584]	@ (8004ad4 <main+0x1354>)
 800488a:	edc3 7a00 	vstr	s15, [r3]
								delta_posi_pris);
					}
					//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);

					// Position Control Revolute
					position_rev = (Encoder_GetPosition(&encoder2)
 800488e:	4893      	ldr	r0, [pc, #588]	@ (8004adc <main+0x135c>)
 8004890:	f7fd fb70 	bl	8001f74 <Encoder_GetPosition>
 8004894:	ee10 3a10 	vmov	r3, s0
 8004898:	4618      	mov	r0, r3
 800489a:	f7fb fe21 	bl	80004e0 <__aeabi_f2d>
							/ (100.0 / 30.0));
 800489e:	a38a      	add	r3, pc, #552	@ (adr r3, 8004ac8 <main+0x1348>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f7fb ff9e 	bl	80007e4 <__aeabi_ddiv>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7fc f93e 	bl	8000b30 <__aeabi_d2f>
 80048b4:	4603      	mov	r3, r0
					position_rev = (Encoder_GetPosition(&encoder2)
 80048b6:	4a8a      	ldr	r2, [pc, #552]	@ (8004ae0 <main+0x1360>)
 80048b8:	6013      	str	r3, [r2, #0]
					//				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global) + Rev_backlash.backlash_offset;
					setposition_rev = pos_rev; //+ Rev_backlash.backlash_offset;
 80048ba:	4b8a      	ldr	r3, [pc, #552]	@ (8004ae4 <main+0x1364>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a8a      	ldr	r2, [pc, #552]	@ (8004ae8 <main+0x1368>)
 80048c0:	6013      	str	r3, [r2, #0]
					Backlash_Update(&Rev_backlash, pos_rev, p2, v2);
 80048c2:	4b88      	ldr	r3, [pc, #544]	@ (8004ae4 <main+0x1364>)
 80048c4:	edd3 7a00 	vldr	s15, [r3]
 80048c8:	4b88      	ldr	r3, [pc, #544]	@ (8004aec <main+0x136c>)
 80048ca:	ed93 7a00 	vldr	s14, [r3]
 80048ce:	4b88      	ldr	r3, [pc, #544]	@ (8004af0 <main+0x1370>)
 80048d0:	edd3 6a00 	vldr	s13, [r3]
 80048d4:	eeb0 1a66 	vmov.f32	s2, s13
 80048d8:	eef0 0a47 	vmov.f32	s1, s14
 80048dc:	eeb0 0a67 	vmov.f32	s0, s15
 80048e0:	4884      	ldr	r0, [pc, #528]	@ (8004af4 <main+0x1374>)
 80048e2:	f7fc fc38 	bl	8001156 <Backlash_Update>
					delta_posi_rev = setposition_rev - position_rev;
 80048e6:	4b80      	ldr	r3, [pc, #512]	@ (8004ae8 <main+0x1368>)
 80048e8:	ed93 7a00 	vldr	s14, [r3]
 80048ec:	4b7c      	ldr	r3, [pc, #496]	@ (8004ae0 <main+0x1360>)
 80048ee:	edd3 7a00 	vldr	s15, [r3]
 80048f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048f6:	4b80      	ldr	r3, [pc, #512]	@ (8004af8 <main+0x1378>)
 80048f8:	edc3 7a00 	vstr	s15, [r3]
					if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 80048fc:	4b7e      	ldr	r3, [pc, #504]	@ (8004af8 <main+0x1378>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fded 	bl	80004e0 <__aeabi_f2d>
 8004906:	a36c      	add	r3, pc, #432	@ (adr r3, 8004ab8 <main+0x1338>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f7fc f8bc 	bl	8000a88 <__aeabi_dcmple>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d015      	beq.n	8004942 <main+0x11c2>
 8004916:	4b78      	ldr	r3, [pc, #480]	@ (8004af8 <main+0x1378>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fde0 	bl	80004e0 <__aeabi_f2d>
 8004920:	a367      	add	r3, pc, #412	@ (adr r3, 8004ac0 <main+0x1340>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f7fc f8b9 	bl	8000a9c <__aeabi_dcmpge>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <main+0x11c2>
						V_rev_posi_PID = 0;
 8004930:	4b72      	ldr	r3, [pc, #456]	@ (8004afc <main+0x137c>)
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
						V_rev_velo_PID = 0;
 8004938:	4b71      	ldr	r3, [pc, #452]	@ (8004b00 <main+0x1380>)
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e00b      	b.n	800495a <main+0x11da>
					} else {
						V_rev_posi_PID = Revolute_position_control(
 8004942:	4b6d      	ldr	r3, [pc, #436]	@ (8004af8 <main+0x1378>)
 8004944:	edd3 7a00 	vldr	s15, [r3]
 8004948:	eeb0 0a67 	vmov.f32	s0, s15
 800494c:	f000 fd2c 	bl	80053a8 <Revolute_position_control>
 8004950:	eef0 7a40 	vmov.f32	s15, s0
 8004954:	4b69      	ldr	r3, [pc, #420]	@ (8004afc <main+0x137c>)
 8004956:	edc3 7a00 	vstr	s15, [r3]
								delta_posi_rev);
					}

					count_Tim2 = 0;
 800495a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b04 <main+0x1384>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
				}
			}
		}

		static uint8_t prevStart = 0;
		uint8_t nowStart = PS2_ButtonStart();
 8004960:	f7fd fc20 	bl	80021a4 <PS2_ButtonStart>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
		if (nowStart && !prevStart) {
 800496a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8187 	beq.w	8004c82 <main+0x1502>
 8004974:	4b64      	ldr	r3, [pc, #400]	@ (8004b08 <main+0x1388>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 8182 	bne.w	8004c82 <main+0x1502>
			state_start = 1;
 800497e:	4b63      	ldr	r3, [pc, #396]	@ (8004b0c <main+0x138c>)
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]
			traj_start_time = t_global;
 8004984:	4b62      	ldr	r3, [pc, #392]	@ (8004b10 <main+0x1390>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a62      	ldr	r2, [pc, #392]	@ (8004b14 <main+0x1394>)
 800498a:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < 10; i++) {
 800498c:	2300      	movs	r3, #0
 800498e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004990:	e170      	b.n	8004c74 <main+0x14f4>
				float start_pris = PrismaticTenPoints_real[i];
 8004992:	4a61      	ldr	r2, [pc, #388]	@ (8004b18 <main+0x1398>)
 8004994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	657b      	str	r3, [r7, #84]	@ 0x54
				float end_pris = PrismaticTenPoints_real[i + 1];
 800499e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a0:	3301      	adds	r3, #1
 80049a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004b18 <main+0x1398>)
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	653b      	str	r3, [r7, #80]	@ 0x50
				float start_rev = RevoluteTenPoints_real[i];
 80049ac:	4a5b      	ldr	r2, [pc, #364]	@ (8004b1c <main+0x139c>)
 80049ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
				float end_rev = (RevoluteTenPoints_real[i + 1]);
 80049b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a57      	ldr	r2, [pc, #348]	@ (8004b1c <main+0x139c>)
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48

				float t_start_pris =
						(i == 0) ?
								0.0f :
 80049c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d021      	beq.n	8004a10 <main+0x1290>
								Prismatic[i - 1].t_start
 80049cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ce:	1e5a      	subs	r2, r3, #1
 80049d0:	4953      	ldr	r1, [pc, #332]	@ (8004b20 <main+0x13a0>)
 80049d2:	4613      	mov	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	3320      	adds	r3, #32
 80049de:	ed93 7a00 	vldr	s14, [r3]
										+ Prismatic[i - 1].t_total
 80049e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049e4:	1e5a      	subs	r2, r3, #1
 80049e6:	494e      	ldr	r1, [pc, #312]	@ (8004b20 <main+0x13a0>)
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	331c      	adds	r3, #28
 80049f4:	edd3 7a00 	vldr	s15, [r3]
 80049f8:	ee37 7a27 	vadd.f32	s14, s14, s15
										+ delay_pris[i - 1];
 80049fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049fe:	3b01      	subs	r3, #1
 8004a00:	4a48      	ldr	r2, [pc, #288]	@ (8004b24 <main+0x13a4>)
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	edd3 7a00 	vldr	s15, [r3]
								0.0f :
 8004a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a0e:	e001      	b.n	8004a14 <main+0x1294>
 8004a10:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8004b28 <main+0x13a8>
				float t_start_pris =
 8004a14:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
				float t_start_rev =
						(i == 0) ?
								0.0f :
 8004a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d021      	beq.n	8004a62 <main+0x12e2>
								Revolute[i - 1].t_start
 8004a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a20:	1e5a      	subs	r2, r3, #1
 8004a22:	4942      	ldr	r1, [pc, #264]	@ (8004b2c <main+0x13ac>)
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3320      	adds	r3, #32
 8004a30:	ed93 7a00 	vldr	s14, [r3]
										+ Revolute[i - 1].t_total
 8004a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a36:	1e5a      	subs	r2, r3, #1
 8004a38:	493c      	ldr	r1, [pc, #240]	@ (8004b2c <main+0x13ac>)
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	331c      	adds	r3, #28
 8004a46:	edd3 7a00 	vldr	s15, [r3]
 8004a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
										+ delay_rev[i - 1];
 8004a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a50:	3b01      	subs	r3, #1
 8004a52:	4a37      	ldr	r2, [pc, #220]	@ (8004b30 <main+0x13b0>)
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	edd3 7a00 	vldr	s15, [r3]
								0.0f :
 8004a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a60:	e001      	b.n	8004a66 <main+0x12e6>
 8004a62:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8004b28 <main+0x13a8>
				float t_start_rev =
 8004a66:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

				if (fabsf(end_pris - start_pris) < 0.001f) {
 8004a6a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004a6e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a76:	eef0 7ae7 	vabs.f32	s15, s15
 8004a7a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004b34 <main+0x13b4>
 8004a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a86:	d557      	bpl.n	8004b38 <main+0x13b8>
					InitHoldTrajectorySegment(&Prismatic[i], start_pris, 5.5f,
 8004a88:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4a23      	ldr	r2, [pc, #140]	@ (8004b20 <main+0x13a0>)
 8004a94:	4413      	add	r3, r2
 8004a96:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 8004a9a:	eef1 0a06 	vmov.f32	s1, #22	@ 0x40b00000  5.5
 8004a9e:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fbd4 	bl	8003250 <InitHoldTrajectorySegment>
							t_start_pris);
					delay_pris[i] = 0.0f;
 8004aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b24 <main+0x13a4>)
 8004aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e079      	b.n	8004bac <main+0x142c>
 8004ab8:	9999999a 	.word	0x9999999a
 8004abc:	3fb99999 	.word	0x3fb99999
 8004ac0:	9999999a 	.word	0x9999999a
 8004ac4:	bfb99999 	.word	0xbfb99999
 8004ac8:	aaaaaaab 	.word	0xaaaaaaab
 8004acc:	400aaaaa 	.word	0x400aaaaa
 8004ad0:	20000dc4 	.word	0x20000dc4
 8004ad4:	20000db4 	.word	0x20000db4
 8004ad8:	20000df4 	.word	0x20000df4
 8004adc:	200003a0 	.word	0x200003a0
 8004ae0:	20000e2c 	.word	0x20000e2c
 8004ae4:	200003e4 	.word	0x200003e4
 8004ae8:	20000e30 	.word	0x20000e30
 8004aec:	200006e4 	.word	0x200006e4
 8004af0:	200006e8 	.word	0x200006e8
 8004af4:	20000d7c 	.word	0x20000d7c
 8004af8:	20000e40 	.word	0x20000e40
 8004afc:	20000e34 	.word	0x20000e34
 8004b00:	20000e70 	.word	0x20000e70
 8004b04:	20000d78 	.word	0x20000d78
 8004b08:	20001709 	.word	0x20001709
 8004b0c:	200016ec 	.word	0x200016ec
 8004b10:	200006c0 	.word	0x200006c0
 8004b14:	200006c4 	.word	0x200006c4
 8004b18:	200015e4 	.word	0x200015e4
 8004b1c:	20001610 	.word	0x20001610
 8004b20:	200003f0 	.word	0x200003f0
 8004b24:	2000163c 	.word	0x2000163c
 8004b28:	00000000 	.word	0x00000000
 8004b2c:	20000558 	.word	0x20000558
 8004b30:	20001664 	.word	0x20001664
 8004b34:	3a83126f 	.word	0x3a83126f
				} else {
					InitTrajectorySegment(&Prismatic[i], start_pris, end_pris,
 8004b38:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4aba      	ldr	r2, [pc, #744]	@ (8004e2c <main+0x16ac>)
 8004b44:	4413      	add	r3, r2
 8004b46:	ed97 2a11 	vldr	s4, [r7, #68]	@ 0x44
 8004b4a:	eddf 1ab9 	vldr	s3, [pc, #740]	@ 8004e30 <main+0x16b0>
 8004b4e:	ed9f 1ab9 	vldr	s2, [pc, #740]	@ 8004e34 <main+0x16b4>
 8004b52:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 8004b56:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe f97c 	bl	8002e58 <InitTrajectorySegment>
							v_max_pris, a_max_pris, t_start_pris);
					delay_pris[i] = 5.5f - Prismatic[i].t_total;
 8004b60:	49b2      	ldr	r1, [pc, #712]	@ (8004e2c <main+0x16ac>)
 8004b62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	331c      	adds	r3, #28
 8004b70:	edd3 7a00 	vldr	s15, [r3]
 8004b74:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8004b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b7c:	4aae      	ldr	r2, [pc, #696]	@ (8004e38 <main+0x16b8>)
 8004b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	edc3 7a00 	vstr	s15, [r3]
					if (delay_pris[i] < 0.0f)
 8004b88:	4aab      	ldr	r2, [pc, #684]	@ (8004e38 <main+0x16b8>)
 8004b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	edd3 7a00 	vldr	s15, [r3]
 8004b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9c:	d506      	bpl.n	8004bac <main+0x142c>
						delay_pris[i] = 0.0f;
 8004b9e:	4aa6      	ldr	r2, [pc, #664]	@ (8004e38 <main+0x16b8>)
 8004ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
				}

				if (fabsf(end_rev - start_rev) < 0.001f) {
 8004bac:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004bb0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bb8:	eef0 7ae7 	vabs.f32	s15, s15
 8004bbc:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8004e3c <main+0x16bc>
 8004bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc8:	d517      	bpl.n	8004bfa <main+0x147a>
					InitHoldTrajectorySegment(&Revolute[i], start_rev, 5.5f,
 8004bca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4a9a      	ldr	r2, [pc, #616]	@ (8004e40 <main+0x16c0>)
 8004bd6:	4413      	add	r3, r2
 8004bd8:	ed97 1a10 	vldr	s2, [r7, #64]	@ 0x40
 8004bdc:	eef1 0a06 	vmov.f32	s1, #22	@ 0x40b00000  5.5
 8004be0:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe fb33 	bl	8003250 <InitHoldTrajectorySegment>
							t_start_rev);
					delay_rev[i] = 0.0f;
 8004bea:	4a96      	ldr	r2, [pc, #600]	@ (8004e44 <main+0x16c4>)
 8004bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e039      	b.n	8004c6e <main+0x14ee>
				} else {
					InitTrajectorySegment(&Revolute[i], start_rev, end_rev,
 8004bfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4a8e      	ldr	r2, [pc, #568]	@ (8004e40 <main+0x16c0>)
 8004c06:	4413      	add	r3, r2
 8004c08:	ed97 2a10 	vldr	s4, [r7, #64]	@ 0x40
 8004c0c:	eddf 1a8e 	vldr	s3, [pc, #568]	@ 8004e48 <main+0x16c8>
 8004c10:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004c14:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8004c18:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe f91b 	bl	8002e58 <InitTrajectorySegment>
							v_max_rev, a_max_rev, t_start_rev);
					delay_rev[i] = 5.5f - Revolute[i].t_total;
 8004c22:	4987      	ldr	r1, [pc, #540]	@ (8004e40 <main+0x16c0>)
 8004c24:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	331c      	adds	r3, #28
 8004c32:	edd3 7a00 	vldr	s15, [r3]
 8004c36:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8004c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c3e:	4a81      	ldr	r2, [pc, #516]	@ (8004e44 <main+0x16c4>)
 8004c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	edc3 7a00 	vstr	s15, [r3]
					if (delay_rev[i] < 0.0f)
 8004c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e44 <main+0x16c4>)
 8004c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	edd3 7a00 	vldr	s15, [r3]
 8004c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5e:	d506      	bpl.n	8004c6e <main+0x14ee>
						delay_rev[i] = 0.0f;
 8004c60:	4a78      	ldr	r2, [pc, #480]	@ (8004e44 <main+0x16c4>)
 8004c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 10; i++) {
 8004c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c70:	3301      	adds	r3, #1
 8004c72:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	f77f ae8b 	ble.w	8004992 <main+0x1212>
				}
			}
			current_segment = 0;
 8004c7c:	4b73      	ldr	r3, [pc, #460]	@ (8004e4c <main+0x16cc>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
		}
		prevStart = nowStart;
 8004c82:	4a73      	ldr	r2, [pc, #460]	@ (8004e50 <main+0x16d0>)
 8004c84:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8004c88:	7013      	strb	r3, [r2, #0]

		float t_relative = t_global - traj_start_time;
 8004c8a:	4b72      	ldr	r3, [pc, #456]	@ (8004e54 <main+0x16d4>)
 8004c8c:	ed93 7a00 	vldr	s14, [r3]
 8004c90:	4b71      	ldr	r3, [pc, #452]	@ (8004e58 <main+0x16d8>)
 8004c92:	edd3 7a00 	vldr	s15, [r3]
 8004c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c9a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

		if (current_segment < 10) {
 8004c9e:	4b6b      	ldr	r3, [pc, #428]	@ (8004e4c <main+0x16cc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b09      	cmp	r3, #9
 8004ca4:	dc48      	bgt.n	8004d38 <main+0x15b8>
			pos_pris = GetTrajectoryPosition(&Prismatic[current_segment],
 8004ca6:	4b69      	ldr	r3, [pc, #420]	@ (8004e4c <main+0x16cc>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e2c <main+0x16ac>)
 8004cb4:	4413      	add	r3, r2
 8004cb6:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe f982 	bl	8002fc4 <GetTrajectoryPosition>
 8004cc0:	eef0 7a40 	vmov.f32	s15, s0
 8004cc4:	4b65      	ldr	r3, [pc, #404]	@ (8004e5c <main+0x16dc>)
 8004cc6:	edc3 7a00 	vstr	s15, [r3]
					t_relative);
			vel_pris = GetTrajectoryVelocity(&Prismatic[current_segment],
 8004cca:	4b60      	ldr	r3, [pc, #384]	@ (8004e4c <main+0x16cc>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4a55      	ldr	r2, [pc, #340]	@ (8004e2c <main+0x16ac>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fa46 	bl	8003170 <GetTrajectoryVelocity>
 8004ce4:	eef0 7a40 	vmov.f32	s15, s0
 8004ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8004e60 <main+0x16e0>)
 8004cea:	edc3 7a00 	vstr	s15, [r3]
					t_relative);
			pos_rev = GetTrajectoryPosition(&Revolute[current_segment],
 8004cee:	4b57      	ldr	r3, [pc, #348]	@ (8004e4c <main+0x16cc>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4a51      	ldr	r2, [pc, #324]	@ (8004e40 <main+0x16c0>)
 8004cfc:	4413      	add	r3, r2
 8004cfe:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe f95e 	bl	8002fc4 <GetTrajectoryPosition>
 8004d08:	eef0 7a40 	vmov.f32	s15, s0
 8004d0c:	4b55      	ldr	r3, [pc, #340]	@ (8004e64 <main+0x16e4>)
 8004d0e:	edc3 7a00 	vstr	s15, [r3]
					t_relative);
			vel_rev = GetTrajectoryVelocity(&Revolute[current_segment],
 8004d12:	4b4e      	ldr	r3, [pc, #312]	@ (8004e4c <main+0x16cc>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4a48      	ldr	r2, [pc, #288]	@ (8004e40 <main+0x16c0>)
 8004d20:	4413      	add	r3, r2
 8004d22:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fa22 	bl	8003170 <GetTrajectoryVelocity>
 8004d2c:	eef0 7a40 	vmov.f32	s15, s0
 8004d30:	4b4d      	ldr	r3, [pc, #308]	@ (8004e68 <main+0x16e8>)
 8004d32:	edc3 7a00 	vstr	s15, [r3]
 8004d36:	e014      	b.n	8004d62 <main+0x15e2>
					t_relative);
		} else {
			pos_pris = Prismatic[9].end_pos;
 8004d38:	4b3c      	ldr	r3, [pc, #240]	@ (8004e2c <main+0x16ac>)
 8004d3a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d3e:	4a47      	ldr	r2, [pc, #284]	@ (8004e5c <main+0x16dc>)
 8004d40:	6013      	str	r3, [r2, #0]
			vel_pris = 0.0f;
 8004d42:	4b47      	ldr	r3, [pc, #284]	@ (8004e60 <main+0x16e0>)
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
			pos_rev = Revolute[9].end_pos;
 8004d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e40 <main+0x16c0>)
 8004d4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d50:	4a44      	ldr	r2, [pc, #272]	@ (8004e64 <main+0x16e4>)
 8004d52:	6013      	str	r3, [r2, #0]
			vel_rev = 0.0f;
 8004d54:	4b44      	ldr	r3, [pc, #272]	@ (8004e68 <main+0x16e8>)
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
			state_start = 0;
 8004d5c:	4b43      	ldr	r3, [pc, #268]	@ (8004e6c <main+0x16ec>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
		}

		if (t_relative
				> Prismatic[current_segment].t_start
 8004d62:	4b3a      	ldr	r3, [pc, #232]	@ (8004e4c <main+0x16cc>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4931      	ldr	r1, [pc, #196]	@ (8004e2c <main+0x16ac>)
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	3320      	adds	r3, #32
 8004d74:	ed93 7a00 	vldr	s14, [r3]
						+ Prismatic[current_segment].t_total
 8004d78:	4b34      	ldr	r3, [pc, #208]	@ (8004e4c <main+0x16cc>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	492b      	ldr	r1, [pc, #172]	@ (8004e2c <main+0x16ac>)
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	331c      	adds	r3, #28
 8004d8a:	edd3 7a00 	vldr	s15, [r3]
 8004d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
		if (t_relative
 8004d92:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	dd27      	ble.n	8004df0 <main+0x1670>
				&& t_relative
						> Revolute[current_segment].t_start
 8004da0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e4c <main+0x16cc>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4926      	ldr	r1, [pc, #152]	@ (8004e40 <main+0x16c0>)
 8004da6:	4613      	mov	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3320      	adds	r3, #32
 8004db2:	ed93 7a00 	vldr	s14, [r3]
								+ Revolute[current_segment].t_total) {
 8004db6:	4b25      	ldr	r3, [pc, #148]	@ (8004e4c <main+0x16cc>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4921      	ldr	r1, [pc, #132]	@ (8004e40 <main+0x16c0>)
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	331c      	adds	r3, #28
 8004dc8:	edd3 7a00 	vldr	s15, [r3]
 8004dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
				&& t_relative
 8004dd0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ddc:	dd08      	ble.n	8004df0 <main+0x1670>
			if (current_segment < 9)
 8004dde:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <main+0x16cc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	dc04      	bgt.n	8004df0 <main+0x1670>
				current_segment++;
 8004de6:	4b19      	ldr	r3, [pc, #100]	@ (8004e4c <main+0x16cc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	4a17      	ldr	r2, [pc, #92]	@ (8004e4c <main+0x16cc>)
 8004dee:	6013      	str	r3, [r2, #0]
		}

		if (state_start == 1 || state_go_to == 1) {
 8004df0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e6c <main+0x16ec>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d004      	beq.n	8004e02 <main+0x1682>
 8004df8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <main+0x16f0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	f47e af2d 	bne.w	8003c5c <main+0x4dc>
			if (V_pris_velo_PID < 0) {
 8004e02:	4b1c      	ldr	r3, [pc, #112]	@ (8004e74 <main+0x16f4>)
 8004e04:	edd3 7a00 	vldr	s15, [r3]
 8004e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e10:	d536      	bpl.n	8004e80 <main+0x1700>
				DIR_24V = 0;
 8004e12:	4b19      	ldr	r3, [pc, #100]	@ (8004e78 <main+0x16f8>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
				V_absoulte_pris = fabsf(V_pris_velo_PID);
 8004e18:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <main+0x16f4>)
 8004e1a:	edd3 7a00 	vldr	s15, [r3]
 8004e1e:	eef0 7ae7 	vabs.f32	s15, s15
 8004e22:	4b16      	ldr	r3, [pc, #88]	@ (8004e7c <main+0x16fc>)
 8004e24:	edc3 7a00 	vstr	s15, [r3]
 8004e28:	e039      	b.n	8004e9e <main+0x171e>
 8004e2a:	bf00      	nop
 8004e2c:	200003f0 	.word	0x200003f0
 8004e30:	437a0000 	.word	0x437a0000
 8004e34:	43fa0000 	.word	0x43fa0000
 8004e38:	2000163c 	.word	0x2000163c
 8004e3c:	3a83126f 	.word	0x3a83126f
 8004e40:	20000558 	.word	0x20000558
 8004e44:	20001664 	.word	0x20001664
 8004e48:	3ecccccd 	.word	0x3ecccccd
 8004e4c:	200003ec 	.word	0x200003ec
 8004e50:	20001709 	.word	0x20001709
 8004e54:	200006c0 	.word	0x200006c0
 8004e58:	200006c4 	.word	0x200006c4
 8004e5c:	200003dc 	.word	0x200003dc
 8004e60:	200003e0 	.word	0x200003e0
 8004e64:	200003e4 	.word	0x200003e4
 8004e68:	200003e8 	.word	0x200003e8
 8004e6c:	200016ec 	.word	0x200016ec
 8004e70:	200016f0 	.word	0x200016f0
 8004e74:	20000df4 	.word	0x20000df4
 8004e78:	20000d70 	.word	0x20000d70
 8004e7c:	20000db8 	.word	0x20000db8
			} else if (V_pris_velo_PID > 0) {
 8004e80:	4b44      	ldr	r3, [pc, #272]	@ (8004f94 <main+0x1814>)
 8004e82:	edd3 7a00 	vldr	s15, [r3]
 8004e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8e:	dd06      	ble.n	8004e9e <main+0x171e>
				DIR_24V = 1;
 8004e90:	4b41      	ldr	r3, [pc, #260]	@ (8004f98 <main+0x1818>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
				V_absoulte_pris = V_pris_velo_PID;
 8004e96:	4b3f      	ldr	r3, [pc, #252]	@ (8004f94 <main+0x1814>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a40      	ldr	r2, [pc, #256]	@ (8004f9c <main+0x181c>)
 8004e9c:	6013      	str	r3, [r2, #0]
			}
			pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 8004e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f9c <main+0x181c>)
 8004ea0:	edd3 7a00 	vldr	s15, [r3]
 8004ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ea8:	f000 fb94 	bl	80055d4 <voltage_to_pwm>
 8004eac:	eef0 7a40 	vmov.f32	s15, s0
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa0 <main+0x1820>)
 8004eb2:	edc3 7a00 	vstr	s15, [r3]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 8004eb6:	4b38      	ldr	r3, [pc, #224]	@ (8004f98 <main+0x1818>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	4838      	ldr	r0, [pc, #224]	@ (8004fa4 <main+0x1824>)
 8004ec2:	f003 fbff 	bl	80086c4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, pwm_pris_velo);
 8004ec6:	4b36      	ldr	r3, [pc, #216]	@ (8004fa0 <main+0x1820>)
 8004ec8:	edd3 7a00 	vldr	s15, [r3]
 8004ecc:	4b36      	ldr	r3, [pc, #216]	@ (8004fa8 <main+0x1828>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed4:	ee17 2a90 	vmov	r2, s15
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34

			if (V_rev_velo_PID < 0) {
 8004eda:	4b34      	ldr	r3, [pc, #208]	@ (8004fac <main+0x182c>)
 8004edc:	edd3 7a00 	vldr	s15, [r3]
 8004ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee8:	d50b      	bpl.n	8004f02 <main+0x1782>
				DIR_18V = 0;
 8004eea:	4b31      	ldr	r3, [pc, #196]	@ (8004fb0 <main+0x1830>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
				V_absolute_rev = fabsf(V_rev_velo_PID);
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8004fac <main+0x182c>)
 8004ef2:	edd3 7a00 	vldr	s15, [r3]
 8004ef6:	eef0 7ae7 	vabs.f32	s15, s15
 8004efa:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb4 <main+0x1834>)
 8004efc:	edc3 7a00 	vstr	s15, [r3]
 8004f00:	e00e      	b.n	8004f20 <main+0x17a0>
			} else if (V_rev_velo_PID > 0) {
 8004f02:	4b2a      	ldr	r3, [pc, #168]	@ (8004fac <main+0x182c>)
 8004f04:	edd3 7a00 	vldr	s15, [r3]
 8004f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f10:	dd06      	ble.n	8004f20 <main+0x17a0>
				DIR_18V = 1;
 8004f12:	4b27      	ldr	r3, [pc, #156]	@ (8004fb0 <main+0x1830>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
				V_absolute_rev = V_rev_velo_PID;
 8004f18:	4b24      	ldr	r3, [pc, #144]	@ (8004fac <main+0x182c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a25      	ldr	r2, [pc, #148]	@ (8004fb4 <main+0x1834>)
 8004f1e:	6013      	str	r3, [r2, #0]
			}
			V_plant = V_absolute_rev + voltage_dis_rev;
 8004f20:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <main+0x1834>)
 8004f22:	ed93 7a00 	vldr	s14, [r3]
 8004f26:	4b24      	ldr	r3, [pc, #144]	@ (8004fb8 <main+0x1838>)
 8004f28:	edd3 7a00 	vldr	s15, [r3]
 8004f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f30:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <main+0x183c>)
 8004f32:	edc3 7a00 	vstr	s15, [r3]
			if (V_plant > 18) {
 8004f36:	4b21      	ldr	r3, [pc, #132]	@ (8004fbc <main+0x183c>)
 8004f38:	edd3 7a00 	vldr	s15, [r3]
 8004f3c:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8004f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	dd02      	ble.n	8004f50 <main+0x17d0>
				V_plant = 18;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fbc <main+0x183c>)
 8004f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc0 <main+0x1840>)
 8004f4e:	601a      	str	r2, [r3, #0]
			}
			pwm_rev_velo = (V_plant / 18) * 65535;
 8004f50:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <main+0x183c>)
 8004f52:	ed93 7a00 	vldr	s14, [r3]
 8004f56:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8004f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f5e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004fc4 <main+0x1844>
 8004f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f66:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <main+0x1848>)
 8004f68:	edc3 7a00 	vstr	s15, [r3]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 8004f6c:	4b10      	ldr	r3, [pc, #64]	@ (8004fb0 <main+0x1830>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	2140      	movs	r1, #64	@ 0x40
 8004f76:	4815      	ldr	r0, [pc, #84]	@ (8004fcc <main+0x184c>)
 8004f78:	f003 fba4 	bl	80086c4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, pwm_rev_velo);
 8004f7c:	4b12      	ldr	r3, [pc, #72]	@ (8004fc8 <main+0x1848>)
 8004f7e:	edd3 7a00 	vldr	s15, [r3]
 8004f82:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <main+0x1828>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8a:	ee17 2a90 	vmov	r2, s15
 8004f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	while (1) {
 8004f90:	f7fe be64 	b.w	8003c5c <main+0x4dc>
 8004f94:	20000df4 	.word	0x20000df4
 8004f98:	20000d70 	.word	0x20000d70
 8004f9c:	20000db8 	.word	0x20000db8
 8004fa0:	20000df8 	.word	0x20000df8
 8004fa4:	48000400 	.word	0x48000400
 8004fa8:	20001c38 	.word	0x20001c38
 8004fac:	20000e70 	.word	0x20000e70
 8004fb0:	20000d6c 	.word	0x20000d6c
 8004fb4:	20000e84 	.word	0x20000e84
 8004fb8:	20000d74 	.word	0x20000d74
 8004fbc:	20000e88 	.word	0x20000e88
 8004fc0:	41900000 	.word	0x41900000
 8004fc4:	477fff00 	.word	0x477fff00
 8004fc8:	20000e74 	.word	0x20000e74
 8004fcc:	48000800 	.word	0x48000800

08004fd0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b094      	sub	sp, #80	@ 0x50
 8004fd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004fd6:	f107 0318 	add.w	r3, r7, #24
 8004fda:	2238      	movs	r2, #56	@ 0x38
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f00a fb24 	bl	800f62c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	605a      	str	r2, [r3, #4]
 8004fec:	609a      	str	r2, [r3, #8]
 8004fee:	60da      	str	r2, [r3, #12]
 8004ff0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	f003 fb96 	bl	8008724 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005002:	2340      	movs	r3, #64	@ 0x40
 8005004:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005006:	2302      	movs	r3, #2
 8005008:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800500a:	2302      	movs	r3, #2
 800500c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800500e:	2304      	movs	r3, #4
 8005010:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8005012:	2355      	movs	r3, #85	@ 0x55
 8005014:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005016:	2302      	movs	r3, #2
 8005018:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800501a:	2302      	movs	r3, #2
 800501c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800501e:	2302      	movs	r3, #2
 8005020:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005022:	f107 0318 	add.w	r3, r7, #24
 8005026:	4618      	mov	r0, r3
 8005028:	f003 fc30 	bl	800888c <HAL_RCC_OscConfig>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <SystemClock_Config+0x66>
		Error_Handler();
 8005032:	f000 fb2b 	bl	800568c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005036:	230f      	movs	r3, #15
 8005038:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800503a:	2303      	movs	r3, #3
 800503c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800504a:	1d3b      	adds	r3, r7, #4
 800504c:	2104      	movs	r1, #4
 800504e:	4618      	mov	r0, r3
 8005050:	f003 ff2e 	bl	8008eb0 <HAL_RCC_ClockConfig>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <SystemClock_Config+0x8e>
		Error_Handler();
 800505a:	f000 fb17 	bl	800568c <Error_Handler>
	}
}
 800505e:	bf00      	nop
 8005060:	3750      	adds	r7, #80	@ 0x50
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) { // Back Limit
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005078:	d103      	bne.n	8005082 <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 800507a:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <HAL_GPIO_EXTI_Callback+0xc4>)
 800507c:	2209      	movs	r2, #9
 800507e:	601a      	str	r2, [r3, #0]
		Home_Pris = 1;
		State = 15;
//		set_home_pris = 1;
//		count_pris += 1;
	}
}
 8005080:	e04e      	b.n	8005120 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_10) { // Front Limit
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005088:	d103      	bne.n	8005092 <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 800508a:	4b28      	ldr	r3, [pc, #160]	@ (800512c <HAL_GPIO_EXTI_Callback+0xc4>)
 800508c:	220a      	movs	r2, #10
 800508e:	601a      	str	r2, [r3, #0]
}
 8005090:	e046      	b.n	8005120 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_11) { // Emergency
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005098:	d11d      	bne.n	80050d6 <HAL_GPIO_EXTI_Callback+0x6e>
		if (Emer_trick - Emer_last_trick >= 1000) {
 800509a:	4b25      	ldr	r3, [pc, #148]	@ (8005130 <HAL_GPIO_EXTI_Callback+0xc8>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b25      	ldr	r3, [pc, #148]	@ (8005134 <HAL_GPIO_EXTI_Callback+0xcc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050a8:	d311      	bcc.n	80050ce <HAL_GPIO_EXTI_Callback+0x66>
			Emer_count += 1;
 80050aa:	4b23      	ldr	r3, [pc, #140]	@ (8005138 <HAL_GPIO_EXTI_Callback+0xd0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3301      	adds	r3, #1
 80050b0:	4a21      	ldr	r2, [pc, #132]	@ (8005138 <HAL_GPIO_EXTI_Callback+0xd0>)
 80050b2:	6013      	str	r3, [r2, #0]
			Emer_last_trick = Emer_trick;
 80050b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005130 <HAL_GPIO_EXTI_Callback+0xc8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005134 <HAL_GPIO_EXTI_Callback+0xcc>)
 80050ba:	6013      	str	r3, [r2, #0]
			if (Emer_count % 2 == 1) {
 80050bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005138 <HAL_GPIO_EXTI_Callback+0xd0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_GPIO_EXTI_Callback+0x66>
				Emer_state = 1;
 80050c8:	4b1c      	ldr	r3, [pc, #112]	@ (800513c <HAL_GPIO_EXTI_Callback+0xd4>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
		State = 11;
 80050ce:	4b17      	ldr	r3, [pc, #92]	@ (800512c <HAL_GPIO_EXTI_Callback+0xc4>)
 80050d0:	220b      	movs	r2, #11
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	e024      	b.n	8005120 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_12) { // Right Proximity
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050dc:	d106      	bne.n	80050ec <HAL_GPIO_EXTI_Callback+0x84>
		Home_Rev = 1;
 80050de:	4b18      	ldr	r3, [pc, #96]	@ (8005140 <HAL_GPIO_EXTI_Callback+0xd8>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
		State = 12;
 80050e4:	4b11      	ldr	r3, [pc, #68]	@ (800512c <HAL_GPIO_EXTI_Callback+0xc4>)
 80050e6:	220c      	movs	r2, #12
 80050e8:	601a      	str	r2, [r3, #0]
}
 80050ea:	e019      	b.n	8005120 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_13) { // Left Proximity
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f2:	d103      	bne.n	80050fc <HAL_GPIO_EXTI_Callback+0x94>
		State = 13;
 80050f4:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <HAL_GPIO_EXTI_Callback+0xc4>)
 80050f6:	220d      	movs	r2, #13
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	e011      	b.n	8005120 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005102:	d103      	bne.n	800510c <HAL_GPIO_EXTI_Callback+0xa4>
		State = 14;
 8005104:	4b09      	ldr	r3, [pc, #36]	@ (800512c <HAL_GPIO_EXTI_Callback+0xc4>)
 8005106:	220e      	movs	r2, #14
 8005108:	601a      	str	r2, [r3, #0]
}
 800510a:	e009      	b.n	8005120 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005112:	d105      	bne.n	8005120 <HAL_GPIO_EXTI_Callback+0xb8>
		Home_Pris = 1;
 8005114:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <HAL_GPIO_EXTI_Callback+0xdc>)
 8005116:	2201      	movs	r2, #1
 8005118:	701a      	strb	r2, [r3, #0]
		State = 15;
 800511a:	4b04      	ldr	r3, [pc, #16]	@ (800512c <HAL_GPIO_EXTI_Callback+0xc4>)
 800511c:	220f      	movs	r2, #15
 800511e:	601a      	str	r2, [r3, #0]
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	200006f0 	.word	0x200006f0
 8005130:	200016f8 	.word	0x200016f8
 8005134:	200016fc 	.word	0x200016fc
 8005138:	20001704 	.word	0x20001704
 800513c:	20001700 	.word	0x20001700
 8005140:	200016f5 	.word	0x200016f5
 8005144:	200016f4 	.word	0x200016f4

08005148 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
//	if (htim == &htim2) {
//		PS2_ReadData();
//	}
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 8005166:	4a36      	ldr	r2, [pc, #216]	@ (8005240 <Prismatic_position_control+0xe4>)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 800516c:	4b34      	ldr	r3, [pc, #208]	@ (8005240 <Prismatic_position_control+0xe4>)
 800516e:	edd3 7a00 	vldr	s15, [r3]
 8005172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	d50a      	bpl.n	8005192 <Prismatic_position_control+0x36>
 800517c:	4b30      	ldr	r3, [pc, #192]	@ (8005240 <Prismatic_position_control+0xe4>)
 800517e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	dd02      	ble.n	8005192 <Prismatic_position_control+0x36>
		anti_windup = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e014      	b.n	80051bc <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 8005192:	4b2b      	ldr	r3, [pc, #172]	@ (8005240 <Prismatic_position_control+0xe4>)
 8005194:	edd3 7a00 	vldr	s15, [r3]
 8005198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a0:	dd0a      	ble.n	80051b8 <Prismatic_position_control+0x5c>
 80051a2:	4b27      	ldr	r3, [pc, #156]	@ (8005240 <Prismatic_position_control+0xe4>)
 80051a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80051a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b0:	d502      	bpl.n	80051b8 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e001      	b.n	80051bc <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 80051b8:	2301      	movs	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <Prismatic_position_control+0xe8>)
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	ed93 7a00 	vldr	s14, [r3]
 80051ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80051ce:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	edd3 7a03 	vldr	s15, [r3, #12]
 80051de:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80051e2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80051f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8005200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005204:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800521c:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 800521e:	4a0a      	ldr	r2, [pc, #40]	@ (8005248 <Prismatic_position_control+0xec>)
 8005220:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 8005222:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <Prismatic_position_control+0xe4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a06      	ldr	r2, [pc, #24]	@ (8005240 <Prismatic_position_control+0xe4>)
 8005228:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 800522a:	4b07      	ldr	r3, [pc, #28]	@ (8005248 <Prismatic_position_control+0xec>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	ee07 3a90 	vmov	s15, r3
}
 8005232:	eeb0 0a67 	vmov.f32	s0, s15
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	20000dbc 	.word	0x20000dbc
 8005244:	20000d88 	.word	0x20000d88
 8005248:	20000db4 	.word	0x20000db4

0800524c <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] = delta_velo;
 8005256:	4a4e      	ldr	r2, [pc, #312]	@ (8005390 <Prismatic_velocity_control+0x144>)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 800525c:	4b4c      	ldr	r3, [pc, #304]	@ (8005390 <Prismatic_velocity_control+0x144>)
 800525e:	edd3 7a00 	vldr	s15, [r3]
 8005262:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526a:	d50a      	bpl.n	8005282 <Prismatic_velocity_control+0x36>
 800526c:	4b48      	ldr	r3, [pc, #288]	@ (8005390 <Prismatic_velocity_control+0x144>)
 800526e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527a:	dd02      	ble.n	8005282 <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e014      	b.n	80052ac <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 8005282:	4b43      	ldr	r3, [pc, #268]	@ (8005390 <Prismatic_velocity_control+0x144>)
 8005284:	edd3 7a00 	vldr	s15, [r3]
 8005288:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800528c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005290:	dd0a      	ble.n	80052a8 <Prismatic_velocity_control+0x5c>
 8005292:	4b3f      	ldr	r3, [pc, #252]	@ (8005390 <Prismatic_velocity_control+0x144>)
 8005294:	edd3 7a01 	vldr	s15, [r3, #4]
 8005298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a0:	d502      	bpl.n	80052a8 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e001      	b.n	80052ac <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80052a8:	2301      	movs	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 80052ac:	4b39      	ldr	r3, [pc, #228]	@ (8005394 <Prismatic_velocity_control+0x148>)
 80052ae:	edd3 7a00 	vldr	s15, [r3]
 80052b2:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80052b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	db07      	blt.n	80052d0 <Prismatic_velocity_control+0x84>
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 80052c6:	4b34      	ldr	r3, [pc, #208]	@ (8005398 <Prismatic_velocity_control+0x14c>)
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	61da      	str	r2, [r3, #28]
 80052ce:	e002      	b.n	80052d6 <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 80052d0:	4b31      	ldr	r3, [pc, #196]	@ (8005398 <Prismatic_velocity_control+0x14c>)
 80052d2:	4a32      	ldr	r2, [pc, #200]	@ (800539c <Prismatic_velocity_control+0x150>)
 80052d4:	61da      	str	r2, [r3, #28]
 80052d6:	4b30      	ldr	r3, [pc, #192]	@ (8005398 <Prismatic_velocity_control+0x14c>)
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	ed93 7a00 	vldr	s14, [r3]
 80052e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80052e8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80052f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80052fc:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	edd3 6a02 	vldr	s13, [r3, #8]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	edd3 7a04 	vldr	s15, [r3, #16]
 800530c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800531a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800531e:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	615a      	str	r2, [r3, #20]
    return (out);
 8005336:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8005338:	4a16      	ldr	r2, [pc, #88]	@ (8005394 <Prismatic_velocity_control+0x148>)
 800533a:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 800533c:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <Prismatic_velocity_control+0x148>)
 800533e:	edd3 7a00 	vldr	s15, [r3]
 8005342:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8005346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534e:	dd03      	ble.n	8005358 <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 8005350:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <Prismatic_velocity_control+0x148>)
 8005352:	4a13      	ldr	r2, [pc, #76]	@ (80053a0 <Prismatic_velocity_control+0x154>)
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e00c      	b.n	8005372 <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8005358:	4b0e      	ldr	r3, [pc, #56]	@ (8005394 <Prismatic_velocity_control+0x148>)
 800535a:	edd3 7a00 	vldr	s15, [r3]
 800535e:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8005362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d502      	bpl.n	8005372 <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 800536c:	4b09      	ldr	r3, [pc, #36]	@ (8005394 <Prismatic_velocity_control+0x148>)
 800536e:	4a0d      	ldr	r2, [pc, #52]	@ (80053a4 <Prismatic_velocity_control+0x158>)
 8005370:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 8005372:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <Prismatic_velocity_control+0x144>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a06      	ldr	r2, [pc, #24]	@ (8005390 <Prismatic_velocity_control+0x144>)
 8005378:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 800537a:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <Prismatic_velocity_control+0x148>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	ee07 3a90 	vmov	s15, r3
}
 8005382:	eeb0 0a67 	vmov.f32	s0, s15
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	20000dfc 	.word	0x20000dfc
 8005394:	20000df4 	.word	0x20000df4
 8005398:	20000dc8 	.word	0x20000dc8
 800539c:	3a83126f 	.word	0x3a83126f
 80053a0:	41c00000 	.word	0x41c00000
 80053a4:	c1c00000 	.word	0xc1c00000

080053a8 <Revolute_position_control>:

float Revolute_position_control(float delta_posi) {
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 80053b2:	4a36      	ldr	r2, [pc, #216]	@ (800548c <Revolute_position_control+0xe4>)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 80053b8:	4b34      	ldr	r3, [pc, #208]	@ (800548c <Revolute_position_control+0xe4>)
 80053ba:	edd3 7a00 	vldr	s15, [r3]
 80053be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c6:	d50a      	bpl.n	80053de <Revolute_position_control+0x36>
 80053c8:	4b30      	ldr	r3, [pc, #192]	@ (800548c <Revolute_position_control+0xe4>)
 80053ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d6:	dd02      	ble.n	80053de <Revolute_position_control+0x36>
		anti_windup = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e014      	b.n	8005408 <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 80053de:	4b2b      	ldr	r3, [pc, #172]	@ (800548c <Revolute_position_control+0xe4>)
 80053e0:	edd3 7a00 	vldr	s15, [r3]
 80053e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ec:	dd0a      	ble.n	8005404 <Revolute_position_control+0x5c>
 80053ee:	4b27      	ldr	r3, [pc, #156]	@ (800548c <Revolute_position_control+0xe4>)
 80053f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80053f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fc:	d502      	bpl.n	8005404 <Revolute_position_control+0x5c>
		anti_windup = 0;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e001      	b.n	8005408 <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	4b21      	ldr	r3, [pc, #132]	@ (8005490 <Revolute_position_control+0xe8>)
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	ed93 7a00 	vldr	s14, [r3]
 8005416:	edd7 7a03 	vldr	s15, [r7, #12]
 800541a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	edd3 6a01 	vldr	s13, [r3, #4]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	edd3 7a03 	vldr	s15, [r3, #12]
 800542a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800542e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	edd3 6a02 	vldr	s13, [r3, #8]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	edd3 7a04 	vldr	s15, [r3, #16]
 800543e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800544c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005450:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	615a      	str	r2, [r3, #20]
    return (out);
 8005468:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 800546a:	4a0a      	ldr	r2, [pc, #40]	@ (8005494 <Revolute_position_control+0xec>)
 800546c:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <Revolute_position_control+0xe4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a06      	ldr	r2, [pc, #24]	@ (800548c <Revolute_position_control+0xe4>)
 8005474:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 8005476:	4b07      	ldr	r3, [pc, #28]	@ (8005494 <Revolute_position_control+0xec>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	ee07 3a90 	vmov	s15, r3
}
 800547e:	eeb0 0a67 	vmov.f32	s0, s15
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000e38 	.word	0x20000e38
 8005490:	20000e08 	.word	0x20000e08
 8005494:	20000e34 	.word	0x20000e34

08005498 <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] = delta_velo;
 80054a2:	4a47      	ldr	r2, [pc, #284]	@ (80055c0 <Revolute_velocity_control+0x128>)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 80054a8:	4b45      	ldr	r3, [pc, #276]	@ (80055c0 <Revolute_velocity_control+0x128>)
 80054aa:	edd3 7a00 	vldr	s15, [r3]
 80054ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	d50a      	bpl.n	80054ce <Revolute_velocity_control+0x36>
 80054b8:	4b41      	ldr	r3, [pc, #260]	@ (80055c0 <Revolute_velocity_control+0x128>)
 80054ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80054be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	dd02      	ble.n	80054ce <Revolute_velocity_control+0x36>
		anti_windup = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e014      	b.n	80054f8 <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 80054ce:	4b3c      	ldr	r3, [pc, #240]	@ (80055c0 <Revolute_velocity_control+0x128>)
 80054d0:	edd3 7a00 	vldr	s15, [r3]
 80054d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	dd0a      	ble.n	80054f4 <Revolute_velocity_control+0x5c>
 80054de:	4b38      	ldr	r3, [pc, #224]	@ (80055c0 <Revolute_velocity_control+0x128>)
 80054e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80054e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ec:	d502      	bpl.n	80054f4 <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e001      	b.n	80054f8 <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80054f4:	2301      	movs	r3, #1
 80054f6:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 80054f8:	4b32      	ldr	r3, [pc, #200]	@ (80055c4 <Revolute_velocity_control+0x12c>)
 80054fa:	edd3 7a00 	vldr	s15, [r3]
 80054fe:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8005502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	db07      	blt.n	800551c <Revolute_velocity_control+0x84>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 8005512:	4b2d      	ldr	r3, [pc, #180]	@ (80055c8 <Revolute_velocity_control+0x130>)
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	61da      	str	r2, [r3, #28]
 800551a:	e002      	b.n	8005522 <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 800551c:	4b2a      	ldr	r3, [pc, #168]	@ (80055c8 <Revolute_velocity_control+0x130>)
 800551e:	4a2b      	ldr	r2, [pc, #172]	@ (80055cc <Revolute_velocity_control+0x134>)
 8005520:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 8005522:	4b28      	ldr	r3, [pc, #160]	@ (80055c4 <Revolute_velocity_control+0x12c>)
 8005524:	edd3 7a00 	vldr	s15, [r3]
 8005528:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800552c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005534:	dd02      	ble.n	800553c <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 8005536:	4b23      	ldr	r3, [pc, #140]	@ (80055c4 <Revolute_velocity_control+0x12c>)
 8005538:	4a25      	ldr	r2, [pc, #148]	@ (80055d0 <Revolute_velocity_control+0x138>)
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	4b22      	ldr	r3, [pc, #136]	@ (80055c8 <Revolute_velocity_control+0x130>)
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	ed93 7a00 	vldr	s14, [r3]
 800554a:	edd7 7a03 	vldr	s15, [r7, #12]
 800554e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	edd3 6a01 	vldr	s13, [r3, #4]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	edd3 7a03 	vldr	s15, [r3, #12]
 800555e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8005562:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	edd3 6a02 	vldr	s13, [r3, #8]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8005580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005584:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	615a      	str	r2, [r3, #20]
    return (out);
 800559c:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 800559e:	4a09      	ldr	r2, [pc, #36]	@ (80055c4 <Revolute_velocity_control+0x12c>)
 80055a0:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 80055a2:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <Revolute_velocity_control+0x128>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a06      	ldr	r2, [pc, #24]	@ (80055c0 <Revolute_velocity_control+0x128>)
 80055a8:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <Revolute_velocity_control+0x12c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	ee07 3a90 	vmov	s15, r3
}
 80055b2:	eeb0 0a67 	vmov.f32	s0, s15
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000e78 	.word	0x20000e78
 80055c4:	20000e70 	.word	0x20000e70
 80055c8:	20000e44 	.word	0x20000e44
 80055cc:	3a83126f 	.word	0x3a83126f
 80055d0:	41900000 	.word	0x41900000

080055d4 <voltage_to_pwm>:

float voltage_to_pwm(float voltage) {
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 80055de:	edd7 7a01 	vldr	s15, [r7, #4]
 80055e2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800560c <voltage_to_pwm+0x38>
 80055e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055ea:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80055ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f2:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	ee07 3a90 	vmov	s15, r3
}
 80055fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	477fff00 	.word	0x477fff00

08005610 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 8005610:	b5b0      	push	{r4, r5, r7, lr}
 8005612:	af00      	add	r7, sp, #0
//					* 0.4);
//	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0));
//	encoder = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 8005614:	4b1a      	ldr	r3, [pc, #104]	@ (8005680 <Revolute_dis+0x70>)
 8005616:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800561a:	4b19      	ldr	r3, [pc, #100]	@ (8005680 <Revolute_dis+0x70>)
 800561c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005620:	f7fb f8e0 	bl	80007e4 <__aeabi_ddiv>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4614      	mov	r4, r2
 800562a:	461d      	mov	r5, r3
 800562c:	4b15      	ldr	r3, [pc, #84]	@ (8005684 <Revolute_dis+0x74>)
 800562e:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8005632:	4618      	mov	r0, r3
 8005634:	f7fa ff54 	bl	80004e0 <__aeabi_f2d>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
			* 1.0 / 3.3;
 800563c:	4620      	mov	r0, r4
 800563e:	4629      	mov	r1, r5
 8005640:	f7fa ffa6 	bl	8000590 <__aeabi_dmul>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	a30a      	add	r3, pc, #40	@ (adr r3, 8005678 <Revolute_dis+0x68>)
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f7fb f8c7 	bl	80007e4 <__aeabi_ddiv>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	f7fb fa67 	bl	8000b30 <__aeabi_d2f>
 8005662:	4603      	mov	r3, r0
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 8005664:	4a08      	ldr	r2, [pc, #32]	@ (8005688 <Revolute_dis+0x78>)
 8005666:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 8005668:	4b07      	ldr	r3, [pc, #28]	@ (8005688 <Revolute_dis+0x78>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	ee07 3a90 	vmov	s15, r3
}
 8005670:	eeb0 0a67 	vmov.f32	s0, s15
 8005674:	bdb0      	pop	{r4, r5, r7, pc}
 8005676:	bf00      	nop
 8005678:	66666666 	.word	0x66666666
 800567c:	400a6666 	.word	0x400a6666
 8005680:	20001510 	.word	0x20001510
 8005684:	200011b0 	.word	0x200011b0
 8005688:	20000d74 	.word	0x20000d74

0800568c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005690:	b672      	cpsid	i
}
 8005692:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <Error_Handler+0x8>

08005698 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800569c:	4b1b      	ldr	r3, [pc, #108]	@ (800570c <MX_SPI1_Init+0x74>)
 800569e:	4a1c      	ldr	r2, [pc, #112]	@ (8005710 <MX_SPI1_Init+0x78>)
 80056a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80056a2:	4b1a      	ldr	r3, [pc, #104]	@ (800570c <MX_SPI1_Init+0x74>)
 80056a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80056a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80056aa:	4b18      	ldr	r3, [pc, #96]	@ (800570c <MX_SPI1_Init+0x74>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80056b0:	4b16      	ldr	r3, [pc, #88]	@ (800570c <MX_SPI1_Init+0x74>)
 80056b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80056b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80056b8:	4b14      	ldr	r3, [pc, #80]	@ (800570c <MX_SPI1_Init+0x74>)
 80056ba:	2202      	movs	r2, #2
 80056bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80056be:	4b13      	ldr	r3, [pc, #76]	@ (800570c <MX_SPI1_Init+0x74>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80056c4:	4b11      	ldr	r3, [pc, #68]	@ (800570c <MX_SPI1_Init+0x74>)
 80056c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80056cc:	4b0f      	ldr	r3, [pc, #60]	@ (800570c <MX_SPI1_Init+0x74>)
 80056ce:	2238      	movs	r2, #56	@ 0x38
 80056d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80056d2:	4b0e      	ldr	r3, [pc, #56]	@ (800570c <MX_SPI1_Init+0x74>)
 80056d4:	2280      	movs	r2, #128	@ 0x80
 80056d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056d8:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <MX_SPI1_Init+0x74>)
 80056da:	2200      	movs	r2, #0
 80056dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056de:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <MX_SPI1_Init+0x74>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80056e4:	4b09      	ldr	r3, [pc, #36]	@ (800570c <MX_SPI1_Init+0x74>)
 80056e6:	2207      	movs	r2, #7
 80056e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056ea:	4b08      	ldr	r3, [pc, #32]	@ (800570c <MX_SPI1_Init+0x74>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80056f0:	4b06      	ldr	r3, [pc, #24]	@ (800570c <MX_SPI1_Init+0x74>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056f6:	4805      	ldr	r0, [pc, #20]	@ (800570c <MX_SPI1_Init+0x74>)
 80056f8:	f004 f844 	bl	8009784 <HAL_SPI_Init>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005702:	f7ff ffc3 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2000170c 	.word	0x2000170c
 8005710:	40013000 	.word	0x40013000

08005714 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	@ 0x28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800571c:	f107 0314 	add.w	r3, r7, #20
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	60da      	str	r2, [r3, #12]
 800572a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a25      	ldr	r2, [pc, #148]	@ (80057c8 <HAL_SPI_MspInit+0xb4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d144      	bne.n	80057c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005736:	4b25      	ldr	r3, [pc, #148]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 8005738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573a:	4a24      	ldr	r2, [pc, #144]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 800573c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005740:	6613      	str	r3, [r2, #96]	@ 0x60
 8005742:	4b22      	ldr	r3, [pc, #136]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 8005744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800574e:	4b1f      	ldr	r3, [pc, #124]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 8005750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005752:	4a1e      	ldr	r2, [pc, #120]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800575a:	4b1c      	ldr	r3, [pc, #112]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 800575c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005766:	4b19      	ldr	r3, [pc, #100]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 8005768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576a:	4a18      	ldr	r2, [pc, #96]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 800576c:	f043 0302 	orr.w	r3, r3, #2
 8005770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005772:	4b16      	ldr	r3, [pc, #88]	@ (80057cc <HAL_SPI_MspInit+0xb8>)
 8005774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800577e:	2320      	movs	r3, #32
 8005780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005782:	2302      	movs	r3, #2
 8005784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800578a:	2300      	movs	r3, #0
 800578c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800578e:	2305      	movs	r3, #5
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005792:	f107 0314 	add.w	r3, r7, #20
 8005796:	4619      	mov	r1, r3
 8005798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800579c:	f002 fe10 	bl	80083c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80057a0:	2330      	movs	r3, #48	@ 0x30
 80057a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a4:	2302      	movs	r3, #2
 80057a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ac:	2300      	movs	r3, #0
 80057ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80057b0:	2305      	movs	r3, #5
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057b4:	f107 0314 	add.w	r3, r7, #20
 80057b8:	4619      	mov	r1, r3
 80057ba:	4805      	ldr	r0, [pc, #20]	@ (80057d0 <HAL_SPI_MspInit+0xbc>)
 80057bc:	f002 fe00 	bl	80083c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80057c0:	bf00      	nop
 80057c2:	3728      	adds	r7, #40	@ 0x28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40013000 	.word	0x40013000
 80057cc:	40021000 	.word	0x40021000
 80057d0:	48000400 	.word	0x48000400

080057d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057da:	4b0f      	ldr	r3, [pc, #60]	@ (8005818 <HAL_MspInit+0x44>)
 80057dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057de:	4a0e      	ldr	r2, [pc, #56]	@ (8005818 <HAL_MspInit+0x44>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80057e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <HAL_MspInit+0x44>)
 80057e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	607b      	str	r3, [r7, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057f2:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <HAL_MspInit+0x44>)
 80057f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f6:	4a08      	ldr	r2, [pc, #32]	@ (8005818 <HAL_MspInit+0x44>)
 80057f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80057fe:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <HAL_MspInit+0x44>)
 8005800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800580a:	f003 f82f 	bl	800886c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000

0800581c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <NMI_Handler+0x4>

08005824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005828:	bf00      	nop
 800582a:	e7fd      	b.n	8005828 <HardFault_Handler+0x4>

0800582c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005830:	bf00      	nop
 8005832:	e7fd      	b.n	8005830 <MemManage_Handler+0x4>

08005834 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <BusFault_Handler+0x4>

0800583c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <UsageFault_Handler+0x4>

08005844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005856:	bf00      	nop
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005872:	f000 fe7b 	bl	800656c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005876:	bf00      	nop
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005880:	4802      	ldr	r0, [pc, #8]	@ (800588c <DMA1_Channel1_IRQHandler+0x10>)
 8005882:	f002 fc42 	bl	800810a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20001dd0 	.word	0x20001dd0

08005890 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8005894:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005898:	f002 ff2c 	bl	80086f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800589c:	bf00      	nop
 800589e:	bd80      	pop	{r7, pc}

080058a0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058a4:	4802      	ldr	r0, [pc, #8]	@ (80058b0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80058a6:	f005 f90d 	bl	800aac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20001770 	.word	0x20001770

080058b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058b8:	4803      	ldr	r0, [pc, #12]	@ (80058c8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80058ba:	f005 f903 	bl	800aac4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80058be:	4803      	ldr	r0, [pc, #12]	@ (80058cc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80058c0:	f005 f900 	bl	800aac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80058c4:	bf00      	nop
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20001770 	.word	0x20001770
 80058cc:	20001b6c 	.word	0x20001b6c

080058d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058d4:	4802      	ldr	r0, [pc, #8]	@ (80058e0 <TIM2_IRQHandler+0x10>)
 80058d6:	f005 f8f5 	bl	800aac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	2000183c 	.word	0x2000183c

080058e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058e8:	4802      	ldr	r0, [pc, #8]	@ (80058f4 <USART2_IRQHandler+0x10>)
 80058ea:	f006 ffef 	bl	800c8cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20001d04 	.word	0x20001d04

080058f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 80058fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005900:	f002 fef8 	bl	80086f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8005904:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005908:	f002 fef4 	bl	80086f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 800590c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005910:	f002 fef0 	bl	80086f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Left_Pin);
 8005914:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005918:	f002 feec 	bl	80086f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 800591c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005920:	f002 fee8 	bl	80086f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8005924:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005928:	f002 fee4 	bl	80086f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800592c:	bf00      	nop
 800592e:	bd80      	pop	{r7, pc}

08005930 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005934:	4b06      	ldr	r3, [pc, #24]	@ (8005950 <SystemInit+0x20>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593a:	4a05      	ldr	r2, [pc, #20]	@ (8005950 <SystemInit+0x20>)
 800593c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800595a:	f107 0310 	add.w	r3, r7, #16
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	609a      	str	r2, [r3, #8]
 8005966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005972:	4b20      	ldr	r3, [pc, #128]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 8005974:	4a20      	ldr	r2, [pc, #128]	@ (80059f8 <MX_TIM1_Init+0xa4>)
 8005976:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005978:	4b1e      	ldr	r3, [pc, #120]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 800597a:	2200      	movs	r2, #0
 800597c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800597e:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 8005980:	2200      	movs	r2, #0
 8005982:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8005984:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 8005986:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800598a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800598c:	4b19      	ldr	r3, [pc, #100]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 800598e:	2200      	movs	r2, #0
 8005990:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005992:	4b18      	ldr	r3, [pc, #96]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 8005994:	2200      	movs	r2, #0
 8005996:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005998:	4b16      	ldr	r3, [pc, #88]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800599e:	4815      	ldr	r0, [pc, #84]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 80059a0:	f004 fb1e 	bl	8009fe0 <HAL_TIM_Base_Init>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80059aa:	f7ff fe6f 	bl	800568c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80059b4:	f107 0310 	add.w	r3, r7, #16
 80059b8:	4619      	mov	r1, r3
 80059ba:	480e      	ldr	r0, [pc, #56]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 80059bc:	f005 fb8a 	bl	800b0d4 <HAL_TIM_ConfigClockSource>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80059c6:	f7ff fe61 	bl	800568c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ca:	2300      	movs	r3, #0
 80059cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80059d6:	1d3b      	adds	r3, r7, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4806      	ldr	r0, [pc, #24]	@ (80059f4 <MX_TIM1_Init+0xa0>)
 80059dc:	f006 fb60 	bl	800c0a0 <HAL_TIMEx_MasterConfigSynchronization>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80059e6:	f7ff fe51 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80059ea:	bf00      	nop
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20001770 	.word	0x20001770
 80059f8:	40012c00 	.word	0x40012c00

080059fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a02:	f107 0310 	add.w	r3, r7, #16
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
 8005a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	605a      	str	r2, [r3, #4]
 8005a18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005a20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a24:	22a9      	movs	r2, #169	@ 0xa9
 8005a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a28:	4b1a      	ldr	r3, [pc, #104]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005a2e:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a36:	4b17      	ldr	r3, [pc, #92]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a3c:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a42:	4814      	ldr	r0, [pc, #80]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a44:	f004 facc 	bl	8009fe0 <HAL_TIM_Base_Init>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005a4e:	f7ff fe1d 	bl	800568c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a58:	f107 0310 	add.w	r3, r7, #16
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	480d      	ldr	r0, [pc, #52]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a60:	f005 fb38 	bl	800b0d4 <HAL_TIM_ConfigClockSource>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005a6a:	f7ff fe0f 	bl	800568c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a76:	1d3b      	adds	r3, r7, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4806      	ldr	r0, [pc, #24]	@ (8005a94 <MX_TIM2_Init+0x98>)
 8005a7c:	f006 fb10 	bl	800c0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005a86:	f7ff fe01 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a8a:	bf00      	nop
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	2000183c 	.word	0x2000183c

08005a98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	@ 0x30
 8005a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a9e:	f107 030c 	add.w	r3, r7, #12
 8005aa2:	2224      	movs	r2, #36	@ 0x24
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f009 fdc0 	bl	800f62c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aac:	463b      	mov	r3, r7
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005ab6:	4b21      	ldr	r3, [pc, #132]	@ (8005b3c <MX_TIM3_Init+0xa4>)
 8005ab8:	4a21      	ldr	r2, [pc, #132]	@ (8005b40 <MX_TIM3_Init+0xa8>)
 8005aba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005abc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b3c <MX_TIM3_Init+0xa4>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b3c <MX_TIM3_Init+0xa4>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b3c <MX_TIM3_Init+0xa4>)
 8005aca:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8005ace:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b3c <MX_TIM3_Init+0xa4>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ad6:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <MX_TIM3_Init+0xa4>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005adc:	2303      	movs	r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005af0:	2300      	movs	r3, #0
 8005af2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005af4:	2301      	movs	r3, #1
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005b00:	f107 030c 	add.w	r3, r7, #12
 8005b04:	4619      	mov	r1, r3
 8005b06:	480d      	ldr	r0, [pc, #52]	@ (8005b3c <MX_TIM3_Init+0xa4>)
 8005b08:	f004 fe9a 	bl	800a840 <HAL_TIM_Encoder_Init>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8005b12:	f7ff fdbb 	bl	800568c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b16:	2300      	movs	r3, #0
 8005b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b1e:	463b      	mov	r3, r7
 8005b20:	4619      	mov	r1, r3
 8005b22:	4806      	ldr	r0, [pc, #24]	@ (8005b3c <MX_TIM3_Init+0xa4>)
 8005b24:	f006 fabc 	bl	800c0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005b2e:	f7ff fdad 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b32:	bf00      	nop
 8005b34:	3730      	adds	r7, #48	@ 0x30
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20001908 	.word	0x20001908
 8005b40:	40000400 	.word	0x40000400

08005b44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08c      	sub	sp, #48	@ 0x30
 8005b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b4a:	f107 030c 	add.w	r3, r7, #12
 8005b4e:	2224      	movs	r2, #36	@ 0x24
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f009 fd6a 	bl	800f62c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b58:	463b      	mov	r3, r7
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b62:	4b21      	ldr	r3, [pc, #132]	@ (8005be8 <MX_TIM4_Init+0xa4>)
 8005b64:	4a21      	ldr	r2, [pc, #132]	@ (8005bec <MX_TIM4_Init+0xa8>)
 8005b66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b68:	4b1f      	ldr	r3, [pc, #124]	@ (8005be8 <MX_TIM4_Init+0xa4>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005be8 <MX_TIM4_Init+0xa4>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8005b74:	4b1c      	ldr	r3, [pc, #112]	@ (8005be8 <MX_TIM4_Init+0xa4>)
 8005b76:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8005b7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <MX_TIM4_Init+0xa4>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b82:	4b19      	ldr	r3, [pc, #100]	@ (8005be8 <MX_TIM4_Init+0xa4>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005bac:	f107 030c 	add.w	r3, r7, #12
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	480d      	ldr	r0, [pc, #52]	@ (8005be8 <MX_TIM4_Init+0xa4>)
 8005bb4:	f004 fe44 	bl	800a840 <HAL_TIM_Encoder_Init>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005bbe:	f7ff fd65 	bl	800568c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005bca:	463b      	mov	r3, r7
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4806      	ldr	r0, [pc, #24]	@ (8005be8 <MX_TIM4_Init+0xa4>)
 8005bd0:	f006 fa66 	bl	800c0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005bda:	f7ff fd57 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005bde:	bf00      	nop
 8005be0:	3730      	adds	r7, #48	@ 0x30
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200019d4 	.word	0x200019d4
 8005bec:	40000800 	.word	0x40000800

08005bf0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b09c      	sub	sp, #112	@ 0x70
 8005bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bf6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
 8005c1c:	60da      	str	r2, [r3, #12]
 8005c1e:	611a      	str	r2, [r3, #16]
 8005c20:	615a      	str	r2, [r3, #20]
 8005c22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c24:	1d3b      	adds	r3, r7, #4
 8005c26:	2234      	movs	r2, #52	@ 0x34
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f009 fcfe 	bl	800f62c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005c30:	4b45      	ldr	r3, [pc, #276]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c32:	4a46      	ldr	r2, [pc, #280]	@ (8005d4c <MX_TIM8_Init+0x15c>)
 8005c34:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8005c36:	4b44      	ldr	r3, [pc, #272]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c38:	22a9      	movs	r2, #169	@ 0xa9
 8005c3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c3c:	4b42      	ldr	r3, [pc, #264]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8005c42:	4b41      	ldr	r3, [pc, #260]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c44:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005c48:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005c50:	4b3d      	ldr	r3, [pc, #244]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c56:	4b3c      	ldr	r3, [pc, #240]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005c5c:	483a      	ldr	r0, [pc, #232]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c5e:	f004 f9bf 	bl	8009fe0 <HAL_TIM_Base_Init>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8005c68:	f7ff fd10 	bl	800568c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c70:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005c72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005c76:	4619      	mov	r1, r3
 8005c78:	4833      	ldr	r0, [pc, #204]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c7a:	f005 fa2b 	bl	800b0d4 <HAL_TIM_ConfigClockSource>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8005c84:	f7ff fd02 	bl	800568c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005c88:	482f      	ldr	r0, [pc, #188]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005c8a:	f004 fb63 	bl	800a354 <HAL_TIM_PWM_Init>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8005c94:	f7ff fcfa 	bl	800568c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005ca4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4827      	ldr	r0, [pc, #156]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005cac:	f006 f9f8 	bl	800c0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8005cb6:	f7ff fce9 	bl	800568c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cba:	2360      	movs	r3, #96	@ 0x60
 8005cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005cd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005cda:	220c      	movs	r2, #12
 8005cdc:	4619      	mov	r1, r3
 8005cde:	481a      	ldr	r0, [pc, #104]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005ce0:	f005 f8e4 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8005cea:	f7ff fccf 	bl	800568c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005d26:	1d3b      	adds	r3, r7, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4807      	ldr	r0, [pc, #28]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005d2c:	f006 fa4e 	bl	800c1cc <HAL_TIMEx_ConfigBreakDeadTime>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8005d36:	f7ff fca9 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005d3a:	4803      	ldr	r0, [pc, #12]	@ (8005d48 <MX_TIM8_Init+0x158>)
 8005d3c:	f000 fa44 	bl	80061c8 <HAL_TIM_MspPostInit>

}
 8005d40:	bf00      	nop
 8005d42:	3770      	adds	r7, #112	@ 0x70
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20001aa0 	.word	0x20001aa0
 8005d4c:	40013400 	.word	0x40013400

08005d50 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b094      	sub	sp, #80	@ 0x50
 8005d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	605a      	str	r2, [r3, #4]
 8005d60:	609a      	str	r2, [r3, #8]
 8005d62:	60da      	str	r2, [r3, #12]
 8005d64:	611a      	str	r2, [r3, #16]
 8005d66:	615a      	str	r2, [r3, #20]
 8005d68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	2234      	movs	r2, #52	@ 0x34
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f009 fc5b 	bl	800f62c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005d76:	4b34      	ldr	r3, [pc, #208]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005d78:	4a34      	ldr	r2, [pc, #208]	@ (8005e4c <MX_TIM16_Init+0xfc>)
 8005d7a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8005d7c:	4b32      	ldr	r3, [pc, #200]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005d7e:	22a9      	movs	r2, #169	@ 0xa9
 8005d80:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d82:	4b31      	ldr	r3, [pc, #196]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8005d88:	4b2f      	ldr	r3, [pc, #188]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005d8a:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8005d8e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d90:	4b2d      	ldr	r3, [pc, #180]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005d96:	4b2c      	ldr	r3, [pc, #176]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005da2:	4829      	ldr	r0, [pc, #164]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005da4:	f004 f91c 	bl	8009fe0 <HAL_TIM_Base_Init>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8005dae:	f7ff fc6d 	bl	800568c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8005db2:	4825      	ldr	r0, [pc, #148]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005db4:	f004 fa60 	bl	800a278 <HAL_TIM_OC_Init>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8005dbe:	f7ff fc65 	bl	800568c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005dc2:	2108      	movs	r1, #8
 8005dc4:	4820      	ldr	r0, [pc, #128]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005dc6:	f004 fc45 	bl	800a654 <HAL_TIM_OnePulse_Init>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8005dd0:	f7ff fc5c 	bl	800568c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8005dd8:	f240 5399 	movw	r3, #1433	@ 0x599
 8005ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dde:	2300      	movs	r3, #0
 8005de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005de2:	2300      	movs	r3, #0
 8005de4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dea:	2300      	movs	r3, #0
 8005dec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dee:	2300      	movs	r3, #0
 8005df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005df2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005df6:	2200      	movs	r2, #0
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4813      	ldr	r0, [pc, #76]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005dfc:	f004 ffdc 	bl	800adb8 <HAL_TIM_OC_ConfigChannel>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8005e06:	f7ff fc41 	bl	800568c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4805      	ldr	r0, [pc, #20]	@ (8005e48 <MX_TIM16_Init+0xf8>)
 8005e32:	f006 f9cb 	bl	800c1cc <HAL_TIMEx_ConfigBreakDeadTime>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8005e3c:	f7ff fc26 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005e40:	bf00      	nop
 8005e42:	3750      	adds	r7, #80	@ 0x50
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20001b6c 	.word	0x20001b6c
 8005e4c:	40014400 	.word	0x40014400

08005e50 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b09c      	sub	sp, #112	@ 0x70
 8005e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e56:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	609a      	str	r2, [r3, #8]
 8005e7c:	60da      	str	r2, [r3, #12]
 8005e7e:	611a      	str	r2, [r3, #16]
 8005e80:	615a      	str	r2, [r3, #20]
 8005e82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	2234      	movs	r2, #52	@ 0x34
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f009 fbce 	bl	800f62c <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005e90:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005e92:	4a4c      	ldr	r2, [pc, #304]	@ (8005fc4 <MX_TIM20_Init+0x174>)
 8005e94:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8005e96:	4b4a      	ldr	r3, [pc, #296]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e9c:	4b48      	ldr	r3, [pc, #288]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8005ea2:	4b47      	ldr	r3, [pc, #284]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005ea4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ea8:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eaa:	4b45      	ldr	r3, [pc, #276]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8005eb0:	4b43      	ldr	r3, [pc, #268]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eb6:	4b42      	ldr	r3, [pc, #264]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8005ebc:	4840      	ldr	r0, [pc, #256]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005ebe:	f004 f88f 	bl	8009fe0 <HAL_TIM_Base_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8005ec8:	f7ff fbe0 	bl	800568c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ed0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8005ed2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4839      	ldr	r0, [pc, #228]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005eda:	f005 f8fb 	bl	800b0d4 <HAL_TIM_ConfigClockSource>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8005ee4:	f7ff fbd2 	bl	800568c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8005ee8:	4835      	ldr	r0, [pc, #212]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005eea:	f004 fa33 	bl	800a354 <HAL_TIM_PWM_Init>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8005ef4:	f7ff fbca 	bl	800568c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005efc:	2300      	movs	r3, #0
 8005efe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005f04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005f08:	4619      	mov	r1, r3
 8005f0a:	482d      	ldr	r0, [pc, #180]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005f0c:	f006 f8c8 	bl	800c0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8005f16:	f7ff fbb9 	bl	800568c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f1a:	2360      	movs	r3, #96	@ 0x60
 8005f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f22:	2300      	movs	r3, #0
 8005f24:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f26:	2300      	movs	r3, #0
 8005f28:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f32:	2300      	movs	r3, #0
 8005f34:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4820      	ldr	r0, [pc, #128]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005f40:	f004 ffb4 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8005f4a:	f7ff fb9f 	bl	800568c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f52:	2208      	movs	r2, #8
 8005f54:	4619      	mov	r1, r3
 8005f56:	481a      	ldr	r0, [pc, #104]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005f58:	f004 ffa8 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8005f62:	f7ff fb93 	bl	800568c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005f84:	2300      	movs	r3, #0
 8005f86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005f8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005f96:	2300      	movs	r3, #0
 8005f98:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4807      	ldr	r0, [pc, #28]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005fa4:	f006 f912 	bl	800c1cc <HAL_TIMEx_ConfigBreakDeadTime>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8005fae:	f7ff fb6d 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8005fb2:	4803      	ldr	r0, [pc, #12]	@ (8005fc0 <MX_TIM20_Init+0x170>)
 8005fb4:	f000 f908 	bl	80061c8 <HAL_TIM_MspPostInit>

}
 8005fb8:	bf00      	nop
 8005fba:	3770      	adds	r7, #112	@ 0x70
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20001c38 	.word	0x20001c38
 8005fc4:	40015000 	.word	0x40015000

08005fc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3d      	ldr	r2, [pc, #244]	@ (80060cc <HAL_TIM_Base_MspInit+0x104>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d11c      	bne.n	8006014 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fda:	4b3d      	ldr	r3, [pc, #244]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8005fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fde:	4a3c      	ldr	r2, [pc, #240]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8005fe0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005fe4:	6613      	str	r3, [r2, #96]	@ 0x60
 8005fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	2018      	movs	r0, #24
 8005ff8:	f001 fe6f 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005ffc:	2018      	movs	r0, #24
 8005ffe:	f001 fe86 	bl	8007d0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006002:	2200      	movs	r2, #0
 8006004:	2100      	movs	r1, #0
 8006006:	2019      	movs	r0, #25
 8006008:	f001 fe67 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800600c:	2019      	movs	r0, #25
 800600e:	f001 fe7e 	bl	8007d0e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8006012:	e056      	b.n	80060c2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800601c:	d114      	bne.n	8006048 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800601e:	4b2c      	ldr	r3, [pc, #176]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006022:	4a2b      	ldr	r2, [pc, #172]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	6593      	str	r3, [r2, #88]	@ 0x58
 800602a:	4b29      	ldr	r3, [pc, #164]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006036:	2200      	movs	r2, #0
 8006038:	2100      	movs	r1, #0
 800603a:	201c      	movs	r0, #28
 800603c:	f001 fe4d 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006040:	201c      	movs	r0, #28
 8006042:	f001 fe64 	bl	8007d0e <HAL_NVIC_EnableIRQ>
}
 8006046:	e03c      	b.n	80060c2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a21      	ldr	r2, [pc, #132]	@ (80060d4 <HAL_TIM_Base_MspInit+0x10c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d10c      	bne.n	800606c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006052:	4b1f      	ldr	r3, [pc, #124]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8006054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006056:	4a1e      	ldr	r2, [pc, #120]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8006058:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800605c:	6613      	str	r3, [r2, #96]	@ 0x60
 800605e:	4b1c      	ldr	r3, [pc, #112]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8006060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	697b      	ldr	r3, [r7, #20]
}
 800606a:	e02a      	b.n	80060c2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a19      	ldr	r2, [pc, #100]	@ (80060d8 <HAL_TIM_Base_MspInit+0x110>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d114      	bne.n	80060a0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006076:	4b16      	ldr	r3, [pc, #88]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8006078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800607a:	4a15      	ldr	r2, [pc, #84]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 800607c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006080:	6613      	str	r3, [r2, #96]	@ 0x60
 8006082:	4b13      	ldr	r3, [pc, #76]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 8006084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800608e:	2200      	movs	r2, #0
 8006090:	2100      	movs	r1, #0
 8006092:	2019      	movs	r0, #25
 8006094:	f001 fe21 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006098:	2019      	movs	r0, #25
 800609a:	f001 fe38 	bl	8007d0e <HAL_NVIC_EnableIRQ>
}
 800609e:	e010      	b.n	80060c2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0d      	ldr	r2, [pc, #52]	@ (80060dc <HAL_TIM_Base_MspInit+0x114>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10b      	bne.n	80060c2 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80060aa:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 80060ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ae:	4a08      	ldr	r2, [pc, #32]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 80060b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80060b6:	4b06      	ldr	r3, [pc, #24]	@ (80060d0 <HAL_TIM_Base_MspInit+0x108>)
 80060b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40021000 	.word	0x40021000
 80060d4:	40013400 	.word	0x40013400
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40015000 	.word	0x40015000

080060e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08c      	sub	sp, #48	@ 0x30
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e8:	f107 031c 	add.w	r3, r7, #28
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2f      	ldr	r2, [pc, #188]	@ (80061bc <HAL_TIM_Encoder_MspInit+0xdc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d129      	bne.n	8006156 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006102:	4b2f      	ldr	r3, [pc, #188]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006106:	4a2e      	ldr	r2, [pc, #184]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006108:	f043 0302 	orr.w	r3, r3, #2
 800610c:	6593      	str	r3, [r2, #88]	@ 0x58
 800610e:	4b2c      	ldr	r3, [pc, #176]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800611a:	4b29      	ldr	r3, [pc, #164]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800611c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611e:	4a28      	ldr	r2, [pc, #160]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006126:	4b26      	ldr	r3, [pc, #152]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8006132:	23c0      	movs	r3, #192	@ 0xc0
 8006134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006136:	2302      	movs	r3, #2
 8006138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613a:	2300      	movs	r3, #0
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800613e:	2300      	movs	r3, #0
 8006140:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006142:	2302      	movs	r3, #2
 8006144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006146:	f107 031c 	add.w	r3, r7, #28
 800614a:	4619      	mov	r1, r3
 800614c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006150:	f002 f936 	bl	80083c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006154:	e02e      	b.n	80061b4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1a      	ldr	r2, [pc, #104]	@ (80061c4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d129      	bne.n	80061b4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006160:	4b17      	ldr	r3, [pc, #92]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006164:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006166:	f043 0304 	orr.w	r3, r3, #4
 800616a:	6593      	str	r3, [r2, #88]	@ 0x58
 800616c:	4b14      	ldr	r3, [pc, #80]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006178:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800617a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617c:	4a10      	ldr	r2, [pc, #64]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006184:	4b0e      	ldr	r3, [pc, #56]	@ (80061c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8006190:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006196:	2302      	movs	r3, #2
 8006198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619a:	2300      	movs	r3, #0
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800619e:	2300      	movs	r3, #0
 80061a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80061a2:	230a      	movs	r3, #10
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061a6:	f107 031c 	add.w	r3, r7, #28
 80061aa:	4619      	mov	r1, r3
 80061ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061b0:	f002 f906 	bl	80083c0 <HAL_GPIO_Init>
}
 80061b4:	bf00      	nop
 80061b6:	3730      	adds	r7, #48	@ 0x30
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40000800 	.word	0x40000800

080061c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	@ 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d0:	f107 0314 	add.w	r3, r7, #20
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	605a      	str	r2, [r3, #4]
 80061da:	609a      	str	r2, [r3, #8]
 80061dc:	60da      	str	r2, [r3, #12]
 80061de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a31      	ldr	r2, [pc, #196]	@ (80062ac <HAL_TIM_MspPostInit+0xe4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d11d      	bne.n	8006226 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ea:	4b31      	ldr	r3, [pc, #196]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 80061ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ee:	4a30      	ldr	r2, [pc, #192]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 80061f0:	f043 0304 	orr.w	r3, r3, #4
 80061f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061f6:	4b2e      	ldr	r3, [pc, #184]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 80061f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8006202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006208:	2302      	movs	r3, #2
 800620a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006210:	2300      	movs	r3, #0
 8006212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8006214:	2304      	movs	r3, #4
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8006218:	f107 0314 	add.w	r3, r7, #20
 800621c:	4619      	mov	r1, r3
 800621e:	4825      	ldr	r0, [pc, #148]	@ (80062b4 <HAL_TIM_MspPostInit+0xec>)
 8006220:	f002 f8ce 	bl	80083c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8006224:	e03d      	b.n	80062a2 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a23      	ldr	r2, [pc, #140]	@ (80062b8 <HAL_TIM_MspPostInit+0xf0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d138      	bne.n	80062a2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006230:	4b1f      	ldr	r3, [pc, #124]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 8006232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006234:	4a1e      	ldr	r2, [pc, #120]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 8006236:	f043 0302 	orr.w	r3, r3, #2
 800623a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800623c:	4b1c      	ldr	r3, [pc, #112]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 800623e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006248:	4b19      	ldr	r3, [pc, #100]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 800624a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624c:	4a18      	ldr	r2, [pc, #96]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 800624e:	f043 0304 	orr.w	r3, r3, #4
 8006252:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006254:	4b16      	ldr	r3, [pc, #88]	@ (80062b0 <HAL_TIM_MspPostInit+0xe8>)
 8006256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8006260:	2304      	movs	r3, #4
 8006262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006264:	2302      	movs	r3, #2
 8006266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006268:	2300      	movs	r3, #0
 800626a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800626c:	2300      	movs	r3, #0
 800626e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8006270:	2303      	movs	r3, #3
 8006272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8006274:	f107 0314 	add.w	r3, r7, #20
 8006278:	4619      	mov	r1, r3
 800627a:	4810      	ldr	r0, [pc, #64]	@ (80062bc <HAL_TIM_MspPostInit+0xf4>)
 800627c:	f002 f8a0 	bl	80083c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8006280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006286:	2302      	movs	r3, #2
 8006288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628e:	2300      	movs	r3, #0
 8006290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8006292:	2306      	movs	r3, #6
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8006296:	f107 0314 	add.w	r3, r7, #20
 800629a:	4619      	mov	r1, r3
 800629c:	4805      	ldr	r0, [pc, #20]	@ (80062b4 <HAL_TIM_MspPostInit+0xec>)
 800629e:	f002 f88f 	bl	80083c0 <HAL_GPIO_Init>
}
 80062a2:	bf00      	nop
 80062a4:	3728      	adds	r7, #40	@ 0x28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40021000 	.word	0x40021000
 80062b4:	48000800 	.word	0x48000800
 80062b8:	40015000 	.word	0x40015000
 80062bc:	48000400 	.word	0x48000400

080062c0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062c4:	4b23      	ldr	r3, [pc, #140]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062c6:	4a24      	ldr	r2, [pc, #144]	@ (8006358 <MX_USART2_UART_Init+0x98>)
 80062c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062ca:	4b22      	ldr	r3, [pc, #136]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80062d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80062d2:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80062d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062da:	4b1e      	ldr	r3, [pc, #120]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062dc:	2200      	movs	r2, #0
 80062de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80062e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062ea:	220c      	movs	r2, #12
 80062ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062ee:	4b19      	ldr	r3, [pc, #100]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062f4:	4b17      	ldr	r3, [pc, #92]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062fa:	4b16      	ldr	r3, [pc, #88]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006300:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 8006302:	2200      	movs	r2, #0
 8006304:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006306:	4b13      	ldr	r3, [pc, #76]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 8006308:	2200      	movs	r2, #0
 800630a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800630c:	4811      	ldr	r0, [pc, #68]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 800630e:	f006 f841 	bl	800c394 <HAL_UART_Init>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8006318:	f7ff f9b8 	bl	800568c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800631c:	2100      	movs	r1, #0
 800631e:	480d      	ldr	r0, [pc, #52]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 8006320:	f008 fbc3 	bl	800eaaa <HAL_UARTEx_SetTxFifoThreshold>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800632a:	f7ff f9af 	bl	800568c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800632e:	2100      	movs	r1, #0
 8006330:	4808      	ldr	r0, [pc, #32]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 8006332:	f008 fbf8 	bl	800eb26 <HAL_UARTEx_SetRxFifoThreshold>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800633c:	f7ff f9a6 	bl	800568c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006340:	4804      	ldr	r0, [pc, #16]	@ (8006354 <MX_USART2_UART_Init+0x94>)
 8006342:	f008 fb79 	bl	800ea38 <HAL_UARTEx_DisableFifoMode>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800634c:	f7ff f99e 	bl	800568c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006350:	bf00      	nop
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20001d04 	.word	0x20001d04
 8006358:	40004400 	.word	0x40004400

0800635c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b09e      	sub	sp, #120	@ 0x78
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006364:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006374:	f107 0310 	add.w	r3, r7, #16
 8006378:	2254      	movs	r2, #84	@ 0x54
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f009 f955 	bl	800f62c <memset>
  if(uartHandle->Instance==USART2)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a37      	ldr	r2, [pc, #220]	@ (8006464 <HAL_UART_MspInit+0x108>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d167      	bne.n	800645c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800638c:	2302      	movs	r3, #2
 800638e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006394:	f107 0310 	add.w	r3, r7, #16
 8006398:	4618      	mov	r0, r3
 800639a:	f002 ffa5 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80063a4:	f7ff f972 	bl	800568c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80063a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006468 <HAL_UART_MspInit+0x10c>)
 80063aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006468 <HAL_UART_MspInit+0x10c>)
 80063ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80063b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006468 <HAL_UART_MspInit+0x10c>)
 80063b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063c0:	4b29      	ldr	r3, [pc, #164]	@ (8006468 <HAL_UART_MspInit+0x10c>)
 80063c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063c4:	4a28      	ldr	r2, [pc, #160]	@ (8006468 <HAL_UART_MspInit+0x10c>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063cc:	4b26      	ldr	r3, [pc, #152]	@ (8006468 <HAL_UART_MspInit+0x10c>)
 80063ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80063d8:	230c      	movs	r3, #12
 80063da:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063dc:	2302      	movs	r3, #2
 80063de:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063e4:	2300      	movs	r3, #0
 80063e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063e8:	2307      	movs	r3, #7
 80063ea:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80063f0:	4619      	mov	r1, r3
 80063f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80063f6:	f001 ffe3 	bl	80083c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80063fa:	4b1c      	ldr	r3, [pc, #112]	@ (800646c <HAL_UART_MspInit+0x110>)
 80063fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006470 <HAL_UART_MspInit+0x114>)
 80063fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006400:	4b1a      	ldr	r3, [pc, #104]	@ (800646c <HAL_UART_MspInit+0x110>)
 8006402:	221b      	movs	r2, #27
 8006404:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006406:	4b19      	ldr	r3, [pc, #100]	@ (800646c <HAL_UART_MspInit+0x110>)
 8006408:	2210      	movs	r2, #16
 800640a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800640c:	4b17      	ldr	r3, [pc, #92]	@ (800646c <HAL_UART_MspInit+0x110>)
 800640e:	2200      	movs	r2, #0
 8006410:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006412:	4b16      	ldr	r3, [pc, #88]	@ (800646c <HAL_UART_MspInit+0x110>)
 8006414:	2280      	movs	r2, #128	@ 0x80
 8006416:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006418:	4b14      	ldr	r3, [pc, #80]	@ (800646c <HAL_UART_MspInit+0x110>)
 800641a:	2200      	movs	r2, #0
 800641c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800641e:	4b13      	ldr	r3, [pc, #76]	@ (800646c <HAL_UART_MspInit+0x110>)
 8006420:	2200      	movs	r2, #0
 8006422:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006424:	4b11      	ldr	r3, [pc, #68]	@ (800646c <HAL_UART_MspInit+0x110>)
 8006426:	2200      	movs	r2, #0
 8006428:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800642a:	4b10      	ldr	r3, [pc, #64]	@ (800646c <HAL_UART_MspInit+0x110>)
 800642c:	2200      	movs	r2, #0
 800642e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006430:	480e      	ldr	r0, [pc, #56]	@ (800646c <HAL_UART_MspInit+0x110>)
 8006432:	f001 fc87 	bl	8007d44 <HAL_DMA_Init>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800643c:	f7ff f926 	bl	800568c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a0a      	ldr	r2, [pc, #40]	@ (800646c <HAL_UART_MspInit+0x110>)
 8006444:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006446:	4a09      	ldr	r2, [pc, #36]	@ (800646c <HAL_UART_MspInit+0x110>)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800644c:	2200      	movs	r2, #0
 800644e:	2100      	movs	r1, #0
 8006450:	2026      	movs	r0, #38	@ 0x26
 8006452:	f001 fc42 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006456:	2026      	movs	r0, #38	@ 0x26
 8006458:	f001 fc59 	bl	8007d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800645c:	bf00      	nop
 800645e:	3778      	adds	r7, #120	@ 0x78
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40004400 	.word	0x40004400
 8006468:	40021000 	.word	0x40021000
 800646c:	20001dd0 	.word	0x20001dd0
 8006470:	40020008 	.word	0x40020008

08006474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006474:	480d      	ldr	r0, [pc, #52]	@ (80064ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006476:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006478:	f7ff fa5a 	bl	8005930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800647c:	480c      	ldr	r0, [pc, #48]	@ (80064b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800647e:	490d      	ldr	r1, [pc, #52]	@ (80064b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006480:	4a0d      	ldr	r2, [pc, #52]	@ (80064b8 <LoopForever+0xe>)
  movs r3, #0
 8006482:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006484:	e002      	b.n	800648c <LoopCopyDataInit>

08006486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800648a:	3304      	adds	r3, #4

0800648c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800648c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800648e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006490:	d3f9      	bcc.n	8006486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006492:	4a0a      	ldr	r2, [pc, #40]	@ (80064bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8006494:	4c0a      	ldr	r4, [pc, #40]	@ (80064c0 <LoopForever+0x16>)
  movs r3, #0
 8006496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006498:	e001      	b.n	800649e <LoopFillZerobss>

0800649a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800649a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800649c:	3204      	adds	r2, #4

0800649e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800649e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064a0:	d3fb      	bcc.n	800649a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80064a2:	f009 f8d1 	bl	800f648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80064a6:	f7fd f96b 	bl	8003780 <main>

080064aa <LoopForever>:

LoopForever:
    b LoopForever
 80064aa:	e7fe      	b.n	80064aa <LoopForever>
  ldr   r0, =_estack
 80064ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80064b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064b4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80064b8:	08011808 	.word	0x08011808
  ldr r2, =_sbss
 80064bc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80064c0:	20001f6c 	.word	0x20001f6c

080064c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80064c4:	e7fe      	b.n	80064c4 <ADC1_2_IRQHandler>

080064c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064d0:	2003      	movs	r0, #3
 80064d2:	f001 fbf7 	bl	8007cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064d6:	2000      	movs	r0, #0
 80064d8:	f000 f80e 	bl	80064f8 <HAL_InitTick>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	71fb      	strb	r3, [r7, #7]
 80064e6:	e001      	b.n	80064ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064e8:	f7ff f974 	bl	80057d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064ec:	79fb      	ldrb	r3, [r7, #7]

}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006504:	4b16      	ldr	r3, [pc, #88]	@ (8006560 <HAL_InitTick+0x68>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d022      	beq.n	8006552 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800650c:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <HAL_InitTick+0x6c>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b13      	ldr	r3, [pc, #76]	@ (8006560 <HAL_InitTick+0x68>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006518:	fbb1 f3f3 	udiv	r3, r1, r3
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fc02 	bl	8007d2a <HAL_SYSTICK_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10f      	bne.n	800654c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b0f      	cmp	r3, #15
 8006530:	d809      	bhi.n	8006546 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006532:	2200      	movs	r2, #0
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	f001 fbce 	bl	8007cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800653e:	4a0a      	ldr	r2, [pc, #40]	@ (8006568 <HAL_InitTick+0x70>)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e007      	b.n	8006556 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
 800654a:	e004      	b.n	8006556 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
 8006550:	e001      	b.n	8006556 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20000214 	.word	0x20000214
 8006564:	2000020c 	.word	0x2000020c
 8006568:	20000210 	.word	0x20000210

0800656c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006570:	4b05      	ldr	r3, [pc, #20]	@ (8006588 <HAL_IncTick+0x1c>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4b05      	ldr	r3, [pc, #20]	@ (800658c <HAL_IncTick+0x20>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4413      	add	r3, r2
 800657a:	4a03      	ldr	r2, [pc, #12]	@ (8006588 <HAL_IncTick+0x1c>)
 800657c:	6013      	str	r3, [r2, #0]
}
 800657e:	bf00      	nop
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	20001e30 	.word	0x20001e30
 800658c:	20000214 	.word	0x20000214

08006590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  return uwTick;
 8006594:	4b03      	ldr	r3, [pc, #12]	@ (80065a4 <HAL_GetTick+0x14>)
 8006596:	681b      	ldr	r3, [r3, #0]
}
 8006598:	4618      	mov	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20001e30 	.word	0x20001e30

080065a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	609a      	str	r2, [r3, #8]
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3360      	adds	r3, #96	@ 0x60
 8006622:	461a      	mov	r2, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	4b08      	ldr	r3, [pc, #32]	@ (8006654 <LL_ADC_SetOffset+0x44>)
 8006632:	4013      	ands	r3, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	4313      	orrs	r3, r2
 8006640:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	03fff000 	.word	0x03fff000

08006658 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3360      	adds	r3, #96	@ 0x60
 8006666:	461a      	mov	r2, r3
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3360      	adds	r3, #96	@ 0x60
 8006694:	461a      	mov	r2, r3
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	431a      	orrs	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b087      	sub	sp, #28
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3360      	adds	r3, #96	@ 0x60
 80066ca:	461a      	mov	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	431a      	orrs	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3360      	adds	r3, #96	@ 0x60
 8006700:	461a      	mov	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	431a      	orrs	r2, r3
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	615a      	str	r2, [r3, #20]
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3330      	adds	r3, #48	@ 0x30
 800675c:	461a      	mov	r2, r3
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	0a1b      	lsrs	r3, r3, #8
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	4413      	add	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	211f      	movs	r1, #31
 8006778:	fa01 f303 	lsl.w	r3, r1, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	401a      	ands	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	0e9b      	lsrs	r3, r3, #26
 8006784:	f003 011f 	and.w	r1, r3, #31
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	fa01 f303 	lsl.w	r3, r1, r3
 8006792:	431a      	orrs	r2, r3
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3314      	adds	r3, #20
 80067b4:	461a      	mov	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	0e5b      	lsrs	r3, r3, #25
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	4413      	add	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	0d1b      	lsrs	r3, r3, #20
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	2107      	movs	r1, #7
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	43db      	mvns	r3, r3
 80067d8:	401a      	ands	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	0d1b      	lsrs	r3, r3, #20
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	fa01 f303 	lsl.w	r3, r1, r3
 80067e8:	431a      	orrs	r2, r3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006814:	43db      	mvns	r3, r3
 8006816:	401a      	ands	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f003 0318 	and.w	r3, r3, #24
 800681e:	4908      	ldr	r1, [pc, #32]	@ (8006840 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006820:	40d9      	lsrs	r1, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	400b      	ands	r3, r1
 8006826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682a:	431a      	orrs	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	0007ffff 	.word	0x0007ffff

08006844 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 031f 	and.w	r3, r3, #31
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6093      	str	r3, [r2, #8]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006898:	d101      	bne.n	800689e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80068bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80068c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e8:	d101      	bne.n	80068ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800690c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006910:	f043 0201 	orr.w	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <LL_ADC_IsEnabled+0x18>
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <LL_ADC_IsEnabled+0x1a>
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800695a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800695e:	f043 0204 	orr.w	r2, r3, #4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b04      	cmp	r3, #4
 8006984:	d101      	bne.n	800698a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d101      	bne.n	80069b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b089      	sub	sp, #36	@ 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e1a9      	b.n	8006d2e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7fc fd3f 	bl	800346c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff ff3f 	bl	8006884 <LL_ADC_IsDeepPowerDownEnabled>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff25 	bl	8006860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff ff5a 	bl	80068d4 <LL_ADC_IsInternalRegulatorEnabled>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d115      	bne.n	8006a52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff ff3e 	bl	80068ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a30:	4b9c      	ldr	r3, [pc, #624]	@ (8006ca4 <HAL_ADC_Init+0x2e4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	099b      	lsrs	r3, r3, #6
 8006a36:	4a9c      	ldr	r2, [pc, #624]	@ (8006ca8 <HAL_ADC_Init+0x2e8>)
 8006a38:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3c:	099b      	lsrs	r3, r3, #6
 8006a3e:	3301      	adds	r3, #1
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006a44:	e002      	b.n	8006a4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f9      	bne.n	8006a46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff ff3c 	bl	80068d4 <LL_ADC_IsInternalRegulatorEnabled>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10d      	bne.n	8006a7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a66:	f043 0210 	orr.w	r2, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a72:	f043 0201 	orr.w	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff ff75 	bl	8006972 <LL_ADC_REG_IsConversionOngoing>
 8006a88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f040 8142 	bne.w	8006d1c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 813e 	bne.w	8006d1c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006aa8:	f043 0202 	orr.w	r2, r3, #2
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff ff35 	bl	8006924 <LL_ADC_IsEnabled>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d141      	bne.n	8006b44 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ac8:	d004      	beq.n	8006ad4 <HAL_ADC_Init+0x114>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a77      	ldr	r2, [pc, #476]	@ (8006cac <HAL_ADC_Init+0x2ec>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10f      	bne.n	8006af4 <HAL_ADC_Init+0x134>
 8006ad4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006ad8:	f7ff ff24 	bl	8006924 <LL_ADC_IsEnabled>
 8006adc:	4604      	mov	r4, r0
 8006ade:	4873      	ldr	r0, [pc, #460]	@ (8006cac <HAL_ADC_Init+0x2ec>)
 8006ae0:	f7ff ff20 	bl	8006924 <LL_ADC_IsEnabled>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4323      	orrs	r3, r4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	e012      	b.n	8006b1a <HAL_ADC_Init+0x15a>
 8006af4:	486e      	ldr	r0, [pc, #440]	@ (8006cb0 <HAL_ADC_Init+0x2f0>)
 8006af6:	f7ff ff15 	bl	8006924 <LL_ADC_IsEnabled>
 8006afa:	4604      	mov	r4, r0
 8006afc:	486d      	ldr	r0, [pc, #436]	@ (8006cb4 <HAL_ADC_Init+0x2f4>)
 8006afe:	f7ff ff11 	bl	8006924 <LL_ADC_IsEnabled>
 8006b02:	4603      	mov	r3, r0
 8006b04:	431c      	orrs	r4, r3
 8006b06:	486c      	ldr	r0, [pc, #432]	@ (8006cb8 <HAL_ADC_Init+0x2f8>)
 8006b08:	f7ff ff0c 	bl	8006924 <LL_ADC_IsEnabled>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4323      	orrs	r3, r4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d012      	beq.n	8006b44 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b26:	d004      	beq.n	8006b32 <HAL_ADC_Init+0x172>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a5f      	ldr	r2, [pc, #380]	@ (8006cac <HAL_ADC_Init+0x2ec>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d101      	bne.n	8006b36 <HAL_ADC_Init+0x176>
 8006b32:	4a62      	ldr	r2, [pc, #392]	@ (8006cbc <HAL_ADC_Init+0x2fc>)
 8006b34:	e000      	b.n	8006b38 <HAL_ADC_Init+0x178>
 8006b36:	4a62      	ldr	r2, [pc, #392]	@ (8006cc0 <HAL_ADC_Init+0x300>)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7ff fd32 	bl	80065a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7f5b      	ldrb	r3, [r3, #29]
 8006b48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006b54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006b5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d106      	bne.n	8006b80 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b76:	3b01      	subs	r3, #1
 8006b78:	045b      	lsls	r3, r3, #17
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	4b48      	ldr	r3, [pc, #288]	@ (8006cc4 <HAL_ADC_Init+0x304>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	69b9      	ldr	r1, [r7, #24]
 8006bac:	430b      	orrs	r3, r1
 8006bae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fee4 	bl	8006998 <LL_ADC_INJ_IsConversionOngoing>
 8006bd0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d17f      	bne.n	8006cd8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d17c      	bne.n	8006cd8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006be2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006bea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006bec:	4313      	orrs	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bfa:	f023 0302 	bic.w	r3, r3, #2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	69b9      	ldr	r1, [r7, #24]
 8006c04:	430b      	orrs	r3, r1
 8006c06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d017      	beq.n	8006c40 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006c1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006c2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6911      	ldr	r1, [r2, #16]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6812      	ldr	r2, [r2, #0]
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006c3e:	e013      	b.n	8006c68 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006c4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6812      	ldr	r2, [r2, #0]
 8006c5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c64:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d12a      	bne.n	8006cc8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c7c:	f023 0304 	bic.w	r3, r3, #4
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c88:	4311      	orrs	r1, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c8e:	4311      	orrs	r1, r2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c94:	430a      	orrs	r2, r1
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	611a      	str	r2, [r3, #16]
 8006ca2:	e019      	b.n	8006cd8 <HAL_ADC_Init+0x318>
 8006ca4:	2000020c 	.word	0x2000020c
 8006ca8:	053e2d63 	.word	0x053e2d63
 8006cac:	50000100 	.word	0x50000100
 8006cb0:	50000400 	.word	0x50000400
 8006cb4:	50000500 	.word	0x50000500
 8006cb8:	50000600 	.word	0x50000600
 8006cbc:	50000300 	.word	0x50000300
 8006cc0:	50000700 	.word	0x50000700
 8006cc4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0201 	bic.w	r2, r2, #1
 8006cd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10c      	bne.n	8006cfa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	f023 010f 	bic.w	r1, r3, #15
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	1e5a      	subs	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cf8:	e007      	b.n	8006d0a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 020f 	bic.w	r2, r2, #15
 8006d08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	f043 0201 	orr.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d1a:	e007      	b.n	8006d2c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d20:	f043 0210 	orr.w	r2, r3, #16
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3724      	adds	r7, #36	@ 0x24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd90      	pop	{r4, r7, pc}
 8006d36:	bf00      	nop

08006d38 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d48:	d004      	beq.n	8006d54 <HAL_ADC_Start+0x1c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a67      	ldr	r2, [pc, #412]	@ (8006eec <HAL_ADC_Start+0x1b4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d101      	bne.n	8006d58 <HAL_ADC_Start+0x20>
 8006d54:	4b66      	ldr	r3, [pc, #408]	@ (8006ef0 <HAL_ADC_Start+0x1b8>)
 8006d56:	e000      	b.n	8006d5a <HAL_ADC_Start+0x22>
 8006d58:	4b66      	ldr	r3, [pc, #408]	@ (8006ef4 <HAL_ADC_Start+0x1bc>)
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fd72 	bl	8006844 <LL_ADC_GetMultimode>
 8006d60:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff fe03 	bl	8006972 <LL_ADC_REG_IsConversionOngoing>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f040 80b4 	bne.w	8006edc <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_ADC_Start+0x4a>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e0af      	b.n	8006ee2 <HAL_ADC_Start+0x1aa>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fd06 	bl	800779c <ADC_Enable>
 8006d90:	4603      	mov	r3, r0
 8006d92:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f040 809b 	bne.w	8006ed2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006da0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a4d      	ldr	r2, [pc, #308]	@ (8006eec <HAL_ADC_Start+0x1b4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d009      	beq.n	8006dce <HAL_ADC_Start+0x96>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8006ef8 <HAL_ADC_Start+0x1c0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d002      	beq.n	8006dca <HAL_ADC_Start+0x92>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	e003      	b.n	8006dd2 <HAL_ADC_Start+0x9a>
 8006dca:	4b4c      	ldr	r3, [pc, #304]	@ (8006efc <HAL_ADC_Start+0x1c4>)
 8006dcc:	e001      	b.n	8006dd2 <HAL_ADC_Start+0x9a>
 8006dce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d002      	beq.n	8006de0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d105      	bne.n	8006dec <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006de4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df8:	d106      	bne.n	8006e08 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dfe:	f023 0206 	bic.w	r2, r3, #6
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	661a      	str	r2, [r3, #96]	@ 0x60
 8006e06:	e002      	b.n	8006e0e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	221c      	movs	r2, #28
 8006e14:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a32      	ldr	r2, [pc, #200]	@ (8006eec <HAL_ADC_Start+0x1b4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <HAL_ADC_Start+0x104>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a32      	ldr	r2, [pc, #200]	@ (8006ef8 <HAL_ADC_Start+0x1c0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d002      	beq.n	8006e38 <HAL_ADC_Start+0x100>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	e003      	b.n	8006e40 <HAL_ADC_Start+0x108>
 8006e38:	4b30      	ldr	r3, [pc, #192]	@ (8006efc <HAL_ADC_Start+0x1c4>)
 8006e3a:	e001      	b.n	8006e40 <HAL_ADC_Start+0x108>
 8006e3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6812      	ldr	r2, [r2, #0]
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d008      	beq.n	8006e5a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b05      	cmp	r3, #5
 8006e52:	d002      	beq.n	8006e5a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b09      	cmp	r3, #9
 8006e58:	d114      	bne.n	8006e84 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006e70:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fd64 	bl	800694a <LL_ADC_REG_StartConversion>
 8006e82:	e02d      	b.n	8006ee0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e88:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a15      	ldr	r2, [pc, #84]	@ (8006eec <HAL_ADC_Start+0x1b4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_ADC_Start+0x176>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a16      	ldr	r2, [pc, #88]	@ (8006ef8 <HAL_ADC_Start+0x1c0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d002      	beq.n	8006eaa <HAL_ADC_Start+0x172>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	e003      	b.n	8006eb2 <HAL_ADC_Start+0x17a>
 8006eaa:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <HAL_ADC_Start+0x1c4>)
 8006eac:	e001      	b.n	8006eb2 <HAL_ADC_Start+0x17a>
 8006eae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006eb2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00f      	beq.n	8006ee0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006ec8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ed0:	e006      	b.n	8006ee0 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006eda:	e001      	b.n	8006ee0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006edc:	2302      	movs	r3, #2
 8006ede:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	50000100 	.word	0x50000100
 8006ef0:	50000300 	.word	0x50000300
 8006ef4:	50000700 	.word	0x50000700
 8006ef8:	50000500 	.word	0x50000500
 8006efc:	50000400 	.word	0x50000400

08006f00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
	...

08006f1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b0b6      	sub	sp, #216	@ 0xd8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d102      	bne.n	8006f40 <HAL_ADC_ConfigChannel+0x24>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	f000 bc13 	b.w	8007766 <HAL_ADC_ConfigChannel+0x84a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff fd10 	bl	8006972 <LL_ADC_REG_IsConversionOngoing>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f040 83f3 	bne.w	8007740 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6859      	ldr	r1, [r3, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	f7ff fbf0 	bl	800674c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff fcfe 	bl	8006972 <LL_ADC_REG_IsConversionOngoing>
 8006f76:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff fd0a 	bl	8006998 <LL_ADC_INJ_IsConversionOngoing>
 8006f84:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 81d9 	bne.w	8007344 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 81d4 	bne.w	8007344 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fa4:	d10f      	bne.n	8006fc6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f7ff fbf7 	bl	80067a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff fbb1 	bl	8006726 <LL_ADC_SetSamplingTimeCommonConfig>
 8006fc4:	e00e      	b.n	8006fe4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6819      	ldr	r1, [r3, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f7ff fbe6 	bl	80067a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff fba1 	bl	8006726 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695a      	ldr	r2, [r3, #20]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	08db      	lsrs	r3, r3, #3
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d022      	beq.n	800704c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6919      	ldr	r1, [r3, #16]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007016:	f7ff fafb 	bl	8006610 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6919      	ldr	r1, [r3, #16]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	461a      	mov	r2, r3
 8007028:	f7ff fb47 	bl	80066ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007038:	2b01      	cmp	r3, #1
 800703a:	d102      	bne.n	8007042 <HAL_ADC_ConfigChannel+0x126>
 800703c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007040:	e000      	b.n	8007044 <HAL_ADC_ConfigChannel+0x128>
 8007042:	2300      	movs	r3, #0
 8007044:	461a      	mov	r2, r3
 8007046:	f7ff fb53 	bl	80066f0 <LL_ADC_SetOffsetSaturation>
 800704a:	e17b      	b.n	8007344 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fb00 	bl	8006658 <LL_ADC_GetOffsetChannel>
 8007058:	4603      	mov	r3, r0
 800705a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <HAL_ADC_ConfigChannel+0x15c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2100      	movs	r1, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff faf5 	bl	8006658 <LL_ADC_GetOffsetChannel>
 800706e:	4603      	mov	r3, r0
 8007070:	0e9b      	lsrs	r3, r3, #26
 8007072:	f003 021f 	and.w	r2, r3, #31
 8007076:	e01e      	b.n	80070b6 <HAL_ADC_ConfigChannel+0x19a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff faea 	bl	8006658 <LL_ADC_GetOffsetChannel>
 8007084:	4603      	mov	r3, r0
 8007086:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800708e:	fa93 f3a3 	rbit	r3, r3
 8007092:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800709a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800709e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80070a6:	2320      	movs	r3, #32
 80070a8:	e004      	b.n	80070b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80070aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070ae:	fab3 f383 	clz	r3, r3
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <HAL_ADC_ConfigChannel+0x1b2>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	0e9b      	lsrs	r3, r3, #26
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	e018      	b.n	8007100 <HAL_ADC_ConfigChannel+0x1e4>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070da:	fa93 f3a3 	rbit	r3, r3
 80070de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80070e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80070ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80070f2:	2320      	movs	r3, #32
 80070f4:	e004      	b.n	8007100 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80070f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070fa:	fab3 f383 	clz	r3, r3
 80070fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007100:	429a      	cmp	r2, r3
 8007102:	d106      	bne.n	8007112 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2200      	movs	r2, #0
 800710a:	2100      	movs	r1, #0
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff fab9 	bl	8006684 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2101      	movs	r1, #1
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fa9d 	bl	8006658 <LL_ADC_GetOffsetChannel>
 800711e:	4603      	mov	r3, r0
 8007120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <HAL_ADC_ConfigChannel+0x222>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2101      	movs	r1, #1
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fa92 	bl	8006658 <LL_ADC_GetOffsetChannel>
 8007134:	4603      	mov	r3, r0
 8007136:	0e9b      	lsrs	r3, r3, #26
 8007138:	f003 021f 	and.w	r2, r3, #31
 800713c:	e01e      	b.n	800717c <HAL_ADC_ConfigChannel+0x260>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2101      	movs	r1, #1
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fa87 	bl	8006658 <LL_ADC_GetOffsetChannel>
 800714a:	4603      	mov	r3, r0
 800714c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007154:	fa93 f3a3 	rbit	r3, r3
 8007158:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800715c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800716c:	2320      	movs	r3, #32
 800716e:	e004      	b.n	800717a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007174:	fab3 f383 	clz	r3, r3
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <HAL_ADC_ConfigChannel+0x278>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	0e9b      	lsrs	r3, r3, #26
 800718e:	f003 031f 	and.w	r3, r3, #31
 8007192:	e018      	b.n	80071c6 <HAL_ADC_ConfigChannel+0x2aa>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071a0:	fa93 f3a3 	rbit	r3, r3
 80071a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80071a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80071b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80071b8:	2320      	movs	r3, #32
 80071ba:	e004      	b.n	80071c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80071bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071c0:	fab3 f383 	clz	r3, r3
 80071c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d106      	bne.n	80071d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2200      	movs	r2, #0
 80071d0:	2101      	movs	r1, #1
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fa56 	bl	8006684 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2102      	movs	r1, #2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fa3a 	bl	8006658 <LL_ADC_GetOffsetChannel>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <HAL_ADC_ConfigChannel+0x2e8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2102      	movs	r1, #2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fa2f 	bl	8006658 <LL_ADC_GetOffsetChannel>
 80071fa:	4603      	mov	r3, r0
 80071fc:	0e9b      	lsrs	r3, r3, #26
 80071fe:	f003 021f 	and.w	r2, r3, #31
 8007202:	e01e      	b.n	8007242 <HAL_ADC_ConfigChannel+0x326>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2102      	movs	r1, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fa24 	bl	8006658 <LL_ADC_GetOffsetChannel>
 8007210:	4603      	mov	r3, r0
 8007212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800721a:	fa93 f3a3 	rbit	r3, r3
 800721e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007222:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800722a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8007232:	2320      	movs	r3, #32
 8007234:	e004      	b.n	8007240 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8007236:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800723a:	fab3 f383 	clz	r3, r3
 800723e:	b2db      	uxtb	r3, r3
 8007240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800724a:	2b00      	cmp	r3, #0
 800724c:	d105      	bne.n	800725a <HAL_ADC_ConfigChannel+0x33e>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	0e9b      	lsrs	r3, r3, #26
 8007254:	f003 031f 	and.w	r3, r3, #31
 8007258:	e016      	b.n	8007288 <HAL_ADC_ConfigChannel+0x36c>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007262:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007266:	fa93 f3a3 	rbit	r3, r3
 800726a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800726c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800726e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007272:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800727a:	2320      	movs	r3, #32
 800727c:	e004      	b.n	8007288 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800727e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007282:	fab3 f383 	clz	r3, r3
 8007286:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007288:	429a      	cmp	r2, r3
 800728a:	d106      	bne.n	800729a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2200      	movs	r2, #0
 8007292:	2102      	movs	r1, #2
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff f9f5 	bl	8006684 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2103      	movs	r1, #3
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff f9d9 	bl	8006658 <LL_ADC_GetOffsetChannel>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <HAL_ADC_ConfigChannel+0x3aa>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2103      	movs	r1, #3
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff f9ce 	bl	8006658 <LL_ADC_GetOffsetChannel>
 80072bc:	4603      	mov	r3, r0
 80072be:	0e9b      	lsrs	r3, r3, #26
 80072c0:	f003 021f 	and.w	r2, r3, #31
 80072c4:	e017      	b.n	80072f6 <HAL_ADC_ConfigChannel+0x3da>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2103      	movs	r1, #3
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff f9c3 	bl	8006658 <LL_ADC_GetOffsetChannel>
 80072d2:	4603      	mov	r3, r0
 80072d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072d8:	fa93 f3a3 	rbit	r3, r3
 80072dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80072de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80072e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80072e8:	2320      	movs	r3, #32
 80072ea:	e003      	b.n	80072f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80072ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ee:	fab3 f383 	clz	r3, r3
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d105      	bne.n	800730e <HAL_ADC_ConfigChannel+0x3f2>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	0e9b      	lsrs	r3, r3, #26
 8007308:	f003 031f 	and.w	r3, r3, #31
 800730c:	e011      	b.n	8007332 <HAL_ADC_ConfigChannel+0x416>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007316:	fa93 f3a3 	rbit	r3, r3
 800731a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800731c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800731e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007326:	2320      	movs	r3, #32
 8007328:	e003      	b.n	8007332 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800732a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800732c:	fab3 f383 	clz	r3, r3
 8007330:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007332:	429a      	cmp	r2, r3
 8007334:	d106      	bne.n	8007344 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2200      	movs	r2, #0
 800733c:	2103      	movs	r1, #3
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff f9a0 	bl	8006684 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff faeb 	bl	8006924 <LL_ADC_IsEnabled>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 813d 	bne.w	80075d0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	461a      	mov	r2, r3
 8007364:	f7ff fa4a 	bl	80067fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	4aa2      	ldr	r2, [pc, #648]	@ (80075f8 <HAL_ADC_ConfigChannel+0x6dc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	f040 812e 	bne.w	80075d0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <HAL_ADC_ConfigChannel+0x480>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	0e9b      	lsrs	r3, r3, #26
 800738a:	3301      	adds	r3, #1
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	2b09      	cmp	r3, #9
 8007392:	bf94      	ite	ls
 8007394:	2301      	movls	r3, #1
 8007396:	2300      	movhi	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	e019      	b.n	80073d0 <HAL_ADC_ConfigChannel+0x4b4>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073a4:	fa93 f3a3 	rbit	r3, r3
 80073a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80073aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80073ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80073b4:	2320      	movs	r3, #32
 80073b6:	e003      	b.n	80073c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80073b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073ba:	fab3 f383 	clz	r3, r3
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	3301      	adds	r3, #1
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	2b09      	cmp	r3, #9
 80073c8:	bf94      	ite	ls
 80073ca:	2301      	movls	r3, #1
 80073cc:	2300      	movhi	r3, #0
 80073ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d079      	beq.n	80074c8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d107      	bne.n	80073f0 <HAL_ADC_ConfigChannel+0x4d4>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	0e9b      	lsrs	r3, r3, #26
 80073e6:	3301      	adds	r3, #1
 80073e8:	069b      	lsls	r3, r3, #26
 80073ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073ee:	e015      	b.n	800741c <HAL_ADC_ConfigChannel+0x500>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f8:	fa93 f3a3 	rbit	r3, r3
 80073fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80073fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007400:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007408:	2320      	movs	r3, #32
 800740a:	e003      	b.n	8007414 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800740c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800740e:	fab3 f383 	clz	r3, r3
 8007412:	b2db      	uxtb	r3, r3
 8007414:	3301      	adds	r3, #1
 8007416:	069b      	lsls	r3, r3, #26
 8007418:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <HAL_ADC_ConfigChannel+0x520>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	0e9b      	lsrs	r3, r3, #26
 800742e:	3301      	adds	r3, #1
 8007430:	f003 031f 	and.w	r3, r3, #31
 8007434:	2101      	movs	r1, #1
 8007436:	fa01 f303 	lsl.w	r3, r1, r3
 800743a:	e017      	b.n	800746c <HAL_ADC_ConfigChannel+0x550>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007444:	fa93 f3a3 	rbit	r3, r3
 8007448:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800744a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800744c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800744e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007454:	2320      	movs	r3, #32
 8007456:	e003      	b.n	8007460 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800745a:	fab3 f383 	clz	r3, r3
 800745e:	b2db      	uxtb	r3, r3
 8007460:	3301      	adds	r3, #1
 8007462:	f003 031f 	and.w	r3, r3, #31
 8007466:	2101      	movs	r1, #1
 8007468:	fa01 f303 	lsl.w	r3, r1, r3
 800746c:	ea42 0103 	orr.w	r1, r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x576>
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	0e9b      	lsrs	r3, r3, #26
 8007482:	3301      	adds	r3, #1
 8007484:	f003 021f 	and.w	r2, r3, #31
 8007488:	4613      	mov	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4413      	add	r3, r2
 800748e:	051b      	lsls	r3, r3, #20
 8007490:	e018      	b.n	80074c4 <HAL_ADC_ConfigChannel+0x5a8>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749a:	fa93 f3a3 	rbit	r3, r3
 800749e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80074a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80074a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80074aa:	2320      	movs	r3, #32
 80074ac:	e003      	b.n	80074b6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80074ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b0:	fab3 f383 	clz	r3, r3
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	3301      	adds	r3, #1
 80074b8:	f003 021f 	and.w	r2, r3, #31
 80074bc:	4613      	mov	r3, r2
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	4413      	add	r3, r2
 80074c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074c4:	430b      	orrs	r3, r1
 80074c6:	e07e      	b.n	80075c6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d107      	bne.n	80074e4 <HAL_ADC_ConfigChannel+0x5c8>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	0e9b      	lsrs	r3, r3, #26
 80074da:	3301      	adds	r3, #1
 80074dc:	069b      	lsls	r3, r3, #26
 80074de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074e2:	e015      	b.n	8007510 <HAL_ADC_ConfigChannel+0x5f4>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ec:	fa93 f3a3 	rbit	r3, r3
 80074f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80074fc:	2320      	movs	r3, #32
 80074fe:	e003      	b.n	8007508 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007502:	fab3 f383 	clz	r3, r3
 8007506:	b2db      	uxtb	r3, r3
 8007508:	3301      	adds	r3, #1
 800750a:	069b      	lsls	r3, r3, #26
 800750c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <HAL_ADC_ConfigChannel+0x614>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	0e9b      	lsrs	r3, r3, #26
 8007522:	3301      	adds	r3, #1
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2101      	movs	r1, #1
 800752a:	fa01 f303 	lsl.w	r3, r1, r3
 800752e:	e017      	b.n	8007560 <HAL_ADC_ConfigChannel+0x644>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	fa93 f3a3 	rbit	r3, r3
 800753c:	61fb      	str	r3, [r7, #28]
  return result;
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007548:	2320      	movs	r3, #32
 800754a:	e003      	b.n	8007554 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	fab3 f383 	clz	r3, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	3301      	adds	r3, #1
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	2101      	movs	r1, #1
 800755c:	fa01 f303 	lsl.w	r3, r1, r3
 8007560:	ea42 0103 	orr.w	r1, r2, r3
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10d      	bne.n	800758c <HAL_ADC_ConfigChannel+0x670>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	0e9b      	lsrs	r3, r3, #26
 8007576:	3301      	adds	r3, #1
 8007578:	f003 021f 	and.w	r2, r3, #31
 800757c:	4613      	mov	r3, r2
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4413      	add	r3, r2
 8007582:	3b1e      	subs	r3, #30
 8007584:	051b      	lsls	r3, r3, #20
 8007586:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800758a:	e01b      	b.n	80075c4 <HAL_ADC_ConfigChannel+0x6a8>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	fa93 f3a3 	rbit	r3, r3
 8007598:	613b      	str	r3, [r7, #16]
  return result;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80075a4:	2320      	movs	r3, #32
 80075a6:	e003      	b.n	80075b0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	fab3 f383 	clz	r3, r3
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	3301      	adds	r3, #1
 80075b2:	f003 021f 	and.w	r2, r3, #31
 80075b6:	4613      	mov	r3, r2
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	4413      	add	r3, r2
 80075bc:	3b1e      	subs	r3, #30
 80075be:	051b      	lsls	r3, r3, #20
 80075c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075ca:	4619      	mov	r1, r3
 80075cc:	f7ff f8ea 	bl	80067a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	4b09      	ldr	r3, [pc, #36]	@ (80075fc <HAL_ADC_ConfigChannel+0x6e0>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80be 	beq.w	800775a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075e6:	d004      	beq.n	80075f2 <HAL_ADC_ConfigChannel+0x6d6>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a04      	ldr	r2, [pc, #16]	@ (8007600 <HAL_ADC_ConfigChannel+0x6e4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d10a      	bne.n	8007608 <HAL_ADC_ConfigChannel+0x6ec>
 80075f2:	4b04      	ldr	r3, [pc, #16]	@ (8007604 <HAL_ADC_ConfigChannel+0x6e8>)
 80075f4:	e009      	b.n	800760a <HAL_ADC_ConfigChannel+0x6ee>
 80075f6:	bf00      	nop
 80075f8:	407f0000 	.word	0x407f0000
 80075fc:	80080000 	.word	0x80080000
 8007600:	50000100 	.word	0x50000100
 8007604:	50000300 	.word	0x50000300
 8007608:	4b59      	ldr	r3, [pc, #356]	@ (8007770 <HAL_ADC_ConfigChannel+0x854>)
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fff2 	bl	80065f4 <LL_ADC_GetCommonPathInternalCh>
 8007610:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a56      	ldr	r2, [pc, #344]	@ (8007774 <HAL_ADC_ConfigChannel+0x858>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <HAL_ADC_ConfigChannel+0x70c>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a55      	ldr	r2, [pc, #340]	@ (8007778 <HAL_ADC_ConfigChannel+0x85c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d13a      	bne.n	800769e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800762c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d134      	bne.n	800769e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800763c:	d005      	beq.n	800764a <HAL_ADC_ConfigChannel+0x72e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a4e      	ldr	r2, [pc, #312]	@ (800777c <HAL_ADC_ConfigChannel+0x860>)
 8007644:	4293      	cmp	r3, r2
 8007646:	f040 8085 	bne.w	8007754 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007652:	d004      	beq.n	800765e <HAL_ADC_ConfigChannel+0x742>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a49      	ldr	r2, [pc, #292]	@ (8007780 <HAL_ADC_ConfigChannel+0x864>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d101      	bne.n	8007662 <HAL_ADC_ConfigChannel+0x746>
 800765e:	4a49      	ldr	r2, [pc, #292]	@ (8007784 <HAL_ADC_ConfigChannel+0x868>)
 8007660:	e000      	b.n	8007664 <HAL_ADC_ConfigChannel+0x748>
 8007662:	4a43      	ldr	r2, [pc, #268]	@ (8007770 <HAL_ADC_ConfigChannel+0x854>)
 8007664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007668:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f7fe ffad 	bl	80065ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007674:	4b44      	ldr	r3, [pc, #272]	@ (8007788 <HAL_ADC_ConfigChannel+0x86c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	099b      	lsrs	r3, r3, #6
 800767a:	4a44      	ldr	r2, [pc, #272]	@ (800778c <HAL_ADC_ConfigChannel+0x870>)
 800767c:	fba2 2303 	umull	r2, r3, r2, r3
 8007680:	099b      	lsrs	r3, r3, #6
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	4613      	mov	r3, r2
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800768e:	e002      	b.n	8007696 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3b01      	subs	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f9      	bne.n	8007690 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800769c:	e05a      	b.n	8007754 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a3b      	ldr	r2, [pc, #236]	@ (8007790 <HAL_ADC_ConfigChannel+0x874>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d125      	bne.n	80076f4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80076a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11f      	bne.n	80076f4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a31      	ldr	r2, [pc, #196]	@ (8007780 <HAL_ADC_ConfigChannel+0x864>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d104      	bne.n	80076c8 <HAL_ADC_ConfigChannel+0x7ac>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a34      	ldr	r2, [pc, #208]	@ (8007794 <HAL_ADC_ConfigChannel+0x878>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d047      	beq.n	8007758 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076d0:	d004      	beq.n	80076dc <HAL_ADC_ConfigChannel+0x7c0>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007780 <HAL_ADC_ConfigChannel+0x864>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d101      	bne.n	80076e0 <HAL_ADC_ConfigChannel+0x7c4>
 80076dc:	4a29      	ldr	r2, [pc, #164]	@ (8007784 <HAL_ADC_ConfigChannel+0x868>)
 80076de:	e000      	b.n	80076e2 <HAL_ADC_ConfigChannel+0x7c6>
 80076e0:	4a23      	ldr	r2, [pc, #140]	@ (8007770 <HAL_ADC_ConfigChannel+0x854>)
 80076e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f7fe ff6e 	bl	80065ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076f2:	e031      	b.n	8007758 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a27      	ldr	r2, [pc, #156]	@ (8007798 <HAL_ADC_ConfigChannel+0x87c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d12d      	bne.n	800775a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d127      	bne.n	800775a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a1c      	ldr	r2, [pc, #112]	@ (8007780 <HAL_ADC_ConfigChannel+0x864>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d022      	beq.n	800775a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800771c:	d004      	beq.n	8007728 <HAL_ADC_ConfigChannel+0x80c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a17      	ldr	r2, [pc, #92]	@ (8007780 <HAL_ADC_ConfigChannel+0x864>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d101      	bne.n	800772c <HAL_ADC_ConfigChannel+0x810>
 8007728:	4a16      	ldr	r2, [pc, #88]	@ (8007784 <HAL_ADC_ConfigChannel+0x868>)
 800772a:	e000      	b.n	800772e <HAL_ADC_ConfigChannel+0x812>
 800772c:	4a10      	ldr	r2, [pc, #64]	@ (8007770 <HAL_ADC_ConfigChannel+0x854>)
 800772e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007732:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f7fe ff48 	bl	80065ce <LL_ADC_SetCommonPathInternalCh>
 800773e:	e00c      	b.n	800775a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007744:	f043 0220 	orr.w	r2, r3, #32
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007752:	e002      	b.n	800775a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007754:	bf00      	nop
 8007756:	e000      	b.n	800775a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007758:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007762:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007766:	4618      	mov	r0, r3
 8007768:	37d8      	adds	r7, #216	@ 0xd8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	50000700 	.word	0x50000700
 8007774:	c3210000 	.word	0xc3210000
 8007778:	90c00010 	.word	0x90c00010
 800777c:	50000600 	.word	0x50000600
 8007780:	50000100 	.word	0x50000100
 8007784:	50000300 	.word	0x50000300
 8007788:	2000020c 	.word	0x2000020c
 800778c:	053e2d63 	.word	0x053e2d63
 8007790:	c7520000 	.word	0xc7520000
 8007794:	50000500 	.word	0x50000500
 8007798:	cb840000 	.word	0xcb840000

0800779c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff f8b9 	bl	8006924 <LL_ADC_IsEnabled>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d176      	bne.n	80078a6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	4b3c      	ldr	r3, [pc, #240]	@ (80078b0 <ADC_Enable+0x114>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00d      	beq.n	80077e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ca:	f043 0210 	orr.w	r2, r3, #16
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d6:	f043 0201 	orr.w	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e062      	b.n	80078a8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff f888 	bl	80068fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077f4:	d004      	beq.n	8007800 <ADC_Enable+0x64>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2e      	ldr	r2, [pc, #184]	@ (80078b4 <ADC_Enable+0x118>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d101      	bne.n	8007804 <ADC_Enable+0x68>
 8007800:	4b2d      	ldr	r3, [pc, #180]	@ (80078b8 <ADC_Enable+0x11c>)
 8007802:	e000      	b.n	8007806 <ADC_Enable+0x6a>
 8007804:	4b2d      	ldr	r3, [pc, #180]	@ (80078bc <ADC_Enable+0x120>)
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fef4 	bl	80065f4 <LL_ADC_GetCommonPathInternalCh>
 800780c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800780e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007812:	2b00      	cmp	r3, #0
 8007814:	d013      	beq.n	800783e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007816:	4b2a      	ldr	r3, [pc, #168]	@ (80078c0 <ADC_Enable+0x124>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	099b      	lsrs	r3, r3, #6
 800781c:	4a29      	ldr	r2, [pc, #164]	@ (80078c4 <ADC_Enable+0x128>)
 800781e:	fba2 2303 	umull	r2, r3, r2, r3
 8007822:	099b      	lsrs	r3, r3, #6
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	4613      	mov	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007830:	e002      	b.n	8007838 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3b01      	subs	r3, #1
 8007836:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f9      	bne.n	8007832 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800783e:	f7fe fea7 	bl	8006590 <HAL_GetTick>
 8007842:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007844:	e028      	b.n	8007898 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff f86a 	bl	8006924 <LL_ADC_IsEnabled>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff f84e 	bl	80068fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007860:	f7fe fe96 	bl	8006590 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d914      	bls.n	8007898 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b01      	cmp	r3, #1
 800787a:	d00d      	beq.n	8007898 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007880:	f043 0210 	orr.w	r2, r3, #16
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800788c:	f043 0201 	orr.w	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e007      	b.n	80078a8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d1cf      	bne.n	8007846 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	8000003f 	.word	0x8000003f
 80078b4:	50000100 	.word	0x50000100
 80078b8:	50000300 	.word	0x50000300
 80078bc:	50000700 	.word	0x50000700
 80078c0:	2000020c 	.word	0x2000020c
 80078c4:	053e2d63 	.word	0x053e2d63

080078c8 <LL_ADC_IsEnabled>:
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <LL_ADC_IsEnabled+0x18>
 80078dc:	2301      	movs	r3, #1
 80078de:	e000      	b.n	80078e2 <LL_ADC_IsEnabled+0x1a>
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <LL_ADC_REG_IsConversionOngoing>:
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d101      	bne.n	8007906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007902:	2301      	movs	r3, #1
 8007904:	e000      	b.n	8007908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007914:	b590      	push	{r4, r7, lr}
 8007916:	b0a1      	sub	sp, #132	@ 0x84
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800792e:	2302      	movs	r3, #2
 8007930:	e0e7      	b.n	8007b02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800793a:	2300      	movs	r3, #0
 800793c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800793e:	2300      	movs	r3, #0
 8007940:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800794a:	d102      	bne.n	8007952 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800794c:	4b6f      	ldr	r3, [pc, #444]	@ (8007b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	e009      	b.n	8007966 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a6e      	ldr	r2, [pc, #440]	@ (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d102      	bne.n	8007962 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800795c:	4b6d      	ldr	r3, [pc, #436]	@ (8007b14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800795e:	60bb      	str	r3, [r7, #8]
 8007960:	e001      	b.n	8007966 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0be      	b.n	8007b02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff ffb1 	bl	80078ee <LL_ADC_REG_IsConversionOngoing>
 800798c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff ffab 	bl	80078ee <LL_ADC_REG_IsConversionOngoing>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 80a0 	bne.w	8007ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80079a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f040 809c 	bne.w	8007ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079b0:	d004      	beq.n	80079bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a55      	ldr	r2, [pc, #340]	@ (8007b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d101      	bne.n	80079c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80079bc:	4b56      	ldr	r3, [pc, #344]	@ (8007b18 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80079be:	e000      	b.n	80079c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80079c0:	4b56      	ldr	r3, [pc, #344]	@ (8007b1c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80079c2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d04b      	beq.n	8007a64 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80079cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	6859      	ldr	r1, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079de:	035b      	lsls	r3, r3, #13
 80079e0:	430b      	orrs	r3, r1
 80079e2:	431a      	orrs	r2, r3
 80079e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079f0:	d004      	beq.n	80079fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a45      	ldr	r2, [pc, #276]	@ (8007b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d10f      	bne.n	8007a1c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80079fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007a00:	f7ff ff62 	bl	80078c8 <LL_ADC_IsEnabled>
 8007a04:	4604      	mov	r4, r0
 8007a06:	4841      	ldr	r0, [pc, #260]	@ (8007b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a08:	f7ff ff5e 	bl	80078c8 <LL_ADC_IsEnabled>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	4323      	orrs	r3, r4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf0c      	ite	eq
 8007a14:	2301      	moveq	r3, #1
 8007a16:	2300      	movne	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e012      	b.n	8007a42 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007a1c:	483c      	ldr	r0, [pc, #240]	@ (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007a1e:	f7ff ff53 	bl	80078c8 <LL_ADC_IsEnabled>
 8007a22:	4604      	mov	r4, r0
 8007a24:	483b      	ldr	r0, [pc, #236]	@ (8007b14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007a26:	f7ff ff4f 	bl	80078c8 <LL_ADC_IsEnabled>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	431c      	orrs	r4, r3
 8007a2e:	483c      	ldr	r0, [pc, #240]	@ (8007b20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007a30:	f7ff ff4a 	bl	80078c8 <LL_ADC_IsEnabled>
 8007a34:	4603      	mov	r3, r0
 8007a36:	4323      	orrs	r3, r4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bf0c      	ite	eq
 8007a3c:	2301      	moveq	r3, #1
 8007a3e:	2300      	movne	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d056      	beq.n	8007af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007a4e:	f023 030f 	bic.w	r3, r3, #15
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	6811      	ldr	r1, [r2, #0]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	6892      	ldr	r2, [r2, #8]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a60:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007a62:	e047      	b.n	8007af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a6e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a78:	d004      	beq.n	8007a84 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a23      	ldr	r2, [pc, #140]	@ (8007b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d10f      	bne.n	8007aa4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007a84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007a88:	f7ff ff1e 	bl	80078c8 <LL_ADC_IsEnabled>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	481f      	ldr	r0, [pc, #124]	@ (8007b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a90:	f7ff ff1a 	bl	80078c8 <LL_ADC_IsEnabled>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4323      	orrs	r3, r4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bf0c      	ite	eq
 8007a9c:	2301      	moveq	r3, #1
 8007a9e:	2300      	movne	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	e012      	b.n	8007aca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007aa4:	481a      	ldr	r0, [pc, #104]	@ (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007aa6:	f7ff ff0f 	bl	80078c8 <LL_ADC_IsEnabled>
 8007aaa:	4604      	mov	r4, r0
 8007aac:	4819      	ldr	r0, [pc, #100]	@ (8007b14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007aae:	f7ff ff0b 	bl	80078c8 <LL_ADC_IsEnabled>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	431c      	orrs	r4, r3
 8007ab6:	481a      	ldr	r0, [pc, #104]	@ (8007b20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007ab8:	f7ff ff06 	bl	80078c8 <LL_ADC_IsEnabled>
 8007abc:	4603      	mov	r3, r0
 8007abe:	4323      	orrs	r3, r4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2301      	moveq	r3, #1
 8007ac6:	2300      	movne	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d012      	beq.n	8007af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007ad6:	f023 030f 	bic.w	r3, r3, #15
 8007ada:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007adc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ade:	e009      	b.n	8007af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ae4:	f043 0220 	orr.w	r2, r3, #32
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007af2:	e000      	b.n	8007af6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007af4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007afe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3784      	adds	r7, #132	@ 0x84
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd90      	pop	{r4, r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	50000100 	.word	0x50000100
 8007b10:	50000400 	.word	0x50000400
 8007b14:	50000500 	.word	0x50000500
 8007b18:	50000300 	.word	0x50000300
 8007b1c:	50000700 	.word	0x50000700
 8007b20:	50000600 	.word	0x50000600

08007b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b34:	4b0c      	ldr	r3, [pc, #48]	@ (8007b68 <__NVIC_SetPriorityGrouping+0x44>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b40:	4013      	ands	r3, r2
 8007b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b56:	4a04      	ldr	r2, [pc, #16]	@ (8007b68 <__NVIC_SetPriorityGrouping+0x44>)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	60d3      	str	r3, [r2, #12]
}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	e000ed00 	.word	0xe000ed00

08007b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b70:	4b04      	ldr	r3, [pc, #16]	@ (8007b84 <__NVIC_GetPriorityGrouping+0x18>)
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	0a1b      	lsrs	r3, r3, #8
 8007b76:	f003 0307 	and.w	r3, r3, #7
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	e000ed00 	.word	0xe000ed00

08007b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	db0b      	blt.n	8007bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	f003 021f 	and.w	r2, r3, #31
 8007ba0:	4907      	ldr	r1, [pc, #28]	@ (8007bc0 <__NVIC_EnableIRQ+0x38>)
 8007ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	2001      	movs	r0, #1
 8007baa:	fa00 f202 	lsl.w	r2, r0, r2
 8007bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	e000e100 	.word	0xe000e100

08007bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	db0a      	blt.n	8007bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	490c      	ldr	r1, [pc, #48]	@ (8007c10 <__NVIC_SetPriority+0x4c>)
 8007bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be2:	0112      	lsls	r2, r2, #4
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	440b      	add	r3, r1
 8007be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bec:	e00a      	b.n	8007c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	4908      	ldr	r1, [pc, #32]	@ (8007c14 <__NVIC_SetPriority+0x50>)
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	3b04      	subs	r3, #4
 8007bfc:	0112      	lsls	r2, r2, #4
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	440b      	add	r3, r1
 8007c02:	761a      	strb	r2, [r3, #24]
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	e000e100 	.word	0xe000e100
 8007c14:	e000ed00 	.word	0xe000ed00

08007c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b089      	sub	sp, #36	@ 0x24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f1c3 0307 	rsb	r3, r3, #7
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	bf28      	it	cs
 8007c36:	2304      	movcs	r3, #4
 8007c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	2b06      	cmp	r3, #6
 8007c40:	d902      	bls.n	8007c48 <NVIC_EncodePriority+0x30>
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	3b03      	subs	r3, #3
 8007c46:	e000      	b.n	8007c4a <NVIC_EncodePriority+0x32>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	43da      	mvns	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	401a      	ands	r2, r3
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c60:	f04f 31ff 	mov.w	r1, #4294967295
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6a:	43d9      	mvns	r1, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c70:	4313      	orrs	r3, r2
         );
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3724      	adds	r7, #36	@ 0x24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c90:	d301      	bcc.n	8007c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c92:	2301      	movs	r3, #1
 8007c94:	e00f      	b.n	8007cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c96:	4a0a      	ldr	r2, [pc, #40]	@ (8007cc0 <SysTick_Config+0x40>)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c9e:	210f      	movs	r1, #15
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	f7ff ff8e 	bl	8007bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ca8:	4b05      	ldr	r3, [pc, #20]	@ (8007cc0 <SysTick_Config+0x40>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cae:	4b04      	ldr	r3, [pc, #16]	@ (8007cc0 <SysTick_Config+0x40>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	e000e010 	.word	0xe000e010

08007cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff29 	bl	8007b24 <__NVIC_SetPriorityGrouping>
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b086      	sub	sp, #24
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ce8:	f7ff ff40 	bl	8007b6c <__NVIC_GetPriorityGrouping>
 8007cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	6978      	ldr	r0, [r7, #20]
 8007cf4:	f7ff ff90 	bl	8007c18 <NVIC_EncodePriority>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff ff5f 	bl	8007bc4 <__NVIC_SetPriority>
}
 8007d06:	bf00      	nop
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	4603      	mov	r3, r0
 8007d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff ff33 	bl	8007b88 <__NVIC_EnableIRQ>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff ffa4 	bl	8007c80 <SysTick_Config>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e08d      	b.n	8007e72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	4b47      	ldr	r3, [pc, #284]	@ (8007e7c <HAL_DMA_Init+0x138>)
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d80f      	bhi.n	8007d82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	4b45      	ldr	r3, [pc, #276]	@ (8007e80 <HAL_DMA_Init+0x13c>)
 8007d6a:	4413      	add	r3, r2
 8007d6c:	4a45      	ldr	r2, [pc, #276]	@ (8007e84 <HAL_DMA_Init+0x140>)
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	091b      	lsrs	r3, r3, #4
 8007d74:	009a      	lsls	r2, r3, #2
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a42      	ldr	r2, [pc, #264]	@ (8007e88 <HAL_DMA_Init+0x144>)
 8007d7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007d80:	e00e      	b.n	8007da0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	4b40      	ldr	r3, [pc, #256]	@ (8007e8c <HAL_DMA_Init+0x148>)
 8007d8a:	4413      	add	r3, r2
 8007d8c:	4a3d      	ldr	r2, [pc, #244]	@ (8007e84 <HAL_DMA_Init+0x140>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	091b      	lsrs	r3, r3, #4
 8007d94:	009a      	lsls	r2, r3, #2
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e90 <HAL_DMA_Init+0x14c>)
 8007d9e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa82 	bl	80082fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e00:	d102      	bne.n	8007e08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e10:	b2d2      	uxtb	r2, r2
 8007e12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e1c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d010      	beq.n	8007e48 <HAL_DMA_Init+0x104>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d80c      	bhi.n	8007e48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 faa2 	bl	8008378 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e44:	605a      	str	r2, [r3, #4]
 8007e46:	e008      	b.n	8007e5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40020407 	.word	0x40020407
 8007e80:	bffdfff8 	.word	0xbffdfff8
 8007e84:	cccccccd 	.word	0xcccccccd
 8007e88:	40020000 	.word	0x40020000
 8007e8c:	bffdfbf8 	.word	0xbffdfbf8
 8007e90:	40020400 	.word	0x40020400

08007e94 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_DMA_Start_IT+0x20>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e066      	b.n	8007f82 <HAL_DMA_Start_IT+0xee>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d155      	bne.n	8007f74 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0201 	bic.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f9c7 	bl	8008280 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 020e 	orr.w	r2, r2, #14
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e00f      	b.n	8007f2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0204 	bic.w	r2, r2, #4
 8007f1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 020a 	orr.w	r2, r2, #10
 8007f2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f48:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f042 0201 	orr.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	e005      	b.n	8007f80 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d005      	beq.n	8007fae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2204      	movs	r2, #4
 8007fa6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	73fb      	strb	r3, [r7, #15]
 8007fac:	e037      	b.n	800801e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 020e 	bic.w	r2, r2, #14
 8007fbc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007fcc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0201 	bic.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe2:	f003 021f 	and.w	r2, r3, #31
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	2101      	movs	r1, #1
 8007fec:	fa01 f202 	lsl.w	r2, r1, r2
 8007ff0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007ffa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00c      	beq.n	800801e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008012:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800801c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	d00d      	beq.n	8008070 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2204      	movs	r2, #4
 8008058:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	73fb      	strb	r3, [r7, #15]
 800806e:	e047      	b.n	8008100 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 020e 	bic.w	r2, r2, #14
 800807e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0201 	bic.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800809a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800809e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a4:	f003 021f 	and.w	r2, r3, #31
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ac:	2101      	movs	r1, #1
 80080ae:	fa01 f202 	lsl.w	r2, r1, r2
 80080b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80080bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00c      	beq.n	80080e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80080de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
    }
  }
  return status;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008126:	f003 031f 	and.w	r3, r3, #31
 800812a:	2204      	movs	r2, #4
 800812c:	409a      	lsls	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4013      	ands	r3, r2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d026      	beq.n	8008184 <HAL_DMA_IRQHandler+0x7a>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d021      	beq.n	8008184 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d107      	bne.n	800815e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0204 	bic.w	r2, r2, #4
 800815c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008162:	f003 021f 	and.w	r2, r3, #31
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816a:	2104      	movs	r1, #4
 800816c:	fa01 f202 	lsl.w	r2, r1, r2
 8008170:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008176:	2b00      	cmp	r3, #0
 8008178:	d071      	beq.n	800825e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008182:	e06c      	b.n	800825e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008188:	f003 031f 	and.w	r3, r3, #31
 800818c:	2202      	movs	r2, #2
 800818e:	409a      	lsls	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4013      	ands	r3, r2
 8008194:	2b00      	cmp	r3, #0
 8008196:	d02e      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d029      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 020a 	bic.w	r2, r2, #10
 80081be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081cc:	f003 021f 	and.w	r2, r3, #31
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d4:	2102      	movs	r1, #2
 80081d6:	fa01 f202 	lsl.w	r2, r1, r2
 80081da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d038      	beq.n	800825e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80081f4:	e033      	b.n	800825e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fa:	f003 031f 	and.w	r3, r3, #31
 80081fe:	2208      	movs	r2, #8
 8008200:	409a      	lsls	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4013      	ands	r3, r2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d02a      	beq.n	8008260 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d025      	beq.n	8008260 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 020e 	bic.w	r2, r2, #14
 8008222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008228:	f003 021f 	and.w	r2, r3, #31
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008230:	2101      	movs	r1, #1
 8008232:	fa01 f202 	lsl.w	r2, r1, r2
 8008236:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800825e:	bf00      	nop
 8008260:	bf00      	nop
}
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008296:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80082a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ae:	f003 021f 	and.w	r2, r3, #31
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	2101      	movs	r1, #1
 80082b8:	fa01 f202 	lsl.w	r2, r1, r2
 80082bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b10      	cmp	r3, #16
 80082cc:	d108      	bne.n	80082e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80082de:	e007      	b.n	80082f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	60da      	str	r2, [r3, #12]
}
 80082f0:	bf00      	nop
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	4b16      	ldr	r3, [pc, #88]	@ (8008364 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800830c:	429a      	cmp	r2, r3
 800830e:	d802      	bhi.n	8008316 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008310:	4b15      	ldr	r3, [pc, #84]	@ (8008368 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008312:	617b      	str	r3, [r7, #20]
 8008314:	e001      	b.n	800831a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008316:	4b15      	ldr	r3, [pc, #84]	@ (800836c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008318:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	3b08      	subs	r3, #8
 8008326:	4a12      	ldr	r2, [pc, #72]	@ (8008370 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	091b      	lsrs	r3, r3, #4
 800832e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008334:	089b      	lsrs	r3, r3, #2
 8008336:	009a      	lsls	r2, r3, #2
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a0b      	ldr	r2, [pc, #44]	@ (8008374 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008346:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	2201      	movs	r2, #1
 8008350:	409a      	lsls	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40020407 	.word	0x40020407
 8008368:	40020800 	.word	0x40020800
 800836c:	40020820 	.word	0x40020820
 8008370:	cccccccd 	.word	0xcccccccd
 8008374:	40020880 	.word	0x40020880

08008378 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4b0b      	ldr	r3, [pc, #44]	@ (80083b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	461a      	mov	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a08      	ldr	r2, [pc, #32]	@ (80083bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800839a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3b01      	subs	r3, #1
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	2201      	movs	r2, #1
 80083a6:	409a      	lsls	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80083ac:	bf00      	nop
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	1000823f 	.word	0x1000823f
 80083bc:	40020940 	.word	0x40020940

080083c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80083ce:	e15a      	b.n	8008686 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	2101      	movs	r1, #1
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	fa01 f303 	lsl.w	r3, r1, r3
 80083dc:	4013      	ands	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 814c 	beq.w	8008680 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f003 0303 	and.w	r3, r3, #3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d005      	beq.n	8008400 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d130      	bne.n	8008462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	2203      	movs	r2, #3
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	43db      	mvns	r3, r3
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	4013      	ands	r3, r2
 8008416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	fa02 f303 	lsl.w	r3, r2, r3
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008436:	2201      	movs	r2, #1
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	43db      	mvns	r3, r3
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4013      	ands	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	091b      	lsrs	r3, r3, #4
 800844c:	f003 0201 	and.w	r2, r3, #1
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	fa02 f303 	lsl.w	r3, r2, r3
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d017      	beq.n	800849e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	2203      	movs	r2, #3
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	43db      	mvns	r3, r3
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	4013      	ands	r3, r2
 8008484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d123      	bne.n	80084f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	08da      	lsrs	r2, r3, #3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3208      	adds	r2, #8
 80084b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f003 0307 	and.w	r3, r3, #7
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	220f      	movs	r2, #15
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	43db      	mvns	r3, r3
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4013      	ands	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f003 0307 	and.w	r3, r3, #7
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	fa02 f303 	lsl.w	r3, r2, r3
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	08da      	lsrs	r2, r3, #3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3208      	adds	r2, #8
 80084ec:	6939      	ldr	r1, [r7, #16]
 80084ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	2203      	movs	r2, #3
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	43db      	mvns	r3, r3
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4013      	ands	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f003 0203 	and.w	r2, r3, #3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	fa02 f303 	lsl.w	r3, r2, r3
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	4313      	orrs	r3, r2
 800851e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80a6 	beq.w	8008680 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008534:	4b5b      	ldr	r3, [pc, #364]	@ (80086a4 <HAL_GPIO_Init+0x2e4>)
 8008536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008538:	4a5a      	ldr	r2, [pc, #360]	@ (80086a4 <HAL_GPIO_Init+0x2e4>)
 800853a:	f043 0301 	orr.w	r3, r3, #1
 800853e:	6613      	str	r3, [r2, #96]	@ 0x60
 8008540:	4b58      	ldr	r3, [pc, #352]	@ (80086a4 <HAL_GPIO_Init+0x2e4>)
 8008542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800854c:	4a56      	ldr	r2, [pc, #344]	@ (80086a8 <HAL_GPIO_Init+0x2e8>)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	089b      	lsrs	r3, r3, #2
 8008552:	3302      	adds	r3, #2
 8008554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	220f      	movs	r2, #15
 8008564:	fa02 f303 	lsl.w	r3, r2, r3
 8008568:	43db      	mvns	r3, r3
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4013      	ands	r3, r2
 800856e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008576:	d01f      	beq.n	80085b8 <HAL_GPIO_Init+0x1f8>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a4c      	ldr	r2, [pc, #304]	@ (80086ac <HAL_GPIO_Init+0x2ec>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d019      	beq.n	80085b4 <HAL_GPIO_Init+0x1f4>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a4b      	ldr	r2, [pc, #300]	@ (80086b0 <HAL_GPIO_Init+0x2f0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d013      	beq.n	80085b0 <HAL_GPIO_Init+0x1f0>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a4a      	ldr	r2, [pc, #296]	@ (80086b4 <HAL_GPIO_Init+0x2f4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00d      	beq.n	80085ac <HAL_GPIO_Init+0x1ec>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a49      	ldr	r2, [pc, #292]	@ (80086b8 <HAL_GPIO_Init+0x2f8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d007      	beq.n	80085a8 <HAL_GPIO_Init+0x1e8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a48      	ldr	r2, [pc, #288]	@ (80086bc <HAL_GPIO_Init+0x2fc>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d101      	bne.n	80085a4 <HAL_GPIO_Init+0x1e4>
 80085a0:	2305      	movs	r3, #5
 80085a2:	e00a      	b.n	80085ba <HAL_GPIO_Init+0x1fa>
 80085a4:	2306      	movs	r3, #6
 80085a6:	e008      	b.n	80085ba <HAL_GPIO_Init+0x1fa>
 80085a8:	2304      	movs	r3, #4
 80085aa:	e006      	b.n	80085ba <HAL_GPIO_Init+0x1fa>
 80085ac:	2303      	movs	r3, #3
 80085ae:	e004      	b.n	80085ba <HAL_GPIO_Init+0x1fa>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e002      	b.n	80085ba <HAL_GPIO_Init+0x1fa>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <HAL_GPIO_Init+0x1fa>
 80085b8:	2300      	movs	r3, #0
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	f002 0203 	and.w	r2, r2, #3
 80085c0:	0092      	lsls	r2, r2, #2
 80085c2:	4093      	lsls	r3, r2
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085ca:	4937      	ldr	r1, [pc, #220]	@ (80086a8 <HAL_GPIO_Init+0x2e8>)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	089b      	lsrs	r3, r3, #2
 80085d0:	3302      	adds	r3, #2
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085d8:	4b39      	ldr	r3, [pc, #228]	@ (80086c0 <HAL_GPIO_Init+0x300>)
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	43db      	mvns	r3, r3
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4013      	ands	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80085fc:	4a30      	ldr	r2, [pc, #192]	@ (80086c0 <HAL_GPIO_Init+0x300>)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008602:	4b2f      	ldr	r3, [pc, #188]	@ (80086c0 <HAL_GPIO_Init+0x300>)
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	43db      	mvns	r3, r3
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	4013      	ands	r3, r2
 8008610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008626:	4a26      	ldr	r2, [pc, #152]	@ (80086c0 <HAL_GPIO_Init+0x300>)
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800862c:	4b24      	ldr	r3, [pc, #144]	@ (80086c0 <HAL_GPIO_Init+0x300>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	43db      	mvns	r3, r3
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4013      	ands	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4313      	orrs	r3, r2
 800864e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008650:	4a1b      	ldr	r2, [pc, #108]	@ (80086c0 <HAL_GPIO_Init+0x300>)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008656:	4b1a      	ldr	r3, [pc, #104]	@ (80086c0 <HAL_GPIO_Init+0x300>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	43db      	mvns	r3, r3
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4013      	ands	r3, r2
 8008664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800867a:	4a11      	ldr	r2, [pc, #68]	@ (80086c0 <HAL_GPIO_Init+0x300>)
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3301      	adds	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	fa22 f303 	lsr.w	r3, r2, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	f47f ae9d 	bne.w	80083d0 <HAL_GPIO_Init+0x10>
  }
}
 8008696:	bf00      	nop
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40021000 	.word	0x40021000
 80086a8:	40010000 	.word	0x40010000
 80086ac:	48000400 	.word	0x48000400
 80086b0:	48000800 	.word	0x48000800
 80086b4:	48000c00 	.word	0x48000c00
 80086b8:	48001000 	.word	0x48001000
 80086bc:	48001400 	.word	0x48001400
 80086c0:	40010400 	.word	0x40010400

080086c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	807b      	strh	r3, [r7, #2]
 80086d0:	4613      	mov	r3, r2
 80086d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086d4:	787b      	ldrb	r3, [r7, #1]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086da:	887a      	ldrh	r2, [r7, #2]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80086e0:	e002      	b.n	80086e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80086fe:	4b08      	ldr	r3, [pc, #32]	@ (8008720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008700:	695a      	ldr	r2, [r3, #20]
 8008702:	88fb      	ldrh	r3, [r7, #6]
 8008704:	4013      	ands	r3, r2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800870a:	4a05      	ldr	r2, [pc, #20]	@ (8008720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800870c:	88fb      	ldrh	r3, [r7, #6]
 800870e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	4618      	mov	r0, r3
 8008714:	f7fc fca8 	bl	8005068 <HAL_GPIO_EXTI_Callback>
  }
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40010400 	.word	0x40010400

08008724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d141      	bne.n	80087b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008732:	4b4b      	ldr	r3, [pc, #300]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800873a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800873e:	d131      	bne.n	80087a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008740:	4b47      	ldr	r3, [pc, #284]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008746:	4a46      	ldr	r2, [pc, #280]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800874c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008750:	4b43      	ldr	r3, [pc, #268]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008758:	4a41      	ldr	r2, [pc, #260]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800875a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800875e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008760:	4b40      	ldr	r3, [pc, #256]	@ (8008864 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2232      	movs	r2, #50	@ 0x32
 8008766:	fb02 f303 	mul.w	r3, r2, r3
 800876a:	4a3f      	ldr	r2, [pc, #252]	@ (8008868 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800876c:	fba2 2303 	umull	r2, r3, r2, r3
 8008770:	0c9b      	lsrs	r3, r3, #18
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008776:	e002      	b.n	800877e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3b01      	subs	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800877e:	4b38      	ldr	r3, [pc, #224]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800878a:	d102      	bne.n	8008792 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1f2      	bne.n	8008778 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008792:	4b33      	ldr	r3, [pc, #204]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800879a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800879e:	d158      	bne.n	8008852 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e057      	b.n	8008854 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087aa:	4a2d      	ldr	r2, [pc, #180]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80087b4:	e04d      	b.n	8008852 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087bc:	d141      	bne.n	8008842 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087be:	4b28      	ldr	r3, [pc, #160]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ca:	d131      	bne.n	8008830 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087cc:	4b24      	ldr	r3, [pc, #144]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d2:	4a23      	ldr	r2, [pc, #140]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087dc:	4b20      	ldr	r3, [pc, #128]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008864 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2232      	movs	r2, #50	@ 0x32
 80087f2:	fb02 f303 	mul.w	r3, r2, r3
 80087f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008868 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087f8:	fba2 2303 	umull	r2, r3, r2, r3
 80087fc:	0c9b      	lsrs	r3, r3, #18
 80087fe:	3301      	adds	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008802:	e002      	b.n	800880a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3b01      	subs	r3, #1
 8008808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800880a:	4b15      	ldr	r3, [pc, #84]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008816:	d102      	bne.n	800881e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1f2      	bne.n	8008804 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800881e:	4b10      	ldr	r3, [pc, #64]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800882a:	d112      	bne.n	8008852 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e011      	b.n	8008854 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008830:	4b0b      	ldr	r3, [pc, #44]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008836:	4a0a      	ldr	r2, [pc, #40]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800883c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008840:	e007      	b.n	8008852 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008842:	4b07      	ldr	r3, [pc, #28]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800884a:	4a05      	ldr	r2, [pc, #20]	@ (8008860 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800884c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008850:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	40007000 	.word	0x40007000
 8008864:	2000020c 	.word	0x2000020c
 8008868:	431bde83 	.word	0x431bde83

0800886c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008870:	4b05      	ldr	r3, [pc, #20]	@ (8008888 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	4a04      	ldr	r2, [pc, #16]	@ (8008888 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800887a:	6093      	str	r3, [r2, #8]
}
 800887c:	bf00      	nop
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40007000 	.word	0x40007000

0800888c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e2fe      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d075      	beq.n	8008996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088aa:	4b97      	ldr	r3, [pc, #604]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f003 030c 	and.w	r3, r3, #12
 80088b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088b4:	4b94      	ldr	r3, [pc, #592]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b0c      	cmp	r3, #12
 80088c2:	d102      	bne.n	80088ca <HAL_RCC_OscConfig+0x3e>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d002      	beq.n	80088d0 <HAL_RCC_OscConfig+0x44>
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	d10b      	bne.n	80088e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d0:	4b8d      	ldr	r3, [pc, #564]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d05b      	beq.n	8008994 <HAL_RCC_OscConfig+0x108>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d157      	bne.n	8008994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e2d9      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088f0:	d106      	bne.n	8008900 <HAL_RCC_OscConfig+0x74>
 80088f2:	4b85      	ldr	r3, [pc, #532]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a84      	ldr	r2, [pc, #528]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80088f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	e01d      	b.n	800893c <HAL_RCC_OscConfig+0xb0>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008908:	d10c      	bne.n	8008924 <HAL_RCC_OscConfig+0x98>
 800890a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	4b7c      	ldr	r3, [pc, #496]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a7b      	ldr	r2, [pc, #492]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 800891c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	e00b      	b.n	800893c <HAL_RCC_OscConfig+0xb0>
 8008924:	4b78      	ldr	r3, [pc, #480]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a77      	ldr	r2, [pc, #476]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 800892a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	4b75      	ldr	r3, [pc, #468]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a74      	ldr	r2, [pc, #464]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800893a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d013      	beq.n	800896c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008944:	f7fd fe24 	bl	8006590 <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800894c:	f7fd fe20 	bl	8006590 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b64      	cmp	r3, #100	@ 0x64
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e29e      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800895e:	4b6a      	ldr	r3, [pc, #424]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0xc0>
 800896a:	e014      	b.n	8008996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896c:	f7fd fe10 	bl	8006590 <HAL_GetTick>
 8008970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008974:	f7fd fe0c 	bl	8006590 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b64      	cmp	r3, #100	@ 0x64
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e28a      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008986:	4b60      	ldr	r3, [pc, #384]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1f0      	bne.n	8008974 <HAL_RCC_OscConfig+0xe8>
 8008992:	e000      	b.n	8008996 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d075      	beq.n	8008a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089a2:	4b59      	ldr	r3, [pc, #356]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f003 030c 	and.w	r3, r3, #12
 80089aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089ac:	4b56      	ldr	r3, [pc, #344]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f003 0303 	and.w	r3, r3, #3
 80089b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b0c      	cmp	r3, #12
 80089ba:	d102      	bne.n	80089c2 <HAL_RCC_OscConfig+0x136>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d002      	beq.n	80089c8 <HAL_RCC_OscConfig+0x13c>
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d11f      	bne.n	8008a08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089c8:	4b4f      	ldr	r3, [pc, #316]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_RCC_OscConfig+0x154>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e25d      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089e0:	4b49      	ldr	r3, [pc, #292]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	061b      	lsls	r3, r3, #24
 80089ee:	4946      	ldr	r1, [pc, #280]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80089f4:	4b45      	ldr	r3, [pc, #276]	@ (8008b0c <HAL_RCC_OscConfig+0x280>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fd fd7d 	bl	80064f8 <HAL_InitTick>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d043      	beq.n	8008a8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e249      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d023      	beq.n	8008a58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a10:	4b3d      	ldr	r3, [pc, #244]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a3c      	ldr	r2, [pc, #240]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1c:	f7fd fdb8 	bl	8006590 <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a24:	f7fd fdb4 	bl	8006590 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e232      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a36:	4b34      	ldr	r3, [pc, #208]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a42:	4b31      	ldr	r3, [pc, #196]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	061b      	lsls	r3, r3, #24
 8008a50:	492d      	ldr	r1, [pc, #180]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	604b      	str	r3, [r1, #4]
 8008a56:	e01a      	b.n	8008a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a58:	4b2b      	ldr	r3, [pc, #172]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008a5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a64:	f7fd fd94 	bl	8006590 <HAL_GetTick>
 8008a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a6c:	f7fd fd90 	bl	8006590 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e20e      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a7e:	4b22      	ldr	r3, [pc, #136]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f0      	bne.n	8008a6c <HAL_RCC_OscConfig+0x1e0>
 8008a8a:	e000      	b.n	8008a8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d041      	beq.n	8008b1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d01c      	beq.n	8008adc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008aa2:	4b19      	ldr	r3, [pc, #100]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aa8:	4a17      	ldr	r2, [pc, #92]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ab2:	f7fd fd6d 	bl	8006590 <HAL_GetTick>
 8008ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ab8:	e008      	b.n	8008acc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aba:	f7fd fd69 	bl	8006590 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d901      	bls.n	8008acc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e1e7      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008acc:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0ef      	beq.n	8008aba <HAL_RCC_OscConfig+0x22e>
 8008ada:	e020      	b.n	8008b1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008adc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ae2:	4a09      	ldr	r2, [pc, #36]	@ (8008b08 <HAL_RCC_OscConfig+0x27c>)
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aec:	f7fd fd50 	bl	8006590 <HAL_GetTick>
 8008af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008af2:	e00d      	b.n	8008b10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008af4:	f7fd fd4c 	bl	8006590 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d906      	bls.n	8008b10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e1ca      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
 8008b06:	bf00      	nop
 8008b08:	40021000 	.word	0x40021000
 8008b0c:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b10:	4b8c      	ldr	r3, [pc, #560]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1ea      	bne.n	8008af4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0304 	and.w	r3, r3, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f000 80a6 	beq.w	8008c78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b30:	4b84      	ldr	r3, [pc, #528]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <HAL_RCC_OscConfig+0x2b4>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <HAL_RCC_OscConfig+0x2b6>
 8008b40:	2300      	movs	r3, #0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00d      	beq.n	8008b62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b46:	4b7f      	ldr	r3, [pc, #508]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b52:	4b7c      	ldr	r3, [pc, #496]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b62:	4b79      	ldr	r3, [pc, #484]	@ (8008d48 <HAL_RCC_OscConfig+0x4bc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d118      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b6e:	4b76      	ldr	r3, [pc, #472]	@ (8008d48 <HAL_RCC_OscConfig+0x4bc>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a75      	ldr	r2, [pc, #468]	@ (8008d48 <HAL_RCC_OscConfig+0x4bc>)
 8008b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b7a:	f7fd fd09 	bl	8006590 <HAL_GetTick>
 8008b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b80:	e008      	b.n	8008b94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b82:	f7fd fd05 	bl	8006590 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e183      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b94:	4b6c      	ldr	r3, [pc, #432]	@ (8008d48 <HAL_RCC_OscConfig+0x4bc>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0f0      	beq.n	8008b82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d108      	bne.n	8008bba <HAL_RCC_OscConfig+0x32e>
 8008ba8:	4b66      	ldr	r3, [pc, #408]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bae:	4a65      	ldr	r2, [pc, #404]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008bb0:	f043 0301 	orr.w	r3, r3, #1
 8008bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bb8:	e024      	b.n	8008c04 <HAL_RCC_OscConfig+0x378>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	2b05      	cmp	r3, #5
 8008bc0:	d110      	bne.n	8008be4 <HAL_RCC_OscConfig+0x358>
 8008bc2:	4b60      	ldr	r3, [pc, #384]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008bca:	f043 0304 	orr.w	r3, r3, #4
 8008bce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd8:	4a5a      	ldr	r2, [pc, #360]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008bda:	f043 0301 	orr.w	r3, r3, #1
 8008bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008be2:	e00f      	b.n	8008c04 <HAL_RCC_OscConfig+0x378>
 8008be4:	4b57      	ldr	r3, [pc, #348]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bea:	4a56      	ldr	r2, [pc, #344]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bf4:	4b53      	ldr	r3, [pc, #332]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfa:	4a52      	ldr	r2, [pc, #328]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008bfc:	f023 0304 	bic.w	r3, r3, #4
 8008c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d016      	beq.n	8008c3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c0c:	f7fd fcc0 	bl	8006590 <HAL_GetTick>
 8008c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c12:	e00a      	b.n	8008c2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c14:	f7fd fcbc 	bl	8006590 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e138      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c2a:	4b46      	ldr	r3, [pc, #280]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0ed      	beq.n	8008c14 <HAL_RCC_OscConfig+0x388>
 8008c38:	e015      	b.n	8008c66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c3a:	f7fd fca9 	bl	8006590 <HAL_GetTick>
 8008c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c40:	e00a      	b.n	8008c58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c42:	f7fd fca5 	bl	8006590 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d901      	bls.n	8008c58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e121      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c58:	4b3a      	ldr	r3, [pc, #232]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1ed      	bne.n	8008c42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c66:	7ffb      	ldrb	r3, [r7, #31]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d105      	bne.n	8008c78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c6c:	4b35      	ldr	r3, [pc, #212]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c70:	4a34      	ldr	r2, [pc, #208]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d03c      	beq.n	8008cfe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01c      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c92:	4a2c      	ldr	r2, [pc, #176]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008c94:	f043 0301 	orr.w	r3, r3, #1
 8008c98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c9c:	f7fd fc78 	bl	8006590 <HAL_GetTick>
 8008ca0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ca2:	e008      	b.n	8008cb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ca4:	f7fd fc74 	bl	8006590 <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e0f2      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008cb6:	4b23      	ldr	r3, [pc, #140]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0ef      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x418>
 8008cc4:	e01b      	b.n	8008cfe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008cce:	f023 0301 	bic.w	r3, r3, #1
 8008cd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd6:	f7fd fc5b 	bl	8006590 <HAL_GetTick>
 8008cda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008cdc:	e008      	b.n	8008cf0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cde:	f7fd fc57 	bl	8006590 <HAL_GetTick>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d901      	bls.n	8008cf0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e0d5      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008cf0:	4b14      	ldr	r3, [pc, #80]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1ef      	bne.n	8008cde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 80c9 	beq.w	8008e9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d08:	4b0e      	ldr	r3, [pc, #56]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f003 030c 	and.w	r3, r3, #12
 8008d10:	2b0c      	cmp	r3, #12
 8008d12:	f000 8083 	beq.w	8008e1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d15e      	bne.n	8008ddc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d1e:	4b09      	ldr	r3, [pc, #36]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a08      	ldr	r2, [pc, #32]	@ (8008d44 <HAL_RCC_OscConfig+0x4b8>)
 8008d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2a:	f7fd fc31 	bl	8006590 <HAL_GetTick>
 8008d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d30:	e00c      	b.n	8008d4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d32:	f7fd fc2d 	bl	8006590 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d905      	bls.n	8008d4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e0ab      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
 8008d44:	40021000 	.word	0x40021000
 8008d48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d4c:	4b55      	ldr	r3, [pc, #340]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1ec      	bne.n	8008d32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d58:	4b52      	ldr	r3, [pc, #328]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008d5a:	68da      	ldr	r2, [r3, #12]
 8008d5c:	4b52      	ldr	r3, [pc, #328]	@ (8008ea8 <HAL_RCC_OscConfig+0x61c>)
 8008d5e:	4013      	ands	r3, r2
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6a11      	ldr	r1, [r2, #32]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d68:	3a01      	subs	r2, #1
 8008d6a:	0112      	lsls	r2, r2, #4
 8008d6c:	4311      	orrs	r1, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008d72:	0212      	lsls	r2, r2, #8
 8008d74:	4311      	orrs	r1, r2
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d7a:	0852      	lsrs	r2, r2, #1
 8008d7c:	3a01      	subs	r2, #1
 8008d7e:	0552      	lsls	r2, r2, #21
 8008d80:	4311      	orrs	r1, r2
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d86:	0852      	lsrs	r2, r2, #1
 8008d88:	3a01      	subs	r2, #1
 8008d8a:	0652      	lsls	r2, r2, #25
 8008d8c:	4311      	orrs	r1, r2
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008d92:	06d2      	lsls	r2, r2, #27
 8008d94:	430a      	orrs	r2, r1
 8008d96:	4943      	ldr	r1, [pc, #268]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d9c:	4b41      	ldr	r3, [pc, #260]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a40      	ldr	r2, [pc, #256]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008da6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008da8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	4a3d      	ldr	r2, [pc, #244]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008db2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db4:	f7fd fbec 	bl	8006590 <HAL_GetTick>
 8008db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dbc:	f7fd fbe8 	bl	8006590 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e066      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dce:	4b35      	ldr	r3, [pc, #212]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0f0      	beq.n	8008dbc <HAL_RCC_OscConfig+0x530>
 8008dda:	e05e      	b.n	8008e9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ddc:	4b31      	ldr	r3, [pc, #196]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a30      	ldr	r2, [pc, #192]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7fd fbd2 	bl	8006590 <HAL_GetTick>
 8008dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008df0:	f7fd fbce 	bl	8006590 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e04c      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e02:	4b28      	ldr	r3, [pc, #160]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1f0      	bne.n	8008df0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008e0e:	4b25      	ldr	r3, [pc, #148]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	4924      	ldr	r1, [pc, #144]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008e14:	4b25      	ldr	r3, [pc, #148]	@ (8008eac <HAL_RCC_OscConfig+0x620>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	60cb      	str	r3, [r1, #12]
 8008e1a:	e03e      	b.n	8008e9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d101      	bne.n	8008e28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e039      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008e28:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea4 <HAL_RCC_OscConfig+0x618>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f003 0203 	and.w	r2, r3, #3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d12c      	bne.n	8008e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e46:	3b01      	subs	r3, #1
 8008e48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d123      	bne.n	8008e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d11b      	bne.n	8008e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d113      	bne.n	8008e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e78:	085b      	lsrs	r3, r3, #1
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d109      	bne.n	8008e96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e8c:	085b      	lsrs	r3, r3, #1
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d001      	beq.n	8008e9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40021000 	.word	0x40021000
 8008ea8:	019f800c 	.word	0x019f800c
 8008eac:	feeefffc 	.word	0xfeeefffc

08008eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e11e      	b.n	8009106 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ec8:	4b91      	ldr	r3, [pc, #580]	@ (8009110 <HAL_RCC_ClockConfig+0x260>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 030f 	and.w	r3, r3, #15
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d910      	bls.n	8008ef8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ed6:	4b8e      	ldr	r3, [pc, #568]	@ (8009110 <HAL_RCC_ClockConfig+0x260>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f023 020f 	bic.w	r2, r3, #15
 8008ede:	498c      	ldr	r1, [pc, #560]	@ (8009110 <HAL_RCC_ClockConfig+0x260>)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ee6:	4b8a      	ldr	r3, [pc, #552]	@ (8009110 <HAL_RCC_ClockConfig+0x260>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d001      	beq.n	8008ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e106      	b.n	8009106 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d073      	beq.n	8008fec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d129      	bne.n	8008f60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f0c:	4b81      	ldr	r3, [pc, #516]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e0f4      	b.n	8009106 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008f1c:	f000 f99e 	bl	800925c <RCC_GetSysClockFreqFromPLLSource>
 8008f20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	4a7c      	ldr	r2, [pc, #496]	@ (8009118 <HAL_RCC_ClockConfig+0x268>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d93f      	bls.n	8008faa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d033      	beq.n	8008faa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d12f      	bne.n	8008faa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f4a:	4b72      	ldr	r3, [pc, #456]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f52:	4a70      	ldr	r2, [pc, #448]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f5a:	2380      	movs	r3, #128	@ 0x80
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e024      	b.n	8008faa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d107      	bne.n	8008f78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f68:	4b6a      	ldr	r3, [pc, #424]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d109      	bne.n	8008f88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e0c6      	b.n	8009106 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f78:	4b66      	ldr	r3, [pc, #408]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e0be      	b.n	8009106 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008f88:	f000 f8ce 	bl	8009128 <HAL_RCC_GetSysClockFreq>
 8008f8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	4a61      	ldr	r2, [pc, #388]	@ (8009118 <HAL_RCC_ClockConfig+0x268>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d909      	bls.n	8008faa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f96:	4b5f      	ldr	r3, [pc, #380]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f9e:	4a5d      	ldr	r2, [pc, #372]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008fa6:	2380      	movs	r3, #128	@ 0x80
 8008fa8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008faa:	4b5a      	ldr	r3, [pc, #360]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f023 0203 	bic.w	r2, r3, #3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	4957      	ldr	r1, [pc, #348]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fbc:	f7fd fae8 	bl	8006590 <HAL_GetTick>
 8008fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fc2:	e00a      	b.n	8008fda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fc4:	f7fd fae4 	bl	8006590 <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e095      	b.n	8009106 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fda:	4b4e      	ldr	r3, [pc, #312]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 020c 	and.w	r2, r3, #12
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d1eb      	bne.n	8008fc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d023      	beq.n	8009040 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d005      	beq.n	8009010 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009004:	4b43      	ldr	r3, [pc, #268]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	4a42      	ldr	r2, [pc, #264]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 800900a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800900e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d007      	beq.n	800902c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800901c:	4b3d      	ldr	r3, [pc, #244]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009024:	4a3b      	ldr	r2, [pc, #236]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8009026:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800902a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800902c:	4b39      	ldr	r3, [pc, #228]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	4936      	ldr	r1, [pc, #216]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 800903a:	4313      	orrs	r3, r2
 800903c:	608b      	str	r3, [r1, #8]
 800903e:	e008      	b.n	8009052 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2b80      	cmp	r3, #128	@ 0x80
 8009044:	d105      	bne.n	8009052 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009046:	4b33      	ldr	r3, [pc, #204]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	4a32      	ldr	r2, [pc, #200]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 800904c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009050:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009052:	4b2f      	ldr	r3, [pc, #188]	@ (8009110 <HAL_RCC_ClockConfig+0x260>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 030f 	and.w	r3, r3, #15
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d21d      	bcs.n	800909c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009060:	4b2b      	ldr	r3, [pc, #172]	@ (8009110 <HAL_RCC_ClockConfig+0x260>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f023 020f 	bic.w	r2, r3, #15
 8009068:	4929      	ldr	r1, [pc, #164]	@ (8009110 <HAL_RCC_ClockConfig+0x260>)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	4313      	orrs	r3, r2
 800906e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009070:	f7fd fa8e 	bl	8006590 <HAL_GetTick>
 8009074:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009076:	e00a      	b.n	800908e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009078:	f7fd fa8a 	bl	8006590 <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009086:	4293      	cmp	r3, r2
 8009088:	d901      	bls.n	800908e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e03b      	b.n	8009106 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800908e:	4b20      	ldr	r3, [pc, #128]	@ (8009110 <HAL_RCC_ClockConfig+0x260>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d1ed      	bne.n	8009078 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0304 	and.w	r3, r3, #4
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d008      	beq.n	80090ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	4917      	ldr	r1, [pc, #92]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0308 	and.w	r3, r3, #8
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d009      	beq.n	80090da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090c6:	4b13      	ldr	r3, [pc, #76]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	490f      	ldr	r1, [pc, #60]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090da:	f000 f825 	bl	8009128 <HAL_RCC_GetSysClockFreq>
 80090de:	4602      	mov	r2, r0
 80090e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009114 <HAL_RCC_ClockConfig+0x264>)
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	091b      	lsrs	r3, r3, #4
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	490c      	ldr	r1, [pc, #48]	@ (800911c <HAL_RCC_ClockConfig+0x26c>)
 80090ec:	5ccb      	ldrb	r3, [r1, r3]
 80090ee:	f003 031f 	and.w	r3, r3, #31
 80090f2:	fa22 f303 	lsr.w	r3, r2, r3
 80090f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009120 <HAL_RCC_ClockConfig+0x270>)
 80090f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80090fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009124 <HAL_RCC_ClockConfig+0x274>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fd f9fa 	bl	80064f8 <HAL_InitTick>
 8009104:	4603      	mov	r3, r0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	40022000 	.word	0x40022000
 8009114:	40021000 	.word	0x40021000
 8009118:	04c4b400 	.word	0x04c4b400
 800911c:	080113a0 	.word	0x080113a0
 8009120:	2000020c 	.word	0x2000020c
 8009124:	20000210 	.word	0x20000210

08009128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800912e:	4b2c      	ldr	r3, [pc, #176]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 030c 	and.w	r3, r3, #12
 8009136:	2b04      	cmp	r3, #4
 8009138:	d102      	bne.n	8009140 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800913a:	4b2a      	ldr	r3, [pc, #168]	@ (80091e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800913c:	613b      	str	r3, [r7, #16]
 800913e:	e047      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009140:	4b27      	ldr	r3, [pc, #156]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f003 030c 	and.w	r3, r3, #12
 8009148:	2b08      	cmp	r3, #8
 800914a:	d102      	bne.n	8009152 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800914c:	4b26      	ldr	r3, [pc, #152]	@ (80091e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	e03e      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009152:	4b23      	ldr	r3, [pc, #140]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 030c 	and.w	r3, r3, #12
 800915a:	2b0c      	cmp	r3, #12
 800915c:	d136      	bne.n	80091cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800915e:	4b20      	ldr	r3, [pc, #128]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009168:	4b1d      	ldr	r3, [pc, #116]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	091b      	lsrs	r3, r3, #4
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	3301      	adds	r3, #1
 8009174:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b03      	cmp	r3, #3
 800917a:	d10c      	bne.n	8009196 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800917c:	4a1a      	ldr	r2, [pc, #104]	@ (80091e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	fbb2 f3f3 	udiv	r3, r2, r3
 8009184:	4a16      	ldr	r2, [pc, #88]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009186:	68d2      	ldr	r2, [r2, #12]
 8009188:	0a12      	lsrs	r2, r2, #8
 800918a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800918e:	fb02 f303 	mul.w	r3, r2, r3
 8009192:	617b      	str	r3, [r7, #20]
      break;
 8009194:	e00c      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009196:	4a13      	ldr	r2, [pc, #76]	@ (80091e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	fbb2 f3f3 	udiv	r3, r2, r3
 800919e:	4a10      	ldr	r2, [pc, #64]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091a0:	68d2      	ldr	r2, [r2, #12]
 80091a2:	0a12      	lsrs	r2, r2, #8
 80091a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80091a8:	fb02 f303 	mul.w	r3, r2, r3
 80091ac:	617b      	str	r3, [r7, #20]
      break;
 80091ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	@ (80091e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	0e5b      	lsrs	r3, r3, #25
 80091b6:	f003 0303 	and.w	r3, r3, #3
 80091ba:	3301      	adds	r3, #1
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	e001      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80091d0:	693b      	ldr	r3, [r7, #16]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	40021000 	.word	0x40021000
 80091e4:	00f42400 	.word	0x00f42400
 80091e8:	016e3600 	.word	0x016e3600

080091ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091f0:	4b03      	ldr	r3, [pc, #12]	@ (8009200 <HAL_RCC_GetHCLKFreq+0x14>)
 80091f2:	681b      	ldr	r3, [r3, #0]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	2000020c 	.word	0x2000020c

08009204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009208:	f7ff fff0 	bl	80091ec <HAL_RCC_GetHCLKFreq>
 800920c:	4602      	mov	r2, r0
 800920e:	4b06      	ldr	r3, [pc, #24]	@ (8009228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	0a1b      	lsrs	r3, r3, #8
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	4904      	ldr	r1, [pc, #16]	@ (800922c <HAL_RCC_GetPCLK1Freq+0x28>)
 800921a:	5ccb      	ldrb	r3, [r1, r3]
 800921c:	f003 031f 	and.w	r3, r3, #31
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009224:	4618      	mov	r0, r3
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40021000 	.word	0x40021000
 800922c:	080113b0 	.word	0x080113b0

08009230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009234:	f7ff ffda 	bl	80091ec <HAL_RCC_GetHCLKFreq>
 8009238:	4602      	mov	r2, r0
 800923a:	4b06      	ldr	r3, [pc, #24]	@ (8009254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	0adb      	lsrs	r3, r3, #11
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	4904      	ldr	r1, [pc, #16]	@ (8009258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009246:	5ccb      	ldrb	r3, [r1, r3]
 8009248:	f003 031f 	and.w	r3, r3, #31
 800924c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009250:	4618      	mov	r0, r3
 8009252:	bd80      	pop	{r7, pc}
 8009254:	40021000 	.word	0x40021000
 8009258:	080113b0 	.word	0x080113b0

0800925c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009262:	4b1e      	ldr	r3, [pc, #120]	@ (80092dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800926c:	4b1b      	ldr	r3, [pc, #108]	@ (80092dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	091b      	lsrs	r3, r3, #4
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	3301      	adds	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d10c      	bne.n	800929a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009280:	4a17      	ldr	r2, [pc, #92]	@ (80092e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	fbb2 f3f3 	udiv	r3, r2, r3
 8009288:	4a14      	ldr	r2, [pc, #80]	@ (80092dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800928a:	68d2      	ldr	r2, [r2, #12]
 800928c:	0a12      	lsrs	r2, r2, #8
 800928e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009292:	fb02 f303 	mul.w	r3, r2, r3
 8009296:	617b      	str	r3, [r7, #20]
    break;
 8009298:	e00c      	b.n	80092b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800929a:	4a12      	ldr	r2, [pc, #72]	@ (80092e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a2:	4a0e      	ldr	r2, [pc, #56]	@ (80092dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092a4:	68d2      	ldr	r2, [r2, #12]
 80092a6:	0a12      	lsrs	r2, r2, #8
 80092a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80092ac:	fb02 f303 	mul.w	r3, r2, r3
 80092b0:	617b      	str	r3, [r7, #20]
    break;
 80092b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80092b4:	4b09      	ldr	r3, [pc, #36]	@ (80092dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	0e5b      	lsrs	r3, r3, #25
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	3301      	adds	r3, #1
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80092ce:	687b      	ldr	r3, [r7, #4]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	40021000 	.word	0x40021000
 80092e0:	016e3600 	.word	0x016e3600
 80092e4:	00f42400 	.word	0x00f42400

080092e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092f0:	2300      	movs	r3, #0
 80092f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092f4:	2300      	movs	r3, #0
 80092f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 8098 	beq.w	8009436 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009306:	2300      	movs	r3, #0
 8009308:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800930a:	4b43      	ldr	r3, [pc, #268]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800930c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800930e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10d      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009316:	4b40      	ldr	r3, [pc, #256]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800931a:	4a3f      	ldr	r2, [pc, #252]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800931c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009320:	6593      	str	r3, [r2, #88]	@ 0x58
 8009322:	4b3d      	ldr	r3, [pc, #244]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800932a:	60bb      	str	r3, [r7, #8]
 800932c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800932e:	2301      	movs	r3, #1
 8009330:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009332:	4b3a      	ldr	r3, [pc, #232]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a39      	ldr	r2, [pc, #228]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800933c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800933e:	f7fd f927 	bl	8006590 <HAL_GetTick>
 8009342:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009344:	e009      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009346:	f7fd f923 	bl	8006590 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d902      	bls.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	74fb      	strb	r3, [r7, #19]
        break;
 8009358:	e005      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800935a:	4b30      	ldr	r3, [pc, #192]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0ef      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009366:	7cfb      	ldrb	r3, [r7, #19]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d159      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800936c:	4b2a      	ldr	r3, [pc, #168]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800936e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009376:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d01e      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	429a      	cmp	r2, r3
 8009386:	d019      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009388:	4b23      	ldr	r3, [pc, #140]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800938a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009394:	4b20      	ldr	r3, [pc, #128]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800939a:	4a1f      	ldr	r2, [pc, #124]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800939c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093b4:	4a18      	ldr	r2, [pc, #96]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c6:	f7fd f8e3 	bl	8006590 <HAL_GetTick>
 80093ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093cc:	e00b      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ce:	f7fd f8df 	bl	8006590 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093dc:	4293      	cmp	r3, r2
 80093de:	d902      	bls.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	74fb      	strb	r3, [r7, #19]
            break;
 80093e4:	e006      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0ec      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80093f4:	7cfb      	ldrb	r3, [r7, #19]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10b      	bne.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093fa:	4b07      	ldr	r3, [pc, #28]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009408:	4903      	ldr	r1, [pc, #12]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800940a:	4313      	orrs	r3, r2
 800940c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009410:	e008      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009412:	7cfb      	ldrb	r3, [r7, #19]
 8009414:	74bb      	strb	r3, [r7, #18]
 8009416:	e005      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009418:	40021000 	.word	0x40021000
 800941c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009420:	7cfb      	ldrb	r3, [r7, #19]
 8009422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009424:	7c7b      	ldrb	r3, [r7, #17]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d105      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800942a:	4ba7      	ldr	r3, [pc, #668]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800942c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800942e:	4aa6      	ldr	r2, [pc, #664]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009434:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009442:	4ba1      	ldr	r3, [pc, #644]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009448:	f023 0203 	bic.w	r2, r3, #3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	499d      	ldr	r1, [pc, #628]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009452:	4313      	orrs	r3, r2
 8009454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00a      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009464:	4b98      	ldr	r3, [pc, #608]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800946a:	f023 020c 	bic.w	r2, r3, #12
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	4995      	ldr	r1, [pc, #596]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009474:	4313      	orrs	r3, r2
 8009476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009486:	4b90      	ldr	r3, [pc, #576]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800948c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	498c      	ldr	r1, [pc, #560]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094a8:	4b87      	ldr	r3, [pc, #540]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	4984      	ldr	r1, [pc, #528]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0310 	and.w	r3, r3, #16
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094ca:	4b7f      	ldr	r3, [pc, #508]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	497b      	ldr	r1, [pc, #492]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094da:	4313      	orrs	r3, r2
 80094dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00a      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094ec:	4b76      	ldr	r3, [pc, #472]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	4973      	ldr	r1, [pc, #460]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800950e:	4b6e      	ldr	r3, [pc, #440]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009514:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	496a      	ldr	r1, [pc, #424]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800951e:	4313      	orrs	r3, r2
 8009520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00a      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009530:	4b65      	ldr	r3, [pc, #404]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009536:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	4962      	ldr	r1, [pc, #392]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009540:	4313      	orrs	r3, r2
 8009542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009552:	4b5d      	ldr	r3, [pc, #372]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009558:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009560:	4959      	ldr	r1, [pc, #356]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009562:	4313      	orrs	r3, r2
 8009564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00a      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009574:	4b54      	ldr	r3, [pc, #336]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800957a:	f023 0203 	bic.w	r2, r3, #3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009582:	4951      	ldr	r1, [pc, #324]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009584:	4313      	orrs	r3, r2
 8009586:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009596:	4b4c      	ldr	r3, [pc, #304]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800959c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a4:	4948      	ldr	r1, [pc, #288]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d015      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095b8:	4b43      	ldr	r3, [pc, #268]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c6:	4940      	ldr	r1, [pc, #256]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095d6:	d105      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095d8:	4b3b      	ldr	r3, [pc, #236]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	4a3a      	ldr	r2, [pc, #232]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d015      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80095f0:	4b35      	ldr	r3, [pc, #212]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fe:	4932      	ldr	r1, [pc, #200]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009600:	4313      	orrs	r3, r2
 8009602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800960e:	d105      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009610:	4b2d      	ldr	r3, [pc, #180]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	4a2c      	ldr	r2, [pc, #176]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800961a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d015      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009628:	4b27      	ldr	r3, [pc, #156]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800962a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009636:	4924      	ldr	r1, [pc, #144]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009638:	4313      	orrs	r3, r2
 800963a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009646:	d105      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009648:	4b1f      	ldr	r3, [pc, #124]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	4a1e      	ldr	r2, [pc, #120]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009652:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d015      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009660:	4b19      	ldr	r3, [pc, #100]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009666:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800966e:	4916      	ldr	r1, [pc, #88]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009670:	4313      	orrs	r3, r2
 8009672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800967a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800967e:	d105      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009680:	4b11      	ldr	r3, [pc, #68]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	4a10      	ldr	r2, [pc, #64]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800968a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d019      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009698:	4b0b      	ldr	r3, [pc, #44]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800969a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800969e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a6:	4908      	ldr	r1, [pc, #32]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a8:	4313      	orrs	r3, r2
 80096aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096b6:	d109      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096b8:	4b03      	ldr	r3, [pc, #12]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	4a02      	ldr	r2, [pc, #8]	@ (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096c2:	60d3      	str	r3, [r2, #12]
 80096c4:	e002      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80096c6:	bf00      	nop
 80096c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d015      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80096d8:	4b29      	ldr	r3, [pc, #164]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e6:	4926      	ldr	r1, [pc, #152]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096f6:	d105      	bne.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096f8:	4b21      	ldr	r3, [pc, #132]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	4a20      	ldr	r2, [pc, #128]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009702:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d015      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009710:	4b1b      	ldr	r3, [pc, #108]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009716:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800971e:	4918      	ldr	r1, [pc, #96]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009720:	4313      	orrs	r3, r2
 8009722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800972e:	d105      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009730:	4b13      	ldr	r3, [pc, #76]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	4a12      	ldr	r2, [pc, #72]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800973a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d015      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009748:	4b0d      	ldr	r3, [pc, #52]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800974a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800974e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009756:	490a      	ldr	r1, [pc, #40]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009758:	4313      	orrs	r3, r2
 800975a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009766:	d105      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009768:	4b05      	ldr	r3, [pc, #20]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	4a04      	ldr	r2, [pc, #16]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800976e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009772:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009774:	7cbb      	ldrb	r3, [r7, #18]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	40021000 	.word	0x40021000

08009784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e09d      	b.n	80098d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979a:	2b00      	cmp	r3, #0
 800979c:	d108      	bne.n	80097b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097a6:	d009      	beq.n	80097bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	61da      	str	r2, [r3, #28]
 80097ae:	e005      	b.n	80097bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7fb ff9c 	bl	8005714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097fc:	d902      	bls.n	8009804 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
 8009802:	e002      	b.n	800980a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009808:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009812:	d007      	beq.n	8009824 <HAL_SPI_Init+0xa0>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800981c:	d002      	beq.n	8009824 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800985c:	431a      	orrs	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009866:	ea42 0103 	orr.w	r1, r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	0c1b      	lsrs	r3, r3, #16
 8009880:	f003 0204 	and.w	r2, r3, #4
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009888:	f003 0310 	and.w	r3, r3, #16
 800988c:	431a      	orrs	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80098a0:	ea42 0103 	orr.w	r1, r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69da      	ldr	r2, [r3, #28]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b08a      	sub	sp, #40	@ 0x28
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098e8:	2301      	movs	r3, #1
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ec:	f7fc fe50 	bl	8006590 <HAL_GetTick>
 80098f0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098f8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009900:	887b      	ldrh	r3, [r7, #2]
 8009902:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009904:	887b      	ldrh	r3, [r7, #2]
 8009906:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009908:	7ffb      	ldrb	r3, [r7, #31]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d00c      	beq.n	8009928 <HAL_SPI_TransmitReceive+0x4e>
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009914:	d106      	bne.n	8009924 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d102      	bne.n	8009924 <HAL_SPI_TransmitReceive+0x4a>
 800991e:	7ffb      	ldrb	r3, [r7, #31]
 8009920:	2b04      	cmp	r3, #4
 8009922:	d001      	beq.n	8009928 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009924:	2302      	movs	r3, #2
 8009926:	e1f3      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d005      	beq.n	800993a <HAL_SPI_TransmitReceive+0x60>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <HAL_SPI_TransmitReceive+0x60>
 8009934:	887b      	ldrh	r3, [r7, #2]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e1e8      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009944:	2b01      	cmp	r3, #1
 8009946:	d101      	bne.n	800994c <HAL_SPI_TransmitReceive+0x72>
 8009948:	2302      	movs	r3, #2
 800994a:	e1e1      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x436>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b04      	cmp	r3, #4
 800995e:	d003      	beq.n	8009968 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2205      	movs	r2, #5
 8009964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	887a      	ldrh	r2, [r7, #2]
 8009978:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	887a      	ldrh	r2, [r7, #2]
 8009980:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	887a      	ldrh	r2, [r7, #2]
 800998e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	887a      	ldrh	r2, [r7, #2]
 8009994:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80099aa:	d802      	bhi.n	80099b2 <HAL_SPI_TransmitReceive+0xd8>
 80099ac:	8abb      	ldrh	r3, [r7, #20]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d908      	bls.n	80099c4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099c0:	605a      	str	r2, [r3, #4]
 80099c2:	e007      	b.n	80099d4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80099d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099de:	2b40      	cmp	r3, #64	@ 0x40
 80099e0:	d007      	beq.n	80099f2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80099fa:	f240 8083 	bls.w	8009b04 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <HAL_SPI_TransmitReceive+0x132>
 8009a06:	8afb      	ldrh	r3, [r7, #22]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d16f      	bne.n	8009aec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a10:	881a      	ldrh	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1c:	1c9a      	adds	r2, r3, #2
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a30:	e05c      	b.n	8009aec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d11b      	bne.n	8009a78 <HAL_SPI_TransmitReceive+0x19e>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d016      	beq.n	8009a78 <HAL_SPI_TransmitReceive+0x19e>
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d113      	bne.n	8009a78 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a54:	881a      	ldrh	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a60:	1c9a      	adds	r2, r3, #2
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d11c      	bne.n	8009ac0 <HAL_SPI_TransmitReceive+0x1e6>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d016      	beq.n	8009ac0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9c:	b292      	uxth	r2, r2
 8009a9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa4:	1c9a      	adds	r2, r3, #2
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009abc:	2301      	movs	r3, #1
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ac0:	f7fc fd66 	bl	8006590 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d80d      	bhi.n	8009aec <HAL_SPI_TransmitReceive+0x212>
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad6:	d009      	beq.n	8009aec <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e111      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d19d      	bne.n	8009a32 <HAL_SPI_TransmitReceive+0x158>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d197      	bne.n	8009a32 <HAL_SPI_TransmitReceive+0x158>
 8009b02:	e0e5      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_SPI_TransmitReceive+0x23a>
 8009b0c:	8afb      	ldrh	r3, [r7, #22]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	f040 80d1 	bne.w	8009cb6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d912      	bls.n	8009b44 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b22:	881a      	ldrh	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2e:	1c9a      	adds	r2, r3, #2
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3b02      	subs	r3, #2
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b42:	e0b8      	b.n	8009cb6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	330c      	adds	r3, #12
 8009b4e:	7812      	ldrb	r2, [r2, #0]
 8009b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b6a:	e0a4      	b.n	8009cb6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f003 0302 	and.w	r3, r3, #2
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d134      	bne.n	8009be4 <HAL_SPI_TransmitReceive+0x30a>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d02f      	beq.n	8009be4 <HAL_SPI_TransmitReceive+0x30a>
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d12c      	bne.n	8009be4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d912      	bls.n	8009bba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b98:	881a      	ldrh	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba4:	1c9a      	adds	r2, r3, #2
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	3b02      	subs	r3, #2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009bb8:	e012      	b.n	8009be0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	7812      	ldrb	r2, [r2, #0]
 8009bc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d148      	bne.n	8009c84 <HAL_SPI_TransmitReceive+0x3aa>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d042      	beq.n	8009c84 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d923      	bls.n	8009c52 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68da      	ldr	r2, [r3, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c14:	b292      	uxth	r2, r2
 8009c16:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1c:	1c9a      	adds	r2, r3, #2
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	3b02      	subs	r3, #2
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d81f      	bhi.n	8009c80 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c4e:	605a      	str	r2, [r3, #4]
 8009c50:	e016      	b.n	8009c80 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f103 020c 	add.w	r2, r3, #12
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c5e:	7812      	ldrb	r2, [r2, #0]
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c80:	2301      	movs	r3, #1
 8009c82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c84:	f7fc fc84 	bl	8006590 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d803      	bhi.n	8009c9c <HAL_SPI_TransmitReceive+0x3c2>
 8009c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d102      	bne.n	8009ca2 <HAL_SPI_TransmitReceive+0x3c8>
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d109      	bne.n	8009cb6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e02c      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f47f af55 	bne.w	8009b6c <HAL_SPI_TransmitReceive+0x292>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f47f af4e 	bne.w	8009b6c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cd0:	6a3a      	ldr	r2, [r7, #32]
 8009cd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f93d 	bl	8009f54 <SPI_EndRxTxTransaction>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d008      	beq.n	8009cf2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2220      	movs	r2, #32
 8009ce4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e00e      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e000      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
  }
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3728      	adds	r7, #40	@ 0x28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	4613      	mov	r3, r2
 8009d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d28:	f7fc fc32 	bl	8006590 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	1a9b      	subs	r3, r3, r2
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4413      	add	r3, r2
 8009d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d38:	f7fc fc2a 	bl	8006590 <HAL_GetTick>
 8009d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d3e:	4b39      	ldr	r3, [pc, #228]	@ (8009e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	015b      	lsls	r3, r3, #5
 8009d44:	0d1b      	lsrs	r3, r3, #20
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	fb02 f303 	mul.w	r3, r2, r3
 8009d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d4e:	e054      	b.n	8009dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d56:	d050      	beq.n	8009dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d58:	f7fc fc1a 	bl	8006590 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	69fa      	ldr	r2, [r7, #28]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d902      	bls.n	8009d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d13d      	bne.n	8009dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d86:	d111      	bne.n	8009dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d90:	d004      	beq.n	8009d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d9a:	d107      	bne.n	8009dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009db4:	d10f      	bne.n	8009dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e017      	b.n	8009e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4013      	ands	r3, r2
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	bf0c      	ite	eq
 8009e0a:	2301      	moveq	r3, #1
 8009e0c:	2300      	movne	r3, #0
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	461a      	mov	r2, r3
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d19b      	bne.n	8009d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3720      	adds	r7, #32
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	2000020c 	.word	0x2000020c

08009e28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08a      	sub	sp, #40	@ 0x28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009e3a:	f7fc fba9 	bl	8006590 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	4413      	add	r3, r2
 8009e48:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009e4a:	f7fc fba1 	bl	8006590 <HAL_GetTick>
 8009e4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	330c      	adds	r3, #12
 8009e56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e58:	4b3d      	ldr	r3, [pc, #244]	@ (8009f50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	00da      	lsls	r2, r3, #3
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	0d1b      	lsrs	r3, r3, #20
 8009e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e6a:	fb02 f303 	mul.w	r3, r2, r3
 8009e6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e70:	e060      	b.n	8009f34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e78:	d107      	bne.n	8009e8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d104      	bne.n	8009e8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d050      	beq.n	8009f34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e92:	f7fc fb7d 	bl	8006590 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d902      	bls.n	8009ea8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d13d      	bne.n	8009f24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009eb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ec0:	d111      	bne.n	8009ee6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009eca:	d004      	beq.n	8009ed6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ed4:	d107      	bne.n	8009ee6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ee4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009eee:	d10f      	bne.n	8009f10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e010      	b.n	8009f46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d196      	bne.n	8009e72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3728      	adds	r7, #40	@ 0x28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	2000020c 	.word	0x2000020c

08009f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af02      	add	r7, sp, #8
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff ff5b 	bl	8009e28 <SPI_WaitFifoStateUntilTimeout>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d007      	beq.n	8009f88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f7c:	f043 0220 	orr.w	r2, r3, #32
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e027      	b.n	8009fd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2180      	movs	r1, #128	@ 0x80
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff fec0 	bl	8009d18 <SPI_WaitFlagStateUntilTimeout>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d007      	beq.n	8009fae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa2:	f043 0220 	orr.w	r2, r3, #32
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e014      	b.n	8009fd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff ff34 	bl	8009e28 <SPI_WaitFifoStateUntilTimeout>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d007      	beq.n	8009fd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fca:	f043 0220 	orr.w	r2, r3, #32
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e000      	b.n	8009fd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e054      	b.n	800a09c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d111      	bne.n	800a022 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 ffd4 	bl	800bfb4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a23      	ldr	r2, [pc, #140]	@ (800a0a4 <HAL_TIM_Base_Init+0xc4>)
 800a018:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2202      	movs	r2, #2
 800a026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3304      	adds	r3, #4
 800a032:	4619      	mov	r1, r3
 800a034:	4610      	mov	r0, r2
 800a036:	f001 fb1d 	bl	800b674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	08005fc9 	.word	0x08005fc9

0800a0a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d001      	beq.n	800a0c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e04c      	b.n	800a15a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a26      	ldr	r2, [pc, #152]	@ (800a168 <HAL_TIM_Base_Start+0xc0>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d022      	beq.n	800a118 <HAL_TIM_Base_Start+0x70>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0da:	d01d      	beq.n	800a118 <HAL_TIM_Base_Start+0x70>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a22      	ldr	r2, [pc, #136]	@ (800a16c <HAL_TIM_Base_Start+0xc4>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d018      	beq.n	800a118 <HAL_TIM_Base_Start+0x70>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a21      	ldr	r2, [pc, #132]	@ (800a170 <HAL_TIM_Base_Start+0xc8>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d013      	beq.n	800a118 <HAL_TIM_Base_Start+0x70>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a1f      	ldr	r2, [pc, #124]	@ (800a174 <HAL_TIM_Base_Start+0xcc>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d00e      	beq.n	800a118 <HAL_TIM_Base_Start+0x70>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a1e      	ldr	r2, [pc, #120]	@ (800a178 <HAL_TIM_Base_Start+0xd0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d009      	beq.n	800a118 <HAL_TIM_Base_Start+0x70>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a1c      	ldr	r2, [pc, #112]	@ (800a17c <HAL_TIM_Base_Start+0xd4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d004      	beq.n	800a118 <HAL_TIM_Base_Start+0x70>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a1b      	ldr	r2, [pc, #108]	@ (800a180 <HAL_TIM_Base_Start+0xd8>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d115      	bne.n	800a144 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689a      	ldr	r2, [r3, #8]
 800a11e:	4b19      	ldr	r3, [pc, #100]	@ (800a184 <HAL_TIM_Base_Start+0xdc>)
 800a120:	4013      	ands	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b06      	cmp	r3, #6
 800a128:	d015      	beq.n	800a156 <HAL_TIM_Base_Start+0xae>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a130:	d011      	beq.n	800a156 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f042 0201 	orr.w	r2, r2, #1
 800a140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a142:	e008      	b.n	800a156 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0201 	orr.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e000      	b.n	800a158 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40012c00 	.word	0x40012c00
 800a16c:	40000400 	.word	0x40000400
 800a170:	40000800 	.word	0x40000800
 800a174:	40000c00 	.word	0x40000c00
 800a178:	40013400 	.word	0x40013400
 800a17c:	40014000 	.word	0x40014000
 800a180:	40015000 	.word	0x40015000
 800a184:	00010007 	.word	0x00010007

0800a188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d001      	beq.n	800a1a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e054      	b.n	800a24a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68da      	ldr	r2, [r3, #12]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0201 	orr.w	r2, r2, #1
 800a1b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a26      	ldr	r2, [pc, #152]	@ (800a258 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d022      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0x80>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ca:	d01d      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0x80>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a22      	ldr	r2, [pc, #136]	@ (800a25c <HAL_TIM_Base_Start_IT+0xd4>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d018      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0x80>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a21      	ldr	r2, [pc, #132]	@ (800a260 <HAL_TIM_Base_Start_IT+0xd8>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d013      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0x80>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a1f      	ldr	r2, [pc, #124]	@ (800a264 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d00e      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0x80>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a1e      	ldr	r2, [pc, #120]	@ (800a268 <HAL_TIM_Base_Start_IT+0xe0>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d009      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0x80>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1c      	ldr	r2, [pc, #112]	@ (800a26c <HAL_TIM_Base_Start_IT+0xe4>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d004      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0x80>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a1b      	ldr	r2, [pc, #108]	@ (800a270 <HAL_TIM_Base_Start_IT+0xe8>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d115      	bne.n	800a234 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	4b19      	ldr	r3, [pc, #100]	@ (800a274 <HAL_TIM_Base_Start_IT+0xec>)
 800a210:	4013      	ands	r3, r2
 800a212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b06      	cmp	r3, #6
 800a218:	d015      	beq.n	800a246 <HAL_TIM_Base_Start_IT+0xbe>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a220:	d011      	beq.n	800a246 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 0201 	orr.w	r2, r2, #1
 800a230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a232:	e008      	b.n	800a246 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0201 	orr.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	e000      	b.n	800a248 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40012c00 	.word	0x40012c00
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40013400 	.word	0x40013400
 800a26c:	40014000 	.word	0x40014000
 800a270:	40015000 	.word	0x40015000
 800a274:	00010007 	.word	0x00010007

0800a278 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e054      	b.n	800a334 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d111      	bne.n	800a2ba <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 fe88 	bl	800bfb4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a23      	ldr	r2, [pc, #140]	@ (800a33c <HAL_TIM_OC_Init+0xc4>)
 800a2b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2202      	movs	r2, #2
 800a2be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	f001 f9d1 	bl	800b674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	0800a341 	.word	0x0800a341

0800a340 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e054      	b.n	800a410 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d111      	bne.n	800a396 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 fe1a 	bl	800bfb4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a384:	2b00      	cmp	r3, #0
 800a386:	d102      	bne.n	800a38e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a23      	ldr	r2, [pc, #140]	@ (800a418 <HAL_TIM_PWM_Init+0xc4>)
 800a38c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2202      	movs	r2, #2
 800a39a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f001 f963 	bl	800b674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	0800a41d 	.word	0x0800a41d

0800a41c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d109      	bne.n	800a454 <HAL_TIM_PWM_Start+0x24>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b01      	cmp	r3, #1
 800a44a:	bf14      	ite	ne
 800a44c:	2301      	movne	r3, #1
 800a44e:	2300      	moveq	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	e03c      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2b04      	cmp	r3, #4
 800a458:	d109      	bne.n	800a46e <HAL_TIM_PWM_Start+0x3e>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b01      	cmp	r3, #1
 800a464:	bf14      	ite	ne
 800a466:	2301      	movne	r3, #1
 800a468:	2300      	moveq	r3, #0
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	e02f      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b08      	cmp	r3, #8
 800a472:	d109      	bne.n	800a488 <HAL_TIM_PWM_Start+0x58>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	bf14      	ite	ne
 800a480:	2301      	movne	r3, #1
 800a482:	2300      	moveq	r3, #0
 800a484:	b2db      	uxtb	r3, r3
 800a486:	e022      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b0c      	cmp	r3, #12
 800a48c:	d109      	bne.n	800a4a2 <HAL_TIM_PWM_Start+0x72>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b01      	cmp	r3, #1
 800a498:	bf14      	ite	ne
 800a49a:	2301      	movne	r3, #1
 800a49c:	2300      	moveq	r3, #0
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	e015      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b10      	cmp	r3, #16
 800a4a6:	d109      	bne.n	800a4bc <HAL_TIM_PWM_Start+0x8c>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	bf14      	ite	ne
 800a4b4:	2301      	movne	r3, #1
 800a4b6:	2300      	moveq	r3, #0
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	e008      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	bf14      	ite	ne
 800a4c8:	2301      	movne	r3, #1
 800a4ca:	2300      	moveq	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e0a6      	b.n	800a624 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d104      	bne.n	800a4e6 <HAL_TIM_PWM_Start+0xb6>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4e4:	e023      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d104      	bne.n	800a4f6 <HAL_TIM_PWM_Start+0xc6>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4f4:	e01b      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	d104      	bne.n	800a506 <HAL_TIM_PWM_Start+0xd6>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a504:	e013      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b0c      	cmp	r3, #12
 800a50a:	d104      	bne.n	800a516 <HAL_TIM_PWM_Start+0xe6>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a514:	e00b      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b10      	cmp	r3, #16
 800a51a:	d104      	bne.n	800a526 <HAL_TIM_PWM_Start+0xf6>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a524:	e003      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2202      	movs	r2, #2
 800a52a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2201      	movs	r2, #1
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f001 fd16 	bl	800bf68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a3a      	ldr	r2, [pc, #232]	@ (800a62c <HAL_TIM_PWM_Start+0x1fc>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d018      	beq.n	800a578 <HAL_TIM_PWM_Start+0x148>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a39      	ldr	r2, [pc, #228]	@ (800a630 <HAL_TIM_PWM_Start+0x200>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d013      	beq.n	800a578 <HAL_TIM_PWM_Start+0x148>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a37      	ldr	r2, [pc, #220]	@ (800a634 <HAL_TIM_PWM_Start+0x204>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d00e      	beq.n	800a578 <HAL_TIM_PWM_Start+0x148>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a36      	ldr	r2, [pc, #216]	@ (800a638 <HAL_TIM_PWM_Start+0x208>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d009      	beq.n	800a578 <HAL_TIM_PWM_Start+0x148>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a34      	ldr	r2, [pc, #208]	@ (800a63c <HAL_TIM_PWM_Start+0x20c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d004      	beq.n	800a578 <HAL_TIM_PWM_Start+0x148>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a33      	ldr	r2, [pc, #204]	@ (800a640 <HAL_TIM_PWM_Start+0x210>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d101      	bne.n	800a57c <HAL_TIM_PWM_Start+0x14c>
 800a578:	2301      	movs	r3, #1
 800a57a:	e000      	b.n	800a57e <HAL_TIM_PWM_Start+0x14e>
 800a57c:	2300      	movs	r3, #0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d007      	beq.n	800a592 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a590:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a25      	ldr	r2, [pc, #148]	@ (800a62c <HAL_TIM_PWM_Start+0x1fc>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d022      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x1b2>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5a4:	d01d      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x1b2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a26      	ldr	r2, [pc, #152]	@ (800a644 <HAL_TIM_PWM_Start+0x214>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d018      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x1b2>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a24      	ldr	r2, [pc, #144]	@ (800a648 <HAL_TIM_PWM_Start+0x218>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d013      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x1b2>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a23      	ldr	r2, [pc, #140]	@ (800a64c <HAL_TIM_PWM_Start+0x21c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d00e      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x1b2>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a19      	ldr	r2, [pc, #100]	@ (800a630 <HAL_TIM_PWM_Start+0x200>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d009      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x1b2>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a18      	ldr	r2, [pc, #96]	@ (800a634 <HAL_TIM_PWM_Start+0x204>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d004      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x1b2>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a18      	ldr	r2, [pc, #96]	@ (800a640 <HAL_TIM_PWM_Start+0x210>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d115      	bne.n	800a60e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	4b19      	ldr	r3, [pc, #100]	@ (800a650 <HAL_TIM_PWM_Start+0x220>)
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b06      	cmp	r3, #6
 800a5f2:	d015      	beq.n	800a620 <HAL_TIM_PWM_Start+0x1f0>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5fa:	d011      	beq.n	800a620 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0201 	orr.w	r2, r2, #1
 800a60a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a60c:	e008      	b.n	800a620 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0201 	orr.w	r2, r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	e000      	b.n	800a622 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	40012c00 	.word	0x40012c00
 800a630:	40013400 	.word	0x40013400
 800a634:	40014000 	.word	0x40014000
 800a638:	40014400 	.word	0x40014400
 800a63c:	40014800 	.word	0x40014800
 800a640:	40015000 	.word	0x40015000
 800a644:	40000400 	.word	0x40000400
 800a648:	40000800 	.word	0x40000800
 800a64c:	40000c00 	.word	0x40000c00
 800a650:	00010007 	.word	0x00010007

0800a654 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e04c      	b.n	800a702 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	d111      	bne.n	800a698 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 fc99 	bl	800bfb4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a1f      	ldr	r2, [pc, #124]	@ (800a70c <HAL_TIM_OnePulse_Init+0xb8>)
 800a68e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f000 ffe2 	bl	800b674 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0208 	bic.w	r2, r2, #8
 800a6be:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6819      	ldr	r1, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	0800a711 	.word	0x0800a711

0800a710 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a734:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a73c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a744:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a74c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d108      	bne.n	800a766 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d105      	bne.n	800a766 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a75a:	7b7b      	ldrb	r3, [r7, #13]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d102      	bne.n	800a766 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a760:	7b3b      	ldrb	r3, [r7, #12]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d001      	beq.n	800a76a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e059      	b.n	800a81e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2202      	movs	r2, #2
 800a76e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2202      	movs	r2, #2
 800a776:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2202      	movs	r2, #2
 800a77e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2202      	movs	r2, #2
 800a786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 0202 	orr.w	r2, r2, #2
 800a798:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68da      	ldr	r2, [r3, #12]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f042 0204 	orr.w	r2, r2, #4
 800a7a8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 fbd8 	bl	800bf68 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	2104      	movs	r1, #4
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 fbd1 	bl	800bf68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a17      	ldr	r2, [pc, #92]	@ (800a828 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d018      	beq.n	800a802 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a15      	ldr	r2, [pc, #84]	@ (800a82c <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d013      	beq.n	800a802 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a14      	ldr	r2, [pc, #80]	@ (800a830 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d00e      	beq.n	800a802 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a12      	ldr	r2, [pc, #72]	@ (800a834 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d009      	beq.n	800a802 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a11      	ldr	r2, [pc, #68]	@ (800a838 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d004      	beq.n	800a802 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a0f      	ldr	r2, [pc, #60]	@ (800a83c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d101      	bne.n	800a806 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a806:	2300      	movs	r3, #0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a81a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	40012c00 	.word	0x40012c00
 800a82c:	40013400 	.word	0x40013400
 800a830:	40014000 	.word	0x40014000
 800a834:	40014400 	.word	0x40014400
 800a838:	40014800 	.word	0x40014800
 800a83c:	40015000 	.word	0x40015000

0800a840 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e0a2      	b.n	800a99a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d111      	bne.n	800a884 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f001 fba3 	bl	800bfb4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a4a      	ldr	r2, [pc, #296]	@ (800a9a4 <HAL_TIM_Encoder_Init+0x164>)
 800a87a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2202      	movs	r2, #2
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6812      	ldr	r2, [r2, #0]
 800a896:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a89a:	f023 0307 	bic.w	r3, r3, #7
 800a89e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	f000 fee2 	bl	800b674 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8d8:	f023 0303 	bic.w	r3, r3, #3
 800a8dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	689a      	ldr	r2, [r3, #8]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	021b      	lsls	r3, r3, #8
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a8f6:	f023 030c 	bic.w	r3, r3, #12
 800a8fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a902:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	68da      	ldr	r2, [r3, #12]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	69db      	ldr	r3, [r3, #28]
 800a910:	021b      	lsls	r3, r3, #8
 800a912:	4313      	orrs	r3, r2
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	4313      	orrs	r3, r2
 800a918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	011a      	lsls	r2, r3, #4
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	6a1b      	ldr	r3, [r3, #32]
 800a924:	031b      	lsls	r3, r3, #12
 800a926:	4313      	orrs	r3, r2
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a934:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a93c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	4313      	orrs	r3, r2
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	080060e1 	.word	0x080060e1

0800a9a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a9b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a9c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d110      	bne.n	800a9fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d102      	bne.n	800a9e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9de:	7b7b      	ldrb	r3, [r7, #13]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d001      	beq.n	800a9e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e069      	b.n	800aabc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9f8:	e031      	b.n	800aa5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d110      	bne.n	800aa22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d102      	bne.n	800aa0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa06:	7b3b      	ldrb	r3, [r7, #12]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d001      	beq.n	800aa10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e055      	b.n	800aabc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2202      	movs	r2, #2
 800aa14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa20:	e01d      	b.n	800aa5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d108      	bne.n	800aa3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d105      	bne.n	800aa3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa2e:	7b7b      	ldrb	r3, [r7, #13]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d102      	bne.n	800aa3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa34:	7b3b      	ldrb	r3, [r7, #12]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d001      	beq.n	800aa3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e03e      	b.n	800aabc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2202      	movs	r2, #2
 800aa42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2202      	movs	r2, #2
 800aa4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2202      	movs	r2, #2
 800aa52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <HAL_TIM_Encoder_Start+0xc4>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d008      	beq.n	800aa7c <HAL_TIM_Encoder_Start+0xd4>
 800aa6a:	e00f      	b.n	800aa8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2201      	movs	r2, #1
 800aa72:	2100      	movs	r1, #0
 800aa74:	4618      	mov	r0, r3
 800aa76:	f001 fa77 	bl	800bf68 <TIM_CCxChannelCmd>
      break;
 800aa7a:	e016      	b.n	800aaaa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2201      	movs	r2, #1
 800aa82:	2104      	movs	r1, #4
 800aa84:	4618      	mov	r0, r3
 800aa86:	f001 fa6f 	bl	800bf68 <TIM_CCxChannelCmd>
      break;
 800aa8a:	e00e      	b.n	800aaaa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2201      	movs	r2, #1
 800aa92:	2100      	movs	r1, #0
 800aa94:	4618      	mov	r0, r3
 800aa96:	f001 fa67 	bl	800bf68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	2104      	movs	r1, #4
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f001 fa60 	bl	800bf68 <TIM_CCxChannelCmd>
      break;
 800aaa8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f042 0201 	orr.w	r2, r2, #1
 800aab8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	f003 0302 	and.w	r3, r3, #2
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d026      	beq.n	800ab34 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d021      	beq.n	800ab34 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f06f 0202 	mvn.w	r2, #2
 800aaf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	f003 0303 	and.w	r3, r3, #3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d005      	beq.n	800ab1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	4798      	blx	r3
 800ab18:	e009      	b.n	800ab2e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f003 0304 	and.w	r3, r3, #4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d026      	beq.n	800ab8c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d021      	beq.n	800ab8c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f06f 0204 	mvn.w	r2, #4
 800ab50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2202      	movs	r2, #2
 800ab56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d005      	beq.n	800ab72 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	4798      	blx	r3
 800ab70:	e009      	b.n	800ab86 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f003 0308 	and.w	r3, r3, #8
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d026      	beq.n	800abe4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f003 0308 	and.w	r3, r3, #8
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d021      	beq.n	800abe4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f06f 0208 	mvn.w	r2, #8
 800aba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2204      	movs	r2, #4
 800abae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	f003 0303 	and.w	r3, r3, #3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	4798      	blx	r3
 800abc8:	e009      	b.n	800abde <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	f003 0310 	and.w	r3, r3, #16
 800abea:	2b00      	cmp	r3, #0
 800abec:	d026      	beq.n	800ac3c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f003 0310 	and.w	r3, r3, #16
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d021      	beq.n	800ac3c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f06f 0210 	mvn.w	r2, #16
 800ac00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2208      	movs	r2, #8
 800ac06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d005      	beq.n	800ac22 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	4798      	blx	r3
 800ac20:	e009      	b.n	800ac36 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00e      	beq.n	800ac64 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d009      	beq.n	800ac64 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f06f 0201 	mvn.w	r2, #1
 800ac58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d104      	bne.n	800ac78 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d009      	beq.n	800ac96 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ac8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00e      	beq.n	800acbe <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800acb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d009      	beq.n	800ace6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800acda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f003 0320 	and.w	r3, r3, #32
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00e      	beq.n	800ad0e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f003 0320 	and.w	r3, r3, #32
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d009      	beq.n	800ad0e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f06f 0220 	mvn.w	r2, #32
 800ad02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00e      	beq.n	800ad36 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d009      	beq.n	800ad36 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ad2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00e      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ad52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00e      	beq.n	800ad86 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ad7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00e      	beq.n	800adae <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ada2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adae:	bf00      	nop
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
	...

0800adb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adce:	2b01      	cmp	r3, #1
 800add0:	d101      	bne.n	800add6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800add2:	2302      	movs	r3, #2
 800add4:	e066      	b.n	800aea4 <HAL_TIM_OC_ConfigChannel+0xec>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b14      	cmp	r3, #20
 800ade2:	d857      	bhi.n	800ae94 <HAL_TIM_OC_ConfigChannel+0xdc>
 800ade4:	a201      	add	r2, pc, #4	@ (adr r2, 800adec <HAL_TIM_OC_ConfigChannel+0x34>)
 800ade6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adea:	bf00      	nop
 800adec:	0800ae41 	.word	0x0800ae41
 800adf0:	0800ae95 	.word	0x0800ae95
 800adf4:	0800ae95 	.word	0x0800ae95
 800adf8:	0800ae95 	.word	0x0800ae95
 800adfc:	0800ae4f 	.word	0x0800ae4f
 800ae00:	0800ae95 	.word	0x0800ae95
 800ae04:	0800ae95 	.word	0x0800ae95
 800ae08:	0800ae95 	.word	0x0800ae95
 800ae0c:	0800ae5d 	.word	0x0800ae5d
 800ae10:	0800ae95 	.word	0x0800ae95
 800ae14:	0800ae95 	.word	0x0800ae95
 800ae18:	0800ae95 	.word	0x0800ae95
 800ae1c:	0800ae6b 	.word	0x0800ae6b
 800ae20:	0800ae95 	.word	0x0800ae95
 800ae24:	0800ae95 	.word	0x0800ae95
 800ae28:	0800ae95 	.word	0x0800ae95
 800ae2c:	0800ae79 	.word	0x0800ae79
 800ae30:	0800ae95 	.word	0x0800ae95
 800ae34:	0800ae95 	.word	0x0800ae95
 800ae38:	0800ae95 	.word	0x0800ae95
 800ae3c:	0800ae87 	.word	0x0800ae87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68b9      	ldr	r1, [r7, #8]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fcc8 	bl	800b7dc <TIM_OC1_SetConfig>
      break;
 800ae4c:	e025      	b.n	800ae9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68b9      	ldr	r1, [r7, #8]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 fd5b 	bl	800b910 <TIM_OC2_SetConfig>
      break;
 800ae5a:	e01e      	b.n	800ae9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68b9      	ldr	r1, [r7, #8]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fde8 	bl	800ba38 <TIM_OC3_SetConfig>
      break;
 800ae68:	e017      	b.n	800ae9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68b9      	ldr	r1, [r7, #8]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 fe73 	bl	800bb5c <TIM_OC4_SetConfig>
      break;
 800ae76:	e010      	b.n	800ae9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68b9      	ldr	r1, [r7, #8]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 ff00 	bl	800bc84 <TIM_OC5_SetConfig>
      break;
 800ae84:	e009      	b.n	800ae9a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68b9      	ldr	r1, [r7, #8]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 ff63 	bl	800bd58 <TIM_OC6_SetConfig>
      break;
 800ae92:	e002      	b.n	800ae9a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	75fb      	strb	r3, [r7, #23]
      break;
 800ae98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e0ff      	b.n	800b0ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b14      	cmp	r3, #20
 800aed6:	f200 80f0 	bhi.w	800b0ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aeda:	a201      	add	r2, pc, #4	@ (adr r2, 800aee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af35 	.word	0x0800af35
 800aee4:	0800b0bb 	.word	0x0800b0bb
 800aee8:	0800b0bb 	.word	0x0800b0bb
 800aeec:	0800b0bb 	.word	0x0800b0bb
 800aef0:	0800af75 	.word	0x0800af75
 800aef4:	0800b0bb 	.word	0x0800b0bb
 800aef8:	0800b0bb 	.word	0x0800b0bb
 800aefc:	0800b0bb 	.word	0x0800b0bb
 800af00:	0800afb7 	.word	0x0800afb7
 800af04:	0800b0bb 	.word	0x0800b0bb
 800af08:	0800b0bb 	.word	0x0800b0bb
 800af0c:	0800b0bb 	.word	0x0800b0bb
 800af10:	0800aff7 	.word	0x0800aff7
 800af14:	0800b0bb 	.word	0x0800b0bb
 800af18:	0800b0bb 	.word	0x0800b0bb
 800af1c:	0800b0bb 	.word	0x0800b0bb
 800af20:	0800b039 	.word	0x0800b039
 800af24:	0800b0bb 	.word	0x0800b0bb
 800af28:	0800b0bb 	.word	0x0800b0bb
 800af2c:	0800b0bb 	.word	0x0800b0bb
 800af30:	0800b079 	.word	0x0800b079
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fc4e 	bl	800b7dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0208 	orr.w	r2, r2, #8
 800af4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	699a      	ldr	r2, [r3, #24]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0204 	bic.w	r2, r2, #4
 800af5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6999      	ldr	r1, [r3, #24]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	691a      	ldr	r2, [r3, #16]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	619a      	str	r2, [r3, #24]
      break;
 800af72:	e0a5      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fcc8 	bl	800b910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6999      	ldr	r1, [r3, #24]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	021a      	lsls	r2, r3, #8
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	619a      	str	r2, [r3, #24]
      break;
 800afb4:	e084      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fd3b 	bl	800ba38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0208 	orr.w	r2, r2, #8
 800afd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69da      	ldr	r2, [r3, #28]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f022 0204 	bic.w	r2, r2, #4
 800afe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69d9      	ldr	r1, [r3, #28]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	61da      	str	r2, [r3, #28]
      break;
 800aff4:	e064      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68b9      	ldr	r1, [r7, #8]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fdad 	bl	800bb5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69d9      	ldr	r1, [r3, #28]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	021a      	lsls	r2, r3, #8
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	61da      	str	r2, [r3, #28]
      break;
 800b036:	e043      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68b9      	ldr	r1, [r7, #8]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fe20 	bl	800bc84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0208 	orr.w	r2, r2, #8
 800b052:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0204 	bic.w	r2, r2, #4
 800b062:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b076:	e023      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 fe6a 	bl	800bd58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b092:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	021a      	lsls	r2, r3, #8
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b0b8:	e002      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b0be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop

0800b0d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d101      	bne.n	800b0f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e0f6      	b.n	800b2de <HAL_TIM_ConfigClockSource+0x20a>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b10e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b11a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a6f      	ldr	r2, [pc, #444]	@ (800b2e8 <HAL_TIM_ConfigClockSource+0x214>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	f000 80c1 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b130:	4a6d      	ldr	r2, [pc, #436]	@ (800b2e8 <HAL_TIM_ConfigClockSource+0x214>)
 800b132:	4293      	cmp	r3, r2
 800b134:	f200 80c6 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b138:	4a6c      	ldr	r2, [pc, #432]	@ (800b2ec <HAL_TIM_ConfigClockSource+0x218>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	f000 80b9 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b140:	4a6a      	ldr	r2, [pc, #424]	@ (800b2ec <HAL_TIM_ConfigClockSource+0x218>)
 800b142:	4293      	cmp	r3, r2
 800b144:	f200 80be 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b148:	4a69      	ldr	r2, [pc, #420]	@ (800b2f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	f000 80b1 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b150:	4a67      	ldr	r2, [pc, #412]	@ (800b2f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b152:	4293      	cmp	r3, r2
 800b154:	f200 80b6 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b158:	4a66      	ldr	r2, [pc, #408]	@ (800b2f4 <HAL_TIM_ConfigClockSource+0x220>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	f000 80a9 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b160:	4a64      	ldr	r2, [pc, #400]	@ (800b2f4 <HAL_TIM_ConfigClockSource+0x220>)
 800b162:	4293      	cmp	r3, r2
 800b164:	f200 80ae 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b168:	4a63      	ldr	r2, [pc, #396]	@ (800b2f8 <HAL_TIM_ConfigClockSource+0x224>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	f000 80a1 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b170:	4a61      	ldr	r2, [pc, #388]	@ (800b2f8 <HAL_TIM_ConfigClockSource+0x224>)
 800b172:	4293      	cmp	r3, r2
 800b174:	f200 80a6 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b178:	4a60      	ldr	r2, [pc, #384]	@ (800b2fc <HAL_TIM_ConfigClockSource+0x228>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	f000 8099 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b180:	4a5e      	ldr	r2, [pc, #376]	@ (800b2fc <HAL_TIM_ConfigClockSource+0x228>)
 800b182:	4293      	cmp	r3, r2
 800b184:	f200 809e 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b188:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b18c:	f000 8091 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b190:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b194:	f200 8096 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b198:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b19c:	f000 8089 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1a4:	f200 808e 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1ac:	d03e      	beq.n	800b22c <HAL_TIM_ConfigClockSource+0x158>
 800b1ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1b2:	f200 8087 	bhi.w	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1ba:	f000 8086 	beq.w	800b2ca <HAL_TIM_ConfigClockSource+0x1f6>
 800b1be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1c2:	d87f      	bhi.n	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1c4:	2b70      	cmp	r3, #112	@ 0x70
 800b1c6:	d01a      	beq.n	800b1fe <HAL_TIM_ConfigClockSource+0x12a>
 800b1c8:	2b70      	cmp	r3, #112	@ 0x70
 800b1ca:	d87b      	bhi.n	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1cc:	2b60      	cmp	r3, #96	@ 0x60
 800b1ce:	d050      	beq.n	800b272 <HAL_TIM_ConfigClockSource+0x19e>
 800b1d0:	2b60      	cmp	r3, #96	@ 0x60
 800b1d2:	d877      	bhi.n	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1d4:	2b50      	cmp	r3, #80	@ 0x50
 800b1d6:	d03c      	beq.n	800b252 <HAL_TIM_ConfigClockSource+0x17e>
 800b1d8:	2b50      	cmp	r3, #80	@ 0x50
 800b1da:	d873      	bhi.n	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1dc:	2b40      	cmp	r3, #64	@ 0x40
 800b1de:	d058      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x1be>
 800b1e0:	2b40      	cmp	r3, #64	@ 0x40
 800b1e2:	d86f      	bhi.n	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1e4:	2b30      	cmp	r3, #48	@ 0x30
 800b1e6:	d064      	beq.n	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1e8:	2b30      	cmp	r3, #48	@ 0x30
 800b1ea:	d86b      	bhi.n	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1ec:	2b20      	cmp	r3, #32
 800b1ee:	d060      	beq.n	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1f0:	2b20      	cmp	r3, #32
 800b1f2:	d867      	bhi.n	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d05c      	beq.n	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1f8:	2b10      	cmp	r3, #16
 800b1fa:	d05a      	beq.n	800b2b2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1fc:	e062      	b.n	800b2c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b20e:	f000 fe8b 	bl	800bf28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	609a      	str	r2, [r3, #8]
      break;
 800b22a:	e04f      	b.n	800b2cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b23c:	f000 fe74 	bl	800bf28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689a      	ldr	r2, [r3, #8]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b24e:	609a      	str	r2, [r3, #8]
      break;
 800b250:	e03c      	b.n	800b2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b25e:	461a      	mov	r2, r3
 800b260:	f000 fde6 	bl	800be30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2150      	movs	r1, #80	@ 0x50
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 fe3f 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800b270:	e02c      	b.n	800b2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b27e:	461a      	mov	r2, r3
 800b280:	f000 fe05 	bl	800be8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2160      	movs	r1, #96	@ 0x60
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 fe2f 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800b290:	e01c      	b.n	800b2cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f000 fdc6 	bl	800be30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2140      	movs	r1, #64	@ 0x40
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 fe1f 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800b2b0:	e00c      	b.n	800b2cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4610      	mov	r0, r2
 800b2be:	f000 fe16 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800b2c2:	e003      	b.n	800b2cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2c8:	e000      	b.n	800b2cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b2ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	00100070 	.word	0x00100070
 800b2ec:	00100060 	.word	0x00100060
 800b2f0:	00100050 	.word	0x00100050
 800b2f4:	00100040 	.word	0x00100040
 800b2f8:	00100030 	.word	0x00100030
 800b2fc:	00100020 	.word	0x00100020

0800b300 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e14a      	b.n	800b666 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	f040 80dd 	bne.w	800b598 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b3de:	7afb      	ldrb	r3, [r7, #11]
 800b3e0:	2b1f      	cmp	r3, #31
 800b3e2:	f200 80d6 	bhi.w	800b592 <HAL_TIM_RegisterCallback+0x1de>
 800b3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ec <HAL_TIM_RegisterCallback+0x38>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b46d 	.word	0x0800b46d
 800b3f0:	0800b475 	.word	0x0800b475
 800b3f4:	0800b47d 	.word	0x0800b47d
 800b3f8:	0800b485 	.word	0x0800b485
 800b3fc:	0800b48d 	.word	0x0800b48d
 800b400:	0800b495 	.word	0x0800b495
 800b404:	0800b49d 	.word	0x0800b49d
 800b408:	0800b4a5 	.word	0x0800b4a5
 800b40c:	0800b4ad 	.word	0x0800b4ad
 800b410:	0800b4b5 	.word	0x0800b4b5
 800b414:	0800b4bd 	.word	0x0800b4bd
 800b418:	0800b4c5 	.word	0x0800b4c5
 800b41c:	0800b4cd 	.word	0x0800b4cd
 800b420:	0800b4d5 	.word	0x0800b4d5
 800b424:	0800b4df 	.word	0x0800b4df
 800b428:	0800b4e9 	.word	0x0800b4e9
 800b42c:	0800b4f3 	.word	0x0800b4f3
 800b430:	0800b4fd 	.word	0x0800b4fd
 800b434:	0800b507 	.word	0x0800b507
 800b438:	0800b511 	.word	0x0800b511
 800b43c:	0800b51b 	.word	0x0800b51b
 800b440:	0800b525 	.word	0x0800b525
 800b444:	0800b52f 	.word	0x0800b52f
 800b448:	0800b539 	.word	0x0800b539
 800b44c:	0800b543 	.word	0x0800b543
 800b450:	0800b54d 	.word	0x0800b54d
 800b454:	0800b557 	.word	0x0800b557
 800b458:	0800b561 	.word	0x0800b561
 800b45c:	0800b56b 	.word	0x0800b56b
 800b460:	0800b575 	.word	0x0800b575
 800b464:	0800b57f 	.word	0x0800b57f
 800b468:	0800b589 	.word	0x0800b589
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b472:	e0f7      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b47a:	e0f3      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b482:	e0ef      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b48a:	e0eb      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b492:	e0e7      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b49a:	e0e3      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b4a2:	e0df      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b4aa:	e0db      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b4b2:	e0d7      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b4ba:	e0d3      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b4c2:	e0cf      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b4ca:	e0cb      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b4d2:	e0c7      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b4dc:	e0c2      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b4e6:	e0bd      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b4f0:	e0b8      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b4fa:	e0b3      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b504:	e0ae      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b50e:	e0a9      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b518:	e0a4      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b522:	e09f      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b52c:	e09a      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b536:	e095      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b540:	e090      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b54a:	e08b      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b554:	e086      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b55e:	e081      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b568:	e07c      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b572:	e077      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b57c:	e072      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b586:	e06d      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b590:	e068      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	75fb      	strb	r3, [r7, #23]
        break;
 800b596:	e065      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d15d      	bne.n	800b660 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b5a4:	7afb      	ldrb	r3, [r7, #11]
 800b5a6:	2b0d      	cmp	r3, #13
 800b5a8:	d857      	bhi.n	800b65a <HAL_TIM_RegisterCallback+0x2a6>
 800b5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b0 <HAL_TIM_RegisterCallback+0x1fc>)
 800b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b0:	0800b5e9 	.word	0x0800b5e9
 800b5b4:	0800b5f1 	.word	0x0800b5f1
 800b5b8:	0800b5f9 	.word	0x0800b5f9
 800b5bc:	0800b601 	.word	0x0800b601
 800b5c0:	0800b609 	.word	0x0800b609
 800b5c4:	0800b611 	.word	0x0800b611
 800b5c8:	0800b619 	.word	0x0800b619
 800b5cc:	0800b621 	.word	0x0800b621
 800b5d0:	0800b629 	.word	0x0800b629
 800b5d4:	0800b631 	.word	0x0800b631
 800b5d8:	0800b639 	.word	0x0800b639
 800b5dc:	0800b641 	.word	0x0800b641
 800b5e0:	0800b649 	.word	0x0800b649
 800b5e4:	0800b651 	.word	0x0800b651
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b5ee:	e039      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b5f6:	e035      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b5fe:	e031      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b606:	e02d      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b60e:	e029      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b616:	e025      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b61e:	e021      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b626:	e01d      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b62e:	e019      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b636:	e015      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b63e:	e011      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b646:	e00d      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b64e:	e009      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b658:	e004      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	75fb      	strb	r3, [r7, #23]
        break;
 800b65e:	e001      	b.n	800b664 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b664:	7dfb      	ldrb	r3, [r7, #23]
}
 800b666:	4618      	mov	r0, r3
 800b668:	371c      	adds	r7, #28
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop

0800b674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a4c      	ldr	r2, [pc, #304]	@ (800b7b8 <TIM_Base_SetConfig+0x144>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d017      	beq.n	800b6bc <TIM_Base_SetConfig+0x48>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b692:	d013      	beq.n	800b6bc <TIM_Base_SetConfig+0x48>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a49      	ldr	r2, [pc, #292]	@ (800b7bc <TIM_Base_SetConfig+0x148>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d00f      	beq.n	800b6bc <TIM_Base_SetConfig+0x48>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a48      	ldr	r2, [pc, #288]	@ (800b7c0 <TIM_Base_SetConfig+0x14c>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d00b      	beq.n	800b6bc <TIM_Base_SetConfig+0x48>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a47      	ldr	r2, [pc, #284]	@ (800b7c4 <TIM_Base_SetConfig+0x150>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d007      	beq.n	800b6bc <TIM_Base_SetConfig+0x48>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a46      	ldr	r2, [pc, #280]	@ (800b7c8 <TIM_Base_SetConfig+0x154>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d003      	beq.n	800b6bc <TIM_Base_SetConfig+0x48>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a45      	ldr	r2, [pc, #276]	@ (800b7cc <TIM_Base_SetConfig+0x158>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d108      	bne.n	800b6ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a39      	ldr	r2, [pc, #228]	@ (800b7b8 <TIM_Base_SetConfig+0x144>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d023      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6dc:	d01f      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a36      	ldr	r2, [pc, #216]	@ (800b7bc <TIM_Base_SetConfig+0x148>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d01b      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a35      	ldr	r2, [pc, #212]	@ (800b7c0 <TIM_Base_SetConfig+0x14c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d017      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a34      	ldr	r2, [pc, #208]	@ (800b7c4 <TIM_Base_SetConfig+0x150>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d013      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a33      	ldr	r2, [pc, #204]	@ (800b7c8 <TIM_Base_SetConfig+0x154>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d00f      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a33      	ldr	r2, [pc, #204]	@ (800b7d0 <TIM_Base_SetConfig+0x15c>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d00b      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a32      	ldr	r2, [pc, #200]	@ (800b7d4 <TIM_Base_SetConfig+0x160>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d007      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a31      	ldr	r2, [pc, #196]	@ (800b7d8 <TIM_Base_SetConfig+0x164>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d003      	beq.n	800b71e <TIM_Base_SetConfig+0xaa>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a2c      	ldr	r2, [pc, #176]	@ (800b7cc <TIM_Base_SetConfig+0x158>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d108      	bne.n	800b730 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a18      	ldr	r2, [pc, #96]	@ (800b7b8 <TIM_Base_SetConfig+0x144>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d013      	beq.n	800b784 <TIM_Base_SetConfig+0x110>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a1a      	ldr	r2, [pc, #104]	@ (800b7c8 <TIM_Base_SetConfig+0x154>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d00f      	beq.n	800b784 <TIM_Base_SetConfig+0x110>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a1a      	ldr	r2, [pc, #104]	@ (800b7d0 <TIM_Base_SetConfig+0x15c>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d00b      	beq.n	800b784 <TIM_Base_SetConfig+0x110>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a19      	ldr	r2, [pc, #100]	@ (800b7d4 <TIM_Base_SetConfig+0x160>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d007      	beq.n	800b784 <TIM_Base_SetConfig+0x110>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a18      	ldr	r2, [pc, #96]	@ (800b7d8 <TIM_Base_SetConfig+0x164>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d003      	beq.n	800b784 <TIM_Base_SetConfig+0x110>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a13      	ldr	r2, [pc, #76]	@ (800b7cc <TIM_Base_SetConfig+0x158>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d103      	bne.n	800b78c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	691a      	ldr	r2, [r3, #16]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	f003 0301 	and.w	r3, r3, #1
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d105      	bne.n	800b7aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	f023 0201 	bic.w	r2, r3, #1
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	611a      	str	r2, [r3, #16]
  }
}
 800b7aa:	bf00      	nop
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	40012c00 	.word	0x40012c00
 800b7bc:	40000400 	.word	0x40000400
 800b7c0:	40000800 	.word	0x40000800
 800b7c4:	40000c00 	.word	0x40000c00
 800b7c8:	40013400 	.word	0x40013400
 800b7cc:	40015000 	.word	0x40015000
 800b7d0:	40014000 	.word	0x40014000
 800b7d4:	40014400 	.word	0x40014400
 800b7d8:	40014800 	.word	0x40014800

0800b7dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	f023 0201 	bic.w	r2, r3, #1
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b80a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f023 0303 	bic.w	r3, r3, #3
 800b816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f023 0302 	bic.w	r3, r3, #2
 800b828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	4313      	orrs	r3, r2
 800b832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a30      	ldr	r2, [pc, #192]	@ (800b8f8 <TIM_OC1_SetConfig+0x11c>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d013      	beq.n	800b864 <TIM_OC1_SetConfig+0x88>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a2f      	ldr	r2, [pc, #188]	@ (800b8fc <TIM_OC1_SetConfig+0x120>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d00f      	beq.n	800b864 <TIM_OC1_SetConfig+0x88>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a2e      	ldr	r2, [pc, #184]	@ (800b900 <TIM_OC1_SetConfig+0x124>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d00b      	beq.n	800b864 <TIM_OC1_SetConfig+0x88>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a2d      	ldr	r2, [pc, #180]	@ (800b904 <TIM_OC1_SetConfig+0x128>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d007      	beq.n	800b864 <TIM_OC1_SetConfig+0x88>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a2c      	ldr	r2, [pc, #176]	@ (800b908 <TIM_OC1_SetConfig+0x12c>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d003      	beq.n	800b864 <TIM_OC1_SetConfig+0x88>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a2b      	ldr	r2, [pc, #172]	@ (800b90c <TIM_OC1_SetConfig+0x130>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d10c      	bne.n	800b87e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	f023 0308 	bic.w	r3, r3, #8
 800b86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	4313      	orrs	r3, r2
 800b874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f023 0304 	bic.w	r3, r3, #4
 800b87c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f8 <TIM_OC1_SetConfig+0x11c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d013      	beq.n	800b8ae <TIM_OC1_SetConfig+0xd2>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a1c      	ldr	r2, [pc, #112]	@ (800b8fc <TIM_OC1_SetConfig+0x120>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d00f      	beq.n	800b8ae <TIM_OC1_SetConfig+0xd2>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a1b      	ldr	r2, [pc, #108]	@ (800b900 <TIM_OC1_SetConfig+0x124>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d00b      	beq.n	800b8ae <TIM_OC1_SetConfig+0xd2>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a1a      	ldr	r2, [pc, #104]	@ (800b904 <TIM_OC1_SetConfig+0x128>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d007      	beq.n	800b8ae <TIM_OC1_SetConfig+0xd2>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a19      	ldr	r2, [pc, #100]	@ (800b908 <TIM_OC1_SetConfig+0x12c>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d003      	beq.n	800b8ae <TIM_OC1_SetConfig+0xd2>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a18      	ldr	r2, [pc, #96]	@ (800b90c <TIM_OC1_SetConfig+0x130>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d111      	bne.n	800b8d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b8bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	621a      	str	r2, [r3, #32]
}
 800b8ec:	bf00      	nop
 800b8ee:	371c      	adds	r7, #28
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	40012c00 	.word	0x40012c00
 800b8fc:	40013400 	.word	0x40013400
 800b900:	40014000 	.word	0x40014000
 800b904:	40014400 	.word	0x40014400
 800b908:	40014800 	.word	0x40014800
 800b90c:	40015000 	.word	0x40015000

0800b910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b910:	b480      	push	{r7}
 800b912:	b087      	sub	sp, #28
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	f023 0210 	bic.w	r2, r3, #16
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b93e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	021b      	lsls	r3, r3, #8
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	4313      	orrs	r3, r2
 800b956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f023 0320 	bic.w	r3, r3, #32
 800b95e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	4313      	orrs	r3, r2
 800b96a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a2c      	ldr	r2, [pc, #176]	@ (800ba20 <TIM_OC2_SetConfig+0x110>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d007      	beq.n	800b984 <TIM_OC2_SetConfig+0x74>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a2b      	ldr	r2, [pc, #172]	@ (800ba24 <TIM_OC2_SetConfig+0x114>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d003      	beq.n	800b984 <TIM_OC2_SetConfig+0x74>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a2a      	ldr	r2, [pc, #168]	@ (800ba28 <TIM_OC2_SetConfig+0x118>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d10d      	bne.n	800b9a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b98a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	011b      	lsls	r3, r3, #4
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	4313      	orrs	r3, r2
 800b996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b99e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a1f      	ldr	r2, [pc, #124]	@ (800ba20 <TIM_OC2_SetConfig+0x110>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d013      	beq.n	800b9d0 <TIM_OC2_SetConfig+0xc0>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a1e      	ldr	r2, [pc, #120]	@ (800ba24 <TIM_OC2_SetConfig+0x114>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d00f      	beq.n	800b9d0 <TIM_OC2_SetConfig+0xc0>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a1e      	ldr	r2, [pc, #120]	@ (800ba2c <TIM_OC2_SetConfig+0x11c>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d00b      	beq.n	800b9d0 <TIM_OC2_SetConfig+0xc0>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a1d      	ldr	r2, [pc, #116]	@ (800ba30 <TIM_OC2_SetConfig+0x120>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d007      	beq.n	800b9d0 <TIM_OC2_SetConfig+0xc0>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a1c      	ldr	r2, [pc, #112]	@ (800ba34 <TIM_OC2_SetConfig+0x124>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d003      	beq.n	800b9d0 <TIM_OC2_SetConfig+0xc0>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a17      	ldr	r2, [pc, #92]	@ (800ba28 <TIM_OC2_SetConfig+0x118>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d113      	bne.n	800b9f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	621a      	str	r2, [r3, #32]
}
 800ba12:	bf00      	nop
 800ba14:	371c      	adds	r7, #28
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	40012c00 	.word	0x40012c00
 800ba24:	40013400 	.word	0x40013400
 800ba28:	40015000 	.word	0x40015000
 800ba2c:	40014000 	.word	0x40014000
 800ba30:	40014400 	.word	0x40014400
 800ba34:	40014800 	.word	0x40014800

0800ba38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a1b      	ldr	r3, [r3, #32]
 800ba4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 0303 	bic.w	r3, r3, #3
 800ba72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	021b      	lsls	r3, r3, #8
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a2b      	ldr	r2, [pc, #172]	@ (800bb44 <TIM_OC3_SetConfig+0x10c>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d007      	beq.n	800baaa <TIM_OC3_SetConfig+0x72>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a2a      	ldr	r2, [pc, #168]	@ (800bb48 <TIM_OC3_SetConfig+0x110>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d003      	beq.n	800baaa <TIM_OC3_SetConfig+0x72>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a29      	ldr	r2, [pc, #164]	@ (800bb4c <TIM_OC3_SetConfig+0x114>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d10d      	bne.n	800bac6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	021b      	lsls	r3, r3, #8
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	4313      	orrs	r3, r2
 800babc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a1e      	ldr	r2, [pc, #120]	@ (800bb44 <TIM_OC3_SetConfig+0x10c>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d013      	beq.n	800baf6 <TIM_OC3_SetConfig+0xbe>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a1d      	ldr	r2, [pc, #116]	@ (800bb48 <TIM_OC3_SetConfig+0x110>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d00f      	beq.n	800baf6 <TIM_OC3_SetConfig+0xbe>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb50 <TIM_OC3_SetConfig+0x118>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d00b      	beq.n	800baf6 <TIM_OC3_SetConfig+0xbe>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a1c      	ldr	r2, [pc, #112]	@ (800bb54 <TIM_OC3_SetConfig+0x11c>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d007      	beq.n	800baf6 <TIM_OC3_SetConfig+0xbe>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a1b      	ldr	r2, [pc, #108]	@ (800bb58 <TIM_OC3_SetConfig+0x120>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d003      	beq.n	800baf6 <TIM_OC3_SetConfig+0xbe>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a16      	ldr	r2, [pc, #88]	@ (800bb4c <TIM_OC3_SetConfig+0x114>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d113      	bne.n	800bb1e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bafc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	011b      	lsls	r3, r3, #4
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	621a      	str	r2, [r3, #32]
}
 800bb38:	bf00      	nop
 800bb3a:	371c      	adds	r7, #28
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	40012c00 	.word	0x40012c00
 800bb48:	40013400 	.word	0x40013400
 800bb4c:	40015000 	.word	0x40015000
 800bb50:	40014000 	.word	0x40014000
 800bb54:	40014400 	.word	0x40014400
 800bb58:	40014800 	.word	0x40014800

0800bb5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a1b      	ldr	r3, [r3, #32]
 800bb70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	021b      	lsls	r3, r3, #8
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bbaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	031b      	lsls	r3, r3, #12
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a2c      	ldr	r2, [pc, #176]	@ (800bc6c <TIM_OC4_SetConfig+0x110>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d007      	beq.n	800bbd0 <TIM_OC4_SetConfig+0x74>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a2b      	ldr	r2, [pc, #172]	@ (800bc70 <TIM_OC4_SetConfig+0x114>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d003      	beq.n	800bbd0 <TIM_OC4_SetConfig+0x74>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a2a      	ldr	r2, [pc, #168]	@ (800bc74 <TIM_OC4_SetConfig+0x118>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d10d      	bne.n	800bbec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bbd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	031b      	lsls	r3, r3, #12
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a1f      	ldr	r2, [pc, #124]	@ (800bc6c <TIM_OC4_SetConfig+0x110>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d013      	beq.n	800bc1c <TIM_OC4_SetConfig+0xc0>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a1e      	ldr	r2, [pc, #120]	@ (800bc70 <TIM_OC4_SetConfig+0x114>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d00f      	beq.n	800bc1c <TIM_OC4_SetConfig+0xc0>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a1e      	ldr	r2, [pc, #120]	@ (800bc78 <TIM_OC4_SetConfig+0x11c>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d00b      	beq.n	800bc1c <TIM_OC4_SetConfig+0xc0>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a1d      	ldr	r2, [pc, #116]	@ (800bc7c <TIM_OC4_SetConfig+0x120>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d007      	beq.n	800bc1c <TIM_OC4_SetConfig+0xc0>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a1c      	ldr	r2, [pc, #112]	@ (800bc80 <TIM_OC4_SetConfig+0x124>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d003      	beq.n	800bc1c <TIM_OC4_SetConfig+0xc0>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a17      	ldr	r2, [pc, #92]	@ (800bc74 <TIM_OC4_SetConfig+0x118>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d113      	bne.n	800bc44 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	695b      	ldr	r3, [r3, #20]
 800bc30:	019b      	lsls	r3, r3, #6
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	4313      	orrs	r3, r2
 800bc36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	019b      	lsls	r3, r3, #6
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	697a      	ldr	r2, [r7, #20]
 800bc5c:	621a      	str	r2, [r3, #32]
}
 800bc5e:	bf00      	nop
 800bc60:	371c      	adds	r7, #28
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	40012c00 	.word	0x40012c00
 800bc70:	40013400 	.word	0x40013400
 800bc74:	40015000 	.word	0x40015000
 800bc78:	40014000 	.word	0x40014000
 800bc7c:	40014400 	.word	0x40014400
 800bc80:	40014800 	.word	0x40014800

0800bc84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bcc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	041b      	lsls	r3, r3, #16
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a19      	ldr	r2, [pc, #100]	@ (800bd40 <TIM_OC5_SetConfig+0xbc>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d013      	beq.n	800bd06 <TIM_OC5_SetConfig+0x82>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a18      	ldr	r2, [pc, #96]	@ (800bd44 <TIM_OC5_SetConfig+0xc0>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d00f      	beq.n	800bd06 <TIM_OC5_SetConfig+0x82>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a17      	ldr	r2, [pc, #92]	@ (800bd48 <TIM_OC5_SetConfig+0xc4>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d00b      	beq.n	800bd06 <TIM_OC5_SetConfig+0x82>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a16      	ldr	r2, [pc, #88]	@ (800bd4c <TIM_OC5_SetConfig+0xc8>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d007      	beq.n	800bd06 <TIM_OC5_SetConfig+0x82>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a15      	ldr	r2, [pc, #84]	@ (800bd50 <TIM_OC5_SetConfig+0xcc>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d003      	beq.n	800bd06 <TIM_OC5_SetConfig+0x82>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a14      	ldr	r2, [pc, #80]	@ (800bd54 <TIM_OC5_SetConfig+0xd0>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d109      	bne.n	800bd1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	021b      	lsls	r3, r3, #8
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	621a      	str	r2, [r3, #32]
}
 800bd34:	bf00      	nop
 800bd36:	371c      	adds	r7, #28
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	40012c00 	.word	0x40012c00
 800bd44:	40013400 	.word	0x40013400
 800bd48:	40014000 	.word	0x40014000
 800bd4c:	40014400 	.word	0x40014400
 800bd50:	40014800 	.word	0x40014800
 800bd54:	40015000 	.word	0x40015000

0800bd58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	051b      	lsls	r3, r3, #20
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a1a      	ldr	r2, [pc, #104]	@ (800be18 <TIM_OC6_SetConfig+0xc0>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d013      	beq.n	800bddc <TIM_OC6_SetConfig+0x84>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a19      	ldr	r2, [pc, #100]	@ (800be1c <TIM_OC6_SetConfig+0xc4>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00f      	beq.n	800bddc <TIM_OC6_SetConfig+0x84>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a18      	ldr	r2, [pc, #96]	@ (800be20 <TIM_OC6_SetConfig+0xc8>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d00b      	beq.n	800bddc <TIM_OC6_SetConfig+0x84>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a17      	ldr	r2, [pc, #92]	@ (800be24 <TIM_OC6_SetConfig+0xcc>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d007      	beq.n	800bddc <TIM_OC6_SetConfig+0x84>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a16      	ldr	r2, [pc, #88]	@ (800be28 <TIM_OC6_SetConfig+0xd0>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d003      	beq.n	800bddc <TIM_OC6_SetConfig+0x84>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a15      	ldr	r2, [pc, #84]	@ (800be2c <TIM_OC6_SetConfig+0xd4>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d109      	bne.n	800bdf0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bde2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	029b      	lsls	r3, r3, #10
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	621a      	str	r2, [r3, #32]
}
 800be0a:	bf00      	nop
 800be0c:	371c      	adds	r7, #28
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	40012c00 	.word	0x40012c00
 800be1c:	40013400 	.word	0x40013400
 800be20:	40014000 	.word	0x40014000
 800be24:	40014400 	.word	0x40014400
 800be28:	40014800 	.word	0x40014800
 800be2c:	40015000 	.word	0x40015000

0800be30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	f023 0201 	bic.w	r2, r3, #1
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	011b      	lsls	r3, r3, #4
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	4313      	orrs	r3, r2
 800be64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f023 030a 	bic.w	r3, r3, #10
 800be6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	4313      	orrs	r3, r2
 800be74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	621a      	str	r2, [r3, #32]
}
 800be82:	bf00      	nop
 800be84:	371c      	adds	r7, #28
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be8e:	b480      	push	{r7}
 800be90:	b087      	sub	sp, #28
 800be92:	af00      	add	r7, sp, #0
 800be94:	60f8      	str	r0, [r7, #12]
 800be96:	60b9      	str	r1, [r7, #8]
 800be98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	f023 0210 	bic.w	r2, r3, #16
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800beb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	031b      	lsls	r3, r3, #12
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800beca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	011b      	lsls	r3, r3, #4
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	621a      	str	r2, [r3, #32]
}
 800bee2:	bf00      	nop
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bf04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	f043 0307 	orr.w	r3, r3, #7
 800bf14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	609a      	str	r2, [r3, #8]
}
 800bf1c:	bf00      	nop
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	021a      	lsls	r2, r3, #8
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	431a      	orrs	r2, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	697a      	ldr	r2, [r7, #20]
 800bf5a:	609a      	str	r2, [r3, #8]
}
 800bf5c:	bf00      	nop
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	f003 031f 	and.w	r3, r3, #31
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6a1a      	ldr	r2, [r3, #32]
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	43db      	mvns	r3, r3
 800bf8a:	401a      	ands	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6a1a      	ldr	r2, [r3, #32]
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	f003 031f 	and.w	r3, r3, #31
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	fa01 f303 	lsl.w	r3, r1, r3
 800bfa0:	431a      	orrs	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	621a      	str	r2, [r3, #32]
}
 800bfa6:	bf00      	nop
 800bfa8:	371c      	adds	r7, #28
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
	...

0800bfb4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a26      	ldr	r2, [pc, #152]	@ (800c058 <TIM_ResetCallback+0xa4>)
 800bfc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a25      	ldr	r2, [pc, #148]	@ (800c05c <TIM_ResetCallback+0xa8>)
 800bfc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a24      	ldr	r2, [pc, #144]	@ (800c060 <TIM_ResetCallback+0xac>)
 800bfd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a23      	ldr	r2, [pc, #140]	@ (800c064 <TIM_ResetCallback+0xb0>)
 800bfd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a22      	ldr	r2, [pc, #136]	@ (800c068 <TIM_ResetCallback+0xb4>)
 800bfe0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a21      	ldr	r2, [pc, #132]	@ (800c06c <TIM_ResetCallback+0xb8>)
 800bfe8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a20      	ldr	r2, [pc, #128]	@ (800c070 <TIM_ResetCallback+0xbc>)
 800bff0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a1f      	ldr	r2, [pc, #124]	@ (800c074 <TIM_ResetCallback+0xc0>)
 800bff8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a1e      	ldr	r2, [pc, #120]	@ (800c078 <TIM_ResetCallback+0xc4>)
 800c000:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a1d      	ldr	r2, [pc, #116]	@ (800c07c <TIM_ResetCallback+0xc8>)
 800c008:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a1c      	ldr	r2, [pc, #112]	@ (800c080 <TIM_ResetCallback+0xcc>)
 800c010:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a1b      	ldr	r2, [pc, #108]	@ (800c084 <TIM_ResetCallback+0xd0>)
 800c018:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a1a      	ldr	r2, [pc, #104]	@ (800c088 <TIM_ResetCallback+0xd4>)
 800c020:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a19      	ldr	r2, [pc, #100]	@ (800c08c <TIM_ResetCallback+0xd8>)
 800c028:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a18      	ldr	r2, [pc, #96]	@ (800c090 <TIM_ResetCallback+0xdc>)
 800c030:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a17      	ldr	r2, [pc, #92]	@ (800c094 <TIM_ResetCallback+0xe0>)
 800c038:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a16      	ldr	r2, [pc, #88]	@ (800c098 <TIM_ResetCallback+0xe4>)
 800c040:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a15      	ldr	r2, [pc, #84]	@ (800c09c <TIM_ResetCallback+0xe8>)
 800c048:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800c04c:	bf00      	nop
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	08005149 	.word	0x08005149
 800c05c:	0800b301 	.word	0x0800b301
 800c060:	0800b379 	.word	0x0800b379
 800c064:	0800b38d 	.word	0x0800b38d
 800c068:	0800b329 	.word	0x0800b329
 800c06c:	0800b33d 	.word	0x0800b33d
 800c070:	0800b315 	.word	0x0800b315
 800c074:	0800b351 	.word	0x0800b351
 800c078:	0800b365 	.word	0x0800b365
 800c07c:	0800b3a1 	.word	0x0800b3a1
 800c080:	0800c2f5 	.word	0x0800c2f5
 800c084:	0800c309 	.word	0x0800c309
 800c088:	0800c31d 	.word	0x0800c31d
 800c08c:	0800c331 	.word	0x0800c331
 800c090:	0800c345 	.word	0x0800c345
 800c094:	0800c359 	.word	0x0800c359
 800c098:	0800c36d 	.word	0x0800c36d
 800c09c:	0800c381 	.word	0x0800c381

0800c0a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d101      	bne.n	800c0b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	e074      	b.n	800c1a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a34      	ldr	r2, [pc, #208]	@ (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d009      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a33      	ldr	r2, [pc, #204]	@ (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d004      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a31      	ldr	r2, [pc, #196]	@ (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d108      	bne.n	800c108 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c0fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	4313      	orrs	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c10e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a21      	ldr	r2, [pc, #132]	@ (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d022      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c138:	d01d      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a1f      	ldr	r2, [pc, #124]	@ (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d018      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a1d      	ldr	r2, [pc, #116]	@ (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d013      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a1c      	ldr	r2, [pc, #112]	@ (800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00e      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a15      	ldr	r2, [pc, #84]	@ (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d009      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a18      	ldr	r2, [pc, #96]	@ (800c1c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d004      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a11      	ldr	r2, [pc, #68]	@ (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d10c      	bne.n	800c190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c17c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	4313      	orrs	r3, r2
 800c186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	40012c00 	.word	0x40012c00
 800c1b4:	40013400 	.word	0x40013400
 800c1b8:	40015000 	.word	0x40015000
 800c1bc:	40000400 	.word	0x40000400
 800c1c0:	40000800 	.word	0x40000800
 800c1c4:	40000c00 	.word	0x40000c00
 800c1c8:	40014000 	.word	0x40014000

0800c1cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d101      	bne.n	800c1e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	e078      	b.n	800c2da <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	4313      	orrs	r3, r2
 800c20a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	4313      	orrs	r3, r2
 800c218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4313      	orrs	r3, r2
 800c226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	4313      	orrs	r3, r2
 800c234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	695b      	ldr	r3, [r3, #20]
 800c240:	4313      	orrs	r3, r2
 800c242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c24e:	4313      	orrs	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	041b      	lsls	r3, r3, #16
 800c25e:	4313      	orrs	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	69db      	ldr	r3, [r3, #28]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a1c      	ldr	r2, [pc, #112]	@ (800c2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d009      	beq.n	800c28e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a1b      	ldr	r2, [pc, #108]	@ (800c2ec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d004      	beq.n	800c28e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a19      	ldr	r2, [pc, #100]	@ (800c2f0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d11c      	bne.n	800c2c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c298:	051b      	lsls	r3, r3, #20
 800c29a:	4313      	orrs	r3, r2
 800c29c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	6a1b      	ldr	r3, [r3, #32]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	40012c00 	.word	0x40012c00
 800c2ec:	40013400 	.word	0x40013400
 800c2f0:	40015000 	.word	0x40015000

0800c2f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e050      	b.n	800c448 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d114      	bne.n	800c3da <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fe37 	bl	800d02c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d103      	bne.n	800c3d0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a21      	ldr	r2, [pc, #132]	@ (800c450 <HAL_UART_Init+0xbc>)
 800c3cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2224      	movs	r2, #36	@ 0x24
 800c3de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f022 0201 	bic.w	r2, r2, #1
 800c3f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d002      	beq.n	800c400 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f001 f964 	bl	800d6c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 fe65 	bl	800d0d0 <UART_SetConfig>
 800c406:	4603      	mov	r3, r0
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d101      	bne.n	800c410 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e01b      	b.n	800c448 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c41e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689a      	ldr	r2, [r3, #8]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c42e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0201 	orr.w	r2, r2, #1
 800c43e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f001 f9e3 	bl	800d80c <UART_CheckIdleState>
 800c446:	4603      	mov	r3, r0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	0800635d 	.word	0x0800635d

0800c454 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c454:	b480      	push	{r7}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	460b      	mov	r3, r1
 800c45e:	607a      	str	r2, [r7, #4]
 800c460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c462:	2300      	movs	r3, #0
 800c464:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d109      	bne.n	800c480 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e09c      	b.n	800c5ba <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c486:	2b20      	cmp	r3, #32
 800c488:	d16c      	bne.n	800c564 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c48a:	7afb      	ldrb	r3, [r7, #11]
 800c48c:	2b0c      	cmp	r3, #12
 800c48e:	d85e      	bhi.n	800c54e <HAL_UART_RegisterCallback+0xfa>
 800c490:	a201      	add	r2, pc, #4	@ (adr r2, 800c498 <HAL_UART_RegisterCallback+0x44>)
 800c492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c496:	bf00      	nop
 800c498:	0800c4cd 	.word	0x0800c4cd
 800c49c:	0800c4d7 	.word	0x0800c4d7
 800c4a0:	0800c4e1 	.word	0x0800c4e1
 800c4a4:	0800c4eb 	.word	0x0800c4eb
 800c4a8:	0800c4f5 	.word	0x0800c4f5
 800c4ac:	0800c4ff 	.word	0x0800c4ff
 800c4b0:	0800c509 	.word	0x0800c509
 800c4b4:	0800c513 	.word	0x0800c513
 800c4b8:	0800c51d 	.word	0x0800c51d
 800c4bc:	0800c527 	.word	0x0800c527
 800c4c0:	0800c531 	.word	0x0800c531
 800c4c4:	0800c53b 	.word	0x0800c53b
 800c4c8:	0800c545 	.word	0x0800c545
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c4d4:	e070      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c4de:	e06b      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c4e8:	e066      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c4f2:	e061      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c4fc:	e05c      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c506:	e057      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c510:	e052      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c51a:	e04d      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c524:	e048      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c52e:	e043      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c538:	e03e      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c542:	e039      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c54c:	e034      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c554:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	75fb      	strb	r3, [r7, #23]
        break;
 800c562:	e029      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d11a      	bne.n	800c5a4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c56e:	7afb      	ldrb	r3, [r7, #11]
 800c570:	2b0b      	cmp	r3, #11
 800c572:	d002      	beq.n	800c57a <HAL_UART_RegisterCallback+0x126>
 800c574:	2b0c      	cmp	r3, #12
 800c576:	d005      	beq.n	800c584 <HAL_UART_RegisterCallback+0x130>
 800c578:	e009      	b.n	800c58e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c582:	e019      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c58c:	e014      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c594:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	75fb      	strb	r3, [r7, #23]
        break;
 800c5a2:	e009      	b.n	800c5b8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop

0800c5c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	@ 0x28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5dc:	2b20      	cmp	r3, #32
 800c5de:	d137      	bne.n	800c650 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d002      	beq.n	800c5ec <HAL_UART_Receive_IT+0x24>
 800c5e6:	88fb      	ldrh	r3, [r7, #6]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e030      	b.n	800c652 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a18      	ldr	r2, [pc, #96]	@ (800c65c <HAL_UART_Receive_IT+0x94>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d01f      	beq.n	800c640 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d018      	beq.n	800c640 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	613b      	str	r3, [r7, #16]
   return(result);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c622:	627b      	str	r3, [r7, #36]	@ 0x24
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62c:	623b      	str	r3, [r7, #32]
 800c62e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	69f9      	ldr	r1, [r7, #28]
 800c632:	6a3a      	ldr	r2, [r7, #32]
 800c634:	e841 2300 	strex	r3, r2, [r1]
 800c638:	61bb      	str	r3, [r7, #24]
   return(result);
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e6      	bne.n	800c60e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c640:	88fb      	ldrh	r3, [r7, #6]
 800c642:	461a      	mov	r2, r3
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f001 f9f8 	bl	800da3c <UART_Start_Receive_IT>
 800c64c:	4603      	mov	r3, r0
 800c64e:	e000      	b.n	800c652 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c650:	2302      	movs	r3, #2
  }
}
 800c652:	4618      	mov	r0, r3
 800c654:	3728      	adds	r7, #40	@ 0x28
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	40008000 	.word	0x40008000

0800c660 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b08a      	sub	sp, #40	@ 0x28
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	4613      	mov	r3, r2
 800c66c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c674:	2b20      	cmp	r3, #32
 800c676:	d167      	bne.n	800c748 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d002      	beq.n	800c684 <HAL_UART_Transmit_DMA+0x24>
 800c67e:	88fb      	ldrh	r3, [r7, #6]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	e060      	b.n	800c74a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	68ba      	ldr	r2, [r7, #8]
 800c68c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	88fa      	ldrh	r2, [r7, #6]
 800c692:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	88fa      	ldrh	r2, [r7, #6]
 800c69a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2221      	movs	r2, #33	@ 0x21
 800c6aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d028      	beq.n	800c708 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6ba:	4a26      	ldr	r2, [pc, #152]	@ (800c754 <HAL_UART_Transmit_DMA+0xf4>)
 800c6bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6c2:	4a25      	ldr	r2, [pc, #148]	@ (800c758 <HAL_UART_Transmit_DMA+0xf8>)
 800c6c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6ca:	4a24      	ldr	r2, [pc, #144]	@ (800c75c <HAL_UART_Transmit_DMA+0xfc>)
 800c6cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6de:	4619      	mov	r1, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3328      	adds	r3, #40	@ 0x28
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	88fb      	ldrh	r3, [r7, #6]
 800c6ea:	f7fb fbd3 	bl	8007e94 <HAL_DMA_Start_IT>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d009      	beq.n	800c708 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2210      	movs	r2, #16
 800c6f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2220      	movs	r2, #32
 800c700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e020      	b.n	800c74a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2240      	movs	r2, #64	@ 0x40
 800c70e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3308      	adds	r3, #8
 800c716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	e853 3f00 	ldrex	r3, [r3]
 800c71e:	613b      	str	r3, [r7, #16]
   return(result);
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c726:	627b      	str	r3, [r7, #36]	@ 0x24
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3308      	adds	r3, #8
 800c72e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c730:	623a      	str	r2, [r7, #32]
 800c732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c734:	69f9      	ldr	r1, [r7, #28]
 800c736:	6a3a      	ldr	r2, [r7, #32]
 800c738:	e841 2300 	strex	r3, r2, [r1]
 800c73c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1e5      	bne.n	800c710 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c744:	2300      	movs	r3, #0
 800c746:	e000      	b.n	800c74a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c748:	2302      	movs	r3, #2
  }
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3728      	adds	r7, #40	@ 0x28
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	0800ddcf 	.word	0x0800ddcf
 800c758:	0800de6d 	.word	0x0800de6d
 800c75c:	0800de8d 	.word	0x0800de8d

0800c760 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b09a      	sub	sp, #104	@ 0x68
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c770:	e853 3f00 	ldrex	r3, [r3]
 800c774:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c77c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c786:	657b      	str	r3, [r7, #84]	@ 0x54
 800c788:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c78c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c78e:	e841 2300 	strex	r3, r2, [r1]
 800c792:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e6      	bne.n	800c768 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	3308      	adds	r3, #8
 800c7a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a4:	e853 3f00 	ldrex	r3, [r3]
 800c7a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c7b0:	f023 0301 	bic.w	r3, r3, #1
 800c7b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	3308      	adds	r3, #8
 800c7bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c7be:	643a      	str	r2, [r7, #64]	@ 0x40
 800c7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c7c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c7c6:	e841 2300 	strex	r3, r2, [r1]
 800c7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1e3      	bne.n	800c79a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d118      	bne.n	800c80c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	e853 3f00 	ldrex	r3, [r3]
 800c7e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	f023 0310 	bic.w	r3, r3, #16
 800c7ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c800:	e841 2300 	strex	r3, r2, [r1]
 800c804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1e6      	bne.n	800c7da <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c816:	2b40      	cmp	r3, #64	@ 0x40
 800c818:	d13b      	bne.n	800c892 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	3308      	adds	r3, #8
 800c820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	e853 3f00 	ldrex	r3, [r3]
 800c828:	60bb      	str	r3, [r7, #8]
   return(result);
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c830:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3308      	adds	r3, #8
 800c838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c83a:	61ba      	str	r2, [r7, #24]
 800c83c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	6979      	ldr	r1, [r7, #20]
 800c840:	69ba      	ldr	r2, [r7, #24]
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	613b      	str	r3, [r7, #16]
   return(result);
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1e5      	bne.n	800c81a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c854:	2b00      	cmp	r3, #0
 800c856:	d01c      	beq.n	800c892 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c85e:	2200      	movs	r2, #0
 800c860:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fb fb8e 	bl	8007f8a <HAL_DMA_Abort>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00e      	beq.n	800c892 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fb fcf4 	bl	8008268 <HAL_DMA_GetError>
 800c880:	4603      	mov	r3, r0
 800c882:	2b20      	cmp	r3, #32
 800c884:	d105      	bne.n	800c892 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2210      	movs	r2, #16
 800c88a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c88e:	2303      	movs	r3, #3
 800c890:	e017      	b.n	800c8c2 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	220f      	movs	r2, #15
 800c8a0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	699a      	ldr	r2, [r3, #24]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f042 0208 	orr.w	r2, r2, #8
 800c8b0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2220      	movs	r2, #32
 800c8b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3768      	adds	r7, #104	@ 0x68
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
	...

0800c8cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b0ba      	sub	sp, #232	@ 0xe8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	69db      	ldr	r3, [r3, #28]
 800c8da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c8f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c8f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c904:	2b00      	cmp	r3, #0
 800c906:	d11b      	bne.n	800c940 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c90c:	f003 0320 	and.w	r3, r3, #32
 800c910:	2b00      	cmp	r3, #0
 800c912:	d015      	beq.n	800c940 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c918:	f003 0320 	and.w	r3, r3, #32
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d105      	bne.n	800c92c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d009      	beq.n	800c940 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 8312 	beq.w	800cf5a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	4798      	blx	r3
      }
      return;
 800c93e:	e30c      	b.n	800cf5a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 8129 	beq.w	800cb9c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c94a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c94e:	4b90      	ldr	r3, [pc, #576]	@ (800cb90 <HAL_UART_IRQHandler+0x2c4>)
 800c950:	4013      	ands	r3, r2
 800c952:	2b00      	cmp	r3, #0
 800c954:	d106      	bne.n	800c964 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c956:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c95a:	4b8e      	ldr	r3, [pc, #568]	@ (800cb94 <HAL_UART_IRQHandler+0x2c8>)
 800c95c:	4013      	ands	r3, r2
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 811c 	beq.w	800cb9c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d011      	beq.n	800c994 <HAL_UART_IRQHandler+0xc8>
 800c970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00b      	beq.n	800c994 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2201      	movs	r2, #1
 800c982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c98a:	f043 0201 	orr.w	r2, r3, #1
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c998:	f003 0302 	and.w	r3, r3, #2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d011      	beq.n	800c9c4 <HAL_UART_IRQHandler+0xf8>
 800c9a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00b      	beq.n	800c9c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9ba:	f043 0204 	orr.w	r2, r3, #4
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9c8:	f003 0304 	and.w	r3, r3, #4
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d011      	beq.n	800c9f4 <HAL_UART_IRQHandler+0x128>
 800c9d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00b      	beq.n	800c9f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2204      	movs	r2, #4
 800c9e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9ea:	f043 0202 	orr.w	r2, r3, #2
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9f8:	f003 0308 	and.w	r3, r3, #8
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d017      	beq.n	800ca30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca04:	f003 0320 	and.w	r3, r3, #32
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d105      	bne.n	800ca18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ca0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ca10:	4b5f      	ldr	r3, [pc, #380]	@ (800cb90 <HAL_UART_IRQHandler+0x2c4>)
 800ca12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00b      	beq.n	800ca30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2208      	movs	r2, #8
 800ca1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca26:	f043 0208 	orr.w	r2, r3, #8
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ca30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d012      	beq.n	800ca62 <HAL_UART_IRQHandler+0x196>
 800ca3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00c      	beq.n	800ca62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca58:	f043 0220 	orr.w	r2, r3, #32
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f000 8278 	beq.w	800cf5e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca72:	f003 0320 	and.w	r3, r3, #32
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d013      	beq.n	800caa2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca7e:	f003 0320 	and.w	r3, r3, #32
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d105      	bne.n	800ca92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d007      	beq.n	800caa2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cab6:	2b40      	cmp	r3, #64	@ 0x40
 800cab8:	d005      	beq.n	800cac6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800caba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cabe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d058      	beq.n	800cb78 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f001 f91b 	bl	800dd02 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cad6:	2b40      	cmp	r3, #64	@ 0x40
 800cad8:	d148      	bne.n	800cb6c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3308      	adds	r3, #8
 800cae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cae8:	e853 3f00 	ldrex	r3, [r3]
 800caec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800caf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800caf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3308      	adds	r3, #8
 800cb02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cb06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cb0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cb12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cb16:	e841 2300 	strex	r3, r2, [r1]
 800cb1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cb1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1d9      	bne.n	800cada <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d017      	beq.n	800cb60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb36:	4a18      	ldr	r2, [pc, #96]	@ (800cb98 <HAL_UART_IRQHandler+0x2cc>)
 800cb38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fb fa7b 	bl	800803c <HAL_DMA_Abort_IT>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d01f      	beq.n	800cb8c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb5e:	e015      	b.n	800cb8c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb6a:	e00f      	b.n	800cb8c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb76:	e009      	b.n	800cb8c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cb8a:	e1e8      	b.n	800cf5e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb8c:	bf00      	nop
    return;
 800cb8e:	e1e6      	b.n	800cf5e <HAL_UART_IRQHandler+0x692>
 800cb90:	10000001 	.word	0x10000001
 800cb94:	04000120 	.word	0x04000120
 800cb98:	0800df11 	.word	0x0800df11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	f040 8176 	bne.w	800ce92 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbaa:	f003 0310 	and.w	r3, r3, #16
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f000 816f 	beq.w	800ce92 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cbb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f000 8168 	beq.w	800ce92 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2210      	movs	r2, #16
 800cbc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbd4:	2b40      	cmp	r3, #64	@ 0x40
 800cbd6:	f040 80dc 	bne.w	800cd92 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 80b1 	beq.w	800cd54 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	f080 80a9 	bcs.w	800cd54 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cc08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 0320 	and.w	r3, r3, #32
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f040 8087 	bne.w	800cd2e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cc2c:	e853 3f00 	ldrex	r3, [r3]
 800cc30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cc34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cc38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	461a      	mov	r2, r3
 800cc46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cc4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cc56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cc5a:	e841 2300 	strex	r3, r2, [r1]
 800cc5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cc62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1da      	bne.n	800cc20 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3308      	adds	r3, #8
 800cc70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc74:	e853 3f00 	ldrex	r3, [r3]
 800cc78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cc7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc7c:	f023 0301 	bic.w	r3, r3, #1
 800cc80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3308      	adds	r3, #8
 800cc8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cc92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cc96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cc9a:	e841 2300 	strex	r3, r2, [r1]
 800cc9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cca0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1e1      	bne.n	800cc6a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3308      	adds	r3, #8
 800ccac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccb0:	e853 3f00 	ldrex	r3, [r3]
 800ccb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ccb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ccb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	3308      	adds	r3, #8
 800ccc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ccca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cccc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ccd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ccd2:	e841 2300 	strex	r3, r2, [r1]
 800ccd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ccd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1e3      	bne.n	800cca6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2220      	movs	r2, #32
 800cce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccf4:	e853 3f00 	ldrex	r3, [r3]
 800ccf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ccfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccfc:	f023 0310 	bic.w	r3, r3, #16
 800cd00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cd14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd16:	e841 2300 	strex	r3, r2, [r1]
 800cd1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cd1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1e4      	bne.n	800ccec <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7fb f92e 	bl	8007f8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2202      	movs	r2, #2
 800cd32:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800cd46:	b292      	uxth	r2, r2
 800cd48:	1a8a      	subs	r2, r1, r2
 800cd4a:	b292      	uxth	r2, r2
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cd52:	e106      	b.n	800cf62 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	f040 80ff 	bne.w	800cf62 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0320 	and.w	r3, r3, #32
 800cd72:	2b20      	cmp	r3, #32
 800cd74:	f040 80f5 	bne.w	800cf62 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	4798      	blx	r3
      return;
 800cd90:	e0e7      	b.n	800cf62 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f000 80d9 	beq.w	800cf66 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800cdb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 80d4 	beq.w	800cf66 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc6:	e853 3f00 	ldrex	r3, [r3]
 800cdca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	461a      	mov	r2, r3
 800cddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cde0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cde2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cde6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cde8:	e841 2300 	strex	r3, r2, [r1]
 800cdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1e4      	bne.n	800cdbe <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	3308      	adds	r3, #8
 800cdfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfe:	e853 3f00 	ldrex	r3, [r3]
 800ce02:	623b      	str	r3, [r7, #32]
   return(result);
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce0a:	f023 0301 	bic.w	r3, r3, #1
 800ce0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	3308      	adds	r3, #8
 800ce18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ce1c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce24:	e841 2300 	strex	r3, r2, [r1]
 800ce28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1e1      	bne.n	800cdf4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2220      	movs	r2, #32
 800ce34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	e853 3f00 	ldrex	r3, [r3]
 800ce50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f023 0310 	bic.w	r3, r3, #16
 800ce58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	461a      	mov	r2, r3
 800ce62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ce66:	61fb      	str	r3, [r7, #28]
 800ce68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6a:	69b9      	ldr	r1, [r7, #24]
 800ce6c:	69fa      	ldr	r2, [r7, #28]
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	617b      	str	r3, [r7, #20]
   return(result);
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e4      	bne.n	800ce44 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ce86:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce90:	e069      	b.n	800cf66 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d010      	beq.n	800cec0 <HAL_UART_IRQHandler+0x5f4>
 800ce9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ceb2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cebe:	e055      	b.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d014      	beq.n	800cef6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ced0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d105      	bne.n	800cee4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ced8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cedc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d008      	beq.n	800cef6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d03e      	beq.n	800cf6a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	4798      	blx	r3
    }
    return;
 800cef4:	e039      	b.n	800cf6a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cefa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d009      	beq.n	800cf16 <HAL_UART_IRQHandler+0x64a>
 800cf02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f001 f812 	bl	800df38 <UART_EndTransmit_IT>
    return;
 800cf14:	e02a      	b.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00b      	beq.n	800cf3a <HAL_UART_IRQHandler+0x66e>
 800cf22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d005      	beq.n	800cf3a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf38:	e018      	b.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d012      	beq.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
 800cf46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da0e      	bge.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf58:	e008      	b.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf5a:	bf00      	nop
 800cf5c:	e006      	b.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
    return;
 800cf5e:	bf00      	nop
 800cf60:	e004      	b.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf62:	bf00      	nop
 800cf64:	e002      	b.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf66:	bf00      	nop
 800cf68:	e000      	b.n	800cf6c <HAL_UART_IRQHandler+0x6a0>
    return;
 800cf6a:	bf00      	nop
  }
}
 800cf6c:	37e8      	adds	r7, #232	@ 0xe8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop

0800cf74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	460b      	mov	r3, r1
 800d01e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a1a      	ldr	r2, [pc, #104]	@ (800d0a0 <UART_InitCallbacksToDefault+0x74>)
 800d038:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a19      	ldr	r2, [pc, #100]	@ (800d0a4 <UART_InitCallbacksToDefault+0x78>)
 800d040:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a18      	ldr	r2, [pc, #96]	@ (800d0a8 <UART_InitCallbacksToDefault+0x7c>)
 800d048:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4a17      	ldr	r2, [pc, #92]	@ (800d0ac <UART_InitCallbacksToDefault+0x80>)
 800d050:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4a16      	ldr	r2, [pc, #88]	@ (800d0b0 <UART_InitCallbacksToDefault+0x84>)
 800d058:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a15      	ldr	r2, [pc, #84]	@ (800d0b4 <UART_InitCallbacksToDefault+0x88>)
 800d060:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4a14      	ldr	r2, [pc, #80]	@ (800d0b8 <UART_InitCallbacksToDefault+0x8c>)
 800d068:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4a13      	ldr	r2, [pc, #76]	@ (800d0bc <UART_InitCallbacksToDefault+0x90>)
 800d070:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4a12      	ldr	r2, [pc, #72]	@ (800d0c0 <UART_InitCallbacksToDefault+0x94>)
 800d078:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a11      	ldr	r2, [pc, #68]	@ (800d0c4 <UART_InitCallbacksToDefault+0x98>)
 800d080:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a10      	ldr	r2, [pc, #64]	@ (800d0c8 <UART_InitCallbacksToDefault+0x9c>)
 800d088:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a0f      	ldr	r2, [pc, #60]	@ (800d0cc <UART_InitCallbacksToDefault+0xa0>)
 800d090:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	0800cf89 	.word	0x0800cf89
 800d0a4:	0800cf75 	.word	0x0800cf75
 800d0a8:	0800cfb1 	.word	0x0800cfb1
 800d0ac:	0800cf9d 	.word	0x0800cf9d
 800d0b0:	0800cfc5 	.word	0x0800cfc5
 800d0b4:	0800cfd9 	.word	0x0800cfd9
 800d0b8:	0800cfed 	.word	0x0800cfed
 800d0bc:	0800d001 	.word	0x0800d001
 800d0c0:	0800e9fd 	.word	0x0800e9fd
 800d0c4:	0800ea11 	.word	0x0800ea11
 800d0c8:	0800ea25 	.word	0x0800ea25
 800d0cc:	0800d015 	.word	0x0800d015

0800d0d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0d4:	b08c      	sub	sp, #48	@ 0x30
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	689a      	ldr	r2, [r3, #8]
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	431a      	orrs	r2, r3
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	695b      	ldr	r3, [r3, #20]
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	69db      	ldr	r3, [r3, #28]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	4baa      	ldr	r3, [pc, #680]	@ (800d3a8 <UART_SetConfig+0x2d8>)
 800d100:	4013      	ands	r3, r2
 800d102:	697a      	ldr	r2, [r7, #20]
 800d104:	6812      	ldr	r2, [r2, #0]
 800d106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d108:	430b      	orrs	r3, r1
 800d10a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	430a      	orrs	r2, r1
 800d120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a9f      	ldr	r2, [pc, #636]	@ (800d3ac <UART_SetConfig+0x2dc>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d004      	beq.n	800d13c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d138:	4313      	orrs	r3, r2
 800d13a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d146:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	6812      	ldr	r2, [r2, #0]
 800d14e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d150:	430b      	orrs	r3, r1
 800d152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d15a:	f023 010f 	bic.w	r1, r3, #15
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	430a      	orrs	r2, r1
 800d168:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a90      	ldr	r2, [pc, #576]	@ (800d3b0 <UART_SetConfig+0x2e0>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d125      	bne.n	800d1c0 <UART_SetConfig+0xf0>
 800d174:	4b8f      	ldr	r3, [pc, #572]	@ (800d3b4 <UART_SetConfig+0x2e4>)
 800d176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d17a:	f003 0303 	and.w	r3, r3, #3
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d81a      	bhi.n	800d1b8 <UART_SetConfig+0xe8>
 800d182:	a201      	add	r2, pc, #4	@ (adr r2, 800d188 <UART_SetConfig+0xb8>)
 800d184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d188:	0800d199 	.word	0x0800d199
 800d18c:	0800d1a9 	.word	0x0800d1a9
 800d190:	0800d1a1 	.word	0x0800d1a1
 800d194:	0800d1b1 	.word	0x0800d1b1
 800d198:	2301      	movs	r3, #1
 800d19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d19e:	e116      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1a6:	e112      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d1a8:	2304      	movs	r3, #4
 800d1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1ae:	e10e      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d1b0:	2308      	movs	r3, #8
 800d1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1b6:	e10a      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d1b8:	2310      	movs	r3, #16
 800d1ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1be:	e106      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a7c      	ldr	r2, [pc, #496]	@ (800d3b8 <UART_SetConfig+0x2e8>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d138      	bne.n	800d23c <UART_SetConfig+0x16c>
 800d1ca:	4b7a      	ldr	r3, [pc, #488]	@ (800d3b4 <UART_SetConfig+0x2e4>)
 800d1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1d0:	f003 030c 	and.w	r3, r3, #12
 800d1d4:	2b0c      	cmp	r3, #12
 800d1d6:	d82d      	bhi.n	800d234 <UART_SetConfig+0x164>
 800d1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d1e0 <UART_SetConfig+0x110>)
 800d1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1de:	bf00      	nop
 800d1e0:	0800d215 	.word	0x0800d215
 800d1e4:	0800d235 	.word	0x0800d235
 800d1e8:	0800d235 	.word	0x0800d235
 800d1ec:	0800d235 	.word	0x0800d235
 800d1f0:	0800d225 	.word	0x0800d225
 800d1f4:	0800d235 	.word	0x0800d235
 800d1f8:	0800d235 	.word	0x0800d235
 800d1fc:	0800d235 	.word	0x0800d235
 800d200:	0800d21d 	.word	0x0800d21d
 800d204:	0800d235 	.word	0x0800d235
 800d208:	0800d235 	.word	0x0800d235
 800d20c:	0800d235 	.word	0x0800d235
 800d210:	0800d22d 	.word	0x0800d22d
 800d214:	2300      	movs	r3, #0
 800d216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d21a:	e0d8      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d21c:	2302      	movs	r3, #2
 800d21e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d222:	e0d4      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d224:	2304      	movs	r3, #4
 800d226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d22a:	e0d0      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d22c:	2308      	movs	r3, #8
 800d22e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d232:	e0cc      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d234:	2310      	movs	r3, #16
 800d236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d23a:	e0c8      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a5e      	ldr	r2, [pc, #376]	@ (800d3bc <UART_SetConfig+0x2ec>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d125      	bne.n	800d292 <UART_SetConfig+0x1c2>
 800d246:	4b5b      	ldr	r3, [pc, #364]	@ (800d3b4 <UART_SetConfig+0x2e4>)
 800d248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d24c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d250:	2b30      	cmp	r3, #48	@ 0x30
 800d252:	d016      	beq.n	800d282 <UART_SetConfig+0x1b2>
 800d254:	2b30      	cmp	r3, #48	@ 0x30
 800d256:	d818      	bhi.n	800d28a <UART_SetConfig+0x1ba>
 800d258:	2b20      	cmp	r3, #32
 800d25a:	d00a      	beq.n	800d272 <UART_SetConfig+0x1a2>
 800d25c:	2b20      	cmp	r3, #32
 800d25e:	d814      	bhi.n	800d28a <UART_SetConfig+0x1ba>
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <UART_SetConfig+0x19a>
 800d264:	2b10      	cmp	r3, #16
 800d266:	d008      	beq.n	800d27a <UART_SetConfig+0x1aa>
 800d268:	e00f      	b.n	800d28a <UART_SetConfig+0x1ba>
 800d26a:	2300      	movs	r3, #0
 800d26c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d270:	e0ad      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d272:	2302      	movs	r3, #2
 800d274:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d278:	e0a9      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d27a:	2304      	movs	r3, #4
 800d27c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d280:	e0a5      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d282:	2308      	movs	r3, #8
 800d284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d288:	e0a1      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d28a:	2310      	movs	r3, #16
 800d28c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d290:	e09d      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a4a      	ldr	r2, [pc, #296]	@ (800d3c0 <UART_SetConfig+0x2f0>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d125      	bne.n	800d2e8 <UART_SetConfig+0x218>
 800d29c:	4b45      	ldr	r3, [pc, #276]	@ (800d3b4 <UART_SetConfig+0x2e4>)
 800d29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d2a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d2a8:	d016      	beq.n	800d2d8 <UART_SetConfig+0x208>
 800d2aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800d2ac:	d818      	bhi.n	800d2e0 <UART_SetConfig+0x210>
 800d2ae:	2b80      	cmp	r3, #128	@ 0x80
 800d2b0:	d00a      	beq.n	800d2c8 <UART_SetConfig+0x1f8>
 800d2b2:	2b80      	cmp	r3, #128	@ 0x80
 800d2b4:	d814      	bhi.n	800d2e0 <UART_SetConfig+0x210>
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <UART_SetConfig+0x1f0>
 800d2ba:	2b40      	cmp	r3, #64	@ 0x40
 800d2bc:	d008      	beq.n	800d2d0 <UART_SetConfig+0x200>
 800d2be:	e00f      	b.n	800d2e0 <UART_SetConfig+0x210>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2c6:	e082      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2ce:	e07e      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d2d0:	2304      	movs	r3, #4
 800d2d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2d6:	e07a      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d2d8:	2308      	movs	r3, #8
 800d2da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2de:	e076      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d2e0:	2310      	movs	r3, #16
 800d2e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2e6:	e072      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a35      	ldr	r2, [pc, #212]	@ (800d3c4 <UART_SetConfig+0x2f4>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d12a      	bne.n	800d348 <UART_SetConfig+0x278>
 800d2f2:	4b30      	ldr	r3, [pc, #192]	@ (800d3b4 <UART_SetConfig+0x2e4>)
 800d2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d300:	d01a      	beq.n	800d338 <UART_SetConfig+0x268>
 800d302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d306:	d81b      	bhi.n	800d340 <UART_SetConfig+0x270>
 800d308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d30c:	d00c      	beq.n	800d328 <UART_SetConfig+0x258>
 800d30e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d312:	d815      	bhi.n	800d340 <UART_SetConfig+0x270>
 800d314:	2b00      	cmp	r3, #0
 800d316:	d003      	beq.n	800d320 <UART_SetConfig+0x250>
 800d318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d31c:	d008      	beq.n	800d330 <UART_SetConfig+0x260>
 800d31e:	e00f      	b.n	800d340 <UART_SetConfig+0x270>
 800d320:	2300      	movs	r3, #0
 800d322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d326:	e052      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d328:	2302      	movs	r3, #2
 800d32a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d32e:	e04e      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d330:	2304      	movs	r3, #4
 800d332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d336:	e04a      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d338:	2308      	movs	r3, #8
 800d33a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d33e:	e046      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d340:	2310      	movs	r3, #16
 800d342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d346:	e042      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a17      	ldr	r2, [pc, #92]	@ (800d3ac <UART_SetConfig+0x2dc>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d13a      	bne.n	800d3c8 <UART_SetConfig+0x2f8>
 800d352:	4b18      	ldr	r3, [pc, #96]	@ (800d3b4 <UART_SetConfig+0x2e4>)
 800d354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d358:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d35c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d360:	d01a      	beq.n	800d398 <UART_SetConfig+0x2c8>
 800d362:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d366:	d81b      	bhi.n	800d3a0 <UART_SetConfig+0x2d0>
 800d368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d36c:	d00c      	beq.n	800d388 <UART_SetConfig+0x2b8>
 800d36e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d372:	d815      	bhi.n	800d3a0 <UART_SetConfig+0x2d0>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <UART_SetConfig+0x2b0>
 800d378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d37c:	d008      	beq.n	800d390 <UART_SetConfig+0x2c0>
 800d37e:	e00f      	b.n	800d3a0 <UART_SetConfig+0x2d0>
 800d380:	2300      	movs	r3, #0
 800d382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d386:	e022      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d388:	2302      	movs	r3, #2
 800d38a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d38e:	e01e      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d396:	e01a      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d39e:	e016      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3a6:	e012      	b.n	800d3ce <UART_SetConfig+0x2fe>
 800d3a8:	cfff69f3 	.word	0xcfff69f3
 800d3ac:	40008000 	.word	0x40008000
 800d3b0:	40013800 	.word	0x40013800
 800d3b4:	40021000 	.word	0x40021000
 800d3b8:	40004400 	.word	0x40004400
 800d3bc:	40004800 	.word	0x40004800
 800d3c0:	40004c00 	.word	0x40004c00
 800d3c4:	40005000 	.word	0x40005000
 800d3c8:	2310      	movs	r3, #16
 800d3ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4aae      	ldr	r2, [pc, #696]	@ (800d68c <UART_SetConfig+0x5bc>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	f040 8097 	bne.w	800d508 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d3de:	2b08      	cmp	r3, #8
 800d3e0:	d823      	bhi.n	800d42a <UART_SetConfig+0x35a>
 800d3e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e8 <UART_SetConfig+0x318>)
 800d3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e8:	0800d40d 	.word	0x0800d40d
 800d3ec:	0800d42b 	.word	0x0800d42b
 800d3f0:	0800d415 	.word	0x0800d415
 800d3f4:	0800d42b 	.word	0x0800d42b
 800d3f8:	0800d41b 	.word	0x0800d41b
 800d3fc:	0800d42b 	.word	0x0800d42b
 800d400:	0800d42b 	.word	0x0800d42b
 800d404:	0800d42b 	.word	0x0800d42b
 800d408:	0800d423 	.word	0x0800d423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d40c:	f7fb fefa 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800d410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d412:	e010      	b.n	800d436 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d414:	4b9e      	ldr	r3, [pc, #632]	@ (800d690 <UART_SetConfig+0x5c0>)
 800d416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d418:	e00d      	b.n	800d436 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d41a:	f7fb fe85 	bl	8009128 <HAL_RCC_GetSysClockFreq>
 800d41e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d420:	e009      	b.n	800d436 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d428:	e005      	b.n	800d436 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d42a:	2300      	movs	r3, #0
 800d42c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d434:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 8130 	beq.w	800d69e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d442:	4a94      	ldr	r2, [pc, #592]	@ (800d694 <UART_SetConfig+0x5c4>)
 800d444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d448:	461a      	mov	r2, r3
 800d44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d450:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	685a      	ldr	r2, [r3, #4]
 800d456:	4613      	mov	r3, r2
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4413      	add	r3, r2
 800d45c:	69ba      	ldr	r2, [r7, #24]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d305      	bcc.n	800d46e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d468:	69ba      	ldr	r2, [r7, #24]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d903      	bls.n	800d476 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d474:	e113      	b.n	800d69e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d478:	2200      	movs	r2, #0
 800d47a:	60bb      	str	r3, [r7, #8]
 800d47c:	60fa      	str	r2, [r7, #12]
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d482:	4a84      	ldr	r2, [pc, #528]	@ (800d694 <UART_SetConfig+0x5c4>)
 800d484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	2200      	movs	r2, #0
 800d48c:	603b      	str	r3, [r7, #0]
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d494:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d498:	f7f3 fca8 	bl	8000dec <__aeabi_uldivmod>
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	f04f 0200 	mov.w	r2, #0
 800d4a8:	f04f 0300 	mov.w	r3, #0
 800d4ac:	020b      	lsls	r3, r1, #8
 800d4ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4b2:	0202      	lsls	r2, r0, #8
 800d4b4:	6979      	ldr	r1, [r7, #20]
 800d4b6:	6849      	ldr	r1, [r1, #4]
 800d4b8:	0849      	lsrs	r1, r1, #1
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	460c      	mov	r4, r1
 800d4be:	4605      	mov	r5, r0
 800d4c0:	eb12 0804 	adds.w	r8, r2, r4
 800d4c4:	eb43 0905 	adc.w	r9, r3, r5
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	469a      	mov	sl, r3
 800d4d0:	4693      	mov	fp, r2
 800d4d2:	4652      	mov	r2, sl
 800d4d4:	465b      	mov	r3, fp
 800d4d6:	4640      	mov	r0, r8
 800d4d8:	4649      	mov	r1, r9
 800d4da:	f7f3 fc87 	bl	8000dec <__aeabi_uldivmod>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4ec:	d308      	bcc.n	800d500 <UART_SetConfig+0x430>
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4f4:	d204      	bcs.n	800d500 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6a3a      	ldr	r2, [r7, #32]
 800d4fc:	60da      	str	r2, [r3, #12]
 800d4fe:	e0ce      	b.n	800d69e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d506:	e0ca      	b.n	800d69e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	69db      	ldr	r3, [r3, #28]
 800d50c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d510:	d166      	bne.n	800d5e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d512:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d516:	2b08      	cmp	r3, #8
 800d518:	d827      	bhi.n	800d56a <UART_SetConfig+0x49a>
 800d51a:	a201      	add	r2, pc, #4	@ (adr r2, 800d520 <UART_SetConfig+0x450>)
 800d51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d520:	0800d545 	.word	0x0800d545
 800d524:	0800d54d 	.word	0x0800d54d
 800d528:	0800d555 	.word	0x0800d555
 800d52c:	0800d56b 	.word	0x0800d56b
 800d530:	0800d55b 	.word	0x0800d55b
 800d534:	0800d56b 	.word	0x0800d56b
 800d538:	0800d56b 	.word	0x0800d56b
 800d53c:	0800d56b 	.word	0x0800d56b
 800d540:	0800d563 	.word	0x0800d563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d544:	f7fb fe5e 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800d548:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d54a:	e014      	b.n	800d576 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d54c:	f7fb fe70 	bl	8009230 <HAL_RCC_GetPCLK2Freq>
 800d550:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d552:	e010      	b.n	800d576 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d554:	4b4e      	ldr	r3, [pc, #312]	@ (800d690 <UART_SetConfig+0x5c0>)
 800d556:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d558:	e00d      	b.n	800d576 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d55a:	f7fb fde5 	bl	8009128 <HAL_RCC_GetSysClockFreq>
 800d55e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d560:	e009      	b.n	800d576 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d566:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d568:	e005      	b.n	800d576 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d56a:	2300      	movs	r3, #0
 800d56c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d574:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 8090 	beq.w	800d69e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d582:	4a44      	ldr	r2, [pc, #272]	@ (800d694 <UART_SetConfig+0x5c4>)
 800d584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d588:	461a      	mov	r2, r3
 800d58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d590:	005a      	lsls	r2, r3, #1
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	085b      	lsrs	r3, r3, #1
 800d598:	441a      	add	r2, r3
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	2b0f      	cmp	r3, #15
 800d5a8:	d916      	bls.n	800d5d8 <UART_SetConfig+0x508>
 800d5aa:	6a3b      	ldr	r3, [r7, #32]
 800d5ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5b0:	d212      	bcs.n	800d5d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	f023 030f 	bic.w	r3, r3, #15
 800d5ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	085b      	lsrs	r3, r3, #1
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	8bfb      	ldrh	r3, [r7, #30]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	8bfa      	ldrh	r2, [r7, #30]
 800d5d4:	60da      	str	r2, [r3, #12]
 800d5d6:	e062      	b.n	800d69e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d5de:	e05e      	b.n	800d69e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d828      	bhi.n	800d63a <UART_SetConfig+0x56a>
 800d5e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f0 <UART_SetConfig+0x520>)
 800d5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ee:	bf00      	nop
 800d5f0:	0800d615 	.word	0x0800d615
 800d5f4:	0800d61d 	.word	0x0800d61d
 800d5f8:	0800d625 	.word	0x0800d625
 800d5fc:	0800d63b 	.word	0x0800d63b
 800d600:	0800d62b 	.word	0x0800d62b
 800d604:	0800d63b 	.word	0x0800d63b
 800d608:	0800d63b 	.word	0x0800d63b
 800d60c:	0800d63b 	.word	0x0800d63b
 800d610:	0800d633 	.word	0x0800d633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d614:	f7fb fdf6 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800d618:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d61a:	e014      	b.n	800d646 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d61c:	f7fb fe08 	bl	8009230 <HAL_RCC_GetPCLK2Freq>
 800d620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d622:	e010      	b.n	800d646 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d624:	4b1a      	ldr	r3, [pc, #104]	@ (800d690 <UART_SetConfig+0x5c0>)
 800d626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d628:	e00d      	b.n	800d646 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d62a:	f7fb fd7d 	bl	8009128 <HAL_RCC_GetSysClockFreq>
 800d62e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d630:	e009      	b.n	800d646 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d638:	e005      	b.n	800d646 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d63a:	2300      	movs	r3, #0
 800d63c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d644:	bf00      	nop
    }

    if (pclk != 0U)
 800d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d028      	beq.n	800d69e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d650:	4a10      	ldr	r2, [pc, #64]	@ (800d694 <UART_SetConfig+0x5c4>)
 800d652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d656:	461a      	mov	r2, r3
 800d658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	085b      	lsrs	r3, r3, #1
 800d664:	441a      	add	r2, r3
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d66e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	2b0f      	cmp	r3, #15
 800d674:	d910      	bls.n	800d698 <UART_SetConfig+0x5c8>
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d67c:	d20c      	bcs.n	800d698 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	b29a      	uxth	r2, r3
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	60da      	str	r2, [r3, #12]
 800d688:	e009      	b.n	800d69e <UART_SetConfig+0x5ce>
 800d68a:	bf00      	nop
 800d68c:	40008000 	.word	0x40008000
 800d690:	00f42400 	.word	0x00f42400
 800d694:	080113b8 	.word	0x080113b8
      }
      else
      {
        ret = HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d6ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3730      	adds	r7, #48	@ 0x30
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d6c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6d4:	f003 0308 	and.w	r3, r3, #8
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00a      	beq.n	800d6f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	430a      	orrs	r2, r1
 800d6f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00a      	beq.n	800d714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	430a      	orrs	r2, r1
 800d712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d718:	f003 0302 	and.w	r3, r3, #2
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00a      	beq.n	800d736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	430a      	orrs	r2, r1
 800d734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73a:	f003 0304 	and.w	r3, r3, #4
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00a      	beq.n	800d758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	430a      	orrs	r2, r1
 800d756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d75c:	f003 0310 	and.w	r3, r3, #16
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00a      	beq.n	800d77a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	430a      	orrs	r2, r1
 800d778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d77e:	f003 0320 	and.w	r3, r3, #32
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00a      	beq.n	800d79c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	430a      	orrs	r2, r1
 800d79a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d01a      	beq.n	800d7de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	430a      	orrs	r2, r1
 800d7bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7c6:	d10a      	bne.n	800d7de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	430a      	orrs	r2, r1
 800d7dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	430a      	orrs	r2, r1
 800d7fe:	605a      	str	r2, [r3, #4]
  }
}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b098      	sub	sp, #96	@ 0x60
 800d810:	af02      	add	r7, sp, #8
 800d812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d81c:	f7f8 feb8 	bl	8006590 <HAL_GetTick>
 800d820:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f003 0308 	and.w	r3, r3, #8
 800d82c:	2b08      	cmp	r3, #8
 800d82e:	d12f      	bne.n	800d890 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d830:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d838:	2200      	movs	r2, #0
 800d83a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f88e 	bl	800d960 <UART_WaitOnFlagUntilTimeout>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d022      	beq.n	800d890 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d852:	e853 3f00 	ldrex	r3, [r3]
 800d856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d85e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	461a      	mov	r2, r3
 800d866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d868:	647b      	str	r3, [r7, #68]	@ 0x44
 800d86a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d86e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d870:	e841 2300 	strex	r3, r2, [r1]
 800d874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1e6      	bne.n	800d84a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2220      	movs	r2, #32
 800d880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d88c:	2303      	movs	r3, #3
 800d88e:	e063      	b.n	800d958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f003 0304 	and.w	r3, r3, #4
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d149      	bne.n	800d932 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d89e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 f857 	bl	800d960 <UART_WaitOnFlagUntilTimeout>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d03c      	beq.n	800d932 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c0:	e853 3f00 	ldrex	r3, [r3]
 800d8c4:	623b      	str	r3, [r7, #32]
   return(result);
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8de:	e841 2300 	strex	r3, r2, [r1]
 800d8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1e6      	bne.n	800d8b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	3308      	adds	r3, #8
 800d8f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	e853 3f00 	ldrex	r3, [r3]
 800d8f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f023 0301 	bic.w	r3, r3, #1
 800d900:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	3308      	adds	r3, #8
 800d908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d90a:	61fa      	str	r2, [r7, #28]
 800d90c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90e:	69b9      	ldr	r1, [r7, #24]
 800d910:	69fa      	ldr	r2, [r7, #28]
 800d912:	e841 2300 	strex	r3, r2, [r1]
 800d916:	617b      	str	r3, [r7, #20]
   return(result);
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1e5      	bne.n	800d8ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2220      	movs	r2, #32
 800d922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d92e:	2303      	movs	r3, #3
 800d930:	e012      	b.n	800d958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2220      	movs	r2, #32
 800d936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2220      	movs	r2, #32
 800d93e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3758      	adds	r7, #88	@ 0x58
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	603b      	str	r3, [r7, #0]
 800d96c:	4613      	mov	r3, r2
 800d96e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d970:	e04f      	b.n	800da12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d978:	d04b      	beq.n	800da12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d97a:	f7f8 fe09 	bl	8006590 <HAL_GetTick>
 800d97e:	4602      	mov	r2, r0
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	69ba      	ldr	r2, [r7, #24]
 800d986:	429a      	cmp	r2, r3
 800d988:	d302      	bcc.n	800d990 <UART_WaitOnFlagUntilTimeout+0x30>
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d990:	2303      	movs	r3, #3
 800d992:	e04e      	b.n	800da32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f003 0304 	and.w	r3, r3, #4
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d037      	beq.n	800da12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b80      	cmp	r3, #128	@ 0x80
 800d9a6:	d034      	beq.n	800da12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	2b40      	cmp	r3, #64	@ 0x40
 800d9ac:	d031      	beq.n	800da12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	69db      	ldr	r3, [r3, #28]
 800d9b4:	f003 0308 	and.w	r3, r3, #8
 800d9b8:	2b08      	cmp	r3, #8
 800d9ba:	d110      	bne.n	800d9de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2208      	movs	r2, #8
 800d9c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f000 f99c 	bl	800dd02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2208      	movs	r2, #8
 800d9ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e029      	b.n	800da32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	69db      	ldr	r3, [r3, #28]
 800d9e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9ec:	d111      	bne.n	800da12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d9f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f000 f982 	bl	800dd02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2220      	movs	r2, #32
 800da02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800da0e:	2303      	movs	r3, #3
 800da10:	e00f      	b.n	800da32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69da      	ldr	r2, [r3, #28]
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	4013      	ands	r3, r2
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	429a      	cmp	r2, r3
 800da20:	bf0c      	ite	eq
 800da22:	2301      	moveq	r3, #1
 800da24:	2300      	movne	r3, #0
 800da26:	b2db      	uxtb	r3, r3
 800da28:	461a      	mov	r2, r3
 800da2a:	79fb      	ldrb	r3, [r7, #7]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d0a0      	beq.n	800d972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
	...

0800da3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b0a3      	sub	sp, #140	@ 0x8c
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	4613      	mov	r3, r2
 800da48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	68ba      	ldr	r2, [r7, #8]
 800da4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	88fa      	ldrh	r2, [r7, #6]
 800da54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	88fa      	ldrh	r2, [r7, #6]
 800da5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da6e:	d10e      	bne.n	800da8e <UART_Start_Receive_IT+0x52>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d105      	bne.n	800da84 <UART_Start_Receive_IT+0x48>
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800da7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da82:	e02d      	b.n	800dae0 <UART_Start_Receive_IT+0xa4>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	22ff      	movs	r2, #255	@ 0xff
 800da88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da8c:	e028      	b.n	800dae0 <UART_Start_Receive_IT+0xa4>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10d      	bne.n	800dab2 <UART_Start_Receive_IT+0x76>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	691b      	ldr	r3, [r3, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d104      	bne.n	800daa8 <UART_Start_Receive_IT+0x6c>
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	22ff      	movs	r2, #255	@ 0xff
 800daa2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800daa6:	e01b      	b.n	800dae0 <UART_Start_Receive_IT+0xa4>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	227f      	movs	r2, #127	@ 0x7f
 800daac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dab0:	e016      	b.n	800dae0 <UART_Start_Receive_IT+0xa4>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800daba:	d10d      	bne.n	800dad8 <UART_Start_Receive_IT+0x9c>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d104      	bne.n	800dace <UART_Start_Receive_IT+0x92>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	227f      	movs	r2, #127	@ 0x7f
 800dac8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dacc:	e008      	b.n	800dae0 <UART_Start_Receive_IT+0xa4>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	223f      	movs	r2, #63	@ 0x3f
 800dad2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dad6:	e003      	b.n	800dae0 <UART_Start_Receive_IT+0xa4>
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2200      	movs	r2, #0
 800dadc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2222      	movs	r2, #34	@ 0x22
 800daec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	3308      	adds	r3, #8
 800daf6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dafa:	e853 3f00 	ldrex	r3, [r3]
 800dafe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800db00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db02:	f043 0301 	orr.w	r3, r3, #1
 800db06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3308      	adds	r3, #8
 800db10:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800db14:	673a      	str	r2, [r7, #112]	@ 0x70
 800db16:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db18:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800db1a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800db1c:	e841 2300 	strex	r3, r2, [r1]
 800db20:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800db22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1e3      	bne.n	800daf0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db30:	d14f      	bne.n	800dbd2 <UART_Start_Receive_IT+0x196>
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800db38:	88fa      	ldrh	r2, [r7, #6]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d349      	bcc.n	800dbd2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db46:	d107      	bne.n	800db58 <UART_Start_Receive_IT+0x11c>
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d103      	bne.n	800db58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	4a47      	ldr	r2, [pc, #284]	@ (800dc70 <UART_Start_Receive_IT+0x234>)
 800db54:	675a      	str	r2, [r3, #116]	@ 0x74
 800db56:	e002      	b.n	800db5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	4a46      	ldr	r2, [pc, #280]	@ (800dc74 <UART_Start_Receive_IT+0x238>)
 800db5c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d01a      	beq.n	800db9c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db6e:	e853 3f00 	ldrex	r3, [r3]
 800db72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db8a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800db90:	e841 2300 	strex	r3, r2, [r1]
 800db94:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800db96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1e4      	bne.n	800db66 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3308      	adds	r3, #8
 800dba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dba6:	e853 3f00 	ldrex	r3, [r3]
 800dbaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dbb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3308      	adds	r3, #8
 800dbba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dbbc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800dbbe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dbc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbc4:	e841 2300 	strex	r3, r2, [r1]
 800dbc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dbca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1e5      	bne.n	800db9c <UART_Start_Receive_IT+0x160>
 800dbd0:	e046      	b.n	800dc60 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbda:	d107      	bne.n	800dbec <UART_Start_Receive_IT+0x1b0>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d103      	bne.n	800dbec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	4a24      	ldr	r2, [pc, #144]	@ (800dc78 <UART_Start_Receive_IT+0x23c>)
 800dbe8:	675a      	str	r2, [r3, #116]	@ 0x74
 800dbea:	e002      	b.n	800dbf2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	4a23      	ldr	r2, [pc, #140]	@ (800dc7c <UART_Start_Receive_IT+0x240>)
 800dbf0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d019      	beq.n	800dc2e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc02:	e853 3f00 	ldrex	r3, [r3]
 800dc06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800dc0e:	677b      	str	r3, [r7, #116]	@ 0x74
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	461a      	mov	r2, r3
 800dc16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dc18:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc1a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc20:	e841 2300 	strex	r3, r2, [r1]
 800dc24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1e6      	bne.n	800dbfa <UART_Start_Receive_IT+0x1be>
 800dc2c:	e018      	b.n	800dc60 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	e853 3f00 	ldrex	r3, [r3]
 800dc3a:	613b      	str	r3, [r7, #16]
   return(result);
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	f043 0320 	orr.w	r3, r3, #32
 800dc42:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc4c:	623b      	str	r3, [r7, #32]
 800dc4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc50:	69f9      	ldr	r1, [r7, #28]
 800dc52:	6a3a      	ldr	r2, [r7, #32]
 800dc54:	e841 2300 	strex	r3, r2, [r1]
 800dc58:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc5a:	69bb      	ldr	r3, [r7, #24]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1e6      	bne.n	800dc2e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	378c      	adds	r7, #140	@ 0x8c
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	0800e685 	.word	0x0800e685
 800dc74:	0800e315 	.word	0x0800e315
 800dc78:	0800e155 	.word	0x0800e155
 800dc7c:	0800df95 	.word	0x0800df95

0800dc80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b08f      	sub	sp, #60	@ 0x3c
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	e853 3f00 	ldrex	r3, [r3]
 800dc94:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dc9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dca8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dcac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcae:	e841 2300 	strex	r3, r2, [r1]
 800dcb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d1e6      	bne.n	800dc88 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	e853 3f00 	ldrex	r3, [r3]
 800dcc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dcd0:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	3308      	adds	r3, #8
 800dcd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcda:	61ba      	str	r2, [r7, #24]
 800dcdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcde:	6979      	ldr	r1, [r7, #20]
 800dce0:	69ba      	ldr	r2, [r7, #24]
 800dce2:	e841 2300 	strex	r3, r2, [r1]
 800dce6:	613b      	str	r3, [r7, #16]
   return(result);
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1e5      	bne.n	800dcba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800dcf6:	bf00      	nop
 800dcf8:	373c      	adds	r7, #60	@ 0x3c
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd02:	b480      	push	{r7}
 800dd04:	b095      	sub	sp, #84	@ 0x54
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd12:	e853 3f00 	ldrex	r3, [r3]
 800dd16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	461a      	mov	r2, r3
 800dd26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd28:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd30:	e841 2300 	strex	r3, r2, [r1]
 800dd34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1e6      	bne.n	800dd0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3308      	adds	r3, #8
 800dd42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	e853 3f00 	ldrex	r3, [r3]
 800dd4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd52:	f023 0301 	bic.w	r3, r3, #1
 800dd56:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3308      	adds	r3, #8
 800dd5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dd62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd68:	e841 2300 	strex	r3, r2, [r1]
 800dd6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1e3      	bne.n	800dd3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d118      	bne.n	800ddae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	e853 3f00 	ldrex	r3, [r3]
 800dd88:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	f023 0310 	bic.w	r3, r3, #16
 800dd90:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	461a      	mov	r2, r3
 800dd98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd9a:	61bb      	str	r3, [r7, #24]
 800dd9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd9e:	6979      	ldr	r1, [r7, #20]
 800dda0:	69ba      	ldr	r2, [r7, #24]
 800dda2:	e841 2300 	strex	r3, r2, [r1]
 800dda6:	613b      	str	r3, [r7, #16]
   return(result);
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1e6      	bne.n	800dd7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2220      	movs	r2, #32
 800ddb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ddc2:	bf00      	nop
 800ddc4:	3754      	adds	r7, #84	@ 0x54
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b090      	sub	sp, #64	@ 0x40
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddda:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 0320 	and.w	r3, r3, #32
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d137      	bne.n	800de5a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ddea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddec:	2200      	movs	r2, #0
 800ddee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ddf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3308      	adds	r3, #8
 800ddf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfc:	e853 3f00 	ldrex	r3, [r3]
 800de00:	623b      	str	r3, [r7, #32]
   return(result);
 800de02:	6a3b      	ldr	r3, [r7, #32]
 800de04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800de0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	3308      	adds	r3, #8
 800de10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de12:	633a      	str	r2, [r7, #48]	@ 0x30
 800de14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de1a:	e841 2300 	strex	r3, r2, [r1]
 800de1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1e5      	bne.n	800ddf2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	e853 3f00 	ldrex	r3, [r3]
 800de32:	60fb      	str	r3, [r7, #12]
   return(result);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800de3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	461a      	mov	r2, r3
 800de42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de44:	61fb      	str	r3, [r7, #28]
 800de46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de48:	69b9      	ldr	r1, [r7, #24]
 800de4a:	69fa      	ldr	r2, [r7, #28]
 800de4c:	e841 2300 	strex	r3, r2, [r1]
 800de50:	617b      	str	r3, [r7, #20]
   return(result);
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1e6      	bne.n	800de26 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800de58:	e004      	b.n	800de64 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800de5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800de62:	4798      	blx	r3
}
 800de64:	bf00      	nop
 800de66:	3740      	adds	r7, #64	@ 0x40
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de84:	bf00      	nop
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b086      	sub	sp, #24
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dea0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dea8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800deb4:	2b80      	cmp	r3, #128	@ 0x80
 800deb6:	d109      	bne.n	800decc <UART_DMAError+0x40>
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	2b21      	cmp	r3, #33	@ 0x21
 800debc:	d106      	bne.n	800decc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dec6:	6978      	ldr	r0, [r7, #20]
 800dec8:	f7ff feda 	bl	800dc80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ded6:	2b40      	cmp	r3, #64	@ 0x40
 800ded8:	d109      	bne.n	800deee <UART_DMAError+0x62>
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b22      	cmp	r3, #34	@ 0x22
 800dede:	d106      	bne.n	800deee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dee8:	6978      	ldr	r0, [r7, #20]
 800deea:	f7ff ff0a 	bl	800dd02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800def4:	f043 0210 	orr.w	r2, r3, #16
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800df04:	6978      	ldr	r0, [r7, #20]
 800df06:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df08:	bf00      	nop
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df30:	bf00      	nop
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b088      	sub	sp, #32
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	e853 3f00 	ldrex	r3, [r3]
 800df4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df54:	61fb      	str	r3, [r7, #28]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	461a      	mov	r2, r3
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	61bb      	str	r3, [r7, #24]
 800df60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df62:	6979      	ldr	r1, [r7, #20]
 800df64:	69ba      	ldr	r2, [r7, #24]
 800df66:	e841 2300 	strex	r3, r2, [r1]
 800df6a:	613b      	str	r3, [r7, #16]
   return(result);
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1e6      	bne.n	800df40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2220      	movs	r2, #32
 800df76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df8a:	bf00      	nop
 800df8c:	3720      	adds	r7, #32
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b09c      	sub	sp, #112	@ 0x70
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dfa2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dfac:	2b22      	cmp	r3, #34	@ 0x22
 800dfae:	f040 80c2 	bne.w	800e136 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dfbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800dfc0:	b2d9      	uxtb	r1, r3
 800dfc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfcc:	400a      	ands	r2, r1
 800dfce:	b2d2      	uxtb	r2, r2
 800dfd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfd6:	1c5a      	adds	r2, r3, #1
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f040 80a5 	bne.w	800e146 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e004:	e853 3f00 	ldrex	r3, [r3]
 800e008:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e00a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e00c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e010:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	461a      	mov	r2, r3
 800e018:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e01a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e01c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e020:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e022:	e841 2300 	strex	r3, r2, [r1]
 800e026:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1e6      	bne.n	800dffc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3308      	adds	r3, #8
 800e034:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e038:	e853 3f00 	ldrex	r3, [r3]
 800e03c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e040:	f023 0301 	bic.w	r3, r3, #1
 800e044:	667b      	str	r3, [r7, #100]	@ 0x64
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3308      	adds	r3, #8
 800e04c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e04e:	647a      	str	r2, [r7, #68]	@ 0x44
 800e050:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e056:	e841 2300 	strex	r3, r2, [r1]
 800e05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1e5      	bne.n	800e02e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2220      	movs	r2, #32
 800e066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a35      	ldr	r2, [pc, #212]	@ (800e150 <UART_RxISR_8BIT+0x1bc>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d01f      	beq.n	800e0c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d018      	beq.n	800e0c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e096:	e853 3f00 	ldrex	r3, [r3]
 800e09a:	623b      	str	r3, [r7, #32]
   return(result);
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e0a2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e0ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0b4:	e841 2300 	strex	r3, r2, [r1]
 800e0b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1e6      	bne.n	800e08e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d130      	bne.n	800e12a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	e853 3f00 	ldrex	r3, [r3]
 800e0da:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f023 0310 	bic.w	r3, r3, #16
 800e0e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0ec:	61fb      	str	r3, [r7, #28]
 800e0ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f0:	69b9      	ldr	r1, [r7, #24]
 800e0f2:	69fa      	ldr	r2, [r7, #28]
 800e0f4:	e841 2300 	strex	r3, r2, [r1]
 800e0f8:	617b      	str	r3, [r7, #20]
   return(result);
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d1e6      	bne.n	800e0ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	69db      	ldr	r3, [r3, #28]
 800e106:	f003 0310 	and.w	r3, r3, #16
 800e10a:	2b10      	cmp	r3, #16
 800e10c:	d103      	bne.n	800e116 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2210      	movs	r2, #16
 800e114:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e122:	4611      	mov	r1, r2
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e128:	e00d      	b.n	800e146 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	4798      	blx	r3
}
 800e134:	e007      	b.n	800e146 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	699a      	ldr	r2, [r3, #24]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f042 0208 	orr.w	r2, r2, #8
 800e144:	619a      	str	r2, [r3, #24]
}
 800e146:	bf00      	nop
 800e148:	3770      	adds	r7, #112	@ 0x70
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	40008000 	.word	0x40008000

0800e154 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b09c      	sub	sp, #112	@ 0x70
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e162:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e16c:	2b22      	cmp	r3, #34	@ 0x22
 800e16e:	f040 80c2 	bne.w	800e2f6 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e178:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e180:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e182:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e186:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e18a:	4013      	ands	r3, r2
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e190:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e196:	1c9a      	adds	r2, r3, #2
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	b29a      	uxth	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f040 80a5 	bne.w	800e306 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1c4:	e853 3f00 	ldrex	r3, [r3]
 800e1c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e1ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1da:	657b      	str	r3, [r7, #84]	@ 0x54
 800e1dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e1e2:	e841 2300 	strex	r3, r2, [r1]
 800e1e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e1e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e6      	bne.n	800e1bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e200:	f023 0301 	bic.w	r3, r3, #1
 800e204:	663b      	str	r3, [r7, #96]	@ 0x60
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e20e:	643a      	str	r2, [r7, #64]	@ 0x40
 800e210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e212:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e214:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e216:	e841 2300 	strex	r3, r2, [r1]
 800e21a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1e5      	bne.n	800e1ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2220      	movs	r2, #32
 800e226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a35      	ldr	r2, [pc, #212]	@ (800e310 <UART_RxISR_16BIT+0x1bc>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d01f      	beq.n	800e280 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d018      	beq.n	800e280 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	e853 3f00 	ldrex	r3, [r3]
 800e25a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e262:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	461a      	mov	r2, r3
 800e26a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e26c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e26e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e274:	e841 2300 	strex	r3, r2, [r1]
 800e278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1e6      	bne.n	800e24e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e284:	2b01      	cmp	r3, #1
 800e286:	d130      	bne.n	800e2ea <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	e853 3f00 	ldrex	r3, [r3]
 800e29a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	f023 0310 	bic.w	r3, r3, #16
 800e2a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2ac:	61bb      	str	r3, [r7, #24]
 800e2ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b0:	6979      	ldr	r1, [r7, #20]
 800e2b2:	69ba      	ldr	r2, [r7, #24]
 800e2b4:	e841 2300 	strex	r3, r2, [r1]
 800e2b8:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1e6      	bne.n	800e28e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	f003 0310 	and.w	r3, r3, #16
 800e2ca:	2b10      	cmp	r3, #16
 800e2cc:	d103      	bne.n	800e2d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2210      	movs	r2, #16
 800e2d4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2e8:	e00d      	b.n	800e306 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	4798      	blx	r3
}
 800e2f4:	e007      	b.n	800e306 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	699a      	ldr	r2, [r3, #24]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f042 0208 	orr.w	r2, r2, #8
 800e304:	619a      	str	r2, [r3, #24]
}
 800e306:	bf00      	nop
 800e308:	3770      	adds	r7, #112	@ 0x70
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	40008000 	.word	0x40008000

0800e314 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b0ac      	sub	sp, #176	@ 0xb0
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e322:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	69db      	ldr	r3, [r3, #28]
 800e32c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e34a:	2b22      	cmp	r3, #34	@ 0x22
 800e34c:	f040 8189 	bne.w	800e662 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e356:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e35a:	e12c      	b.n	800e5b6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e362:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e366:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e36a:	b2d9      	uxtb	r1, r3
 800e36c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e370:	b2da      	uxtb	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e376:	400a      	ands	r2, r1
 800e378:	b2d2      	uxtb	r2, r2
 800e37a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	3b01      	subs	r3, #1
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	69db      	ldr	r3, [r3, #28]
 800e39e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e3a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3a6:	f003 0307 	and.w	r3, r3, #7
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d055      	beq.n	800e45a <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e3ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3b2:	f003 0301 	and.w	r3, r3, #1
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d011      	beq.n	800e3de <UART_RxISR_8BIT_FIFOEN+0xca>
 800e3ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00b      	beq.n	800e3de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3d4:	f043 0201 	orr.w	r2, r3, #1
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3e2:	f003 0302 	and.w	r3, r3, #2
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d011      	beq.n	800e40e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e3ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00b      	beq.n	800e40e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2202      	movs	r2, #2
 800e3fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e404:	f043 0204 	orr.w	r2, r3, #4
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e40e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e412:	f003 0304 	and.w	r3, r3, #4
 800e416:	2b00      	cmp	r3, #0
 800e418:	d011      	beq.n	800e43e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e41a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e41e:	f003 0301 	and.w	r3, r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00b      	beq.n	800e43e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2204      	movs	r2, #4
 800e42c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e434:	f043 0202 	orr.w	r2, r3, #2
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e444:	2b00      	cmp	r3, #0
 800e446:	d008      	beq.n	800e45a <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e460:	b29b      	uxth	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	f040 80a7 	bne.w	800e5b6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e470:	e853 3f00 	ldrex	r3, [r3]
 800e474:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e47c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	461a      	mov	r2, r3
 800e486:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e48a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e48c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e490:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e492:	e841 2300 	strex	r3, r2, [r1]
 800e496:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e498:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1e4      	bne.n	800e468 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3308      	adds	r3, #8
 800e4a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e4ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e4b4:	f023 0301 	bic.w	r3, r3, #1
 800e4b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3308      	adds	r3, #8
 800e4c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e4c6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e4c8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e4cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e4d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e1      	bne.n	800e49e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a62      	ldr	r2, [pc, #392]	@ (800e67c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d021      	beq.n	800e53c <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e502:	2b00      	cmp	r3, #0
 800e504:	d01a      	beq.n	800e53c <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e50e:	e853 3f00 	ldrex	r3, [r3]
 800e512:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e516:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e51a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e528:	657b      	str	r3, [r7, #84]	@ 0x54
 800e52a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e52e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e530:	e841 2300 	strex	r3, r2, [r1]
 800e534:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1e4      	bne.n	800e506 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e540:	2b01      	cmp	r3, #1
 800e542:	d132      	bne.n	800e5aa <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e552:	e853 3f00 	ldrex	r3, [r3]
 800e556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	f023 0310 	bic.w	r3, r3, #16
 800e55e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	461a      	mov	r2, r3
 800e568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e56c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e56e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e574:	e841 2300 	strex	r3, r2, [r1]
 800e578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1e4      	bne.n	800e54a <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	69db      	ldr	r3, [r3, #28]
 800e586:	f003 0310 	and.w	r3, r3, #16
 800e58a:	2b10      	cmp	r3, #16
 800e58c:	d103      	bne.n	800e596 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2210      	movs	r2, #16
 800e594:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e5a2:	4611      	mov	r1, r2
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e5a8:	e010      	b.n	800e5cc <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	4798      	blx	r3
        break;
 800e5b4:	e00a      	b.n	800e5cc <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e5b6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d006      	beq.n	800e5cc <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800e5be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5c2:	f003 0320 	and.w	r3, r3, #32
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f47f aec8 	bne.w	800e35c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5d2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e5d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d049      	beq.n	800e672 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e5e4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d242      	bcs.n	800e672 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3308      	adds	r3, #8
 800e5f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	e853 3f00 	ldrex	r3, [r3]
 800e5fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e602:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3308      	adds	r3, #8
 800e60c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e618:	e841 2300 	strex	r3, r2, [r1]
 800e61c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1e3      	bne.n	800e5ec <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a16      	ldr	r2, [pc, #88]	@ (800e680 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800e628:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	e853 3f00 	ldrex	r3, [r3]
 800e636:	60bb      	str	r3, [r7, #8]
   return(result);
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	f043 0320 	orr.w	r3, r3, #32
 800e63e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	461a      	mov	r2, r3
 800e648:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e64c:	61bb      	str	r3, [r7, #24]
 800e64e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e650:	6979      	ldr	r1, [r7, #20]
 800e652:	69ba      	ldr	r2, [r7, #24]
 800e654:	e841 2300 	strex	r3, r2, [r1]
 800e658:	613b      	str	r3, [r7, #16]
   return(result);
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1e4      	bne.n	800e62a <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e660:	e007      	b.n	800e672 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	699a      	ldr	r2, [r3, #24]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f042 0208 	orr.w	r2, r2, #8
 800e670:	619a      	str	r2, [r3, #24]
}
 800e672:	bf00      	nop
 800e674:	37b0      	adds	r7, #176	@ 0xb0
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	40008000 	.word	0x40008000
 800e680:	0800df95 	.word	0x0800df95

0800e684 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b0ae      	sub	sp, #184	@ 0xb8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e692:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	69db      	ldr	r3, [r3, #28]
 800e69c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6ba:	2b22      	cmp	r3, #34	@ 0x22
 800e6bc:	f040 818d 	bne.w	800e9da <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e6c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6ca:	e130      	b.n	800e92e <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e6de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e6e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e6ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6f4:	1c9a      	adds	r2, r3, #2
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e700:	b29b      	uxth	r3, r3
 800e702:	3b01      	subs	r3, #1
 800e704:	b29a      	uxth	r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	69db      	ldr	r3, [r3, #28]
 800e712:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e71a:	f003 0307 	and.w	r3, r3, #7
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d055      	beq.n	800e7ce <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e726:	f003 0301 	and.w	r3, r3, #1
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d011      	beq.n	800e752 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e72e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00b      	beq.n	800e752 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2201      	movs	r2, #1
 800e740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e748:	f043 0201 	orr.w	r2, r3, #1
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e756:	f003 0302 	and.w	r3, r3, #2
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d011      	beq.n	800e782 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e75e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e762:	f003 0301 	and.w	r3, r3, #1
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00b      	beq.n	800e782 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2202      	movs	r2, #2
 800e770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e778:	f043 0204 	orr.w	r2, r3, #4
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e786:	f003 0304 	and.w	r3, r3, #4
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d011      	beq.n	800e7b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e78e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e792:	f003 0301 	and.w	r3, r3, #1
 800e796:	2b00      	cmp	r3, #0
 800e798:	d00b      	beq.n	800e7b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2204      	movs	r2, #4
 800e7a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7a8:	f043 0202 	orr.w	r2, r3, #2
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d008      	beq.n	800e7ce <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	f040 80a9 	bne.w	800e92e <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e7e4:	e853 3f00 	ldrex	r3, [r3]
 800e7e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e7ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e7ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e7f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e7fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e802:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e804:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e806:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e80a:	e841 2300 	strex	r3, r2, [r1]
 800e80e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e812:	2b00      	cmp	r3, #0
 800e814:	d1e2      	bne.n	800e7dc <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	3308      	adds	r3, #8
 800e81c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e820:	e853 3f00 	ldrex	r3, [r3]
 800e824:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e82c:	f023 0301 	bic.w	r3, r3, #1
 800e830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	3308      	adds	r3, #8
 800e83a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e83e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e840:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e842:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e844:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e846:	e841 2300 	strex	r3, r2, [r1]
 800e84a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e84c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1e1      	bne.n	800e816 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2220      	movs	r2, #32
 800e856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a62      	ldr	r2, [pc, #392]	@ (800e9f4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d021      	beq.n	800e8b4 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d01a      	beq.n	800e8b4 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e886:	e853 3f00 	ldrex	r3, [r3]
 800e88a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e88c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e88e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e8a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e8a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8a8:	e841 2300 	strex	r3, r2, [r1]
 800e8ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e8ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1e4      	bne.n	800e87e <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d132      	bne.n	800e922 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ca:	e853 3f00 	ldrex	r3, [r3]
 800e8ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d2:	f023 0310 	bic.w	r3, r3, #16
 800e8d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	461a      	mov	r2, r3
 800e8e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e8e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8ec:	e841 2300 	strex	r3, r2, [r1]
 800e8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1e4      	bne.n	800e8c2 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	69db      	ldr	r3, [r3, #28]
 800e8fe:	f003 0310 	and.w	r3, r3, #16
 800e902:	2b10      	cmp	r3, #16
 800e904:	d103      	bne.n	800e90e <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2210      	movs	r2, #16
 800e90c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e91a:	4611      	mov	r1, r2
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e920:	e010      	b.n	800e944 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	4798      	blx	r3
        break;
 800e92c:	e00a      	b.n	800e944 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e92e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e932:	2b00      	cmp	r3, #0
 800e934:	d006      	beq.n	800e944 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800e936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e93a:	f003 0320 	and.w	r3, r3, #32
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f47f aec4 	bne.w	800e6cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e94a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e94e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e952:	2b00      	cmp	r3, #0
 800e954:	d049      	beq.n	800e9ea <UART_RxISR_16BIT_FIFOEN+0x366>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e95c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e960:	429a      	cmp	r2, r3
 800e962:	d242      	bcs.n	800e9ea <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	3308      	adds	r3, #8
 800e96a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e96e:	e853 3f00 	ldrex	r3, [r3]
 800e972:	623b      	str	r3, [r7, #32]
   return(result);
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e97a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	3308      	adds	r3, #8
 800e984:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e988:	633a      	str	r2, [r7, #48]	@ 0x30
 800e98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e98e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e990:	e841 2300 	strex	r3, r2, [r1]
 800e994:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1e3      	bne.n	800e964 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4a16      	ldr	r2, [pc, #88]	@ (800e9f8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800e9a0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	e853 3f00 	ldrex	r3, [r3]
 800e9ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f043 0320 	orr.w	r3, r3, #32
 800e9b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e9c4:	61fb      	str	r3, [r7, #28]
 800e9c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c8:	69b9      	ldr	r1, [r7, #24]
 800e9ca:	69fa      	ldr	r2, [r7, #28]
 800e9cc:	e841 2300 	strex	r3, r2, [r1]
 800e9d0:	617b      	str	r3, [r7, #20]
   return(result);
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1e4      	bne.n	800e9a2 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9d8:	e007      	b.n	800e9ea <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	699a      	ldr	r2, [r3, #24]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f042 0208 	orr.w	r2, r2, #8
 800e9e8:	619a      	str	r2, [r3, #24]
}
 800e9ea:	bf00      	nop
 800e9ec:	37b8      	adds	r7, #184	@ 0xb8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	40008000 	.word	0x40008000
 800e9f8:	0800e155 	.word	0x0800e155

0800e9fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ea2c:	bf00      	nop
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d101      	bne.n	800ea4e <HAL_UARTEx_DisableFifoMode+0x16>
 800ea4a:	2302      	movs	r3, #2
 800ea4c:	e027      	b.n	800ea9e <HAL_UARTEx_DisableFifoMode+0x66>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2224      	movs	r2, #36	@ 0x24
 800ea5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f022 0201 	bic.w	r2, r2, #1
 800ea74:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ea7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2220      	movs	r2, #32
 800ea90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3714      	adds	r7, #20
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b084      	sub	sp, #16
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d101      	bne.n	800eac2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eabe:	2302      	movs	r3, #2
 800eac0:	e02d      	b.n	800eb1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2224      	movs	r2, #36	@ 0x24
 800eace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f022 0201 	bic.w	r2, r2, #1
 800eae8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	430a      	orrs	r2, r1
 800eafc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 f850 	bl	800eba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2220      	movs	r2, #32
 800eb10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b084      	sub	sp, #16
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
 800eb2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d101      	bne.n	800eb3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	e02d      	b.n	800eb9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2201      	movs	r2, #1
 800eb42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2224      	movs	r2, #36	@ 0x24
 800eb4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f022 0201 	bic.w	r2, r2, #1
 800eb64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 f812 	bl	800eba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2220      	movs	r2, #32
 800eb8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d108      	bne.n	800ebc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ebc4:	e031      	b.n	800ec2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ebc6:	2308      	movs	r3, #8
 800ebc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ebca:	2308      	movs	r3, #8
 800ebcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	0e5b      	lsrs	r3, r3, #25
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	f003 0307 	and.w	r3, r3, #7
 800ebdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	0f5b      	lsrs	r3, r3, #29
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	f003 0307 	and.w	r3, r3, #7
 800ebec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebee:	7bbb      	ldrb	r3, [r7, #14]
 800ebf0:	7b3a      	ldrb	r2, [r7, #12]
 800ebf2:	4911      	ldr	r1, [pc, #68]	@ (800ec38 <UARTEx_SetNbDataToProcess+0x94>)
 800ebf4:	5c8a      	ldrb	r2, [r1, r2]
 800ebf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ebfa:	7b3a      	ldrb	r2, [r7, #12]
 800ebfc:	490f      	ldr	r1, [pc, #60]	@ (800ec3c <UARTEx_SetNbDataToProcess+0x98>)
 800ebfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
 800ec0e:	7b7a      	ldrb	r2, [r7, #13]
 800ec10:	4909      	ldr	r1, [pc, #36]	@ (800ec38 <UARTEx_SetNbDataToProcess+0x94>)
 800ec12:	5c8a      	ldrb	r2, [r1, r2]
 800ec14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec18:	7b7a      	ldrb	r2, [r7, #13]
 800ec1a:	4908      	ldr	r1, [pc, #32]	@ (800ec3c <UARTEx_SetNbDataToProcess+0x98>)
 800ec1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ec2a:	bf00      	nop
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	080113d0 	.word	0x080113d0
 800ec3c:	080113d8 	.word	0x080113d8

0800ec40 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	ed93 7a06 	vldr	s14, [r3, #24]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	edd3 7a06 	vldr	s15, [r3, #24]
 800ec70:	eeb1 7a67 	vneg.f32	s14, s15
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ec7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6a1a      	ldr	r2, [r3, #32]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d006      	beq.n	800eca4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	330c      	adds	r3, #12
 800ec9a:	220c      	movs	r2, #12
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f000 fcc4 	bl	800f62c <memset>
  }

}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b08b      	sub	sp, #44	@ 0x2c
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	885b      	ldrh	r3, [r3, #2]
 800ecd4:	fb02 f303 	mul.w	r3, r2, r3
 800ecd8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ecde:	e013      	b.n	800ed08 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece2:	1d1a      	adds	r2, r3, #4
 800ece4:	627a      	str	r2, [r7, #36]	@ 0x24
 800ece6:	ed93 7a00 	vldr	s14, [r3]
 800ecea:	6a3b      	ldr	r3, [r7, #32]
 800ecec:	1d1a      	adds	r2, r3, #4
 800ecee:	623a      	str	r2, [r7, #32]
 800ecf0:	edd3 7a00 	vldr	s15, [r3]
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	1d1a      	adds	r2, r3, #4
 800ecf8:	61fa      	str	r2, [r7, #28]
 800ecfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecfe:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	3b01      	subs	r3, #1
 800ed06:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1e8      	bne.n	800ece0 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ed12:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	372c      	adds	r7, #44	@ 0x2c
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ed22:	b480      	push	{r7}
 800ed24:	b085      	sub	sp, #20
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	60f8      	str	r0, [r7, #12]
 800ed2a:	607b      	str	r3, [r7, #4]
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	817b      	strh	r3, [r7, #10]
 800ed30:	4613      	mov	r3, r2
 800ed32:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	897a      	ldrh	r2, [r7, #10]
 800ed38:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	893a      	ldrh	r2, [r7, #8]
 800ed3e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	605a      	str	r2, [r3, #4]
}
 800ed46:	bf00      	nop
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr

0800ed52 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b0bb      	sub	sp, #236	@ 0xec
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
 800ed5a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	881b      	ldrh	r3, [r3, #0]
 800ed6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	885b      	ldrh	r3, [r3, #2]
 800ed72:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ed74:	f04f 0300 	mov.w	r3, #0
 800ed78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed7c:	f04f 0300 	mov.w	r3, #0
 800ed80:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ed82:	2300      	movs	r3, #0
 800ed84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ed88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ed8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ed94:	e03b      	b.n	800ee0e <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ed96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ed98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eda2:	e00c      	b.n	800edbe <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800eda4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eda8:	1d1a      	adds	r2, r3, #4
 800edaa:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800edae:	f04f 0200 	mov.w	r2, #0
 800edb2:	601a      	str	r2, [r3, #0]
        j--;
 800edb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800edb8:	3b01      	subs	r3, #1
 800edba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800edbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1ee      	bne.n	800eda4 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800edc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edca:	1d1a      	adds	r2, r3, #4
 800edcc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800edd0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800edd4:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800edd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800edda:	3b01      	subs	r3, #1
 800eddc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ede0:	e00c      	b.n	800edfc <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800ede2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ede6:	1d1a      	adds	r2, r3, #4
 800ede8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800edec:	f04f 0200 	mov.w	r2, #0
 800edf0:	601a      	str	r2, [r3, #0]
        j--;
 800edf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800edf6:	3b01      	subs	r3, #1
 800edf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800edfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d1ee      	bne.n	800ede2 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800ee04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ee0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1bf      	bne.n	800ed96 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800ee16:	2300      	movs	r3, #0
 800ee18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ee1c:	e2c7      	b.n	800f3ae <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800ee1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee22:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685a      	ldr	r2, [r3, #4]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	885b      	ldrh	r3, [r3, #2]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800ee32:	fb01 f303 	mul.w	r3, r1, r3
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800ee3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800ee48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ee50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee54:	3301      	adds	r3, #1
 800ee56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ee5a:	e02c      	b.n	800eeb6 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685a      	ldr	r2, [r3, #4]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	885b      	ldrh	r3, [r3, #2]
 800ee64:	4619      	mov	r1, r3
 800ee66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee6a:	fb03 f101 	mul.w	r1, r3, r1
 800ee6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee72:	440b      	add	r3, r1
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	4413      	add	r3, r2
 800ee78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800ee7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800ee84:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800ee88:	eeb0 7ae7 	vabs.f32	s14, s15
 800ee8c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee90:	eef0 7ae7 	vabs.f32	s15, s15
 800ee94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9c:	dd06      	ble.n	800eeac <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800ee9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800eea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800eeac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eeb6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eeba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d3cd      	bcc.n	800ee5c <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800eec0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eec4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eecc:	f000 809b 	beq.w	800f006 <arm_mat_inverse_f32+0x2b4>
 800eed0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eed8:	429a      	cmp	r2, r3
 800eeda:	f000 8094 	beq.w	800f006 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	885b      	ldrh	r3, [r3, #2]
 800eef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eef4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eefa:	1ad3      	subs	r3, r2, r3
 800eefc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eefe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef02:	fb03 f202 	mul.w	r2, r3, r2
 800ef06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef0a:	4413      	add	r3, r2
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ef12:	4413      	add	r3, r2
 800ef14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ef18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ef1e:	fb03 f202 	mul.w	r2, r3, r2
 800ef22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef26:	4413      	add	r3, r2
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef2e:	4413      	add	r3, r2
 800ef30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef34:	2300      	movs	r3, #0
 800ef36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ef3a:	e018      	b.n	800ef6e <arm_mat_inverse_f32+0x21c>
 800ef3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef48:	1d1a      	adds	r2, r3, #4
 800ef4a:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ef4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef52:	6812      	ldr	r2, [r2, #0]
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef5a:	1d1a      	adds	r2, r3, #4
 800ef5c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ef60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ef68:	3301      	adds	r3, #1
 800ef6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ef6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ef72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef74:	429a      	cmp	r2, r3
 800ef76:	dbe1      	blt.n	800ef3c <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	885b      	ldrh	r3, [r3, #2]
 800ef8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef90:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef96:	fb02 f303 	mul.w	r3, r2, r3
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800efa0:	4413      	add	r3, r2
 800efa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800efa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efa8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800efac:	fb02 f303 	mul.w	r3, r2, r3
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800efb6:	4413      	add	r3, r2
 800efb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800efbc:	2300      	movs	r3, #0
 800efbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800efc2:	e018      	b.n	800eff6 <arm_mat_inverse_f32+0x2a4>
 800efc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efd0:	1d1a      	adds	r2, r3, #4
 800efd2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800efd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800efda:	6812      	ldr	r2, [r2, #0]
 800efdc:	601a      	str	r2, [r3, #0]
 800efde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800efe2:	1d1a      	adds	r2, r3, #4
 800efe4:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800efe8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800eff0:	3301      	adds	r3, #1
 800eff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800effa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800effc:	429a      	cmp	r2, r3
 800effe:	dbe1      	blt.n	800efc4 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800f000:	2301      	movs	r3, #1
 800f002:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800f006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d009      	beq.n	800f022 <arm_mat_inverse_f32+0x2d0>
 800f00e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f012:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f01a:	d102      	bne.n	800f022 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800f01c:	f06f 0304 	mvn.w	r3, #4
 800f020:	e208      	b.n	800f434 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800f022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f026:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800f02a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f02e:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	885b      	ldrh	r3, [r3, #2]
 800f03e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f046:	1ad3      	subs	r3, r2, r3
 800f048:	633b      	str	r3, [r7, #48]	@ 0x30
 800f04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f04c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f04e:	fb03 f202 	mul.w	r2, r3, r2
 800f052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f056:	4413      	add	r3, r2
 800f058:	009b      	lsls	r3, r3, #2
 800f05a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800f05e:	4413      	add	r3, r2
 800f060:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f064:	2300      	movs	r3, #0
 800f066:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f06a:	e011      	b.n	800f090 <arm_mat_inverse_f32+0x33e>
 800f06c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f070:	1d1a      	adds	r2, r3, #4
 800f072:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800f076:	ed93 7a00 	vldr	s14, [r3]
 800f07a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f082:	edc3 7a00 	vstr	s15, [r3]
 800f086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f08a:	3301      	adds	r3, #1
 800f08c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f090:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800f094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f096:	429a      	cmp	r2, r3
 800f098:	dbe8      	blt.n	800f06c <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	885b      	ldrh	r3, [r3, #2]
 800f0a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f0b0:	fb02 f303 	mul.w	r3, r2, r3
 800f0b4:	009b      	lsls	r3, r3, #2
 800f0b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f0ba:	4413      	add	r3, r2
 800f0bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f0c6:	e011      	b.n	800f0ec <arm_mat_inverse_f32+0x39a>
 800f0c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0cc:	1d1a      	adds	r2, r3, #4
 800f0ce:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800f0d2:	ed93 7a00 	vldr	s14, [r3]
 800f0d6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0de:	edc3 7a00 	vstr	s15, [r3]
 800f0e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f0ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800f0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	dbe8      	blt.n	800f0c8 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800f0fc:	e0ae      	b.n	800f25c <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685a      	ldr	r2, [r3, #4]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	885b      	ldrh	r3, [r3, #2]
 800f106:	4619      	mov	r1, r3
 800f108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f10c:	fb03 f101 	mul.w	r1, r3, r1
 800f110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f114:	440b      	add	r3, r1
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4413      	add	r3, r2
 800f11a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800f11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	885b      	ldrh	r3, [r3, #2]
 800f13c:	617b      	str	r3, [r7, #20]
 800f13e:	697a      	ldr	r2, [r7, #20]
 800f140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	613b      	str	r3, [r7, #16]
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f14e:	fb03 f202 	mul.w	r2, r3, r2
 800f152:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f156:	4413      	add	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f15e:	4413      	add	r3, r2
 800f160:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f168:	fb03 f202 	mul.w	r2, r3, r2
 800f16c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f170:	4413      	add	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f178:	4413      	add	r3, r2
 800f17a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f17e:	2300      	movs	r3, #0
 800f180:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f184:	e01a      	b.n	800f1bc <arm_mat_inverse_f32+0x46a>
 800f186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f18a:	1d1a      	adds	r2, r3, #4
 800f18c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800f190:	ed93 7a00 	vldr	s14, [r3]
 800f194:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f19c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f1a0:	1d1a      	adds	r2, r3, #4
 800f1a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800f1a6:	ed93 7a00 	vldr	s14, [r3]
 800f1aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1ae:	edc3 7a00 	vstr	s15, [r3]
 800f1b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f1bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	dbdf      	blt.n	800f186 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	885b      	ldrh	r3, [r3, #2]
 800f1da:	60fb      	str	r3, [r7, #12]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	60bb      	str	r3, [r7, #8]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f1e6:	fb02 f303 	mul.w	r3, r2, r3
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f1f0:	4413      	add	r3, r2
 800f1f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1fa:	fb02 f303 	mul.w	r3, r2, r3
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f204:	4413      	add	r3, r2
 800f206:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f20a:	2300      	movs	r3, #0
 800f20c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f210:	e01a      	b.n	800f248 <arm_mat_inverse_f32+0x4f6>
 800f212:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f216:	1d1a      	adds	r2, r3, #4
 800f218:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f21c:	ed93 7a00 	vldr	s14, [r3]
 800f220:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f224:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f22c:	1d1a      	adds	r2, r3, #4
 800f22e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800f232:	ed93 7a00 	vldr	s14, [r3]
 800f236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f23a:	edc3 7a00 	vstr	s15, [r3]
 800f23e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f242:	3301      	adds	r3, #1
 800f244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f248:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	429a      	cmp	r2, r3
 800f250:	dbdf      	blt.n	800f212 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800f252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f256:	3301      	adds	r3, #1
 800f258:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f25c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f262:	429a      	cmp	r2, r3
 800f264:	f4ff af4b 	bcc.w	800f0fe <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f26a:	3301      	adds	r3, #1
 800f26c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f270:	e092      	b.n	800f398 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	885b      	ldrh	r3, [r3, #2]
 800f27a:	4619      	mov	r1, r3
 800f27c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f280:	fb03 f101 	mul.w	r1, r3, r1
 800f284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f288:	440b      	add	r3, r1
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	4413      	add	r3, r2
 800f28e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800f292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	677b      	str	r3, [r7, #116]	@ 0x74
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	885b      	ldrh	r3, [r3, #2]
 800f2ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	623b      	str	r3, [r7, #32]
 800f2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f2be:	fb03 f202 	mul.w	r2, r3, r2
 800f2c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2c6:	4413      	add	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f2cc:	4413      	add	r3, r2
 800f2ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f2d4:	fb03 f202 	mul.w	r2, r3, r2
 800f2d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2dc:	4413      	add	r3, r2
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f2e2:	4413      	add	r3, r2
 800f2e4:	677b      	str	r3, [r7, #116]	@ 0x74
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f2ea:	e014      	b.n	800f316 <arm_mat_inverse_f32+0x5c4>
 800f2ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f2ee:	1d1a      	adds	r2, r3, #4
 800f2f0:	677a      	str	r2, [r7, #116]	@ 0x74
 800f2f2:	ed93 7a00 	vldr	s14, [r3]
 800f2f6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f300:	1d1a      	adds	r2, r3, #4
 800f302:	67ba      	str	r2, [r7, #120]	@ 0x78
 800f304:	ed93 7a00 	vldr	s14, [r3]
 800f308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f30c:	edc3 7a00 	vstr	s15, [r3]
 800f310:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f312:	3301      	adds	r3, #1
 800f314:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f316:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	dbe6      	blt.n	800f2ec <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	885b      	ldrh	r3, [r3, #2]
 800f32e:	61fb      	str	r3, [r7, #28]
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	61bb      	str	r3, [r7, #24]
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f33a:	fb02 f303 	mul.w	r3, r2, r3
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f342:	4413      	add	r3, r2
 800f344:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f34a:	fb02 f303 	mul.w	r3, r2, r3
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f352:	4413      	add	r3, r2
 800f354:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f356:	2300      	movs	r3, #0
 800f358:	673b      	str	r3, [r7, #112]	@ 0x70
 800f35a:	e014      	b.n	800f386 <arm_mat_inverse_f32+0x634>
 800f35c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f35e:	1d1a      	adds	r2, r3, #4
 800f360:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f362:	ed93 7a00 	vldr	s14, [r3]
 800f366:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f36e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f370:	1d1a      	adds	r2, r3, #4
 800f372:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f374:	ed93 7a00 	vldr	s14, [r3]
 800f378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f37c:	edc3 7a00 	vstr	s15, [r3]
 800f380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f382:	3301      	adds	r3, #1
 800f384:	673b      	str	r3, [r7, #112]	@ 0x70
 800f386:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	dbe6      	blt.n	800f35c <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f38e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f392:	3301      	adds	r3, #1
 800f394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f398:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f39c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	f4ff af67 	bcc.w	800f272 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800f3a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f3ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f3b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	f4ff ad32 	bcc.w	800ee1e <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800f3c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d033      	beq.n	800f430 <arm_mat_inverse_f32+0x6de>
 800f3c8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f3cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d4:	d12c      	bne.n	800f430 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f3e2:	e010      	b.n	800f406 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800f3e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f3ec:	4413      	add	r3, r2
 800f3ee:	edd3 7a00 	vldr	s15, [r3]
 800f3f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fa:	d10d      	bne.n	800f418 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800f3fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f400:	3301      	adds	r3, #1
 800f402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f408:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f40a:	fb02 f303 	mul.w	r3, r2, r3
 800f40e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f412:	429a      	cmp	r2, r3
 800f414:	d3e6      	bcc.n	800f3e4 <arm_mat_inverse_f32+0x692>
 800f416:	e000      	b.n	800f41a <arm_mat_inverse_f32+0x6c8>
            break;
 800f418:	bf00      	nop
      }

      if (i == numRows * numCols)
 800f41a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f41c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f41e:	fb02 f303 	mul.w	r3, r2, r3
 800f422:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f426:	429a      	cmp	r2, r3
 800f428:	d102      	bne.n	800f430 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800f42a:	23fb      	movs	r3, #251	@ 0xfb
 800f42c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800f430:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800f434:	4618      	mov	r0, r3
 800f436:	37ec      	adds	r7, #236	@ 0xec
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f440:	b480      	push	{r7}
 800f442:	b093      	sub	sp, #76	@ 0x4c
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	885b      	ldrh	r3, [r3, #2]
 800f474:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	885b      	ldrh	r3, [r3, #2]
 800f47a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f47c:	2300      	movs	r3, #0
 800f47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f480:	8b7b      	ldrh	r3, [r7, #26]
 800f482:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	69fa      	ldr	r2, [r7, #28]
 800f48a:	4413      	add	r3, r2
 800f48c:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f48e:	8b3b      	ldrh	r3, [r7, #24]
 800f490:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f498:	f04f 0300 	mov.w	r3, #0
 800f49c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4a0:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f4a2:	8afb      	ldrh	r3, [r7, #22]
 800f4a4:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f4a6:	e017      	b.n	800f4d8 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f4a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4aa:	1d1a      	adds	r2, r3, #4
 800f4ac:	647a      	str	r2, [r7, #68]	@ 0x44
 800f4ae:	ed93 7a00 	vldr	s14, [r3]
 800f4b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4b4:	edd3 7a00 	vldr	s15, [r3]
 800f4b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4bc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f4c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4c4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f4c8:	8b3b      	ldrh	r3, [r7, #24]
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f4ce:	4413      	add	r3, r2
 800f4d0:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1e4      	bne.n	800f4a8 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e0:	1d1a      	adds	r2, r3, #4
 800f4e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f4e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4e6:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f4ee:	8b3a      	ldrh	r2, [r7, #24]
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	6a3a      	ldr	r2, [r7, #32]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1ca      	bne.n	800f498 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f502:	8b3b      	ldrh	r3, [r7, #24]
 800f504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f506:	4413      	add	r3, r2
 800f508:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f50a:	8afb      	ldrh	r3, [r7, #22]
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f510:	4413      	add	r3, r2
 800f512:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f516:	3b01      	subs	r3, #1
 800f518:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d1b1      	bne.n	800f484 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f520:	2300      	movs	r3, #0
 800f522:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f524:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	374c      	adds	r7, #76	@ 0x4c
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f534:	b480      	push	{r7}
 800f536:	b08b      	sub	sp, #44	@ 0x2c
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	881b      	ldrh	r3, [r3, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	885b      	ldrh	r3, [r3, #2]
 800f55c:	fb02 f303 	mul.w	r3, r2, r3
 800f560:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f566:	e013      	b.n	800f590 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800f568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f56a:	1d1a      	adds	r2, r3, #4
 800f56c:	627a      	str	r2, [r7, #36]	@ 0x24
 800f56e:	ed93 7a00 	vldr	s14, [r3]
 800f572:	6a3b      	ldr	r3, [r7, #32]
 800f574:	1d1a      	adds	r2, r3, #4
 800f576:	623a      	str	r2, [r7, #32]
 800f578:	edd3 7a00 	vldr	s15, [r3]
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	1d1a      	adds	r2, r3, #4
 800f580:	61fa      	str	r2, [r7, #28]
 800f582:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f586:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	3b01      	subs	r3, #1
 800f58e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f590:	69bb      	ldr	r3, [r7, #24]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d1e8      	bne.n	800f568 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f596:	2300      	movs	r3, #0
 800f598:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f59a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	372c      	adds	r7, #44	@ 0x2c
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f5aa:	b480      	push	{r7}
 800f5ac:	b08b      	sub	sp, #44	@ 0x2c
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	881b      	ldrh	r3, [r3, #0]
 800f5c4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	885b      	ldrh	r3, [r3, #2]
 800f5ca:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f5cc:	89fb      	ldrh	r3, [r7, #14]
 800f5ce:	61bb      	str	r3, [r7, #24]
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	693a      	ldr	r2, [r7, #16]
 800f5da:	4413      	add	r3, r2
 800f5dc:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f5de:	89bb      	ldrh	r3, [r7, #12]
 800f5e0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f5e2:	e00d      	b.n	800f600 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e6:	1d1a      	adds	r2, r3, #4
 800f5e8:	627a      	str	r2, [r7, #36]	@ 0x24
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	6a3b      	ldr	r3, [r7, #32]
 800f5ee:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f5f0:	89fb      	ldrh	r3, [r7, #14]
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	6a3a      	ldr	r2, [r7, #32]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d1ee      	bne.n	800f5e4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	3301      	adds	r3, #1
 800f60a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	3b01      	subs	r3, #1
 800f610:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1dd      	bne.n	800f5d4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f618:	2300      	movs	r3, #0
 800f61a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f61c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f620:	4618      	mov	r0, r3
 800f622:	372c      	adds	r7, #44	@ 0x2c
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <memset>:
 800f62c:	4402      	add	r2, r0
 800f62e:	4603      	mov	r3, r0
 800f630:	4293      	cmp	r3, r2
 800f632:	d100      	bne.n	800f636 <memset+0xa>
 800f634:	4770      	bx	lr
 800f636:	f803 1b01 	strb.w	r1, [r3], #1
 800f63a:	e7f9      	b.n	800f630 <memset+0x4>

0800f63c <__errno>:
 800f63c:	4b01      	ldr	r3, [pc, #4]	@ (800f644 <__errno+0x8>)
 800f63e:	6818      	ldr	r0, [r3, #0]
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	20000218 	.word	0x20000218

0800f648 <__libc_init_array>:
 800f648:	b570      	push	{r4, r5, r6, lr}
 800f64a:	4d0d      	ldr	r5, [pc, #52]	@ (800f680 <__libc_init_array+0x38>)
 800f64c:	4c0d      	ldr	r4, [pc, #52]	@ (800f684 <__libc_init_array+0x3c>)
 800f64e:	1b64      	subs	r4, r4, r5
 800f650:	10a4      	asrs	r4, r4, #2
 800f652:	2600      	movs	r6, #0
 800f654:	42a6      	cmp	r6, r4
 800f656:	d109      	bne.n	800f66c <__libc_init_array+0x24>
 800f658:	4d0b      	ldr	r5, [pc, #44]	@ (800f688 <__libc_init_array+0x40>)
 800f65a:	4c0c      	ldr	r4, [pc, #48]	@ (800f68c <__libc_init_array+0x44>)
 800f65c:	f001 fe92 	bl	8011384 <_init>
 800f660:	1b64      	subs	r4, r4, r5
 800f662:	10a4      	asrs	r4, r4, #2
 800f664:	2600      	movs	r6, #0
 800f666:	42a6      	cmp	r6, r4
 800f668:	d105      	bne.n	800f676 <__libc_init_array+0x2e>
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
 800f66c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f670:	4798      	blx	r3
 800f672:	3601      	adds	r6, #1
 800f674:	e7ee      	b.n	800f654 <__libc_init_array+0xc>
 800f676:	f855 3b04 	ldr.w	r3, [r5], #4
 800f67a:	4798      	blx	r3
 800f67c:	3601      	adds	r6, #1
 800f67e:	e7f2      	b.n	800f666 <__libc_init_array+0x1e>
 800f680:	08011800 	.word	0x08011800
 800f684:	08011800 	.word	0x08011800
 800f688:	08011800 	.word	0x08011800
 800f68c:	08011804 	.word	0x08011804

0800f690 <memcpy>:
 800f690:	440a      	add	r2, r1
 800f692:	4291      	cmp	r1, r2
 800f694:	f100 33ff 	add.w	r3, r0, #4294967295
 800f698:	d100      	bne.n	800f69c <memcpy+0xc>
 800f69a:	4770      	bx	lr
 800f69c:	b510      	push	{r4, lr}
 800f69e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6a6:	4291      	cmp	r1, r2
 800f6a8:	d1f9      	bne.n	800f69e <memcpy+0xe>
 800f6aa:	bd10      	pop	{r4, pc}

0800f6ac <pow>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	ed2d 8b02 	vpush	{d8}
 800f6b2:	eeb0 8a40 	vmov.f32	s16, s0
 800f6b6:	eef0 8a60 	vmov.f32	s17, s1
 800f6ba:	ec55 4b11 	vmov	r4, r5, d1
 800f6be:	f000 fa7f 	bl	800fbc0 <__ieee754_pow>
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	462b      	mov	r3, r5
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	ec57 6b10 	vmov	r6, r7, d0
 800f6ce:	f7f1 f9f9 	bl	8000ac4 <__aeabi_dcmpun>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d13b      	bne.n	800f74e <pow+0xa2>
 800f6d6:	ec51 0b18 	vmov	r0, r1, d8
 800f6da:	2200      	movs	r2, #0
 800f6dc:	2300      	movs	r3, #0
 800f6de:	f7f1 f9bf 	bl	8000a60 <__aeabi_dcmpeq>
 800f6e2:	b1b8      	cbz	r0, 800f714 <pow+0x68>
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	4629      	mov	r1, r5
 800f6ec:	f7f1 f9b8 	bl	8000a60 <__aeabi_dcmpeq>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d146      	bne.n	800f782 <pow+0xd6>
 800f6f4:	ec45 4b10 	vmov	d0, r4, r5
 800f6f8:	f000 f950 	bl	800f99c <finite>
 800f6fc:	b338      	cbz	r0, 800f74e <pow+0xa2>
 800f6fe:	2200      	movs	r2, #0
 800f700:	2300      	movs	r3, #0
 800f702:	4620      	mov	r0, r4
 800f704:	4629      	mov	r1, r5
 800f706:	f7f1 f9b5 	bl	8000a74 <__aeabi_dcmplt>
 800f70a:	b300      	cbz	r0, 800f74e <pow+0xa2>
 800f70c:	f7ff ff96 	bl	800f63c <__errno>
 800f710:	2322      	movs	r3, #34	@ 0x22
 800f712:	e01b      	b.n	800f74c <pow+0xa0>
 800f714:	ec47 6b10 	vmov	d0, r6, r7
 800f718:	f000 f940 	bl	800f99c <finite>
 800f71c:	b9e0      	cbnz	r0, 800f758 <pow+0xac>
 800f71e:	eeb0 0a48 	vmov.f32	s0, s16
 800f722:	eef0 0a68 	vmov.f32	s1, s17
 800f726:	f000 f939 	bl	800f99c <finite>
 800f72a:	b1a8      	cbz	r0, 800f758 <pow+0xac>
 800f72c:	ec45 4b10 	vmov	d0, r4, r5
 800f730:	f000 f934 	bl	800f99c <finite>
 800f734:	b180      	cbz	r0, 800f758 <pow+0xac>
 800f736:	4632      	mov	r2, r6
 800f738:	463b      	mov	r3, r7
 800f73a:	4630      	mov	r0, r6
 800f73c:	4639      	mov	r1, r7
 800f73e:	f7f1 f9c1 	bl	8000ac4 <__aeabi_dcmpun>
 800f742:	2800      	cmp	r0, #0
 800f744:	d0e2      	beq.n	800f70c <pow+0x60>
 800f746:	f7ff ff79 	bl	800f63c <__errno>
 800f74a:	2321      	movs	r3, #33	@ 0x21
 800f74c:	6003      	str	r3, [r0, #0]
 800f74e:	ecbd 8b02 	vpop	{d8}
 800f752:	ec47 6b10 	vmov	d0, r6, r7
 800f756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f758:	2200      	movs	r2, #0
 800f75a:	2300      	movs	r3, #0
 800f75c:	4630      	mov	r0, r6
 800f75e:	4639      	mov	r1, r7
 800f760:	f7f1 f97e 	bl	8000a60 <__aeabi_dcmpeq>
 800f764:	2800      	cmp	r0, #0
 800f766:	d0f2      	beq.n	800f74e <pow+0xa2>
 800f768:	eeb0 0a48 	vmov.f32	s0, s16
 800f76c:	eef0 0a68 	vmov.f32	s1, s17
 800f770:	f000 f914 	bl	800f99c <finite>
 800f774:	2800      	cmp	r0, #0
 800f776:	d0ea      	beq.n	800f74e <pow+0xa2>
 800f778:	ec45 4b10 	vmov	d0, r4, r5
 800f77c:	f000 f90e 	bl	800f99c <finite>
 800f780:	e7c3      	b.n	800f70a <pow+0x5e>
 800f782:	4f01      	ldr	r7, [pc, #4]	@ (800f788 <pow+0xdc>)
 800f784:	2600      	movs	r6, #0
 800f786:	e7e2      	b.n	800f74e <pow+0xa2>
 800f788:	3ff00000 	.word	0x3ff00000

0800f78c <sqrt>:
 800f78c:	b538      	push	{r3, r4, r5, lr}
 800f78e:	ed2d 8b02 	vpush	{d8}
 800f792:	ec55 4b10 	vmov	r4, r5, d0
 800f796:	f000 f913 	bl	800f9c0 <__ieee754_sqrt>
 800f79a:	4622      	mov	r2, r4
 800f79c:	462b      	mov	r3, r5
 800f79e:	4620      	mov	r0, r4
 800f7a0:	4629      	mov	r1, r5
 800f7a2:	eeb0 8a40 	vmov.f32	s16, s0
 800f7a6:	eef0 8a60 	vmov.f32	s17, s1
 800f7aa:	f7f1 f98b 	bl	8000ac4 <__aeabi_dcmpun>
 800f7ae:	b990      	cbnz	r0, 800f7d6 <sqrt+0x4a>
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	f7f1 f95c 	bl	8000a74 <__aeabi_dcmplt>
 800f7bc:	b158      	cbz	r0, 800f7d6 <sqrt+0x4a>
 800f7be:	f7ff ff3d 	bl	800f63c <__errno>
 800f7c2:	2321      	movs	r3, #33	@ 0x21
 800f7c4:	6003      	str	r3, [r0, #0]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	4610      	mov	r0, r2
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	f7f1 f809 	bl	80007e4 <__aeabi_ddiv>
 800f7d2:	ec41 0b18 	vmov	d8, r0, r1
 800f7d6:	eeb0 0a48 	vmov.f32	s0, s16
 800f7da:	eef0 0a68 	vmov.f32	s1, s17
 800f7de:	ecbd 8b02 	vpop	{d8}
 800f7e2:	bd38      	pop	{r3, r4, r5, pc}

0800f7e4 <acosf>:
 800f7e4:	b508      	push	{r3, lr}
 800f7e6:	ed2d 8b02 	vpush	{d8}
 800f7ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f7ee:	f000 ffd9 	bl	80107a4 <__ieee754_acosf>
 800f7f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fa:	eef0 8a40 	vmov.f32	s17, s0
 800f7fe:	d615      	bvs.n	800f82c <acosf+0x48>
 800f800:	eeb0 0a48 	vmov.f32	s0, s16
 800f804:	f000 f87c 	bl	800f900 <fabsf>
 800f808:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f80c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f814:	dd0a      	ble.n	800f82c <acosf+0x48>
 800f816:	f7ff ff11 	bl	800f63c <__errno>
 800f81a:	ecbd 8b02 	vpop	{d8}
 800f81e:	2321      	movs	r3, #33	@ 0x21
 800f820:	6003      	str	r3, [r0, #0]
 800f822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f826:	4804      	ldr	r0, [pc, #16]	@ (800f838 <acosf+0x54>)
 800f828:	f000 b8c4 	b.w	800f9b4 <nanf>
 800f82c:	eeb0 0a68 	vmov.f32	s0, s17
 800f830:	ecbd 8b02 	vpop	{d8}
 800f834:	bd08      	pop	{r3, pc}
 800f836:	bf00      	nop
 800f838:	080113e0 	.word	0x080113e0

0800f83c <sqrtf>:
 800f83c:	b508      	push	{r3, lr}
 800f83e:	ed2d 8b02 	vpush	{d8}
 800f842:	eeb0 8a40 	vmov.f32	s16, s0
 800f846:	f000 f991 	bl	800fb6c <__ieee754_sqrtf>
 800f84a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f852:	d60c      	bvs.n	800f86e <sqrtf+0x32>
 800f854:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f874 <sqrtf+0x38>
 800f858:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f860:	d505      	bpl.n	800f86e <sqrtf+0x32>
 800f862:	f7ff feeb 	bl	800f63c <__errno>
 800f866:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f86a:	2321      	movs	r3, #33	@ 0x21
 800f86c:	6003      	str	r3, [r0, #0]
 800f86e:	ecbd 8b02 	vpop	{d8}
 800f872:	bd08      	pop	{r3, pc}
 800f874:	00000000 	.word	0x00000000

0800f878 <cosf>:
 800f878:	ee10 3a10 	vmov	r3, s0
 800f87c:	b507      	push	{r0, r1, r2, lr}
 800f87e:	4a1e      	ldr	r2, [pc, #120]	@ (800f8f8 <cosf+0x80>)
 800f880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f884:	4293      	cmp	r3, r2
 800f886:	d806      	bhi.n	800f896 <cosf+0x1e>
 800f888:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f8fc <cosf+0x84>
 800f88c:	b003      	add	sp, #12
 800f88e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f892:	f000 bee7 	b.w	8010664 <__kernel_cosf>
 800f896:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f89a:	d304      	bcc.n	800f8a6 <cosf+0x2e>
 800f89c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f8a0:	b003      	add	sp, #12
 800f8a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8a6:	4668      	mov	r0, sp
 800f8a8:	f001 f872 	bl	8010990 <__ieee754_rem_pio2f>
 800f8ac:	f000 0003 	and.w	r0, r0, #3
 800f8b0:	2801      	cmp	r0, #1
 800f8b2:	d009      	beq.n	800f8c8 <cosf+0x50>
 800f8b4:	2802      	cmp	r0, #2
 800f8b6:	d010      	beq.n	800f8da <cosf+0x62>
 800f8b8:	b9b0      	cbnz	r0, 800f8e8 <cosf+0x70>
 800f8ba:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8be:	ed9d 0a00 	vldr	s0, [sp]
 800f8c2:	f000 fecf 	bl	8010664 <__kernel_cosf>
 800f8c6:	e7eb      	b.n	800f8a0 <cosf+0x28>
 800f8c8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8cc:	ed9d 0a00 	vldr	s0, [sp]
 800f8d0:	f000 ff20 	bl	8010714 <__kernel_sinf>
 800f8d4:	eeb1 0a40 	vneg.f32	s0, s0
 800f8d8:	e7e2      	b.n	800f8a0 <cosf+0x28>
 800f8da:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8de:	ed9d 0a00 	vldr	s0, [sp]
 800f8e2:	f000 febf 	bl	8010664 <__kernel_cosf>
 800f8e6:	e7f5      	b.n	800f8d4 <cosf+0x5c>
 800f8e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8ec:	ed9d 0a00 	vldr	s0, [sp]
 800f8f0:	2001      	movs	r0, #1
 800f8f2:	f000 ff0f 	bl	8010714 <__kernel_sinf>
 800f8f6:	e7d3      	b.n	800f8a0 <cosf+0x28>
 800f8f8:	3f490fd8 	.word	0x3f490fd8
 800f8fc:	00000000 	.word	0x00000000

0800f900 <fabsf>:
 800f900:	ee10 3a10 	vmov	r3, s0
 800f904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f908:	ee00 3a10 	vmov	s0, r3
 800f90c:	4770      	bx	lr
	...

0800f910 <sinf>:
 800f910:	ee10 3a10 	vmov	r3, s0
 800f914:	b507      	push	{r0, r1, r2, lr}
 800f916:	4a1f      	ldr	r2, [pc, #124]	@ (800f994 <sinf+0x84>)
 800f918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d807      	bhi.n	800f930 <sinf+0x20>
 800f920:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f998 <sinf+0x88>
 800f924:	2000      	movs	r0, #0
 800f926:	b003      	add	sp, #12
 800f928:	f85d eb04 	ldr.w	lr, [sp], #4
 800f92c:	f000 bef2 	b.w	8010714 <__kernel_sinf>
 800f930:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f934:	d304      	bcc.n	800f940 <sinf+0x30>
 800f936:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f93a:	b003      	add	sp, #12
 800f93c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f940:	4668      	mov	r0, sp
 800f942:	f001 f825 	bl	8010990 <__ieee754_rem_pio2f>
 800f946:	f000 0003 	and.w	r0, r0, #3
 800f94a:	2801      	cmp	r0, #1
 800f94c:	d00a      	beq.n	800f964 <sinf+0x54>
 800f94e:	2802      	cmp	r0, #2
 800f950:	d00f      	beq.n	800f972 <sinf+0x62>
 800f952:	b9c0      	cbnz	r0, 800f986 <sinf+0x76>
 800f954:	eddd 0a01 	vldr	s1, [sp, #4]
 800f958:	ed9d 0a00 	vldr	s0, [sp]
 800f95c:	2001      	movs	r0, #1
 800f95e:	f000 fed9 	bl	8010714 <__kernel_sinf>
 800f962:	e7ea      	b.n	800f93a <sinf+0x2a>
 800f964:	eddd 0a01 	vldr	s1, [sp, #4]
 800f968:	ed9d 0a00 	vldr	s0, [sp]
 800f96c:	f000 fe7a 	bl	8010664 <__kernel_cosf>
 800f970:	e7e3      	b.n	800f93a <sinf+0x2a>
 800f972:	eddd 0a01 	vldr	s1, [sp, #4]
 800f976:	ed9d 0a00 	vldr	s0, [sp]
 800f97a:	2001      	movs	r0, #1
 800f97c:	f000 feca 	bl	8010714 <__kernel_sinf>
 800f980:	eeb1 0a40 	vneg.f32	s0, s0
 800f984:	e7d9      	b.n	800f93a <sinf+0x2a>
 800f986:	eddd 0a01 	vldr	s1, [sp, #4]
 800f98a:	ed9d 0a00 	vldr	s0, [sp]
 800f98e:	f000 fe69 	bl	8010664 <__kernel_cosf>
 800f992:	e7f5      	b.n	800f980 <sinf+0x70>
 800f994:	3f490fd8 	.word	0x3f490fd8
 800f998:	00000000 	.word	0x00000000

0800f99c <finite>:
 800f99c:	b082      	sub	sp, #8
 800f99e:	ed8d 0b00 	vstr	d0, [sp]
 800f9a2:	9801      	ldr	r0, [sp, #4]
 800f9a4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f9a8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f9ac:	0fc0      	lsrs	r0, r0, #31
 800f9ae:	b002      	add	sp, #8
 800f9b0:	4770      	bx	lr
	...

0800f9b4 <nanf>:
 800f9b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f9bc <nanf+0x8>
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	7fc00000 	.word	0x7fc00000

0800f9c0 <__ieee754_sqrt>:
 800f9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	4a66      	ldr	r2, [pc, #408]	@ (800fb60 <__ieee754_sqrt+0x1a0>)
 800f9c6:	ec55 4b10 	vmov	r4, r5, d0
 800f9ca:	43aa      	bics	r2, r5
 800f9cc:	462b      	mov	r3, r5
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	d110      	bne.n	800f9f4 <__ieee754_sqrt+0x34>
 800f9d2:	4622      	mov	r2, r4
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	f7f0 fdda 	bl	8000590 <__aeabi_dmul>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	4629      	mov	r1, r5
 800f9e4:	f7f0 fc1e 	bl	8000224 <__adddf3>
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	460d      	mov	r5, r1
 800f9ec:	ec45 4b10 	vmov	d0, r4, r5
 800f9f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f4:	2d00      	cmp	r5, #0
 800f9f6:	dc0e      	bgt.n	800fa16 <__ieee754_sqrt+0x56>
 800f9f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f9fc:	4322      	orrs	r2, r4
 800f9fe:	d0f5      	beq.n	800f9ec <__ieee754_sqrt+0x2c>
 800fa00:	b19d      	cbz	r5, 800fa2a <__ieee754_sqrt+0x6a>
 800fa02:	4622      	mov	r2, r4
 800fa04:	4620      	mov	r0, r4
 800fa06:	4629      	mov	r1, r5
 800fa08:	f7f0 fc0a 	bl	8000220 <__aeabi_dsub>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	460b      	mov	r3, r1
 800fa10:	f7f0 fee8 	bl	80007e4 <__aeabi_ddiv>
 800fa14:	e7e8      	b.n	800f9e8 <__ieee754_sqrt+0x28>
 800fa16:	152a      	asrs	r2, r5, #20
 800fa18:	d115      	bne.n	800fa46 <__ieee754_sqrt+0x86>
 800fa1a:	2000      	movs	r0, #0
 800fa1c:	e009      	b.n	800fa32 <__ieee754_sqrt+0x72>
 800fa1e:	0acb      	lsrs	r3, r1, #11
 800fa20:	3a15      	subs	r2, #21
 800fa22:	0549      	lsls	r1, r1, #21
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0fa      	beq.n	800fa1e <__ieee754_sqrt+0x5e>
 800fa28:	e7f7      	b.n	800fa1a <__ieee754_sqrt+0x5a>
 800fa2a:	462a      	mov	r2, r5
 800fa2c:	e7fa      	b.n	800fa24 <__ieee754_sqrt+0x64>
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	3001      	adds	r0, #1
 800fa32:	02dc      	lsls	r4, r3, #11
 800fa34:	d5fb      	bpl.n	800fa2e <__ieee754_sqrt+0x6e>
 800fa36:	1e44      	subs	r4, r0, #1
 800fa38:	1b12      	subs	r2, r2, r4
 800fa3a:	f1c0 0420 	rsb	r4, r0, #32
 800fa3e:	fa21 f404 	lsr.w	r4, r1, r4
 800fa42:	4323      	orrs	r3, r4
 800fa44:	4081      	lsls	r1, r0
 800fa46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa4a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800fa4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fa52:	07d2      	lsls	r2, r2, #31
 800fa54:	bf5c      	itt	pl
 800fa56:	005b      	lslpl	r3, r3, #1
 800fa58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fa5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa60:	bf58      	it	pl
 800fa62:	0049      	lslpl	r1, r1, #1
 800fa64:	2600      	movs	r6, #0
 800fa66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fa6a:	107f      	asrs	r7, r7, #1
 800fa6c:	0049      	lsls	r1, r1, #1
 800fa6e:	2016      	movs	r0, #22
 800fa70:	4632      	mov	r2, r6
 800fa72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fa76:	1915      	adds	r5, r2, r4
 800fa78:	429d      	cmp	r5, r3
 800fa7a:	bfde      	ittt	le
 800fa7c:	192a      	addle	r2, r5, r4
 800fa7e:	1b5b      	suble	r3, r3, r5
 800fa80:	1936      	addle	r6, r6, r4
 800fa82:	0fcd      	lsrs	r5, r1, #31
 800fa84:	3801      	subs	r0, #1
 800fa86:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800fa8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fa8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fa92:	d1f0      	bne.n	800fa76 <__ieee754_sqrt+0xb6>
 800fa94:	4605      	mov	r5, r0
 800fa96:	2420      	movs	r4, #32
 800fa98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	eb0c 0e00 	add.w	lr, ip, r0
 800faa2:	dc02      	bgt.n	800faaa <__ieee754_sqrt+0xea>
 800faa4:	d113      	bne.n	800face <__ieee754_sqrt+0x10e>
 800faa6:	458e      	cmp	lr, r1
 800faa8:	d811      	bhi.n	800face <__ieee754_sqrt+0x10e>
 800faaa:	f1be 0f00 	cmp.w	lr, #0
 800faae:	eb0e 000c 	add.w	r0, lr, ip
 800fab2:	da3f      	bge.n	800fb34 <__ieee754_sqrt+0x174>
 800fab4:	2800      	cmp	r0, #0
 800fab6:	db3d      	blt.n	800fb34 <__ieee754_sqrt+0x174>
 800fab8:	f102 0801 	add.w	r8, r2, #1
 800fabc:	1a9b      	subs	r3, r3, r2
 800fabe:	458e      	cmp	lr, r1
 800fac0:	bf88      	it	hi
 800fac2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fac6:	eba1 010e 	sub.w	r1, r1, lr
 800faca:	4465      	add	r5, ip
 800facc:	4642      	mov	r2, r8
 800face:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fad2:	3c01      	subs	r4, #1
 800fad4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fad8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fadc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fae0:	d1dc      	bne.n	800fa9c <__ieee754_sqrt+0xdc>
 800fae2:	4319      	orrs	r1, r3
 800fae4:	d01b      	beq.n	800fb1e <__ieee754_sqrt+0x15e>
 800fae6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800fb64 <__ieee754_sqrt+0x1a4>
 800faea:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800fb68 <__ieee754_sqrt+0x1a8>
 800faee:	e9da 0100 	ldrd	r0, r1, [sl]
 800faf2:	e9db 2300 	ldrd	r2, r3, [fp]
 800faf6:	f7f0 fb93 	bl	8000220 <__aeabi_dsub>
 800fafa:	e9da 8900 	ldrd	r8, r9, [sl]
 800fafe:	4602      	mov	r2, r0
 800fb00:	460b      	mov	r3, r1
 800fb02:	4640      	mov	r0, r8
 800fb04:	4649      	mov	r1, r9
 800fb06:	f7f0 ffbf 	bl	8000a88 <__aeabi_dcmple>
 800fb0a:	b140      	cbz	r0, 800fb1e <__ieee754_sqrt+0x15e>
 800fb0c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800fb10:	e9da 0100 	ldrd	r0, r1, [sl]
 800fb14:	e9db 2300 	ldrd	r2, r3, [fp]
 800fb18:	d10e      	bne.n	800fb38 <__ieee754_sqrt+0x178>
 800fb1a:	3601      	adds	r6, #1
 800fb1c:	4625      	mov	r5, r4
 800fb1e:	1073      	asrs	r3, r6, #1
 800fb20:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb24:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800fb28:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800fb2c:	086b      	lsrs	r3, r5, #1
 800fb2e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800fb32:	e759      	b.n	800f9e8 <__ieee754_sqrt+0x28>
 800fb34:	4690      	mov	r8, r2
 800fb36:	e7c1      	b.n	800fabc <__ieee754_sqrt+0xfc>
 800fb38:	f7f0 fb74 	bl	8000224 <__adddf3>
 800fb3c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb40:	4602      	mov	r2, r0
 800fb42:	460b      	mov	r3, r1
 800fb44:	4640      	mov	r0, r8
 800fb46:	4649      	mov	r1, r9
 800fb48:	f7f0 ff94 	bl	8000a74 <__aeabi_dcmplt>
 800fb4c:	b120      	cbz	r0, 800fb58 <__ieee754_sqrt+0x198>
 800fb4e:	1cab      	adds	r3, r5, #2
 800fb50:	bf08      	it	eq
 800fb52:	3601      	addeq	r6, #1
 800fb54:	3502      	adds	r5, #2
 800fb56:	e7e2      	b.n	800fb1e <__ieee754_sqrt+0x15e>
 800fb58:	1c6b      	adds	r3, r5, #1
 800fb5a:	f023 0501 	bic.w	r5, r3, #1
 800fb5e:	e7de      	b.n	800fb1e <__ieee754_sqrt+0x15e>
 800fb60:	7ff00000 	.word	0x7ff00000
 800fb64:	080113f0 	.word	0x080113f0
 800fb68:	080113e8 	.word	0x080113e8

0800fb6c <__ieee754_sqrtf>:
 800fb6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb70:	4770      	bx	lr
	...

0800fb74 <roundf>:
 800fb74:	ee10 0a10 	vmov	r0, s0
 800fb78:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fb7c:	3a7f      	subs	r2, #127	@ 0x7f
 800fb7e:	2a16      	cmp	r2, #22
 800fb80:	dc15      	bgt.n	800fbae <roundf+0x3a>
 800fb82:	2a00      	cmp	r2, #0
 800fb84:	da08      	bge.n	800fb98 <roundf+0x24>
 800fb86:	3201      	adds	r2, #1
 800fb88:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800fb8c:	d101      	bne.n	800fb92 <roundf+0x1e>
 800fb8e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800fb92:	ee00 3a10 	vmov	s0, r3
 800fb96:	4770      	bx	lr
 800fb98:	4907      	ldr	r1, [pc, #28]	@ (800fbb8 <roundf+0x44>)
 800fb9a:	4111      	asrs	r1, r2
 800fb9c:	4201      	tst	r1, r0
 800fb9e:	d0fa      	beq.n	800fb96 <roundf+0x22>
 800fba0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fba4:	4113      	asrs	r3, r2
 800fba6:	4403      	add	r3, r0
 800fba8:	ea23 0301 	bic.w	r3, r3, r1
 800fbac:	e7f1      	b.n	800fb92 <roundf+0x1e>
 800fbae:	2a80      	cmp	r2, #128	@ 0x80
 800fbb0:	d1f1      	bne.n	800fb96 <roundf+0x22>
 800fbb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fbb6:	4770      	bx	lr
 800fbb8:	007fffff 	.word	0x007fffff
 800fbbc:	00000000 	.word	0x00000000

0800fbc0 <__ieee754_pow>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	b091      	sub	sp, #68	@ 0x44
 800fbc6:	ed8d 1b00 	vstr	d1, [sp]
 800fbca:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fbce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fbd2:	ea5a 0001 	orrs.w	r0, sl, r1
 800fbd6:	ec57 6b10 	vmov	r6, r7, d0
 800fbda:	d113      	bne.n	800fc04 <__ieee754_pow+0x44>
 800fbdc:	19b3      	adds	r3, r6, r6
 800fbde:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fbe2:	4152      	adcs	r2, r2
 800fbe4:	4298      	cmp	r0, r3
 800fbe6:	4b9a      	ldr	r3, [pc, #616]	@ (800fe50 <__ieee754_pow+0x290>)
 800fbe8:	4193      	sbcs	r3, r2
 800fbea:	f080 84ee 	bcs.w	80105ca <__ieee754_pow+0xa0a>
 800fbee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbf2:	4630      	mov	r0, r6
 800fbf4:	4639      	mov	r1, r7
 800fbf6:	f7f0 fb15 	bl	8000224 <__adddf3>
 800fbfa:	ec41 0b10 	vmov	d0, r0, r1
 800fbfe:	b011      	add	sp, #68	@ 0x44
 800fc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc04:	4a93      	ldr	r2, [pc, #588]	@ (800fe54 <__ieee754_pow+0x294>)
 800fc06:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800fc0a:	4295      	cmp	r5, r2
 800fc0c:	46b8      	mov	r8, r7
 800fc0e:	4633      	mov	r3, r6
 800fc10:	d80a      	bhi.n	800fc28 <__ieee754_pow+0x68>
 800fc12:	d104      	bne.n	800fc1e <__ieee754_pow+0x5e>
 800fc14:	2e00      	cmp	r6, #0
 800fc16:	d1ea      	bne.n	800fbee <__ieee754_pow+0x2e>
 800fc18:	45aa      	cmp	sl, r5
 800fc1a:	d8e8      	bhi.n	800fbee <__ieee754_pow+0x2e>
 800fc1c:	e001      	b.n	800fc22 <__ieee754_pow+0x62>
 800fc1e:	4592      	cmp	sl, r2
 800fc20:	d802      	bhi.n	800fc28 <__ieee754_pow+0x68>
 800fc22:	4592      	cmp	sl, r2
 800fc24:	d10f      	bne.n	800fc46 <__ieee754_pow+0x86>
 800fc26:	b171      	cbz	r1, 800fc46 <__ieee754_pow+0x86>
 800fc28:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fc2c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fc30:	ea58 0803 	orrs.w	r8, r8, r3
 800fc34:	d1db      	bne.n	800fbee <__ieee754_pow+0x2e>
 800fc36:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc3a:	18db      	adds	r3, r3, r3
 800fc3c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fc40:	4152      	adcs	r2, r2
 800fc42:	4598      	cmp	r8, r3
 800fc44:	e7cf      	b.n	800fbe6 <__ieee754_pow+0x26>
 800fc46:	f1b8 0f00 	cmp.w	r8, #0
 800fc4a:	46ab      	mov	fp, r5
 800fc4c:	da43      	bge.n	800fcd6 <__ieee754_pow+0x116>
 800fc4e:	4a82      	ldr	r2, [pc, #520]	@ (800fe58 <__ieee754_pow+0x298>)
 800fc50:	4592      	cmp	sl, r2
 800fc52:	d856      	bhi.n	800fd02 <__ieee754_pow+0x142>
 800fc54:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fc58:	4592      	cmp	sl, r2
 800fc5a:	f240 84c5 	bls.w	80105e8 <__ieee754_pow+0xa28>
 800fc5e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fc62:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fc66:	2a14      	cmp	r2, #20
 800fc68:	dd18      	ble.n	800fc9c <__ieee754_pow+0xdc>
 800fc6a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fc6e:	fa21 f402 	lsr.w	r4, r1, r2
 800fc72:	fa04 f202 	lsl.w	r2, r4, r2
 800fc76:	428a      	cmp	r2, r1
 800fc78:	f040 84b6 	bne.w	80105e8 <__ieee754_pow+0xa28>
 800fc7c:	f004 0401 	and.w	r4, r4, #1
 800fc80:	f1c4 0402 	rsb	r4, r4, #2
 800fc84:	2900      	cmp	r1, #0
 800fc86:	d159      	bne.n	800fd3c <__ieee754_pow+0x17c>
 800fc88:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fc8c:	d148      	bne.n	800fd20 <__ieee754_pow+0x160>
 800fc8e:	4632      	mov	r2, r6
 800fc90:	463b      	mov	r3, r7
 800fc92:	4630      	mov	r0, r6
 800fc94:	4639      	mov	r1, r7
 800fc96:	f7f0 fc7b 	bl	8000590 <__aeabi_dmul>
 800fc9a:	e7ae      	b.n	800fbfa <__ieee754_pow+0x3a>
 800fc9c:	2900      	cmp	r1, #0
 800fc9e:	d14c      	bne.n	800fd3a <__ieee754_pow+0x17a>
 800fca0:	f1c2 0214 	rsb	r2, r2, #20
 800fca4:	fa4a f402 	asr.w	r4, sl, r2
 800fca8:	fa04 f202 	lsl.w	r2, r4, r2
 800fcac:	4552      	cmp	r2, sl
 800fcae:	f040 8498 	bne.w	80105e2 <__ieee754_pow+0xa22>
 800fcb2:	f004 0401 	and.w	r4, r4, #1
 800fcb6:	f1c4 0402 	rsb	r4, r4, #2
 800fcba:	4a68      	ldr	r2, [pc, #416]	@ (800fe5c <__ieee754_pow+0x29c>)
 800fcbc:	4592      	cmp	sl, r2
 800fcbe:	d1e3      	bne.n	800fc88 <__ieee754_pow+0xc8>
 800fcc0:	f1b9 0f00 	cmp.w	r9, #0
 800fcc4:	f280 8489 	bge.w	80105da <__ieee754_pow+0xa1a>
 800fcc8:	4964      	ldr	r1, [pc, #400]	@ (800fe5c <__ieee754_pow+0x29c>)
 800fcca:	4632      	mov	r2, r6
 800fccc:	463b      	mov	r3, r7
 800fcce:	2000      	movs	r0, #0
 800fcd0:	f7f0 fd88 	bl	80007e4 <__aeabi_ddiv>
 800fcd4:	e791      	b.n	800fbfa <__ieee754_pow+0x3a>
 800fcd6:	2400      	movs	r4, #0
 800fcd8:	bb81      	cbnz	r1, 800fd3c <__ieee754_pow+0x17c>
 800fcda:	4a5e      	ldr	r2, [pc, #376]	@ (800fe54 <__ieee754_pow+0x294>)
 800fcdc:	4592      	cmp	sl, r2
 800fcde:	d1ec      	bne.n	800fcba <__ieee754_pow+0xfa>
 800fce0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800fce4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fce8:	431a      	orrs	r2, r3
 800fcea:	f000 846e 	beq.w	80105ca <__ieee754_pow+0xa0a>
 800fcee:	4b5c      	ldr	r3, [pc, #368]	@ (800fe60 <__ieee754_pow+0x2a0>)
 800fcf0:	429d      	cmp	r5, r3
 800fcf2:	d908      	bls.n	800fd06 <__ieee754_pow+0x146>
 800fcf4:	f1b9 0f00 	cmp.w	r9, #0
 800fcf8:	f280 846b 	bge.w	80105d2 <__ieee754_pow+0xa12>
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	2100      	movs	r1, #0
 800fd00:	e77b      	b.n	800fbfa <__ieee754_pow+0x3a>
 800fd02:	2402      	movs	r4, #2
 800fd04:	e7e8      	b.n	800fcd8 <__ieee754_pow+0x118>
 800fd06:	f1b9 0f00 	cmp.w	r9, #0
 800fd0a:	f04f 0000 	mov.w	r0, #0
 800fd0e:	f04f 0100 	mov.w	r1, #0
 800fd12:	f6bf af72 	bge.w	800fbfa <__ieee754_pow+0x3a>
 800fd16:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fd1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fd1e:	e76c      	b.n	800fbfa <__ieee754_pow+0x3a>
 800fd20:	4a50      	ldr	r2, [pc, #320]	@ (800fe64 <__ieee754_pow+0x2a4>)
 800fd22:	4591      	cmp	r9, r2
 800fd24:	d10a      	bne.n	800fd3c <__ieee754_pow+0x17c>
 800fd26:	f1b8 0f00 	cmp.w	r8, #0
 800fd2a:	db07      	blt.n	800fd3c <__ieee754_pow+0x17c>
 800fd2c:	ec47 6b10 	vmov	d0, r6, r7
 800fd30:	b011      	add	sp, #68	@ 0x44
 800fd32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd36:	f7ff be43 	b.w	800f9c0 <__ieee754_sqrt>
 800fd3a:	2400      	movs	r4, #0
 800fd3c:	ec47 6b10 	vmov	d0, r6, r7
 800fd40:	9302      	str	r3, [sp, #8]
 800fd42:	f000 fc87 	bl	8010654 <fabs>
 800fd46:	9b02      	ldr	r3, [sp, #8]
 800fd48:	ec51 0b10 	vmov	r0, r1, d0
 800fd4c:	bb43      	cbnz	r3, 800fda0 <__ieee754_pow+0x1e0>
 800fd4e:	4b43      	ldr	r3, [pc, #268]	@ (800fe5c <__ieee754_pow+0x29c>)
 800fd50:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d000      	beq.n	800fd5a <__ieee754_pow+0x19a>
 800fd58:	bb15      	cbnz	r5, 800fda0 <__ieee754_pow+0x1e0>
 800fd5a:	f1b9 0f00 	cmp.w	r9, #0
 800fd5e:	da05      	bge.n	800fd6c <__ieee754_pow+0x1ac>
 800fd60:	4602      	mov	r2, r0
 800fd62:	460b      	mov	r3, r1
 800fd64:	2000      	movs	r0, #0
 800fd66:	493d      	ldr	r1, [pc, #244]	@ (800fe5c <__ieee754_pow+0x29c>)
 800fd68:	f7f0 fd3c 	bl	80007e4 <__aeabi_ddiv>
 800fd6c:	f1b8 0f00 	cmp.w	r8, #0
 800fd70:	f6bf af43 	bge.w	800fbfa <__ieee754_pow+0x3a>
 800fd74:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fd78:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fd7c:	4325      	orrs	r5, r4
 800fd7e:	d108      	bne.n	800fd92 <__ieee754_pow+0x1d2>
 800fd80:	4602      	mov	r2, r0
 800fd82:	460b      	mov	r3, r1
 800fd84:	4610      	mov	r0, r2
 800fd86:	4619      	mov	r1, r3
 800fd88:	f7f0 fa4a 	bl	8000220 <__aeabi_dsub>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	460b      	mov	r3, r1
 800fd90:	e79e      	b.n	800fcd0 <__ieee754_pow+0x110>
 800fd92:	2c01      	cmp	r4, #1
 800fd94:	f47f af31 	bne.w	800fbfa <__ieee754_pow+0x3a>
 800fd98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	e72c      	b.n	800fbfa <__ieee754_pow+0x3a>
 800fda0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800fda4:	3b01      	subs	r3, #1
 800fda6:	ea53 0204 	orrs.w	r2, r3, r4
 800fdaa:	d102      	bne.n	800fdb2 <__ieee754_pow+0x1f2>
 800fdac:	4632      	mov	r2, r6
 800fdae:	463b      	mov	r3, r7
 800fdb0:	e7e8      	b.n	800fd84 <__ieee754_pow+0x1c4>
 800fdb2:	3c01      	subs	r4, #1
 800fdb4:	431c      	orrs	r4, r3
 800fdb6:	d016      	beq.n	800fde6 <__ieee754_pow+0x226>
 800fdb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fe40 <__ieee754_pow+0x280>
 800fdbc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800fdc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fdc4:	f240 8110 	bls.w	800ffe8 <__ieee754_pow+0x428>
 800fdc8:	4b27      	ldr	r3, [pc, #156]	@ (800fe68 <__ieee754_pow+0x2a8>)
 800fdca:	459a      	cmp	sl, r3
 800fdcc:	4b24      	ldr	r3, [pc, #144]	@ (800fe60 <__ieee754_pow+0x2a0>)
 800fdce:	d916      	bls.n	800fdfe <__ieee754_pow+0x23e>
 800fdd0:	429d      	cmp	r5, r3
 800fdd2:	d80b      	bhi.n	800fdec <__ieee754_pow+0x22c>
 800fdd4:	f1b9 0f00 	cmp.w	r9, #0
 800fdd8:	da0b      	bge.n	800fdf2 <__ieee754_pow+0x232>
 800fdda:	2000      	movs	r0, #0
 800fddc:	b011      	add	sp, #68	@ 0x44
 800fdde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde2:	f000 bfb5 	b.w	8010d50 <__math_oflow>
 800fde6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800fe48 <__ieee754_pow+0x288>
 800fdea:	e7e7      	b.n	800fdbc <__ieee754_pow+0x1fc>
 800fdec:	f1b9 0f00 	cmp.w	r9, #0
 800fdf0:	dcf3      	bgt.n	800fdda <__ieee754_pow+0x21a>
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	b011      	add	sp, #68	@ 0x44
 800fdf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfa:	f000 bfa1 	b.w	8010d40 <__math_uflow>
 800fdfe:	429d      	cmp	r5, r3
 800fe00:	d20c      	bcs.n	800fe1c <__ieee754_pow+0x25c>
 800fe02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe06:	2200      	movs	r2, #0
 800fe08:	2300      	movs	r3, #0
 800fe0a:	f7f0 fe33 	bl	8000a74 <__aeabi_dcmplt>
 800fe0e:	3800      	subs	r0, #0
 800fe10:	bf18      	it	ne
 800fe12:	2001      	movne	r0, #1
 800fe14:	f1b9 0f00 	cmp.w	r9, #0
 800fe18:	daec      	bge.n	800fdf4 <__ieee754_pow+0x234>
 800fe1a:	e7df      	b.n	800fddc <__ieee754_pow+0x21c>
 800fe1c:	4b0f      	ldr	r3, [pc, #60]	@ (800fe5c <__ieee754_pow+0x29c>)
 800fe1e:	429d      	cmp	r5, r3
 800fe20:	f04f 0200 	mov.w	r2, #0
 800fe24:	d922      	bls.n	800fe6c <__ieee754_pow+0x2ac>
 800fe26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	f7f0 fe22 	bl	8000a74 <__aeabi_dcmplt>
 800fe30:	3800      	subs	r0, #0
 800fe32:	bf18      	it	ne
 800fe34:	2001      	movne	r0, #1
 800fe36:	f1b9 0f00 	cmp.w	r9, #0
 800fe3a:	dccf      	bgt.n	800fddc <__ieee754_pow+0x21c>
 800fe3c:	e7da      	b.n	800fdf4 <__ieee754_pow+0x234>
 800fe3e:	bf00      	nop
 800fe40:	00000000 	.word	0x00000000
 800fe44:	3ff00000 	.word	0x3ff00000
 800fe48:	00000000 	.word	0x00000000
 800fe4c:	bff00000 	.word	0xbff00000
 800fe50:	fff00000 	.word	0xfff00000
 800fe54:	7ff00000 	.word	0x7ff00000
 800fe58:	433fffff 	.word	0x433fffff
 800fe5c:	3ff00000 	.word	0x3ff00000
 800fe60:	3fefffff 	.word	0x3fefffff
 800fe64:	3fe00000 	.word	0x3fe00000
 800fe68:	43f00000 	.word	0x43f00000
 800fe6c:	4b5a      	ldr	r3, [pc, #360]	@ (800ffd8 <__ieee754_pow+0x418>)
 800fe6e:	f7f0 f9d7 	bl	8000220 <__aeabi_dsub>
 800fe72:	a351      	add	r3, pc, #324	@ (adr r3, 800ffb8 <__ieee754_pow+0x3f8>)
 800fe74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe78:	4604      	mov	r4, r0
 800fe7a:	460d      	mov	r5, r1
 800fe7c:	f7f0 fb88 	bl	8000590 <__aeabi_dmul>
 800fe80:	a34f      	add	r3, pc, #316	@ (adr r3, 800ffc0 <__ieee754_pow+0x400>)
 800fe82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe86:	4606      	mov	r6, r0
 800fe88:	460f      	mov	r7, r1
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	f7f0 fb7f 	bl	8000590 <__aeabi_dmul>
 800fe92:	4b52      	ldr	r3, [pc, #328]	@ (800ffdc <__ieee754_pow+0x41c>)
 800fe94:	4682      	mov	sl, r0
 800fe96:	468b      	mov	fp, r1
 800fe98:	2200      	movs	r2, #0
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	f7f0 fb77 	bl	8000590 <__aeabi_dmul>
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	a148      	add	r1, pc, #288	@ (adr r1, 800ffc8 <__ieee754_pow+0x408>)
 800fea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feac:	f7f0 f9b8 	bl	8000220 <__aeabi_dsub>
 800feb0:	4622      	mov	r2, r4
 800feb2:	462b      	mov	r3, r5
 800feb4:	f7f0 fb6c 	bl	8000590 <__aeabi_dmul>
 800feb8:	4602      	mov	r2, r0
 800feba:	460b      	mov	r3, r1
 800febc:	2000      	movs	r0, #0
 800febe:	4948      	ldr	r1, [pc, #288]	@ (800ffe0 <__ieee754_pow+0x420>)
 800fec0:	f7f0 f9ae 	bl	8000220 <__aeabi_dsub>
 800fec4:	4622      	mov	r2, r4
 800fec6:	4680      	mov	r8, r0
 800fec8:	4689      	mov	r9, r1
 800feca:	462b      	mov	r3, r5
 800fecc:	4620      	mov	r0, r4
 800fece:	4629      	mov	r1, r5
 800fed0:	f7f0 fb5e 	bl	8000590 <__aeabi_dmul>
 800fed4:	4602      	mov	r2, r0
 800fed6:	460b      	mov	r3, r1
 800fed8:	4640      	mov	r0, r8
 800feda:	4649      	mov	r1, r9
 800fedc:	f7f0 fb58 	bl	8000590 <__aeabi_dmul>
 800fee0:	a33b      	add	r3, pc, #236	@ (adr r3, 800ffd0 <__ieee754_pow+0x410>)
 800fee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee6:	f7f0 fb53 	bl	8000590 <__aeabi_dmul>
 800feea:	4602      	mov	r2, r0
 800feec:	460b      	mov	r3, r1
 800feee:	4650      	mov	r0, sl
 800fef0:	4659      	mov	r1, fp
 800fef2:	f7f0 f995 	bl	8000220 <__aeabi_dsub>
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	4680      	mov	r8, r0
 800fefc:	4689      	mov	r9, r1
 800fefe:	4630      	mov	r0, r6
 800ff00:	4639      	mov	r1, r7
 800ff02:	f7f0 f98f 	bl	8000224 <__adddf3>
 800ff06:	2400      	movs	r4, #0
 800ff08:	4632      	mov	r2, r6
 800ff0a:	463b      	mov	r3, r7
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	460d      	mov	r5, r1
 800ff10:	f7f0 f986 	bl	8000220 <__aeabi_dsub>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	4640      	mov	r0, r8
 800ff1a:	4649      	mov	r1, r9
 800ff1c:	f7f0 f980 	bl	8000220 <__aeabi_dsub>
 800ff20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff28:	2300      	movs	r3, #0
 800ff2a:	9304      	str	r3, [sp, #16]
 800ff2c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ff30:	4606      	mov	r6, r0
 800ff32:	460f      	mov	r7, r1
 800ff34:	465b      	mov	r3, fp
 800ff36:	4652      	mov	r2, sl
 800ff38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff3c:	f7f0 f970 	bl	8000220 <__aeabi_dsub>
 800ff40:	4622      	mov	r2, r4
 800ff42:	462b      	mov	r3, r5
 800ff44:	f7f0 fb24 	bl	8000590 <__aeabi_dmul>
 800ff48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff4c:	4680      	mov	r8, r0
 800ff4e:	4689      	mov	r9, r1
 800ff50:	4630      	mov	r0, r6
 800ff52:	4639      	mov	r1, r7
 800ff54:	f7f0 fb1c 	bl	8000590 <__aeabi_dmul>
 800ff58:	4602      	mov	r2, r0
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	4640      	mov	r0, r8
 800ff5e:	4649      	mov	r1, r9
 800ff60:	f7f0 f960 	bl	8000224 <__adddf3>
 800ff64:	465b      	mov	r3, fp
 800ff66:	4606      	mov	r6, r0
 800ff68:	460f      	mov	r7, r1
 800ff6a:	4652      	mov	r2, sl
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	4629      	mov	r1, r5
 800ff70:	f7f0 fb0e 	bl	8000590 <__aeabi_dmul>
 800ff74:	460b      	mov	r3, r1
 800ff76:	4602      	mov	r2, r0
 800ff78:	4680      	mov	r8, r0
 800ff7a:	4689      	mov	r9, r1
 800ff7c:	4630      	mov	r0, r6
 800ff7e:	4639      	mov	r1, r7
 800ff80:	f7f0 f950 	bl	8000224 <__adddf3>
 800ff84:	4b17      	ldr	r3, [pc, #92]	@ (800ffe4 <__ieee754_pow+0x424>)
 800ff86:	4299      	cmp	r1, r3
 800ff88:	4604      	mov	r4, r0
 800ff8a:	460d      	mov	r5, r1
 800ff8c:	468b      	mov	fp, r1
 800ff8e:	f340 820b 	ble.w	80103a8 <__ieee754_pow+0x7e8>
 800ff92:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ff96:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ff9a:	4303      	orrs	r3, r0
 800ff9c:	f000 81ea 	beq.w	8010374 <__ieee754_pow+0x7b4>
 800ffa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	f7f0 fd64 	bl	8000a74 <__aeabi_dcmplt>
 800ffac:	3800      	subs	r0, #0
 800ffae:	bf18      	it	ne
 800ffb0:	2001      	movne	r0, #1
 800ffb2:	e713      	b.n	800fddc <__ieee754_pow+0x21c>
 800ffb4:	f3af 8000 	nop.w
 800ffb8:	60000000 	.word	0x60000000
 800ffbc:	3ff71547 	.word	0x3ff71547
 800ffc0:	f85ddf44 	.word	0xf85ddf44
 800ffc4:	3e54ae0b 	.word	0x3e54ae0b
 800ffc8:	55555555 	.word	0x55555555
 800ffcc:	3fd55555 	.word	0x3fd55555
 800ffd0:	652b82fe 	.word	0x652b82fe
 800ffd4:	3ff71547 	.word	0x3ff71547
 800ffd8:	3ff00000 	.word	0x3ff00000
 800ffdc:	3fd00000 	.word	0x3fd00000
 800ffe0:	3fe00000 	.word	0x3fe00000
 800ffe4:	408fffff 	.word	0x408fffff
 800ffe8:	4bd5      	ldr	r3, [pc, #852]	@ (8010340 <__ieee754_pow+0x780>)
 800ffea:	ea08 0303 	and.w	r3, r8, r3
 800ffee:	2200      	movs	r2, #0
 800fff0:	b92b      	cbnz	r3, 800fffe <__ieee754_pow+0x43e>
 800fff2:	4bd4      	ldr	r3, [pc, #848]	@ (8010344 <__ieee754_pow+0x784>)
 800fff4:	f7f0 facc 	bl	8000590 <__aeabi_dmul>
 800fff8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800fffc:	468b      	mov	fp, r1
 800fffe:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010002:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010006:	4413      	add	r3, r2
 8010008:	930a      	str	r3, [sp, #40]	@ 0x28
 801000a:	4bcf      	ldr	r3, [pc, #828]	@ (8010348 <__ieee754_pow+0x788>)
 801000c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010010:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010014:	459b      	cmp	fp, r3
 8010016:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801001a:	dd08      	ble.n	801002e <__ieee754_pow+0x46e>
 801001c:	4bcb      	ldr	r3, [pc, #812]	@ (801034c <__ieee754_pow+0x78c>)
 801001e:	459b      	cmp	fp, r3
 8010020:	f340 81a5 	ble.w	801036e <__ieee754_pow+0x7ae>
 8010024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010026:	3301      	adds	r3, #1
 8010028:	930a      	str	r3, [sp, #40]	@ 0x28
 801002a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801002e:	f04f 0a00 	mov.w	sl, #0
 8010032:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010036:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010038:	4bc5      	ldr	r3, [pc, #788]	@ (8010350 <__ieee754_pow+0x790>)
 801003a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801003e:	ed93 7b00 	vldr	d7, [r3]
 8010042:	4629      	mov	r1, r5
 8010044:	ec53 2b17 	vmov	r2, r3, d7
 8010048:	ed8d 7b06 	vstr	d7, [sp, #24]
 801004c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010050:	f7f0 f8e6 	bl	8000220 <__aeabi_dsub>
 8010054:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010058:	4606      	mov	r6, r0
 801005a:	460f      	mov	r7, r1
 801005c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010060:	f7f0 f8e0 	bl	8000224 <__adddf3>
 8010064:	4602      	mov	r2, r0
 8010066:	460b      	mov	r3, r1
 8010068:	2000      	movs	r0, #0
 801006a:	49ba      	ldr	r1, [pc, #744]	@ (8010354 <__ieee754_pow+0x794>)
 801006c:	f7f0 fbba 	bl	80007e4 <__aeabi_ddiv>
 8010070:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	4630      	mov	r0, r6
 801007a:	4639      	mov	r1, r7
 801007c:	f7f0 fa88 	bl	8000590 <__aeabi_dmul>
 8010080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010084:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010088:	106d      	asrs	r5, r5, #1
 801008a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801008e:	f04f 0b00 	mov.w	fp, #0
 8010092:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010096:	4661      	mov	r1, ip
 8010098:	2200      	movs	r2, #0
 801009a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801009e:	4658      	mov	r0, fp
 80100a0:	46e1      	mov	r9, ip
 80100a2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80100a6:	4614      	mov	r4, r2
 80100a8:	461d      	mov	r5, r3
 80100aa:	f7f0 fa71 	bl	8000590 <__aeabi_dmul>
 80100ae:	4602      	mov	r2, r0
 80100b0:	460b      	mov	r3, r1
 80100b2:	4630      	mov	r0, r6
 80100b4:	4639      	mov	r1, r7
 80100b6:	f7f0 f8b3 	bl	8000220 <__aeabi_dsub>
 80100ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80100be:	4606      	mov	r6, r0
 80100c0:	460f      	mov	r7, r1
 80100c2:	4620      	mov	r0, r4
 80100c4:	4629      	mov	r1, r5
 80100c6:	f7f0 f8ab 	bl	8000220 <__aeabi_dsub>
 80100ca:	4602      	mov	r2, r0
 80100cc:	460b      	mov	r3, r1
 80100ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80100d2:	f7f0 f8a5 	bl	8000220 <__aeabi_dsub>
 80100d6:	465a      	mov	r2, fp
 80100d8:	464b      	mov	r3, r9
 80100da:	f7f0 fa59 	bl	8000590 <__aeabi_dmul>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	4630      	mov	r0, r6
 80100e4:	4639      	mov	r1, r7
 80100e6:	f7f0 f89b 	bl	8000220 <__aeabi_dsub>
 80100ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80100ee:	f7f0 fa4f 	bl	8000590 <__aeabi_dmul>
 80100f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100fa:	4610      	mov	r0, r2
 80100fc:	4619      	mov	r1, r3
 80100fe:	f7f0 fa47 	bl	8000590 <__aeabi_dmul>
 8010102:	a37d      	add	r3, pc, #500	@ (adr r3, 80102f8 <__ieee754_pow+0x738>)
 8010104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010108:	4604      	mov	r4, r0
 801010a:	460d      	mov	r5, r1
 801010c:	f7f0 fa40 	bl	8000590 <__aeabi_dmul>
 8010110:	a37b      	add	r3, pc, #492	@ (adr r3, 8010300 <__ieee754_pow+0x740>)
 8010112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010116:	f7f0 f885 	bl	8000224 <__adddf3>
 801011a:	4622      	mov	r2, r4
 801011c:	462b      	mov	r3, r5
 801011e:	f7f0 fa37 	bl	8000590 <__aeabi_dmul>
 8010122:	a379      	add	r3, pc, #484	@ (adr r3, 8010308 <__ieee754_pow+0x748>)
 8010124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010128:	f7f0 f87c 	bl	8000224 <__adddf3>
 801012c:	4622      	mov	r2, r4
 801012e:	462b      	mov	r3, r5
 8010130:	f7f0 fa2e 	bl	8000590 <__aeabi_dmul>
 8010134:	a376      	add	r3, pc, #472	@ (adr r3, 8010310 <__ieee754_pow+0x750>)
 8010136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013a:	f7f0 f873 	bl	8000224 <__adddf3>
 801013e:	4622      	mov	r2, r4
 8010140:	462b      	mov	r3, r5
 8010142:	f7f0 fa25 	bl	8000590 <__aeabi_dmul>
 8010146:	a374      	add	r3, pc, #464	@ (adr r3, 8010318 <__ieee754_pow+0x758>)
 8010148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014c:	f7f0 f86a 	bl	8000224 <__adddf3>
 8010150:	4622      	mov	r2, r4
 8010152:	462b      	mov	r3, r5
 8010154:	f7f0 fa1c 	bl	8000590 <__aeabi_dmul>
 8010158:	a371      	add	r3, pc, #452	@ (adr r3, 8010320 <__ieee754_pow+0x760>)
 801015a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015e:	f7f0 f861 	bl	8000224 <__adddf3>
 8010162:	4622      	mov	r2, r4
 8010164:	4606      	mov	r6, r0
 8010166:	460f      	mov	r7, r1
 8010168:	462b      	mov	r3, r5
 801016a:	4620      	mov	r0, r4
 801016c:	4629      	mov	r1, r5
 801016e:	f7f0 fa0f 	bl	8000590 <__aeabi_dmul>
 8010172:	4602      	mov	r2, r0
 8010174:	460b      	mov	r3, r1
 8010176:	4630      	mov	r0, r6
 8010178:	4639      	mov	r1, r7
 801017a:	f7f0 fa09 	bl	8000590 <__aeabi_dmul>
 801017e:	465a      	mov	r2, fp
 8010180:	4604      	mov	r4, r0
 8010182:	460d      	mov	r5, r1
 8010184:	464b      	mov	r3, r9
 8010186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801018a:	f7f0 f84b 	bl	8000224 <__adddf3>
 801018e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010192:	f7f0 f9fd 	bl	8000590 <__aeabi_dmul>
 8010196:	4622      	mov	r2, r4
 8010198:	462b      	mov	r3, r5
 801019a:	f7f0 f843 	bl	8000224 <__adddf3>
 801019e:	465a      	mov	r2, fp
 80101a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80101a4:	464b      	mov	r3, r9
 80101a6:	4658      	mov	r0, fp
 80101a8:	4649      	mov	r1, r9
 80101aa:	f7f0 f9f1 	bl	8000590 <__aeabi_dmul>
 80101ae:	4b6a      	ldr	r3, [pc, #424]	@ (8010358 <__ieee754_pow+0x798>)
 80101b0:	2200      	movs	r2, #0
 80101b2:	4606      	mov	r6, r0
 80101b4:	460f      	mov	r7, r1
 80101b6:	f7f0 f835 	bl	8000224 <__adddf3>
 80101ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101be:	f7f0 f831 	bl	8000224 <__adddf3>
 80101c2:	46d8      	mov	r8, fp
 80101c4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80101c8:	460d      	mov	r5, r1
 80101ca:	465a      	mov	r2, fp
 80101cc:	460b      	mov	r3, r1
 80101ce:	4640      	mov	r0, r8
 80101d0:	4649      	mov	r1, r9
 80101d2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80101d6:	f7f0 f9db 	bl	8000590 <__aeabi_dmul>
 80101da:	465c      	mov	r4, fp
 80101dc:	4680      	mov	r8, r0
 80101de:	4689      	mov	r9, r1
 80101e0:	4b5d      	ldr	r3, [pc, #372]	@ (8010358 <__ieee754_pow+0x798>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	4620      	mov	r0, r4
 80101e6:	4629      	mov	r1, r5
 80101e8:	f7f0 f81a 	bl	8000220 <__aeabi_dsub>
 80101ec:	4632      	mov	r2, r6
 80101ee:	463b      	mov	r3, r7
 80101f0:	f7f0 f816 	bl	8000220 <__aeabi_dsub>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101fc:	f7f0 f810 	bl	8000220 <__aeabi_dsub>
 8010200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010204:	f7f0 f9c4 	bl	8000590 <__aeabi_dmul>
 8010208:	4622      	mov	r2, r4
 801020a:	4606      	mov	r6, r0
 801020c:	460f      	mov	r7, r1
 801020e:	462b      	mov	r3, r5
 8010210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010214:	f7f0 f9bc 	bl	8000590 <__aeabi_dmul>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4630      	mov	r0, r6
 801021e:	4639      	mov	r1, r7
 8010220:	f7f0 f800 	bl	8000224 <__adddf3>
 8010224:	4606      	mov	r6, r0
 8010226:	460f      	mov	r7, r1
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	4640      	mov	r0, r8
 801022e:	4649      	mov	r1, r9
 8010230:	f7ef fff8 	bl	8000224 <__adddf3>
 8010234:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010238:	a33b      	add	r3, pc, #236	@ (adr r3, 8010328 <__ieee754_pow+0x768>)
 801023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023e:	4658      	mov	r0, fp
 8010240:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010244:	460d      	mov	r5, r1
 8010246:	f7f0 f9a3 	bl	8000590 <__aeabi_dmul>
 801024a:	465c      	mov	r4, fp
 801024c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010250:	4642      	mov	r2, r8
 8010252:	464b      	mov	r3, r9
 8010254:	4620      	mov	r0, r4
 8010256:	4629      	mov	r1, r5
 8010258:	f7ef ffe2 	bl	8000220 <__aeabi_dsub>
 801025c:	4602      	mov	r2, r0
 801025e:	460b      	mov	r3, r1
 8010260:	4630      	mov	r0, r6
 8010262:	4639      	mov	r1, r7
 8010264:	f7ef ffdc 	bl	8000220 <__aeabi_dsub>
 8010268:	a331      	add	r3, pc, #196	@ (adr r3, 8010330 <__ieee754_pow+0x770>)
 801026a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026e:	f7f0 f98f 	bl	8000590 <__aeabi_dmul>
 8010272:	a331      	add	r3, pc, #196	@ (adr r3, 8010338 <__ieee754_pow+0x778>)
 8010274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010278:	4606      	mov	r6, r0
 801027a:	460f      	mov	r7, r1
 801027c:	4620      	mov	r0, r4
 801027e:	4629      	mov	r1, r5
 8010280:	f7f0 f986 	bl	8000590 <__aeabi_dmul>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4630      	mov	r0, r6
 801028a:	4639      	mov	r1, r7
 801028c:	f7ef ffca 	bl	8000224 <__adddf3>
 8010290:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010292:	4b32      	ldr	r3, [pc, #200]	@ (801035c <__ieee754_pow+0x79c>)
 8010294:	4413      	add	r3, r2
 8010296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029a:	f7ef ffc3 	bl	8000224 <__adddf3>
 801029e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80102a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80102a4:	f7f0 f90a 	bl	80004bc <__aeabi_i2d>
 80102a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80102aa:	4b2d      	ldr	r3, [pc, #180]	@ (8010360 <__ieee754_pow+0x7a0>)
 80102ac:	4413      	add	r3, r2
 80102ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102b2:	4606      	mov	r6, r0
 80102b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102b8:	460f      	mov	r7, r1
 80102ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102be:	f7ef ffb1 	bl	8000224 <__adddf3>
 80102c2:	4642      	mov	r2, r8
 80102c4:	464b      	mov	r3, r9
 80102c6:	f7ef ffad 	bl	8000224 <__adddf3>
 80102ca:	4632      	mov	r2, r6
 80102cc:	463b      	mov	r3, r7
 80102ce:	f7ef ffa9 	bl	8000224 <__adddf3>
 80102d2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80102d6:	4632      	mov	r2, r6
 80102d8:	463b      	mov	r3, r7
 80102da:	4658      	mov	r0, fp
 80102dc:	460d      	mov	r5, r1
 80102de:	f7ef ff9f 	bl	8000220 <__aeabi_dsub>
 80102e2:	4642      	mov	r2, r8
 80102e4:	464b      	mov	r3, r9
 80102e6:	f7ef ff9b 	bl	8000220 <__aeabi_dsub>
 80102ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102ee:	f7ef ff97 	bl	8000220 <__aeabi_dsub>
 80102f2:	465c      	mov	r4, fp
 80102f4:	e036      	b.n	8010364 <__ieee754_pow+0x7a4>
 80102f6:	bf00      	nop
 80102f8:	4a454eef 	.word	0x4a454eef
 80102fc:	3fca7e28 	.word	0x3fca7e28
 8010300:	93c9db65 	.word	0x93c9db65
 8010304:	3fcd864a 	.word	0x3fcd864a
 8010308:	a91d4101 	.word	0xa91d4101
 801030c:	3fd17460 	.word	0x3fd17460
 8010310:	518f264d 	.word	0x518f264d
 8010314:	3fd55555 	.word	0x3fd55555
 8010318:	db6fabff 	.word	0xdb6fabff
 801031c:	3fdb6db6 	.word	0x3fdb6db6
 8010320:	33333303 	.word	0x33333303
 8010324:	3fe33333 	.word	0x3fe33333
 8010328:	e0000000 	.word	0xe0000000
 801032c:	3feec709 	.word	0x3feec709
 8010330:	dc3a03fd 	.word	0xdc3a03fd
 8010334:	3feec709 	.word	0x3feec709
 8010338:	145b01f5 	.word	0x145b01f5
 801033c:	be3e2fe0 	.word	0xbe3e2fe0
 8010340:	7ff00000 	.word	0x7ff00000
 8010344:	43400000 	.word	0x43400000
 8010348:	0003988e 	.word	0x0003988e
 801034c:	000bb679 	.word	0x000bb679
 8010350:	08011418 	.word	0x08011418
 8010354:	3ff00000 	.word	0x3ff00000
 8010358:	40080000 	.word	0x40080000
 801035c:	080113f8 	.word	0x080113f8
 8010360:	08011408 	.word	0x08011408
 8010364:	4602      	mov	r2, r0
 8010366:	460b      	mov	r3, r1
 8010368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801036c:	e5d6      	b.n	800ff1c <__ieee754_pow+0x35c>
 801036e:	f04f 0a01 	mov.w	sl, #1
 8010372:	e65e      	b.n	8010032 <__ieee754_pow+0x472>
 8010374:	a3b5      	add	r3, pc, #724	@ (adr r3, 801064c <__ieee754_pow+0xa8c>)
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	4630      	mov	r0, r6
 801037c:	4639      	mov	r1, r7
 801037e:	f7ef ff51 	bl	8000224 <__adddf3>
 8010382:	4642      	mov	r2, r8
 8010384:	e9cd 0100 	strd	r0, r1, [sp]
 8010388:	464b      	mov	r3, r9
 801038a:	4620      	mov	r0, r4
 801038c:	4629      	mov	r1, r5
 801038e:	f7ef ff47 	bl	8000220 <__aeabi_dsub>
 8010392:	4602      	mov	r2, r0
 8010394:	460b      	mov	r3, r1
 8010396:	e9dd 0100 	ldrd	r0, r1, [sp]
 801039a:	f7f0 fb89 	bl	8000ab0 <__aeabi_dcmpgt>
 801039e:	2800      	cmp	r0, #0
 80103a0:	f47f adfe 	bne.w	800ffa0 <__ieee754_pow+0x3e0>
 80103a4:	4ba2      	ldr	r3, [pc, #648]	@ (8010630 <__ieee754_pow+0xa70>)
 80103a6:	e022      	b.n	80103ee <__ieee754_pow+0x82e>
 80103a8:	4ca2      	ldr	r4, [pc, #648]	@ (8010634 <__ieee754_pow+0xa74>)
 80103aa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80103ae:	42a3      	cmp	r3, r4
 80103b0:	d919      	bls.n	80103e6 <__ieee754_pow+0x826>
 80103b2:	4ba1      	ldr	r3, [pc, #644]	@ (8010638 <__ieee754_pow+0xa78>)
 80103b4:	440b      	add	r3, r1
 80103b6:	4303      	orrs	r3, r0
 80103b8:	d009      	beq.n	80103ce <__ieee754_pow+0x80e>
 80103ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103be:	2200      	movs	r2, #0
 80103c0:	2300      	movs	r3, #0
 80103c2:	f7f0 fb57 	bl	8000a74 <__aeabi_dcmplt>
 80103c6:	3800      	subs	r0, #0
 80103c8:	bf18      	it	ne
 80103ca:	2001      	movne	r0, #1
 80103cc:	e512      	b.n	800fdf4 <__ieee754_pow+0x234>
 80103ce:	4642      	mov	r2, r8
 80103d0:	464b      	mov	r3, r9
 80103d2:	f7ef ff25 	bl	8000220 <__aeabi_dsub>
 80103d6:	4632      	mov	r2, r6
 80103d8:	463b      	mov	r3, r7
 80103da:	f7f0 fb5f 	bl	8000a9c <__aeabi_dcmpge>
 80103de:	2800      	cmp	r0, #0
 80103e0:	d1eb      	bne.n	80103ba <__ieee754_pow+0x7fa>
 80103e2:	4b96      	ldr	r3, [pc, #600]	@ (801063c <__ieee754_pow+0xa7c>)
 80103e4:	e003      	b.n	80103ee <__ieee754_pow+0x82e>
 80103e6:	4a96      	ldr	r2, [pc, #600]	@ (8010640 <__ieee754_pow+0xa80>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	f240 80e7 	bls.w	80105bc <__ieee754_pow+0x9fc>
 80103ee:	151b      	asrs	r3, r3, #20
 80103f0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80103f4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80103f8:	fa4a fa03 	asr.w	sl, sl, r3
 80103fc:	44da      	add	sl, fp
 80103fe:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010402:	4890      	ldr	r0, [pc, #576]	@ (8010644 <__ieee754_pow+0xa84>)
 8010404:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010408:	4108      	asrs	r0, r1
 801040a:	ea00 030a 	and.w	r3, r0, sl
 801040e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010412:	f1c1 0114 	rsb	r1, r1, #20
 8010416:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801041a:	fa4a fa01 	asr.w	sl, sl, r1
 801041e:	f1bb 0f00 	cmp.w	fp, #0
 8010422:	4640      	mov	r0, r8
 8010424:	4649      	mov	r1, r9
 8010426:	f04f 0200 	mov.w	r2, #0
 801042a:	bfb8      	it	lt
 801042c:	f1ca 0a00 	rsblt	sl, sl, #0
 8010430:	f7ef fef6 	bl	8000220 <__aeabi_dsub>
 8010434:	4680      	mov	r8, r0
 8010436:	4689      	mov	r9, r1
 8010438:	4632      	mov	r2, r6
 801043a:	463b      	mov	r3, r7
 801043c:	4640      	mov	r0, r8
 801043e:	4649      	mov	r1, r9
 8010440:	f7ef fef0 	bl	8000224 <__adddf3>
 8010444:	2400      	movs	r4, #0
 8010446:	a36a      	add	r3, pc, #424	@ (adr r3, 80105f0 <__ieee754_pow+0xa30>)
 8010448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044c:	4620      	mov	r0, r4
 801044e:	460d      	mov	r5, r1
 8010450:	f7f0 f89e 	bl	8000590 <__aeabi_dmul>
 8010454:	4642      	mov	r2, r8
 8010456:	e9cd 0100 	strd	r0, r1, [sp]
 801045a:	464b      	mov	r3, r9
 801045c:	4620      	mov	r0, r4
 801045e:	4629      	mov	r1, r5
 8010460:	f7ef fede 	bl	8000220 <__aeabi_dsub>
 8010464:	4602      	mov	r2, r0
 8010466:	460b      	mov	r3, r1
 8010468:	4630      	mov	r0, r6
 801046a:	4639      	mov	r1, r7
 801046c:	f7ef fed8 	bl	8000220 <__aeabi_dsub>
 8010470:	a361      	add	r3, pc, #388	@ (adr r3, 80105f8 <__ieee754_pow+0xa38>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	f7f0 f88b 	bl	8000590 <__aeabi_dmul>
 801047a:	a361      	add	r3, pc, #388	@ (adr r3, 8010600 <__ieee754_pow+0xa40>)
 801047c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010480:	4680      	mov	r8, r0
 8010482:	4689      	mov	r9, r1
 8010484:	4620      	mov	r0, r4
 8010486:	4629      	mov	r1, r5
 8010488:	f7f0 f882 	bl	8000590 <__aeabi_dmul>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	4640      	mov	r0, r8
 8010492:	4649      	mov	r1, r9
 8010494:	f7ef fec6 	bl	8000224 <__adddf3>
 8010498:	4604      	mov	r4, r0
 801049a:	460d      	mov	r5, r1
 801049c:	4602      	mov	r2, r0
 801049e:	460b      	mov	r3, r1
 80104a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104a4:	f7ef febe 	bl	8000224 <__adddf3>
 80104a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104ac:	4680      	mov	r8, r0
 80104ae:	4689      	mov	r9, r1
 80104b0:	f7ef feb6 	bl	8000220 <__aeabi_dsub>
 80104b4:	4602      	mov	r2, r0
 80104b6:	460b      	mov	r3, r1
 80104b8:	4620      	mov	r0, r4
 80104ba:	4629      	mov	r1, r5
 80104bc:	f7ef feb0 	bl	8000220 <__aeabi_dsub>
 80104c0:	4642      	mov	r2, r8
 80104c2:	4606      	mov	r6, r0
 80104c4:	460f      	mov	r7, r1
 80104c6:	464b      	mov	r3, r9
 80104c8:	4640      	mov	r0, r8
 80104ca:	4649      	mov	r1, r9
 80104cc:	f7f0 f860 	bl	8000590 <__aeabi_dmul>
 80104d0:	a34d      	add	r3, pc, #308	@ (adr r3, 8010608 <__ieee754_pow+0xa48>)
 80104d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d6:	4604      	mov	r4, r0
 80104d8:	460d      	mov	r5, r1
 80104da:	f7f0 f859 	bl	8000590 <__aeabi_dmul>
 80104de:	a34c      	add	r3, pc, #304	@ (adr r3, 8010610 <__ieee754_pow+0xa50>)
 80104e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e4:	f7ef fe9c 	bl	8000220 <__aeabi_dsub>
 80104e8:	4622      	mov	r2, r4
 80104ea:	462b      	mov	r3, r5
 80104ec:	f7f0 f850 	bl	8000590 <__aeabi_dmul>
 80104f0:	a349      	add	r3, pc, #292	@ (adr r3, 8010618 <__ieee754_pow+0xa58>)
 80104f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f6:	f7ef fe95 	bl	8000224 <__adddf3>
 80104fa:	4622      	mov	r2, r4
 80104fc:	462b      	mov	r3, r5
 80104fe:	f7f0 f847 	bl	8000590 <__aeabi_dmul>
 8010502:	a347      	add	r3, pc, #284	@ (adr r3, 8010620 <__ieee754_pow+0xa60>)
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	f7ef fe8a 	bl	8000220 <__aeabi_dsub>
 801050c:	4622      	mov	r2, r4
 801050e:	462b      	mov	r3, r5
 8010510:	f7f0 f83e 	bl	8000590 <__aeabi_dmul>
 8010514:	a344      	add	r3, pc, #272	@ (adr r3, 8010628 <__ieee754_pow+0xa68>)
 8010516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051a:	f7ef fe83 	bl	8000224 <__adddf3>
 801051e:	4622      	mov	r2, r4
 8010520:	462b      	mov	r3, r5
 8010522:	f7f0 f835 	bl	8000590 <__aeabi_dmul>
 8010526:	4602      	mov	r2, r0
 8010528:	460b      	mov	r3, r1
 801052a:	4640      	mov	r0, r8
 801052c:	4649      	mov	r1, r9
 801052e:	f7ef fe77 	bl	8000220 <__aeabi_dsub>
 8010532:	4604      	mov	r4, r0
 8010534:	460d      	mov	r5, r1
 8010536:	4602      	mov	r2, r0
 8010538:	460b      	mov	r3, r1
 801053a:	4640      	mov	r0, r8
 801053c:	4649      	mov	r1, r9
 801053e:	f7f0 f827 	bl	8000590 <__aeabi_dmul>
 8010542:	2200      	movs	r2, #0
 8010544:	e9cd 0100 	strd	r0, r1, [sp]
 8010548:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801054c:	4620      	mov	r0, r4
 801054e:	4629      	mov	r1, r5
 8010550:	f7ef fe66 	bl	8000220 <__aeabi_dsub>
 8010554:	4602      	mov	r2, r0
 8010556:	460b      	mov	r3, r1
 8010558:	e9dd 0100 	ldrd	r0, r1, [sp]
 801055c:	f7f0 f942 	bl	80007e4 <__aeabi_ddiv>
 8010560:	4632      	mov	r2, r6
 8010562:	4604      	mov	r4, r0
 8010564:	460d      	mov	r5, r1
 8010566:	463b      	mov	r3, r7
 8010568:	4640      	mov	r0, r8
 801056a:	4649      	mov	r1, r9
 801056c:	f7f0 f810 	bl	8000590 <__aeabi_dmul>
 8010570:	4632      	mov	r2, r6
 8010572:	463b      	mov	r3, r7
 8010574:	f7ef fe56 	bl	8000224 <__adddf3>
 8010578:	4602      	mov	r2, r0
 801057a:	460b      	mov	r3, r1
 801057c:	4620      	mov	r0, r4
 801057e:	4629      	mov	r1, r5
 8010580:	f7ef fe4e 	bl	8000220 <__aeabi_dsub>
 8010584:	4642      	mov	r2, r8
 8010586:	464b      	mov	r3, r9
 8010588:	f7ef fe4a 	bl	8000220 <__aeabi_dsub>
 801058c:	460b      	mov	r3, r1
 801058e:	4602      	mov	r2, r0
 8010590:	492d      	ldr	r1, [pc, #180]	@ (8010648 <__ieee754_pow+0xa88>)
 8010592:	2000      	movs	r0, #0
 8010594:	f7ef fe44 	bl	8000220 <__aeabi_dsub>
 8010598:	ec41 0b10 	vmov	d0, r0, r1
 801059c:	ee10 3a90 	vmov	r3, s1
 80105a0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80105a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105a8:	da0b      	bge.n	80105c2 <__ieee754_pow+0xa02>
 80105aa:	4650      	mov	r0, sl
 80105ac:	f000 fb20 	bl	8010bf0 <scalbn>
 80105b0:	ec51 0b10 	vmov	r0, r1, d0
 80105b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105b8:	f7ff bb6d 	b.w	800fc96 <__ieee754_pow+0xd6>
 80105bc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80105c0:	e73a      	b.n	8010438 <__ieee754_pow+0x878>
 80105c2:	ec51 0b10 	vmov	r0, r1, d0
 80105c6:	4619      	mov	r1, r3
 80105c8:	e7f4      	b.n	80105b4 <__ieee754_pow+0x9f4>
 80105ca:	491f      	ldr	r1, [pc, #124]	@ (8010648 <__ieee754_pow+0xa88>)
 80105cc:	2000      	movs	r0, #0
 80105ce:	f7ff bb14 	b.w	800fbfa <__ieee754_pow+0x3a>
 80105d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105d6:	f7ff bb10 	b.w	800fbfa <__ieee754_pow+0x3a>
 80105da:	4630      	mov	r0, r6
 80105dc:	4639      	mov	r1, r7
 80105de:	f7ff bb0c 	b.w	800fbfa <__ieee754_pow+0x3a>
 80105e2:	460c      	mov	r4, r1
 80105e4:	f7ff bb69 	b.w	800fcba <__ieee754_pow+0xfa>
 80105e8:	2400      	movs	r4, #0
 80105ea:	f7ff bb4b 	b.w	800fc84 <__ieee754_pow+0xc4>
 80105ee:	bf00      	nop
 80105f0:	00000000 	.word	0x00000000
 80105f4:	3fe62e43 	.word	0x3fe62e43
 80105f8:	fefa39ef 	.word	0xfefa39ef
 80105fc:	3fe62e42 	.word	0x3fe62e42
 8010600:	0ca86c39 	.word	0x0ca86c39
 8010604:	be205c61 	.word	0xbe205c61
 8010608:	72bea4d0 	.word	0x72bea4d0
 801060c:	3e663769 	.word	0x3e663769
 8010610:	c5d26bf1 	.word	0xc5d26bf1
 8010614:	3ebbbd41 	.word	0x3ebbbd41
 8010618:	af25de2c 	.word	0xaf25de2c
 801061c:	3f11566a 	.word	0x3f11566a
 8010620:	16bebd93 	.word	0x16bebd93
 8010624:	3f66c16c 	.word	0x3f66c16c
 8010628:	5555553e 	.word	0x5555553e
 801062c:	3fc55555 	.word	0x3fc55555
 8010630:	40900000 	.word	0x40900000
 8010634:	4090cbff 	.word	0x4090cbff
 8010638:	3f6f3400 	.word	0x3f6f3400
 801063c:	4090cc00 	.word	0x4090cc00
 8010640:	3fe00000 	.word	0x3fe00000
 8010644:	fff00000 	.word	0xfff00000
 8010648:	3ff00000 	.word	0x3ff00000
 801064c:	652b82fe 	.word	0x652b82fe
 8010650:	3c971547 	.word	0x3c971547

08010654 <fabs>:
 8010654:	ec51 0b10 	vmov	r0, r1, d0
 8010658:	4602      	mov	r2, r0
 801065a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801065e:	ec43 2b10 	vmov	d0, r2, r3
 8010662:	4770      	bx	lr

08010664 <__kernel_cosf>:
 8010664:	ee10 3a10 	vmov	r3, s0
 8010668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801066c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010670:	eef0 6a40 	vmov.f32	s13, s0
 8010674:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010678:	d204      	bcs.n	8010684 <__kernel_cosf+0x20>
 801067a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801067e:	ee17 2a90 	vmov	r2, s15
 8010682:	b342      	cbz	r2, 80106d6 <__kernel_cosf+0x72>
 8010684:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010688:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80106f4 <__kernel_cosf+0x90>
 801068c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80106f8 <__kernel_cosf+0x94>
 8010690:	4a1a      	ldr	r2, [pc, #104]	@ (80106fc <__kernel_cosf+0x98>)
 8010692:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010696:	4293      	cmp	r3, r2
 8010698:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010700 <__kernel_cosf+0x9c>
 801069c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80106a0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010704 <__kernel_cosf+0xa0>
 80106a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80106a8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010708 <__kernel_cosf+0xa4>
 80106ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80106b0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801070c <__kernel_cosf+0xa8>
 80106b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80106b8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80106bc:	ee26 6a07 	vmul.f32	s12, s12, s14
 80106c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80106c4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80106c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106cc:	d804      	bhi.n	80106d8 <__kernel_cosf+0x74>
 80106ce:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80106d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80106d6:	4770      	bx	lr
 80106d8:	4a0d      	ldr	r2, [pc, #52]	@ (8010710 <__kernel_cosf+0xac>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	bf9a      	itte	ls
 80106de:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80106e2:	ee07 3a10 	vmovls	s14, r3
 80106e6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80106ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80106ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106f2:	e7ec      	b.n	80106ce <__kernel_cosf+0x6a>
 80106f4:	ad47d74e 	.word	0xad47d74e
 80106f8:	310f74f6 	.word	0x310f74f6
 80106fc:	3e999999 	.word	0x3e999999
 8010700:	b493f27c 	.word	0xb493f27c
 8010704:	37d00d01 	.word	0x37d00d01
 8010708:	bab60b61 	.word	0xbab60b61
 801070c:	3d2aaaab 	.word	0x3d2aaaab
 8010710:	3f480000 	.word	0x3f480000

08010714 <__kernel_sinf>:
 8010714:	ee10 3a10 	vmov	r3, s0
 8010718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801071c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010720:	d204      	bcs.n	801072c <__kernel_sinf+0x18>
 8010722:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010726:	ee17 3a90 	vmov	r3, s15
 801072a:	b35b      	cbz	r3, 8010784 <__kernel_sinf+0x70>
 801072c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010730:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010788 <__kernel_sinf+0x74>
 8010734:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801078c <__kernel_sinf+0x78>
 8010738:	eea7 6a27 	vfma.f32	s12, s14, s15
 801073c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010790 <__kernel_sinf+0x7c>
 8010740:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010744:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010794 <__kernel_sinf+0x80>
 8010748:	eea7 6a87 	vfma.f32	s12, s15, s14
 801074c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010798 <__kernel_sinf+0x84>
 8010750:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010754:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010758:	b930      	cbnz	r0, 8010768 <__kernel_sinf+0x54>
 801075a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801079c <__kernel_sinf+0x88>
 801075e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010762:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010766:	4770      	bx	lr
 8010768:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801076c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010770:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010774:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010778:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80107a0 <__kernel_sinf+0x8c>
 801077c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010780:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	2f2ec9d3 	.word	0x2f2ec9d3
 801078c:	b2d72f34 	.word	0xb2d72f34
 8010790:	3638ef1b 	.word	0x3638ef1b
 8010794:	b9500d01 	.word	0xb9500d01
 8010798:	3c088889 	.word	0x3c088889
 801079c:	be2aaaab 	.word	0xbe2aaaab
 80107a0:	3e2aaaab 	.word	0x3e2aaaab

080107a4 <__ieee754_acosf>:
 80107a4:	b508      	push	{r3, lr}
 80107a6:	ee10 3a10 	vmov	r3, s0
 80107aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80107ae:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80107b2:	ed2d 8b0c 	vpush	{d8-d13}
 80107b6:	d10a      	bne.n	80107ce <__ieee754_acosf+0x2a>
 80107b8:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 801094c <__ieee754_acosf+0x1a8>
 80107bc:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8010950 <__ieee754_acosf+0x1ac>
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	bfc8      	it	gt
 80107c4:	eeb0 0a67 	vmovgt.f32	s0, s15
 80107c8:	ecbd 8b0c 	vpop	{d8-d13}
 80107cc:	bd08      	pop	{r3, pc}
 80107ce:	d904      	bls.n	80107da <__ieee754_acosf+0x36>
 80107d0:	ee30 8a40 	vsub.f32	s16, s0, s0
 80107d4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80107d8:	e7f6      	b.n	80107c8 <__ieee754_acosf+0x24>
 80107da:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80107de:	d23c      	bcs.n	801085a <__ieee754_acosf+0xb6>
 80107e0:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80107e4:	f240 80af 	bls.w	8010946 <__ieee754_acosf+0x1a2>
 80107e8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80107ec:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8010954 <__ieee754_acosf+0x1b0>
 80107f0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010958 <__ieee754_acosf+0x1b4>
 80107f4:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 801095c <__ieee754_acosf+0x1b8>
 80107f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80107fc:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8010960 <__ieee754_acosf+0x1bc>
 8010800:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010804:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8010964 <__ieee754_acosf+0x1c0>
 8010808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801080c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8010968 <__ieee754_acosf+0x1c4>
 8010810:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010814:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801096c <__ieee754_acosf+0x1c8>
 8010818:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801081c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010970 <__ieee754_acosf+0x1cc>
 8010820:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010824:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8010974 <__ieee754_acosf+0x1d0>
 8010828:	eee6 6a27 	vfma.f32	s13, s12, s15
 801082c:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8010978 <__ieee754_acosf+0x1d4>
 8010830:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010834:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010838:	eee6 6a27 	vfma.f32	s13, s12, s15
 801083c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010840:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801097c <__ieee754_acosf+0x1d8>
 8010844:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010848:	eee0 7a46 	vfms.f32	s15, s0, s12
 801084c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010850:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8010980 <__ieee754_acosf+0x1dc>
 8010854:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010858:	e7b6      	b.n	80107c8 <__ieee754_acosf+0x24>
 801085a:	2b00      	cmp	r3, #0
 801085c:	eddf da3d 	vldr	s27, [pc, #244]	@ 8010954 <__ieee754_acosf+0x1b0>
 8010860:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8010958 <__ieee754_acosf+0x1b4>
 8010864:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8010960 <__ieee754_acosf+0x1bc>
 8010868:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8010964 <__ieee754_acosf+0x1c0>
 801086c:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8010968 <__ieee754_acosf+0x1c4>
 8010870:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 801096c <__ieee754_acosf+0x1c8>
 8010874:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8010970 <__ieee754_acosf+0x1cc>
 8010878:	eddf aa38 	vldr	s21, [pc, #224]	@ 801095c <__ieee754_acosf+0x1b8>
 801087c:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8010974 <__ieee754_acosf+0x1d0>
 8010880:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8010978 <__ieee754_acosf+0x1d4>
 8010884:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8010888:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801088c:	da28      	bge.n	80108e0 <__ieee754_acosf+0x13c>
 801088e:	ee30 8a09 	vadd.f32	s16, s0, s18
 8010892:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010896:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801089a:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801089e:	eeac ca80 	vfma.f32	s24, s25, s0
 80108a2:	eeaa aa80 	vfma.f32	s20, s21, s0
 80108a6:	eeec ba00 	vfma.f32	s23, s24, s0
 80108aa:	eeea 9a00 	vfma.f32	s19, s20, s0
 80108ae:	eeab ba80 	vfma.f32	s22, s23, s0
 80108b2:	eea9 9a80 	vfma.f32	s18, s19, s0
 80108b6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80108ba:	ee68 8a80 	vmul.f32	s17, s17, s0
 80108be:	f7ff f955 	bl	800fb6c <__ieee754_sqrtf>
 80108c2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80108c6:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8010984 <__ieee754_acosf+0x1e0>
 80108ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80108ce:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80108d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80108d6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010988 <__ieee754_acosf+0x1e4>
 80108da:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80108de:	e773      	b.n	80107c8 <__ieee754_acosf+0x24>
 80108e0:	ee39 8a40 	vsub.f32	s16, s18, s0
 80108e4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80108e8:	eeb0 0a48 	vmov.f32	s0, s16
 80108ec:	f7ff f93e 	bl	800fb6c <__ieee754_sqrtf>
 80108f0:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80108f4:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80108f8:	eeac ca88 	vfma.f32	s24, s25, s16
 80108fc:	eeaa aa88 	vfma.f32	s20, s21, s16
 8010900:	eeec ba08 	vfma.f32	s23, s24, s16
 8010904:	ee10 3a10 	vmov	r3, s0
 8010908:	eeab ba88 	vfma.f32	s22, s23, s16
 801090c:	f36f 030b 	bfc	r3, #0, #12
 8010910:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010914:	ee07 3a90 	vmov	s15, r3
 8010918:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801091c:	eeb0 6a48 	vmov.f32	s12, s16
 8010920:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010924:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010928:	ee70 6a27 	vadd.f32	s13, s0, s15
 801092c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010930:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010934:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010938:	eea0 7a26 	vfma.f32	s14, s0, s13
 801093c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010940:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010944:	e740      	b.n	80107c8 <__ieee754_acosf+0x24>
 8010946:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801098c <__ieee754_acosf+0x1e8>
 801094a:	e73d      	b.n	80107c8 <__ieee754_acosf+0x24>
 801094c:	40490fdb 	.word	0x40490fdb
 8010950:	00000000 	.word	0x00000000
 8010954:	3811ef08 	.word	0x3811ef08
 8010958:	3a4f7f04 	.word	0x3a4f7f04
 801095c:	bf303361 	.word	0xbf303361
 8010960:	bd241146 	.word	0xbd241146
 8010964:	3e4e0aa8 	.word	0x3e4e0aa8
 8010968:	bea6b090 	.word	0xbea6b090
 801096c:	3e2aaaab 	.word	0x3e2aaaab
 8010970:	3d9dc62e 	.word	0x3d9dc62e
 8010974:	4001572d 	.word	0x4001572d
 8010978:	c019d139 	.word	0xc019d139
 801097c:	33a22168 	.word	0x33a22168
 8010980:	3fc90fda 	.word	0x3fc90fda
 8010984:	b3a22168 	.word	0xb3a22168
 8010988:	40490fda 	.word	0x40490fda
 801098c:	3fc90fdb 	.word	0x3fc90fdb

08010990 <__ieee754_rem_pio2f>:
 8010990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010992:	ee10 6a10 	vmov	r6, s0
 8010996:	4b88      	ldr	r3, [pc, #544]	@ (8010bb8 <__ieee754_rem_pio2f+0x228>)
 8010998:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801099c:	429d      	cmp	r5, r3
 801099e:	b087      	sub	sp, #28
 80109a0:	4604      	mov	r4, r0
 80109a2:	d805      	bhi.n	80109b0 <__ieee754_rem_pio2f+0x20>
 80109a4:	2300      	movs	r3, #0
 80109a6:	ed80 0a00 	vstr	s0, [r0]
 80109aa:	6043      	str	r3, [r0, #4]
 80109ac:	2000      	movs	r0, #0
 80109ae:	e022      	b.n	80109f6 <__ieee754_rem_pio2f+0x66>
 80109b0:	4b82      	ldr	r3, [pc, #520]	@ (8010bbc <__ieee754_rem_pio2f+0x22c>)
 80109b2:	429d      	cmp	r5, r3
 80109b4:	d83a      	bhi.n	8010a2c <__ieee754_rem_pio2f+0x9c>
 80109b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80109ba:	2e00      	cmp	r6, #0
 80109bc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8010bc0 <__ieee754_rem_pio2f+0x230>
 80109c0:	4a80      	ldr	r2, [pc, #512]	@ (8010bc4 <__ieee754_rem_pio2f+0x234>)
 80109c2:	f023 030f 	bic.w	r3, r3, #15
 80109c6:	dd18      	ble.n	80109fa <__ieee754_rem_pio2f+0x6a>
 80109c8:	4293      	cmp	r3, r2
 80109ca:	ee70 7a47 	vsub.f32	s15, s0, s14
 80109ce:	bf09      	itett	eq
 80109d0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010bc8 <__ieee754_rem_pio2f+0x238>
 80109d4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010bcc <__ieee754_rem_pio2f+0x23c>
 80109d8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010bd0 <__ieee754_rem_pio2f+0x240>
 80109dc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80109e0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80109e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109e8:	ed80 7a00 	vstr	s14, [r0]
 80109ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80109f0:	edc0 7a01 	vstr	s15, [r0, #4]
 80109f4:	2001      	movs	r0, #1
 80109f6:	b007      	add	sp, #28
 80109f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109fa:	4293      	cmp	r3, r2
 80109fc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010a00:	bf09      	itett	eq
 8010a02:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010bc8 <__ieee754_rem_pio2f+0x238>
 8010a06:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010bcc <__ieee754_rem_pio2f+0x23c>
 8010a0a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010bd0 <__ieee754_rem_pio2f+0x240>
 8010a0e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8010a12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a1a:	ed80 7a00 	vstr	s14, [r0]
 8010a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a22:	edc0 7a01 	vstr	s15, [r0, #4]
 8010a26:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2a:	e7e4      	b.n	80109f6 <__ieee754_rem_pio2f+0x66>
 8010a2c:	4b69      	ldr	r3, [pc, #420]	@ (8010bd4 <__ieee754_rem_pio2f+0x244>)
 8010a2e:	429d      	cmp	r5, r3
 8010a30:	d873      	bhi.n	8010b1a <__ieee754_rem_pio2f+0x18a>
 8010a32:	f7fe ff65 	bl	800f900 <fabsf>
 8010a36:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010bd8 <__ieee754_rem_pio2f+0x248>
 8010a3a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010a3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010a4a:	ee17 0a90 	vmov	r0, s15
 8010a4e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010bc0 <__ieee754_rem_pio2f+0x230>
 8010a52:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010a56:	281f      	cmp	r0, #31
 8010a58:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010bcc <__ieee754_rem_pio2f+0x23c>
 8010a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a60:	eeb1 6a47 	vneg.f32	s12, s14
 8010a64:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010a68:	ee16 1a90 	vmov	r1, s13
 8010a6c:	dc09      	bgt.n	8010a82 <__ieee754_rem_pio2f+0xf2>
 8010a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8010bdc <__ieee754_rem_pio2f+0x24c>)
 8010a70:	1e47      	subs	r7, r0, #1
 8010a72:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010a76:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010a7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d107      	bne.n	8010a92 <__ieee754_rem_pio2f+0x102>
 8010a82:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010a86:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010a8a:	2a08      	cmp	r2, #8
 8010a8c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010a90:	dc14      	bgt.n	8010abc <__ieee754_rem_pio2f+0x12c>
 8010a92:	6021      	str	r1, [r4, #0]
 8010a94:	ed94 7a00 	vldr	s14, [r4]
 8010a98:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010a9c:	2e00      	cmp	r6, #0
 8010a9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010aa2:	ed84 0a01 	vstr	s0, [r4, #4]
 8010aa6:	daa6      	bge.n	80109f6 <__ieee754_rem_pio2f+0x66>
 8010aa8:	eeb1 7a47 	vneg.f32	s14, s14
 8010aac:	eeb1 0a40 	vneg.f32	s0, s0
 8010ab0:	ed84 7a00 	vstr	s14, [r4]
 8010ab4:	ed84 0a01 	vstr	s0, [r4, #4]
 8010ab8:	4240      	negs	r0, r0
 8010aba:	e79c      	b.n	80109f6 <__ieee754_rem_pio2f+0x66>
 8010abc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010bc8 <__ieee754_rem_pio2f+0x238>
 8010ac0:	eef0 6a40 	vmov.f32	s13, s0
 8010ac4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010ac8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010acc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010ad0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010bd0 <__ieee754_rem_pio2f+0x240>
 8010ad4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010ad8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010adc:	ee15 2a90 	vmov	r2, s11
 8010ae0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010ae4:	1a5b      	subs	r3, r3, r1
 8010ae6:	2b19      	cmp	r3, #25
 8010ae8:	dc04      	bgt.n	8010af4 <__ieee754_rem_pio2f+0x164>
 8010aea:	edc4 5a00 	vstr	s11, [r4]
 8010aee:	eeb0 0a66 	vmov.f32	s0, s13
 8010af2:	e7cf      	b.n	8010a94 <__ieee754_rem_pio2f+0x104>
 8010af4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010be0 <__ieee754_rem_pio2f+0x250>
 8010af8:	eeb0 0a66 	vmov.f32	s0, s13
 8010afc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010b00:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010b04:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010be4 <__ieee754_rem_pio2f+0x254>
 8010b08:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010b0c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010b10:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010b14:	ed84 7a00 	vstr	s14, [r4]
 8010b18:	e7bc      	b.n	8010a94 <__ieee754_rem_pio2f+0x104>
 8010b1a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010b1e:	d306      	bcc.n	8010b2e <__ieee754_rem_pio2f+0x19e>
 8010b20:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010b24:	edc0 7a01 	vstr	s15, [r0, #4]
 8010b28:	edc0 7a00 	vstr	s15, [r0]
 8010b2c:	e73e      	b.n	80109ac <__ieee754_rem_pio2f+0x1c>
 8010b2e:	15ea      	asrs	r2, r5, #23
 8010b30:	3a86      	subs	r2, #134	@ 0x86
 8010b32:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010b36:	ee07 3a90 	vmov	s15, r3
 8010b3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010b3e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010be8 <__ieee754_rem_pio2f+0x258>
 8010b42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b4a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010b4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010b56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b5e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b6e:	edcd 7a05 	vstr	s15, [sp, #20]
 8010b72:	d11e      	bne.n	8010bb2 <__ieee754_rem_pio2f+0x222>
 8010b74:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b7c:	bf0c      	ite	eq
 8010b7e:	2301      	moveq	r3, #1
 8010b80:	2302      	movne	r3, #2
 8010b82:	491a      	ldr	r1, [pc, #104]	@ (8010bec <__ieee754_rem_pio2f+0x25c>)
 8010b84:	9101      	str	r1, [sp, #4]
 8010b86:	2102      	movs	r1, #2
 8010b88:	9100      	str	r1, [sp, #0]
 8010b8a:	a803      	add	r0, sp, #12
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	f000 f94d 	bl	8010e2c <__kernel_rem_pio2f>
 8010b92:	2e00      	cmp	r6, #0
 8010b94:	f6bf af2f 	bge.w	80109f6 <__ieee754_rem_pio2f+0x66>
 8010b98:	edd4 7a00 	vldr	s15, [r4]
 8010b9c:	eef1 7a67 	vneg.f32	s15, s15
 8010ba0:	edc4 7a00 	vstr	s15, [r4]
 8010ba4:	edd4 7a01 	vldr	s15, [r4, #4]
 8010ba8:	eef1 7a67 	vneg.f32	s15, s15
 8010bac:	edc4 7a01 	vstr	s15, [r4, #4]
 8010bb0:	e782      	b.n	8010ab8 <__ieee754_rem_pio2f+0x128>
 8010bb2:	2303      	movs	r3, #3
 8010bb4:	e7e5      	b.n	8010b82 <__ieee754_rem_pio2f+0x1f2>
 8010bb6:	bf00      	nop
 8010bb8:	3f490fd8 	.word	0x3f490fd8
 8010bbc:	4016cbe3 	.word	0x4016cbe3
 8010bc0:	3fc90f80 	.word	0x3fc90f80
 8010bc4:	3fc90fd0 	.word	0x3fc90fd0
 8010bc8:	37354400 	.word	0x37354400
 8010bcc:	37354443 	.word	0x37354443
 8010bd0:	2e85a308 	.word	0x2e85a308
 8010bd4:	43490f80 	.word	0x43490f80
 8010bd8:	3f22f984 	.word	0x3f22f984
 8010bdc:	08011428 	.word	0x08011428
 8010be0:	2e85a300 	.word	0x2e85a300
 8010be4:	248d3132 	.word	0x248d3132
 8010be8:	43800000 	.word	0x43800000
 8010bec:	080114a8 	.word	0x080114a8

08010bf0 <scalbn>:
 8010bf0:	b570      	push	{r4, r5, r6, lr}
 8010bf2:	ec55 4b10 	vmov	r4, r5, d0
 8010bf6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	462b      	mov	r3, r5
 8010bfe:	b991      	cbnz	r1, 8010c26 <scalbn+0x36>
 8010c00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010c04:	4323      	orrs	r3, r4
 8010c06:	d03b      	beq.n	8010c80 <scalbn+0x90>
 8010c08:	4b33      	ldr	r3, [pc, #204]	@ (8010cd8 <scalbn+0xe8>)
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f7ef fcbe 	bl	8000590 <__aeabi_dmul>
 8010c14:	4b31      	ldr	r3, [pc, #196]	@ (8010cdc <scalbn+0xec>)
 8010c16:	429e      	cmp	r6, r3
 8010c18:	4604      	mov	r4, r0
 8010c1a:	460d      	mov	r5, r1
 8010c1c:	da0f      	bge.n	8010c3e <scalbn+0x4e>
 8010c1e:	a326      	add	r3, pc, #152	@ (adr r3, 8010cb8 <scalbn+0xc8>)
 8010c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c24:	e01e      	b.n	8010c64 <scalbn+0x74>
 8010c26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010c2a:	4291      	cmp	r1, r2
 8010c2c:	d10b      	bne.n	8010c46 <scalbn+0x56>
 8010c2e:	4622      	mov	r2, r4
 8010c30:	4620      	mov	r0, r4
 8010c32:	4629      	mov	r1, r5
 8010c34:	f7ef faf6 	bl	8000224 <__adddf3>
 8010c38:	4604      	mov	r4, r0
 8010c3a:	460d      	mov	r5, r1
 8010c3c:	e020      	b.n	8010c80 <scalbn+0x90>
 8010c3e:	460b      	mov	r3, r1
 8010c40:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010c44:	3936      	subs	r1, #54	@ 0x36
 8010c46:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010c4a:	4296      	cmp	r6, r2
 8010c4c:	dd0d      	ble.n	8010c6a <scalbn+0x7a>
 8010c4e:	2d00      	cmp	r5, #0
 8010c50:	a11b      	add	r1, pc, #108	@ (adr r1, 8010cc0 <scalbn+0xd0>)
 8010c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c56:	da02      	bge.n	8010c5e <scalbn+0x6e>
 8010c58:	a11b      	add	r1, pc, #108	@ (adr r1, 8010cc8 <scalbn+0xd8>)
 8010c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c5e:	a318      	add	r3, pc, #96	@ (adr r3, 8010cc0 <scalbn+0xd0>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	f7ef fc94 	bl	8000590 <__aeabi_dmul>
 8010c68:	e7e6      	b.n	8010c38 <scalbn+0x48>
 8010c6a:	1872      	adds	r2, r6, r1
 8010c6c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010c70:	428a      	cmp	r2, r1
 8010c72:	dcec      	bgt.n	8010c4e <scalbn+0x5e>
 8010c74:	2a00      	cmp	r2, #0
 8010c76:	dd06      	ble.n	8010c86 <scalbn+0x96>
 8010c78:	f36f 531e 	bfc	r3, #20, #11
 8010c7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c80:	ec45 4b10 	vmov	d0, r4, r5
 8010c84:	bd70      	pop	{r4, r5, r6, pc}
 8010c86:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010c8a:	da08      	bge.n	8010c9e <scalbn+0xae>
 8010c8c:	2d00      	cmp	r5, #0
 8010c8e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010cb8 <scalbn+0xc8>)
 8010c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c94:	dac3      	bge.n	8010c1e <scalbn+0x2e>
 8010c96:	a10e      	add	r1, pc, #56	@ (adr r1, 8010cd0 <scalbn+0xe0>)
 8010c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c9c:	e7bf      	b.n	8010c1e <scalbn+0x2e>
 8010c9e:	3236      	adds	r2, #54	@ 0x36
 8010ca0:	f36f 531e 	bfc	r3, #20, #11
 8010ca4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010ca8:	4620      	mov	r0, r4
 8010caa:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce0 <scalbn+0xf0>)
 8010cac:	4629      	mov	r1, r5
 8010cae:	2200      	movs	r2, #0
 8010cb0:	e7d8      	b.n	8010c64 <scalbn+0x74>
 8010cb2:	bf00      	nop
 8010cb4:	f3af 8000 	nop.w
 8010cb8:	c2f8f359 	.word	0xc2f8f359
 8010cbc:	01a56e1f 	.word	0x01a56e1f
 8010cc0:	8800759c 	.word	0x8800759c
 8010cc4:	7e37e43c 	.word	0x7e37e43c
 8010cc8:	8800759c 	.word	0x8800759c
 8010ccc:	fe37e43c 	.word	0xfe37e43c
 8010cd0:	c2f8f359 	.word	0xc2f8f359
 8010cd4:	81a56e1f 	.word	0x81a56e1f
 8010cd8:	43500000 	.word	0x43500000
 8010cdc:	ffff3cb0 	.word	0xffff3cb0
 8010ce0:	3c900000 	.word	0x3c900000

08010ce4 <with_errno>:
 8010ce4:	b510      	push	{r4, lr}
 8010ce6:	ed2d 8b02 	vpush	{d8}
 8010cea:	eeb0 8a40 	vmov.f32	s16, s0
 8010cee:	eef0 8a60 	vmov.f32	s17, s1
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	f7fe fca2 	bl	800f63c <__errno>
 8010cf8:	eeb0 0a48 	vmov.f32	s0, s16
 8010cfc:	eef0 0a68 	vmov.f32	s1, s17
 8010d00:	ecbd 8b02 	vpop	{d8}
 8010d04:	6004      	str	r4, [r0, #0]
 8010d06:	bd10      	pop	{r4, pc}

08010d08 <xflow>:
 8010d08:	4603      	mov	r3, r0
 8010d0a:	b507      	push	{r0, r1, r2, lr}
 8010d0c:	ec51 0b10 	vmov	r0, r1, d0
 8010d10:	b183      	cbz	r3, 8010d34 <xflow+0x2c>
 8010d12:	4602      	mov	r2, r0
 8010d14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d18:	e9cd 2300 	strd	r2, r3, [sp]
 8010d1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d20:	f7ef fc36 	bl	8000590 <__aeabi_dmul>
 8010d24:	ec41 0b10 	vmov	d0, r0, r1
 8010d28:	2022      	movs	r0, #34	@ 0x22
 8010d2a:	b003      	add	sp, #12
 8010d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d30:	f7ff bfd8 	b.w	8010ce4 <with_errno>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	e7ee      	b.n	8010d18 <xflow+0x10>
 8010d3a:	0000      	movs	r0, r0
 8010d3c:	0000      	movs	r0, r0
	...

08010d40 <__math_uflow>:
 8010d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d48 <__math_uflow+0x8>
 8010d44:	f7ff bfe0 	b.w	8010d08 <xflow>
 8010d48:	00000000 	.word	0x00000000
 8010d4c:	10000000 	.word	0x10000000

08010d50 <__math_oflow>:
 8010d50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d58 <__math_oflow+0x8>
 8010d54:	f7ff bfd8 	b.w	8010d08 <xflow>
 8010d58:	00000000 	.word	0x00000000
 8010d5c:	70000000 	.word	0x70000000

08010d60 <scalbnf>:
 8010d60:	ee10 3a10 	vmov	r3, s0
 8010d64:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010d68:	d02b      	beq.n	8010dc2 <scalbnf+0x62>
 8010d6a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010d6e:	d302      	bcc.n	8010d76 <scalbnf+0x16>
 8010d70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010d74:	4770      	bx	lr
 8010d76:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010d7a:	d123      	bne.n	8010dc4 <scalbnf+0x64>
 8010d7c:	4b24      	ldr	r3, [pc, #144]	@ (8010e10 <scalbnf+0xb0>)
 8010d7e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010e14 <scalbnf+0xb4>
 8010d82:	4298      	cmp	r0, r3
 8010d84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010d88:	db17      	blt.n	8010dba <scalbnf+0x5a>
 8010d8a:	ee10 3a10 	vmov	r3, s0
 8010d8e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010d92:	3a19      	subs	r2, #25
 8010d94:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010d98:	4288      	cmp	r0, r1
 8010d9a:	dd15      	ble.n	8010dc8 <scalbnf+0x68>
 8010d9c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010e18 <scalbnf+0xb8>
 8010da0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010e1c <scalbnf+0xbc>
 8010da4:	ee10 3a10 	vmov	r3, s0
 8010da8:	eeb0 7a67 	vmov.f32	s14, s15
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	bfb8      	it	lt
 8010db0:	eef0 7a66 	vmovlt.f32	s15, s13
 8010db4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010db8:	4770      	bx	lr
 8010dba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010e20 <scalbnf+0xc0>
 8010dbe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010dc2:	4770      	bx	lr
 8010dc4:	0dd2      	lsrs	r2, r2, #23
 8010dc6:	e7e5      	b.n	8010d94 <scalbnf+0x34>
 8010dc8:	4410      	add	r0, r2
 8010dca:	28fe      	cmp	r0, #254	@ 0xfe
 8010dcc:	dce6      	bgt.n	8010d9c <scalbnf+0x3c>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	dd06      	ble.n	8010de0 <scalbnf+0x80>
 8010dd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010dd6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010dda:	ee00 3a10 	vmov	s0, r3
 8010dde:	4770      	bx	lr
 8010de0:	f110 0f16 	cmn.w	r0, #22
 8010de4:	da09      	bge.n	8010dfa <scalbnf+0x9a>
 8010de6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010e20 <scalbnf+0xc0>
 8010dea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010e24 <scalbnf+0xc4>
 8010dee:	ee10 3a10 	vmov	r3, s0
 8010df2:	eeb0 7a67 	vmov.f32	s14, s15
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	e7d9      	b.n	8010dae <scalbnf+0x4e>
 8010dfa:	3019      	adds	r0, #25
 8010dfc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010e00:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010e04:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010e28 <scalbnf+0xc8>
 8010e08:	ee07 3a90 	vmov	s15, r3
 8010e0c:	e7d7      	b.n	8010dbe <scalbnf+0x5e>
 8010e0e:	bf00      	nop
 8010e10:	ffff3cb0 	.word	0xffff3cb0
 8010e14:	4c000000 	.word	0x4c000000
 8010e18:	7149f2ca 	.word	0x7149f2ca
 8010e1c:	f149f2ca 	.word	0xf149f2ca
 8010e20:	0da24260 	.word	0x0da24260
 8010e24:	8da24260 	.word	0x8da24260
 8010e28:	33000000 	.word	0x33000000

08010e2c <__kernel_rem_pio2f>:
 8010e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e30:	ed2d 8b04 	vpush	{d8-d9}
 8010e34:	b0d9      	sub	sp, #356	@ 0x164
 8010e36:	4690      	mov	r8, r2
 8010e38:	9001      	str	r0, [sp, #4]
 8010e3a:	4ab6      	ldr	r2, [pc, #728]	@ (8011114 <__kernel_rem_pio2f+0x2e8>)
 8010e3c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010e3e:	f118 0f04 	cmn.w	r8, #4
 8010e42:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010e46:	460f      	mov	r7, r1
 8010e48:	f103 3bff 	add.w	fp, r3, #4294967295
 8010e4c:	db26      	blt.n	8010e9c <__kernel_rem_pio2f+0x70>
 8010e4e:	f1b8 0203 	subs.w	r2, r8, #3
 8010e52:	bf48      	it	mi
 8010e54:	f108 0204 	addmi.w	r2, r8, #4
 8010e58:	10d2      	asrs	r2, r2, #3
 8010e5a:	1c55      	adds	r5, r2, #1
 8010e5c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010e5e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8011124 <__kernel_rem_pio2f+0x2f8>
 8010e62:	00e8      	lsls	r0, r5, #3
 8010e64:	eba2 060b 	sub.w	r6, r2, fp
 8010e68:	9002      	str	r0, [sp, #8]
 8010e6a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010e6e:	eb0a 0c0b 	add.w	ip, sl, fp
 8010e72:	ac1c      	add	r4, sp, #112	@ 0x70
 8010e74:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010e78:	2000      	movs	r0, #0
 8010e7a:	4560      	cmp	r0, ip
 8010e7c:	dd10      	ble.n	8010ea0 <__kernel_rem_pio2f+0x74>
 8010e7e:	a91c      	add	r1, sp, #112	@ 0x70
 8010e80:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010e84:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010e88:	2600      	movs	r6, #0
 8010e8a:	4556      	cmp	r6, sl
 8010e8c:	dc24      	bgt.n	8010ed8 <__kernel_rem_pio2f+0xac>
 8010e8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010e92:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8011124 <__kernel_rem_pio2f+0x2f8>
 8010e96:	4684      	mov	ip, r0
 8010e98:	2400      	movs	r4, #0
 8010e9a:	e016      	b.n	8010eca <__kernel_rem_pio2f+0x9e>
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	e7dc      	b.n	8010e5a <__kernel_rem_pio2f+0x2e>
 8010ea0:	42c6      	cmn	r6, r0
 8010ea2:	bf5d      	ittte	pl
 8010ea4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010ea8:	ee07 1a90 	vmovpl	s15, r1
 8010eac:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010eb0:	eef0 7a47 	vmovmi.f32	s15, s14
 8010eb4:	ece4 7a01 	vstmia	r4!, {s15}
 8010eb8:	3001      	adds	r0, #1
 8010eba:	e7de      	b.n	8010e7a <__kernel_rem_pio2f+0x4e>
 8010ebc:	ecfe 6a01 	vldmia	lr!, {s13}
 8010ec0:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010ec4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010ec8:	3401      	adds	r4, #1
 8010eca:	455c      	cmp	r4, fp
 8010ecc:	ddf6      	ble.n	8010ebc <__kernel_rem_pio2f+0x90>
 8010ece:	ece9 7a01 	vstmia	r9!, {s15}
 8010ed2:	3601      	adds	r6, #1
 8010ed4:	3004      	adds	r0, #4
 8010ed6:	e7d8      	b.n	8010e8a <__kernel_rem_pio2f+0x5e>
 8010ed8:	a908      	add	r1, sp, #32
 8010eda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ede:	9104      	str	r1, [sp, #16]
 8010ee0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010ee2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011120 <__kernel_rem_pio2f+0x2f4>
 8010ee6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801111c <__kernel_rem_pio2f+0x2f0>
 8010eea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010eee:	9203      	str	r2, [sp, #12]
 8010ef0:	4654      	mov	r4, sl
 8010ef2:	00a2      	lsls	r2, r4, #2
 8010ef4:	9205      	str	r2, [sp, #20]
 8010ef6:	aa58      	add	r2, sp, #352	@ 0x160
 8010ef8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010efc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010f00:	a944      	add	r1, sp, #272	@ 0x110
 8010f02:	aa08      	add	r2, sp, #32
 8010f04:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010f08:	4694      	mov	ip, r2
 8010f0a:	4626      	mov	r6, r4
 8010f0c:	2e00      	cmp	r6, #0
 8010f0e:	dc4c      	bgt.n	8010faa <__kernel_rem_pio2f+0x17e>
 8010f10:	4628      	mov	r0, r5
 8010f12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010f16:	f7ff ff23 	bl	8010d60 <scalbnf>
 8010f1a:	eeb0 8a40 	vmov.f32	s16, s0
 8010f1e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010f22:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010f26:	f000 f9e9 	bl	80112fc <floorf>
 8010f2a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010f2e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010f32:	2d00      	cmp	r5, #0
 8010f34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f38:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010f3c:	ee17 9a90 	vmov	r9, s15
 8010f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f44:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010f48:	dd41      	ble.n	8010fce <__kernel_rem_pio2f+0x1a2>
 8010f4a:	f104 3cff 	add.w	ip, r4, #4294967295
 8010f4e:	a908      	add	r1, sp, #32
 8010f50:	f1c5 0e08 	rsb	lr, r5, #8
 8010f54:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010f58:	fa46 f00e 	asr.w	r0, r6, lr
 8010f5c:	4481      	add	r9, r0
 8010f5e:	fa00 f00e 	lsl.w	r0, r0, lr
 8010f62:	1a36      	subs	r6, r6, r0
 8010f64:	f1c5 0007 	rsb	r0, r5, #7
 8010f68:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010f6c:	4106      	asrs	r6, r0
 8010f6e:	2e00      	cmp	r6, #0
 8010f70:	dd3c      	ble.n	8010fec <__kernel_rem_pio2f+0x1c0>
 8010f72:	f04f 0e00 	mov.w	lr, #0
 8010f76:	f109 0901 	add.w	r9, r9, #1
 8010f7a:	4670      	mov	r0, lr
 8010f7c:	4574      	cmp	r4, lr
 8010f7e:	dc68      	bgt.n	8011052 <__kernel_rem_pio2f+0x226>
 8010f80:	2d00      	cmp	r5, #0
 8010f82:	dd03      	ble.n	8010f8c <__kernel_rem_pio2f+0x160>
 8010f84:	2d01      	cmp	r5, #1
 8010f86:	d074      	beq.n	8011072 <__kernel_rem_pio2f+0x246>
 8010f88:	2d02      	cmp	r5, #2
 8010f8a:	d07d      	beq.n	8011088 <__kernel_rem_pio2f+0x25c>
 8010f8c:	2e02      	cmp	r6, #2
 8010f8e:	d12d      	bne.n	8010fec <__kernel_rem_pio2f+0x1c0>
 8010f90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f94:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010f98:	b340      	cbz	r0, 8010fec <__kernel_rem_pio2f+0x1c0>
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	9306      	str	r3, [sp, #24]
 8010f9e:	f7ff fedf 	bl	8010d60 <scalbnf>
 8010fa2:	9b06      	ldr	r3, [sp, #24]
 8010fa4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010fa8:	e020      	b.n	8010fec <__kernel_rem_pio2f+0x1c0>
 8010faa:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010fae:	3e01      	subs	r6, #1
 8010fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fb8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010fbc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010fc0:	ecac 0a01 	vstmia	ip!, {s0}
 8010fc4:	ed30 0a01 	vldmdb	r0!, {s0}
 8010fc8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010fcc:	e79e      	b.n	8010f0c <__kernel_rem_pio2f+0xe0>
 8010fce:	d105      	bne.n	8010fdc <__kernel_rem_pio2f+0x1b0>
 8010fd0:	1e60      	subs	r0, r4, #1
 8010fd2:	a908      	add	r1, sp, #32
 8010fd4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010fd8:	11f6      	asrs	r6, r6, #7
 8010fda:	e7c8      	b.n	8010f6e <__kernel_rem_pio2f+0x142>
 8010fdc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010fe0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe8:	da31      	bge.n	801104e <__kernel_rem_pio2f+0x222>
 8010fea:	2600      	movs	r6, #0
 8010fec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff4:	f040 8098 	bne.w	8011128 <__kernel_rem_pio2f+0x2fc>
 8010ff8:	1e60      	subs	r0, r4, #1
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	4550      	cmp	r0, sl
 8010ffe:	da4b      	bge.n	8011098 <__kernel_rem_pio2f+0x26c>
 8011000:	2a00      	cmp	r2, #0
 8011002:	d065      	beq.n	80110d0 <__kernel_rem_pio2f+0x2a4>
 8011004:	3c01      	subs	r4, #1
 8011006:	ab08      	add	r3, sp, #32
 8011008:	3d08      	subs	r5, #8
 801100a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d0f8      	beq.n	8011004 <__kernel_rem_pio2f+0x1d8>
 8011012:	4628      	mov	r0, r5
 8011014:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011018:	f7ff fea2 	bl	8010d60 <scalbnf>
 801101c:	1c63      	adds	r3, r4, #1
 801101e:	aa44      	add	r2, sp, #272	@ 0x110
 8011020:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011120 <__kernel_rem_pio2f+0x2f4>
 8011024:	0099      	lsls	r1, r3, #2
 8011026:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801102a:	4623      	mov	r3, r4
 801102c:	2b00      	cmp	r3, #0
 801102e:	f280 80a9 	bge.w	8011184 <__kernel_rem_pio2f+0x358>
 8011032:	4623      	mov	r3, r4
 8011034:	2b00      	cmp	r3, #0
 8011036:	f2c0 80c7 	blt.w	80111c8 <__kernel_rem_pio2f+0x39c>
 801103a:	aa44      	add	r2, sp, #272	@ 0x110
 801103c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011040:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011118 <__kernel_rem_pio2f+0x2ec>
 8011044:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011124 <__kernel_rem_pio2f+0x2f8>
 8011048:	2000      	movs	r0, #0
 801104a:	1ae2      	subs	r2, r4, r3
 801104c:	e0b1      	b.n	80111b2 <__kernel_rem_pio2f+0x386>
 801104e:	2602      	movs	r6, #2
 8011050:	e78f      	b.n	8010f72 <__kernel_rem_pio2f+0x146>
 8011052:	f852 1b04 	ldr.w	r1, [r2], #4
 8011056:	b948      	cbnz	r0, 801106c <__kernel_rem_pio2f+0x240>
 8011058:	b121      	cbz	r1, 8011064 <__kernel_rem_pio2f+0x238>
 801105a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801105e:	f842 1c04 	str.w	r1, [r2, #-4]
 8011062:	2101      	movs	r1, #1
 8011064:	f10e 0e01 	add.w	lr, lr, #1
 8011068:	4608      	mov	r0, r1
 801106a:	e787      	b.n	8010f7c <__kernel_rem_pio2f+0x150>
 801106c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011070:	e7f5      	b.n	801105e <__kernel_rem_pio2f+0x232>
 8011072:	f104 3cff 	add.w	ip, r4, #4294967295
 8011076:	aa08      	add	r2, sp, #32
 8011078:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801107c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011080:	a908      	add	r1, sp, #32
 8011082:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8011086:	e781      	b.n	8010f8c <__kernel_rem_pio2f+0x160>
 8011088:	f104 3cff 	add.w	ip, r4, #4294967295
 801108c:	aa08      	add	r2, sp, #32
 801108e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011092:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011096:	e7f3      	b.n	8011080 <__kernel_rem_pio2f+0x254>
 8011098:	a908      	add	r1, sp, #32
 801109a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801109e:	3801      	subs	r0, #1
 80110a0:	430a      	orrs	r2, r1
 80110a2:	e7ab      	b.n	8010ffc <__kernel_rem_pio2f+0x1d0>
 80110a4:	3201      	adds	r2, #1
 80110a6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80110aa:	2e00      	cmp	r6, #0
 80110ac:	d0fa      	beq.n	80110a4 <__kernel_rem_pio2f+0x278>
 80110ae:	9905      	ldr	r1, [sp, #20]
 80110b0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80110b4:	eb0d 0001 	add.w	r0, sp, r1
 80110b8:	18e6      	adds	r6, r4, r3
 80110ba:	a91c      	add	r1, sp, #112	@ 0x70
 80110bc:	f104 0c01 	add.w	ip, r4, #1
 80110c0:	384c      	subs	r0, #76	@ 0x4c
 80110c2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80110c6:	4422      	add	r2, r4
 80110c8:	4562      	cmp	r2, ip
 80110ca:	da04      	bge.n	80110d6 <__kernel_rem_pio2f+0x2aa>
 80110cc:	4614      	mov	r4, r2
 80110ce:	e710      	b.n	8010ef2 <__kernel_rem_pio2f+0xc6>
 80110d0:	9804      	ldr	r0, [sp, #16]
 80110d2:	2201      	movs	r2, #1
 80110d4:	e7e7      	b.n	80110a6 <__kernel_rem_pio2f+0x27a>
 80110d6:	9903      	ldr	r1, [sp, #12]
 80110d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80110dc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80110e0:	9105      	str	r1, [sp, #20]
 80110e2:	ee07 1a90 	vmov	s15, r1
 80110e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110ea:	2400      	movs	r4, #0
 80110ec:	ece6 7a01 	vstmia	r6!, {s15}
 80110f0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011124 <__kernel_rem_pio2f+0x2f8>
 80110f4:	46b1      	mov	r9, r6
 80110f6:	455c      	cmp	r4, fp
 80110f8:	dd04      	ble.n	8011104 <__kernel_rem_pio2f+0x2d8>
 80110fa:	ece0 7a01 	vstmia	r0!, {s15}
 80110fe:	f10c 0c01 	add.w	ip, ip, #1
 8011102:	e7e1      	b.n	80110c8 <__kernel_rem_pio2f+0x29c>
 8011104:	ecfe 6a01 	vldmia	lr!, {s13}
 8011108:	ed39 7a01 	vldmdb	r9!, {s14}
 801110c:	3401      	adds	r4, #1
 801110e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011112:	e7f0      	b.n	80110f6 <__kernel_rem_pio2f+0x2ca>
 8011114:	080117ec 	.word	0x080117ec
 8011118:	080117c0 	.word	0x080117c0
 801111c:	43800000 	.word	0x43800000
 8011120:	3b800000 	.word	0x3b800000
 8011124:	00000000 	.word	0x00000000
 8011128:	9b02      	ldr	r3, [sp, #8]
 801112a:	eeb0 0a48 	vmov.f32	s0, s16
 801112e:	eba3 0008 	sub.w	r0, r3, r8
 8011132:	f7ff fe15 	bl	8010d60 <scalbnf>
 8011136:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801111c <__kernel_rem_pio2f+0x2f0>
 801113a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011142:	db19      	blt.n	8011178 <__kernel_rem_pio2f+0x34c>
 8011144:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011120 <__kernel_rem_pio2f+0x2f4>
 8011148:	ee60 7a27 	vmul.f32	s15, s0, s15
 801114c:	aa08      	add	r2, sp, #32
 801114e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011152:	3508      	adds	r5, #8
 8011154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011158:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801115c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011160:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011164:	ee10 3a10 	vmov	r3, s0
 8011168:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801116c:	ee17 3a90 	vmov	r3, s15
 8011170:	3401      	adds	r4, #1
 8011172:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011176:	e74c      	b.n	8011012 <__kernel_rem_pio2f+0x1e6>
 8011178:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801117c:	aa08      	add	r2, sp, #32
 801117e:	ee10 3a10 	vmov	r3, s0
 8011182:	e7f6      	b.n	8011172 <__kernel_rem_pio2f+0x346>
 8011184:	a808      	add	r0, sp, #32
 8011186:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801118a:	9001      	str	r0, [sp, #4]
 801118c:	ee07 0a90 	vmov	s15, r0
 8011190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011194:	3b01      	subs	r3, #1
 8011196:	ee67 7a80 	vmul.f32	s15, s15, s0
 801119a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801119e:	ed62 7a01 	vstmdb	r2!, {s15}
 80111a2:	e743      	b.n	801102c <__kernel_rem_pio2f+0x200>
 80111a4:	ecfc 6a01 	vldmia	ip!, {s13}
 80111a8:	ecb5 7a01 	vldmia	r5!, {s14}
 80111ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80111b0:	3001      	adds	r0, #1
 80111b2:	4550      	cmp	r0, sl
 80111b4:	dc01      	bgt.n	80111ba <__kernel_rem_pio2f+0x38e>
 80111b6:	4290      	cmp	r0, r2
 80111b8:	ddf4      	ble.n	80111a4 <__kernel_rem_pio2f+0x378>
 80111ba:	a858      	add	r0, sp, #352	@ 0x160
 80111bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80111c0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80111c4:	3b01      	subs	r3, #1
 80111c6:	e735      	b.n	8011034 <__kernel_rem_pio2f+0x208>
 80111c8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	dc09      	bgt.n	80111e2 <__kernel_rem_pio2f+0x3b6>
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	dc27      	bgt.n	8011222 <__kernel_rem_pio2f+0x3f6>
 80111d2:	d040      	beq.n	8011256 <__kernel_rem_pio2f+0x42a>
 80111d4:	f009 0007 	and.w	r0, r9, #7
 80111d8:	b059      	add	sp, #356	@ 0x164
 80111da:	ecbd 8b04 	vpop	{d8-d9}
 80111de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111e2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80111e4:	2b03      	cmp	r3, #3
 80111e6:	d1f5      	bne.n	80111d4 <__kernel_rem_pio2f+0x3a8>
 80111e8:	aa30      	add	r2, sp, #192	@ 0xc0
 80111ea:	1f0b      	subs	r3, r1, #4
 80111ec:	4413      	add	r3, r2
 80111ee:	461a      	mov	r2, r3
 80111f0:	4620      	mov	r0, r4
 80111f2:	2800      	cmp	r0, #0
 80111f4:	dc50      	bgt.n	8011298 <__kernel_rem_pio2f+0x46c>
 80111f6:	4622      	mov	r2, r4
 80111f8:	2a01      	cmp	r2, #1
 80111fa:	dc5d      	bgt.n	80112b8 <__kernel_rem_pio2f+0x48c>
 80111fc:	ab30      	add	r3, sp, #192	@ 0xc0
 80111fe:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8011124 <__kernel_rem_pio2f+0x2f8>
 8011202:	440b      	add	r3, r1
 8011204:	2c01      	cmp	r4, #1
 8011206:	dc67      	bgt.n	80112d8 <__kernel_rem_pio2f+0x4ac>
 8011208:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801120c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011210:	2e00      	cmp	r6, #0
 8011212:	d167      	bne.n	80112e4 <__kernel_rem_pio2f+0x4b8>
 8011214:	edc7 6a00 	vstr	s13, [r7]
 8011218:	ed87 7a01 	vstr	s14, [r7, #4]
 801121c:	edc7 7a02 	vstr	s15, [r7, #8]
 8011220:	e7d8      	b.n	80111d4 <__kernel_rem_pio2f+0x3a8>
 8011222:	ab30      	add	r3, sp, #192	@ 0xc0
 8011224:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8011124 <__kernel_rem_pio2f+0x2f8>
 8011228:	440b      	add	r3, r1
 801122a:	4622      	mov	r2, r4
 801122c:	2a00      	cmp	r2, #0
 801122e:	da24      	bge.n	801127a <__kernel_rem_pio2f+0x44e>
 8011230:	b34e      	cbz	r6, 8011286 <__kernel_rem_pio2f+0x45a>
 8011232:	eef1 7a47 	vneg.f32	s15, s14
 8011236:	edc7 7a00 	vstr	s15, [r7]
 801123a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801123e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011242:	aa31      	add	r2, sp, #196	@ 0xc4
 8011244:	2301      	movs	r3, #1
 8011246:	429c      	cmp	r4, r3
 8011248:	da20      	bge.n	801128c <__kernel_rem_pio2f+0x460>
 801124a:	b10e      	cbz	r6, 8011250 <__kernel_rem_pio2f+0x424>
 801124c:	eef1 7a67 	vneg.f32	s15, s15
 8011250:	edc7 7a01 	vstr	s15, [r7, #4]
 8011254:	e7be      	b.n	80111d4 <__kernel_rem_pio2f+0x3a8>
 8011256:	ab30      	add	r3, sp, #192	@ 0xc0
 8011258:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8011124 <__kernel_rem_pio2f+0x2f8>
 801125c:	440b      	add	r3, r1
 801125e:	2c00      	cmp	r4, #0
 8011260:	da05      	bge.n	801126e <__kernel_rem_pio2f+0x442>
 8011262:	b10e      	cbz	r6, 8011268 <__kernel_rem_pio2f+0x43c>
 8011264:	eef1 7a67 	vneg.f32	s15, s15
 8011268:	edc7 7a00 	vstr	s15, [r7]
 801126c:	e7b2      	b.n	80111d4 <__kernel_rem_pio2f+0x3a8>
 801126e:	ed33 7a01 	vldmdb	r3!, {s14}
 8011272:	3c01      	subs	r4, #1
 8011274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011278:	e7f1      	b.n	801125e <__kernel_rem_pio2f+0x432>
 801127a:	ed73 7a01 	vldmdb	r3!, {s15}
 801127e:	3a01      	subs	r2, #1
 8011280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011284:	e7d2      	b.n	801122c <__kernel_rem_pio2f+0x400>
 8011286:	eef0 7a47 	vmov.f32	s15, s14
 801128a:	e7d4      	b.n	8011236 <__kernel_rem_pio2f+0x40a>
 801128c:	ecb2 7a01 	vldmia	r2!, {s14}
 8011290:	3301      	adds	r3, #1
 8011292:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011296:	e7d6      	b.n	8011246 <__kernel_rem_pio2f+0x41a>
 8011298:	ed72 7a01 	vldmdb	r2!, {s15}
 801129c:	edd2 6a01 	vldr	s13, [r2, #4]
 80112a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80112a4:	3801      	subs	r0, #1
 80112a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112aa:	ed82 7a00 	vstr	s14, [r2]
 80112ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112b2:	edc2 7a01 	vstr	s15, [r2, #4]
 80112b6:	e79c      	b.n	80111f2 <__kernel_rem_pio2f+0x3c6>
 80112b8:	ed73 7a01 	vldmdb	r3!, {s15}
 80112bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80112c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80112c4:	3a01      	subs	r2, #1
 80112c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112ca:	ed83 7a00 	vstr	s14, [r3]
 80112ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80112d6:	e78f      	b.n	80111f8 <__kernel_rem_pio2f+0x3cc>
 80112d8:	ed33 7a01 	vldmdb	r3!, {s14}
 80112dc:	3c01      	subs	r4, #1
 80112de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80112e2:	e78f      	b.n	8011204 <__kernel_rem_pio2f+0x3d8>
 80112e4:	eef1 6a66 	vneg.f32	s13, s13
 80112e8:	eeb1 7a47 	vneg.f32	s14, s14
 80112ec:	edc7 6a00 	vstr	s13, [r7]
 80112f0:	ed87 7a01 	vstr	s14, [r7, #4]
 80112f4:	eef1 7a67 	vneg.f32	s15, s15
 80112f8:	e790      	b.n	801121c <__kernel_rem_pio2f+0x3f0>
 80112fa:	bf00      	nop

080112fc <floorf>:
 80112fc:	ee10 3a10 	vmov	r3, s0
 8011300:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011304:	3a7f      	subs	r2, #127	@ 0x7f
 8011306:	2a16      	cmp	r2, #22
 8011308:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801130c:	dc2b      	bgt.n	8011366 <floorf+0x6a>
 801130e:	2a00      	cmp	r2, #0
 8011310:	da12      	bge.n	8011338 <floorf+0x3c>
 8011312:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011378 <floorf+0x7c>
 8011316:	ee30 0a27 	vadd.f32	s0, s0, s15
 801131a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011322:	dd06      	ble.n	8011332 <floorf+0x36>
 8011324:	2b00      	cmp	r3, #0
 8011326:	da24      	bge.n	8011372 <floorf+0x76>
 8011328:	2900      	cmp	r1, #0
 801132a:	4b14      	ldr	r3, [pc, #80]	@ (801137c <floorf+0x80>)
 801132c:	bf08      	it	eq
 801132e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011332:	ee00 3a10 	vmov	s0, r3
 8011336:	4770      	bx	lr
 8011338:	4911      	ldr	r1, [pc, #68]	@ (8011380 <floorf+0x84>)
 801133a:	4111      	asrs	r1, r2
 801133c:	420b      	tst	r3, r1
 801133e:	d0fa      	beq.n	8011336 <floorf+0x3a>
 8011340:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011378 <floorf+0x7c>
 8011344:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011348:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011350:	ddef      	ble.n	8011332 <floorf+0x36>
 8011352:	2b00      	cmp	r3, #0
 8011354:	bfbe      	ittt	lt
 8011356:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801135a:	fa40 f202 	asrlt.w	r2, r0, r2
 801135e:	189b      	addlt	r3, r3, r2
 8011360:	ea23 0301 	bic.w	r3, r3, r1
 8011364:	e7e5      	b.n	8011332 <floorf+0x36>
 8011366:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801136a:	d3e4      	bcc.n	8011336 <floorf+0x3a>
 801136c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011370:	4770      	bx	lr
 8011372:	2300      	movs	r3, #0
 8011374:	e7dd      	b.n	8011332 <floorf+0x36>
 8011376:	bf00      	nop
 8011378:	7149f2ca 	.word	0x7149f2ca
 801137c:	bf800000 	.word	0xbf800000
 8011380:	007fffff 	.word	0x007fffff

08011384 <_init>:
 8011384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011386:	bf00      	nop
 8011388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801138a:	bc08      	pop	{r3}
 801138c:	469e      	mov	lr, r3
 801138e:	4770      	bx	lr

08011390 <_fini>:
 8011390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011392:	bf00      	nop
 8011394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011396:	bc08      	pop	{r3}
 8011398:	469e      	mov	lr, r3
 801139a:	4770      	bx	lr
