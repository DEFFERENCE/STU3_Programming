
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd0  08007dd0  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007dd0  08007dd0  00008dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dd8  08007dd8  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dd8  08007dd8  00008dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ddc  08007ddc  00008ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007de0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  2000005c  08007e3c  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  08007e3c  00009abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0f1  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e76  00000000  00000000  0002417d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00026ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001228  00000000  00000000  00028720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cc6  00000000  00000000  00029948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8ad  00000000  00000000  0002c60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115fb8  00000000  00000000  00046ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ce73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006690  00000000  00000000  0015ceb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00163548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d78 	.word	0x08007d78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08007d78 	.word	0x08007d78

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0
 800054a:	6178      	str	r0, [r7, #20]
 800054c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000550:	edc7 0a03 	vstr	s1, [r7, #12]
 8000554:	ed87 1a02 	vstr	s2, [r7, #8]
 8000558:	edc7 1a01 	vstr	s3, [r7, #4]
 800055c:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8000560:	ed97 7a03 	vldr	s14, [r7, #12]
 8000564:	edd7 7a04 	vldr	s15, [r7, #16]
 8000568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800056c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8000570:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057c:	db02      	blt.n	8000584 <InitTrajectorySegment+0x40>
 800057e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000582:	e000      	b.n	8000586 <InitTrajectorySegment+0x42>
 8000584:	4b43      	ldr	r3, [pc, #268]	@ (8000694 <InitTrajectorySegment+0x150>)
 8000586:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8000588:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800058c:	eef0 7ae7 	vabs.f32	s15, s15
 8000590:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8000594:	edd7 6a02 	vldr	s13, [r7, #8]
 8000598:	ed97 7a01 	vldr	s14, [r7, #4]
 800059c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005a0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 80005a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80005ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005b0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80005b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005b8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80005bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005c0:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 80005c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80005c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005cc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80005d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d8:	d517      	bpl.n	800060a <InitTrajectorySegment+0xc6>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 80005da:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80005de:	edd7 7a01 	vldr	s15, [r7, #4]
 80005e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80005e6:	eeb0 0a66 	vmov.f32	s0, s13
 80005ea:	f007 fba3 	bl	8007d34 <sqrtf>
 80005ee:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	f04f 0200 	mov.w	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 80005fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80005fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	edc3 7a07 	vstr	s15, [r3, #28]
 8000608:	e01e      	b.n	8000648 <InitTrajectorySegment+0x104>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 800060a:	edd7 7a08 	vldr	s15, [r7, #32]
 800060e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000612:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800061a:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 800061e:	edd7 6a07 	vldr	s13, [r7, #28]
 8000622:	ed97 7a02 	vldr	s14, [r7, #8]
 8000626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8000630:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000634:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	edd3 7a05 	vldr	s15, [r3, #20]
 800063e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	edc3 7a07 	vstr	s15, [r3, #28]
    }

    seg->start_pos = start;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	605a      	str	r2, [r3, #4]
    seg->v_max = v_max * dir;
 8000654:	ed97 7a02 	vldr	s14, [r7, #8]
 8000658:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800065c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	edc3 7a02 	vstr	s15, [r3, #8]
    seg->a_max = a_max * dir;
 8000666:	ed97 7a01 	vldr	s14, [r7, #4]
 800066a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800066e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800067c:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000682:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	621a      	str	r2, [r3, #32]
}
 800068a:	bf00      	nop
 800068c:	3730      	adds	r7, #48	@ 0x30
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	bf800000 	.word	0xbf800000

08000698 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8000698:	b480      	push	{r7}
 800069a:	b08f      	sub	sp, #60	@ 0x3c
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80006aa:	ed97 7a00 	vldr	s14, [r7]
 80006ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 80006b6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80006ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c2:	d503      	bpl.n	80006cc <GetTrajectoryPosition+0x34>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	edd3 7a00 	vldr	s15, [r3]
 80006ca:	e0b4      	b.n	8000836 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80006d2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80006d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006de:	db03      	blt.n	80006e8 <GetTrajectoryPosition+0x50>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80006e6:	e0a6      	b.n	8000836 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000700:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070c:	d512      	bpl.n	8000734 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 800070e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000712:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000716:	ee27 7a87 	vmul.f32	s14, s15, s14
 800071a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800071e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000722:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800072a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800072e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000732:	e080      	b.n	8000836 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	ed93 7a04 	vldr	s14, [r3, #16]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000744:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000750:	d525      	bpl.n	800079e <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8000758:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800075c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000764:	edd7 7a04 	vldr	s15, [r7, #16]
 8000768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800076c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000774:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077c:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8000780:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000784:	edd7 7a04 	vldr	s15, [r7, #16]
 8000788:	ee37 7a67 	vsub.f32	s14, s14, s15
 800078c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000794:	edd7 7a03 	vldr	s15, [r7, #12]
 8000798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800079c:	e04b      	b.n	8000836 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80007aa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80007ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80007b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80007ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80007c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80007ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ce:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 80007d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80007d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80007da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007de:	ed97 7a07 	vldr	s14, [r7, #28]
 80007e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e6:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 80007ea:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80007ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80007f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80007fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007fe:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 8000802:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000806:	edd7 7a05 	vldr	s15, [r7, #20]
 800080a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800080e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000816:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800081a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800081e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000822:	edd7 7a05 	vldr	s15, [r7, #20]
 8000826:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800082a:	edd7 7a05 	vldr	s15, [r7, #20]
 800082e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000832:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8000836:	eeb0 0a67 	vmov.f32	s0, s15
 800083a:	373c      	adds	r7, #60	@ 0x3c
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	edd3 7a08 	vldr	s15, [r3, #32]
 8000856:	ed97 7a00 	vldr	s14, [r7]
 800085a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800085e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8000862:	edd7 7a05 	vldr	s15, [r7, #20]
 8000866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800086a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086e:	d502      	bpl.n	8000876 <GetTrajectoryVelocity+0x32>
 8000870:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8000920 <GetTrajectoryVelocity+0xdc>
 8000874:	e04d      	b.n	8000912 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	edd3 7a07 	vldr	s15, [r3, #28]
 800087c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000888:	db02      	blt.n	8000890 <GetTrajectoryVelocity+0x4c>
 800088a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8000920 <GetTrajectoryVelocity+0xdc>
 800088e:	e040      	b.n	8000912 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	edd3 7a04 	vldr	s15, [r3, #16]
 80008a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80008a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ae:	d506      	bpl.n	80008be <GetTrajectoryVelocity+0x7a>
        return a * t;
 80008b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80008b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80008b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008bc:	e029      	b.n	8000912 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80008ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80008d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008da:	d502      	bpl.n	80008e2 <GetTrajectoryVelocity+0x9e>
        return v;
 80008dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e0:	e017      	b.n	8000912 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80008e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80008ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80008f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008fa:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 80008fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8000902:	edd7 7a02 	vldr	s15, [r7, #8]
 8000906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800090a:	ed97 7a03 	vldr	s14, [r7, #12]
 800090e:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8000912:	eeb0 0a67 	vmov.f32	s0, s15
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	00000000 	.word	0x00000000

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f001 fa15 	bl	8001d56 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f8d0 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 fd84 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 8000934:	f000 fd58 	bl	80013e8 <MX_DMA_Init>
  MX_TIM3_Init();
 8000938:	f000 fa70 	bl	8000e1c <MX_TIM3_Init>
  MX_ADC1_Init();
 800093c:	f000 f914 	bl	8000b68 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000940:	f000 f9ca 	bl	8000cd8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000944:	f000 fa1c 	bl	8000d80 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000948:	f000 fabe 	bl	8000ec8 <MX_TIM4_Init>
  MX_TIM20_Init();
 800094c:	f000 fc42 	bl	80011d4 <MX_TIM20_Init>
  MX_TIM8_Init();
 8000950:	f000 fb10 	bl	8000f74 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000954:	f000 fbbe 	bl	80010d4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000958:	f000 fcf8 	bl	800134c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800095c:	f000 f97e 	bl	8000c5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//	Encoder_Init(&encoder1, &htim4);
//	Encoder_Init(&encoder2, &htim3);
//
	InitTrajectorySegment(&segments[0], 0.0f, 100.0f, 50.0f, 100.0f, 0.0f);
 8000960:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8000a90 <main+0x16c>
 8000964:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8000a94 <main+0x170>
 8000968:	ed9f 1a4b 	vldr	s2, [pc, #300]	@ 8000a98 <main+0x174>
 800096c:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8000a94 <main+0x170>
 8000970:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8000a90 <main+0x16c>
 8000974:	4849      	ldr	r0, [pc, #292]	@ (8000a9c <main+0x178>)
 8000976:	f7ff fde5 	bl	8000544 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[1], 100.0f, 50.0f, 40.0f, 80.0f, segments[0].t_start + segments[0].t_total);
 800097a:	4b48      	ldr	r3, [pc, #288]	@ (8000a9c <main+0x178>)
 800097c:	ed93 7a08 	vldr	s14, [r3, #32]
 8000980:	4b46      	ldr	r3, [pc, #280]	@ (8000a9c <main+0x178>)
 8000982:	edd3 7a07 	vldr	s15, [r3, #28]
 8000986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800098a:	eeb0 2a67 	vmov.f32	s4, s15
 800098e:	eddf 1a44 	vldr	s3, [pc, #272]	@ 8000aa0 <main+0x17c>
 8000992:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 8000aa4 <main+0x180>
 8000996:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8000a98 <main+0x174>
 800099a:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8000a94 <main+0x170>
 800099e:	4842      	ldr	r0, [pc, #264]	@ (8000aa8 <main+0x184>)
 80009a0:	f7ff fdd0 	bl	8000544 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[2], 50.0f, 200.0f, 60.0f, 120.0f, segments[1].t_start + segments[1].t_total);
 80009a4:	4b3d      	ldr	r3, [pc, #244]	@ (8000a9c <main+0x178>)
 80009a6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80009aa:	4b3c      	ldr	r3, [pc, #240]	@ (8000a9c <main+0x178>)
 80009ac:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80009b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b4:	eeb0 2a67 	vmov.f32	s4, s15
 80009b8:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 8000aac <main+0x188>
 80009bc:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8000ab0 <main+0x18c>
 80009c0:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8000ab4 <main+0x190>
 80009c4:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8000a98 <main+0x174>
 80009c8:	483b      	ldr	r0, [pc, #236]	@ (8000ab8 <main+0x194>)
 80009ca:	f7ff fdbb 	bl	8000544 <InitTrajectorySegment>
//			a2 = Encoder_GetAcceleration(&encoder2);

// Now use p1,v1,a1 and p2,v2,a2 as needed
		//}

		t_global = HAL_GetTick() / 1000.0f;
 80009ce:	f001 fa27 	bl	8001e20 <HAL_GetTick>
 80009d2:	ee07 0a90 	vmov	s15, r0
 80009d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000abc <main+0x198>
 80009de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e2:	4b37      	ldr	r3, [pc, #220]	@ (8000ac0 <main+0x19c>)
 80009e4:	edc3 7a00 	vstr	s15, [r3]
		pos = GetTrajectoryPosition(&segments[current_segment], t_global);
 80009e8:	4b36      	ldr	r3, [pc, #216]	@ (8000ac4 <main+0x1a0>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4613      	mov	r3, r2
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	4413      	add	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4a29      	ldr	r2, [pc, #164]	@ (8000a9c <main+0x178>)
 80009f6:	4413      	add	r3, r2
 80009f8:	4a31      	ldr	r2, [pc, #196]	@ (8000ac0 <main+0x19c>)
 80009fa:	edd2 7a00 	vldr	s15, [r2]
 80009fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fe48 	bl	8000698 <GetTrajectoryPosition>
 8000a08:	eef0 7a40 	vmov.f32	s15, s0
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <main+0x1a4>)
 8000a0e:	edc3 7a00 	vstr	s15, [r3]
		vel = GetTrajectoryVelocity(&segments[current_segment], t_global);
 8000a12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <main+0x1a0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4613      	mov	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	4413      	add	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a9c <main+0x178>)
 8000a20:	4413      	add	r3, r2
 8000a22:	4a27      	ldr	r2, [pc, #156]	@ (8000ac0 <main+0x19c>)
 8000a24:	edd2 7a00 	vldr	s15, [r2]
 8000a28:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff09 	bl	8000844 <GetTrajectoryVelocity>
 8000a32:	eef0 7a40 	vmov.f32	s15, s0
 8000a36:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <main+0x1a8>)
 8000a38:	edc3 7a00 	vstr	s15, [r3]
		// ถ้าจบ segment ปัจจุบันให้ข้ามไปอันถัดไป
		if (t_global > segments[current_segment].t_start + segments[current_segment].t_total) {
 8000a3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <main+0x1a0>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4916      	ldr	r1, [pc, #88]	@ (8000a9c <main+0x178>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3320      	adds	r3, #32
 8000a4e:	ed93 7a00 	vldr	s14, [r3]
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <main+0x1a0>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4911      	ldr	r1, [pc, #68]	@ (8000a9c <main+0x178>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	440b      	add	r3, r1
 8000a62:	331c      	adds	r3, #28
 8000a64:	edd3 7a00 	vldr	s15, [r3]
 8000a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <main+0x19c>)
 8000a6e:	edd3 7a00 	vldr	s15, [r3]
 8000a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7a:	d508      	bpl.n	8000a8e <main+0x16a>
			if (current_segment < MAX_SEGMENTS - 1) {
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <main+0x1a0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	dca4      	bgt.n	80009ce <main+0xaa>
				current_segment++;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <main+0x1a0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <main+0x1a0>)
 8000a8c:	6013      	str	r3, [r2, #0]
		t_global = HAL_GetTick() / 1000.0f;
 8000a8e:	e79e      	b.n	80009ce <main+0xaa>
 8000a90:	00000000 	.word	0x00000000
 8000a94:	42c80000 	.word	0x42c80000
 8000a98:	42480000 	.word	0x42480000
 8000a9c:	20000810 	.word	0x20000810
 8000aa0:	42a00000 	.word	0x42a00000
 8000aa4:	42200000 	.word	0x42200000
 8000aa8:	20000834 	.word	0x20000834
 8000aac:	42f00000 	.word	0x42f00000
 8000ab0:	42700000 	.word	0x42700000
 8000ab4:	43480000 	.word	0x43480000
 8000ab8:	20000858 	.word	0x20000858
 8000abc:	447a0000 	.word	0x447a0000
 8000ac0:	2000097c 	.word	0x2000097c
 8000ac4:	20000978 	.word	0x20000978
 8000ac8:	20000808 	.word	0x20000808
 8000acc:	2000080c 	.word	0x2000080c

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	@ 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	2238      	movs	r2, #56	@ 0x38
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f007 f8f6 	bl	8007cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f002 ffe8 	bl	8003ac8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b02:	2340      	movs	r3, #64	@ 0x40
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b12:	2355      	movs	r3, #85	@ 0x55
 8000b14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 f882 	bl	8003c30 <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b32:	f000 fd3b 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 fb80 	bl	8004254 <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b5a:	f000 fd27 	bl	80015ac <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3750      	adds	r7, #80	@ 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	@ 0x30
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 f8a5 	bl	8007cd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b86:	4b32      	ldr	r3, [pc, #200]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000b88:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b8e:	4b30      	ldr	r3, [pc, #192]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000b90:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b96:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bae:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bb4:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bba:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000bc0:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc6:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf0:	4817      	ldr	r0, [pc, #92]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000bf2:	f001 faf7 	bl	80021e4 <HAL_ADC_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bfc:	f000 fcd6 	bl	80015ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4811      	ldr	r0, [pc, #68]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000c0c:	f002 f90c 	bl	8002e28 <HAL_ADCEx_MultiModeConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c16:	f000 fcc9 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_ADC1_Init+0xec>)
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_ADC1_Init+0xf0>)
 8000c28:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <MX_ADC1_Init+0xe8>)
 8000c38:	f001 fc90 	bl	800255c <HAL_ADC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c42:	f000 fcb3 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000078 	.word	0x20000078
 8000c54:	04300002 	.word	0x04300002
 8000c58:	407f0000 	.word	0x407f0000

08000c5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <MX_SPI1_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c92:	2238      	movs	r2, #56	@ 0x38
 8000c94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c98:	2280      	movs	r2, #128	@ 0x80
 8000c9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000caa:	2207      	movs	r2, #7
 8000cac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_SPI1_Init+0x74>)
 8000cbc:	f003 ff34 	bl	8004b28 <HAL_SPI_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 fc71 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000e4 	.word	0x200000e4
 8000cd4:	40013000 	.word	0x40013000

08000cd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000cf8:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <MX_TIM1_Init+0xa4>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000d0a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d22:	4815      	ldr	r0, [pc, #84]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000d24:	f003 ffac 	bl	8004c80 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d2e:	f000 fc3d 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480e      	ldr	r0, [pc, #56]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000d40:	f004 fd02 	bl	8005748 <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d4a:	f000 fc2f 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <MX_TIM1_Init+0xa0>)
 8000d60:	f005 fb5c 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d6a:	f000 fc1f 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000148 	.word	0x20000148
 8000d7c:	40012c00 	.word	0x40012c00

08000d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc6:	4814      	ldr	r0, [pc, #80]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000dc8:	f003 ff5a 	bl	8004c80 <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dd2:	f000 fbeb 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000de4:	f004 fcb0 	bl	8005748 <HAL_TIM_ConfigClockSource>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dee:	f000 fbdd 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <MX_TIM2_Init+0x98>)
 8000e00:	f005 fb0c 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e0a:	f000 fbcf 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000214 	.word	0x20000214

08000e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	@ 0x30
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2224      	movs	r2, #36	@ 0x24
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 ff50 	bl	8007cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e3c:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <MX_TIM3_Init+0xa8>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e4e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e60:	2303      	movs	r3, #3
 8000e62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e8c:	f004 f8a0 	bl	8004fd0 <HAL_TIM_Encoder_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e96:	f000 fb89 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000ea8:	f005 fab8 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000eb2:	f000 fb7b 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	3730      	adds	r7, #48	@ 0x30
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200002e0 	.word	0x200002e0
 8000ec4:	40000400 	.word	0x40000400

08000ec8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2224      	movs	r2, #36	@ 0x24
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f006 fefa 	bl	8007cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_TIM4_Init+0xa4>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <MX_TIM4_Init+0xa8>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <MX_TIM4_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_TIM4_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <MX_TIM4_Init+0xa4>)
 8000efa:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000efe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <MX_TIM4_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_TIM4_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f14:	2301      	movs	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f24:	2301      	movs	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <MX_TIM4_Init+0xa4>)
 8000f38:	f004 f84a 	bl	8004fd0 <HAL_TIM_Encoder_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f42:	f000 fb33 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <MX_TIM4_Init+0xa4>)
 8000f54:	f005 fa62 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f5e:	f000 fb25 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3730      	adds	r7, #48	@ 0x30
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200003ac 	.word	0x200003ac
 8000f70:	40000800 	.word	0x40000800

08000f74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b09c      	sub	sp, #112	@ 0x70
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2234      	movs	r2, #52	@ 0x34
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 fe8e 	bl	8007cd0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fb4:	4b45      	ldr	r3, [pc, #276]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000fb6:	4a46      	ldr	r2, [pc, #280]	@ (80010d0 <MX_TIM8_Init+0x15c>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fba:	4b44      	ldr	r3, [pc, #272]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b42      	ldr	r3, [pc, #264]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000fc6:	4b41      	ldr	r3, [pc, #260]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fcc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b3f      	ldr	r3, [pc, #252]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b3c      	ldr	r3, [pc, #240]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fe0:	483a      	ldr	r0, [pc, #232]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000fe2:	f003 fe4d 	bl	8004c80 <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000fec:	f000 fade 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ff6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4833      	ldr	r0, [pc, #204]	@ (80010cc <MX_TIM8_Init+0x158>)
 8000ffe:	f004 fba3 	bl	8005748 <HAL_TIM_ConfigClockSource>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001008:	f000 fad0 	bl	80015ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800100c:	482f      	ldr	r0, [pc, #188]	@ (80010cc <MX_TIM8_Init+0x158>)
 800100e:	f003 ff09 	bl	8004e24 <HAL_TIM_PWM_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001018:	f000 fac8 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001028:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800102c:	4619      	mov	r1, r3
 800102e:	4827      	ldr	r0, [pc, #156]	@ (80010cc <MX_TIM8_Init+0x158>)
 8001030:	f005 f9f4 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800103a:	f000 fab7 	bl	80015ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103e:	2360      	movs	r3, #96	@ 0x60
 8001040:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001046:	2300      	movs	r3, #0
 8001048:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800104a:	2300      	movs	r3, #0
 800104c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800105a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800105e:	220c      	movs	r2, #12
 8001060:	4619      	mov	r1, r3
 8001062:	481a      	ldr	r0, [pc, #104]	@ (80010cc <MX_TIM8_Init+0x158>)
 8001064:	f004 fa5c 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800106e:	f000 fa9d 	bl	80015ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001086:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001098:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	@ (80010cc <MX_TIM8_Init+0x158>)
 80010b0:	f005 fa4a 	bl	8006548 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80010ba:	f000 fa77 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010be:	4803      	ldr	r0, [pc, #12]	@ (80010cc <MX_TIM8_Init+0x158>)
 80010c0:	f000 fc86 	bl	80019d0 <HAL_TIM_MspPostInit>

}
 80010c4:	bf00      	nop
 80010c6:	3770      	adds	r7, #112	@ 0x70
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000478 	.word	0x20000478
 80010d0:	40013400 	.word	0x40013400

080010d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	@ 0x50
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2234      	movs	r2, #52	@ 0x34
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f006 fdeb 	bl	8007cd0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010fa:	4b34      	ldr	r3, [pc, #208]	@ (80011cc <MX_TIM16_Init+0xf8>)
 80010fc:	4a34      	ldr	r2, [pc, #208]	@ (80011d0 <MX_TIM16_Init+0xfc>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001100:	4b32      	ldr	r3, [pc, #200]	@ (80011cc <MX_TIM16_Init+0xf8>)
 8001102:	22a9      	movs	r2, #169	@ 0xa9
 8001104:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b31      	ldr	r3, [pc, #196]	@ (80011cc <MX_TIM16_Init+0xf8>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 800110c:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <MX_TIM16_Init+0xf8>)
 800110e:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001112:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <MX_TIM16_Init+0xf8>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800111a:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <MX_TIM16_Init+0xf8>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <MX_TIM16_Init+0xf8>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001126:	4829      	ldr	r0, [pc, #164]	@ (80011cc <MX_TIM16_Init+0xf8>)
 8001128:	f003 fdaa 	bl	8004c80 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001132:	f000 fa3b 	bl	80015ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001136:	4825      	ldr	r0, [pc, #148]	@ (80011cc <MX_TIM16_Init+0xf8>)
 8001138:	f003 fe06 	bl	8004d48 <HAL_TIM_OC_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001142:	f000 fa33 	bl	80015ac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001146:	2108      	movs	r1, #8
 8001148:	4820      	ldr	r0, [pc, #128]	@ (80011cc <MX_TIM16_Init+0xf8>)
 800114a:	f003 fed9 	bl	8004f00 <HAL_TIM_OnePulse_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001154:	f000 fa2a 	bl	80015ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001158:	2310      	movs	r3, #16
 800115a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 800115c:	f240 5399 	movw	r3, #1433	@ 0x599
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001162:	2300      	movs	r3, #0
 8001164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001176:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	4813      	ldr	r0, [pc, #76]	@ (80011cc <MX_TIM16_Init+0xf8>)
 8001180:	f004 f954 	bl	800542c <HAL_TIM_OC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 800118a:	f000 fa0f 	bl	80015ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_TIM16_Init+0xf8>)
 80011b6:	f005 f9c7 	bl	8006548 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 80011c0:	f000 f9f4 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	@ 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000544 	.word	0x20000544
 80011d0:	40014400 	.word	0x40014400

080011d4 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b09c      	sub	sp, #112	@ 0x70
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2234      	movs	r2, #52	@ 0x34
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f006 fd5e 	bl	8007cd0 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001214:	4b4b      	ldr	r3, [pc, #300]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001216:	4a4c      	ldr	r2, [pc, #304]	@ (8001348 <MX_TIM20_Init+0x174>)
 8001218:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 800121a:	4b4a      	ldr	r3, [pc, #296]	@ (8001344 <MX_TIM20_Init+0x170>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b48      	ldr	r3, [pc, #288]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001226:	4b47      	ldr	r3, [pc, #284]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001228:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800122c:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b45      	ldr	r3, [pc, #276]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001234:	4b43      	ldr	r3, [pc, #268]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <MX_TIM20_Init+0x170>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001240:	4840      	ldr	r0, [pc, #256]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001242:	f003 fd1d 	bl	8004c80 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 800124c:	f000 f9ae 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001254:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800125a:	4619      	mov	r1, r3
 800125c:	4839      	ldr	r0, [pc, #228]	@ (8001344 <MX_TIM20_Init+0x170>)
 800125e:	f004 fa73 	bl	8005748 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001268:	f000 f9a0 	bl	80015ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 800126c:	4835      	ldr	r0, [pc, #212]	@ (8001344 <MX_TIM20_Init+0x170>)
 800126e:	f003 fdd9 	bl	8004e24 <HAL_TIM_PWM_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001278:	f000 f998 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001288:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800128c:	4619      	mov	r1, r3
 800128e:	482d      	ldr	r0, [pc, #180]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001290:	f005 f8c4 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 800129a:	f000 f987 	bl	80015ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	@ 0x60
 80012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4820      	ldr	r0, [pc, #128]	@ (8001344 <MX_TIM20_Init+0x170>)
 80012c4:	f004 f92c 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 80012ce:	f000 f96d 	bl	80015ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d6:	2208      	movs	r2, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	481a      	ldr	r0, [pc, #104]	@ (8001344 <MX_TIM20_Init+0x170>)
 80012dc:	f004 f920 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 80012e6:	f000 f961 	bl	80015ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001302:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001310:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4807      	ldr	r0, [pc, #28]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001328:	f005 f90e 	bl	8006548 <HAL_TIMEx_ConfigBreakDeadTime>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8001332:	f000 f93b 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <MX_TIM20_Init+0x170>)
 8001338:	f000 fb4a 	bl	80019d0 <HAL_TIM_MspPostInit>

}
 800133c:	bf00      	nop
 800133e:	3770      	adds	r7, #112	@ 0x70
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000610 	.word	0x20000610
 8001348:	40015000 	.word	0x40015000

0800134c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001352:	4a24      	ldr	r2, [pc, #144]	@ (80013e4 <MX_USART2_UART_Init+0x98>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001358:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001360:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001364:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 800136e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001398:	4811      	ldr	r0, [pc, #68]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 800139a:	f005 f9b9 	bl	8006710 <HAL_UART_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 f902 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 80013ac:	f006 fbc5 	bl	8007b3a <HAL_UARTEx_SetTxFifoThreshold>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 f8f9 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 80013be:	f006 fbfa 	bl	8007bb6 <HAL_UARTEx_SetRxFifoThreshold>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80013c8:	f000 f8f0 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_USART2_UART_Init+0x94>)
 80013ce:	f006 fb7b 	bl	8007ac8 <HAL_UARTEx_DisableFifoMode>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80013d8:	f000 f8e8 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200006dc 	.word	0x200006dc
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_DMA_Init+0x50>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f2:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <MX_DMA_Init+0x50>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_DMA_Init+0x50>)
 80013fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140a:	4a0b      	ldr	r2, [pc, #44]	@ (8001438 <MX_DMA_Init+0x50>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6493      	str	r3, [r2, #72]	@ 0x48
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	200b      	movs	r0, #11
 8001424:	f001 fee3 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001428:	200b      	movs	r0, #11
 800142a:	f001 fefa 	bl	8003222 <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <MX_GPIO_Init+0x164>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a52      	ldr	r2, [pc, #328]	@ (80015a0 <MX_GPIO_Init+0x164>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b50      	ldr	r3, [pc, #320]	@ (80015a0 <MX_GPIO_Init+0x164>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b4d      	ldr	r3, [pc, #308]	@ (80015a0 <MX_GPIO_Init+0x164>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a4c      	ldr	r2, [pc, #304]	@ (80015a0 <MX_GPIO_Init+0x164>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b4a      	ldr	r3, [pc, #296]	@ (80015a0 <MX_GPIO_Init+0x164>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <MX_GPIO_Init+0x164>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a46      	ldr	r2, [pc, #280]	@ (80015a0 <MX_GPIO_Init+0x164>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <MX_GPIO_Init+0x164>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b41      	ldr	r3, [pc, #260]	@ (80015a0 <MX_GPIO_Init+0x164>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a40      	ldr	r2, [pc, #256]	@ (80015a0 <MX_GPIO_Init+0x164>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b3e      	ldr	r3, [pc, #248]	@ (80015a0 <MX_GPIO_Init+0x164>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f241 0102 	movw	r1, #4098	@ 0x1002
 80014b8:	483a      	ldr	r0, [pc, #232]	@ (80015a4 <MX_GPIO_Init+0x168>)
 80014ba:	f002 fac9 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014c4:	4838      	ldr	r0, [pc, #224]	@ (80015a8 <MX_GPIO_Init+0x16c>)
 80014c6:	f002 fac3 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_MD20A_24V_Pin DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin;
 80014ca:	f241 0302 	movw	r3, #4098	@ 0x1002
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4830      	ldr	r0, [pc, #192]	@ (80015a4 <MX_GPIO_Init+0x168>)
 80014e4:	f002 f932 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80014e8:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4829      	ldr	r0, [pc, #164]	@ (80015a4 <MX_GPIO_Init+0x168>)
 8001500:	f002 f924 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Prismatic2_Pin;
 8001504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_Switch_Prismatic2_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4822      	ldr	r0, [pc, #136]	@ (80015a4 <MX_GPIO_Init+0x168>)
 800151c:	f002 f916 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8001520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001526:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153a:	f002 f907 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Attention_Pin;
 800153e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PS2_Attention_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_GPIO_Init+0x16c>)
 8001558:	f002 f8f8 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 800155c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001562:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_GPIO_Init+0x16c>)
 8001574:	f002 f8ea 	bl	800374c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2017      	movs	r0, #23
 800157e:	f001 fe36 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001582:	2017      	movs	r0, #23
 8001584:	f001 fe4d 	bl	8003222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2028      	movs	r0, #40	@ 0x28
 800158e:	f001 fe2e 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001592:	2028      	movs	r0, #40	@ 0x28
 8001594:	f001 fe45 	bl	8003222 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	@ 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <Error_Handler+0x8>

080015b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c2:	4a0e      	ldr	r2, [pc, #56]	@ (80015fc <HAL_MspInit+0x44>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <HAL_MspInit+0x44>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ee:	f002 fb0f 	bl	8003c10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09e      	sub	sp, #120	@ 0x78
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2254      	movs	r2, #84	@ 0x54
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fb55 	bl	8007cd0 <memset>
  if(hadc->Instance==ADC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800162e:	d134      	bne.n	800169a <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001630:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001634:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001636:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800163a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f823 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800164c:	f7ff ffae 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_ADC_MspInit+0xa4>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001654:	4a13      	ldr	r2, [pc, #76]	@ (80016a4 <HAL_ADC_MspInit+0xa4>)
 8001656:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800165a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_ADC_MspInit+0xa4>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_ADC_MspInit+0xa4>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <HAL_ADC_MspInit+0xa4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_ADC_MspInit+0xa4>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8001680:	2303      	movs	r3, #3
 8001682:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001684:	2303      	movs	r3, #3
 8001686:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001696:	f002 f859 	bl	800374c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800169a:	bf00      	nop
 800169c:	3778      	adds	r7, #120	@ 0x78
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	@ 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a25      	ldr	r2, [pc, #148]	@ (800175c <HAL_SPI_MspInit+0xb4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d144      	bne.n	8001754 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ca:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	4a24      	ldr	r2, [pc, #144]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 80016d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d6:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 80016d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a18      	ldr	r2, [pc, #96]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <HAL_SPI_MspInit+0xb8>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001712:	2320      	movs	r3, #32
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001722:	2305      	movs	r3, #5
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001730:	f002 f80c 	bl	800374c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001734:	2330      	movs	r3, #48	@ 0x30
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001744:	2305      	movs	r3, #5
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <HAL_SPI_MspInit+0xbc>)
 8001750:	f001 fffc 	bl	800374c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40013000 	.word	0x40013000
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400

08001768 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a39      	ldr	r2, [pc, #228]	@ (800185c <HAL_TIM_Base_MspInit+0xf4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d11c      	bne.n	80017b4 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800177a:	4b39      	ldr	r3, [pc, #228]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177e:	4a38      	ldr	r2, [pc, #224]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 8001780:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001784:	6613      	str	r3, [r2, #96]	@ 0x60
 8001786:	4b36      	ldr	r3, [pc, #216]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2018      	movs	r0, #24
 8001798:	f001 fd29 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800179c:	2018      	movs	r0, #24
 800179e:	f001 fd40 	bl	8003222 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2019      	movs	r0, #25
 80017a8:	f001 fd21 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017ac:	2019      	movs	r0, #25
 80017ae:	f001 fd38 	bl	8003222 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 80017b2:	e04e      	b.n	8001852 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017bc:	d10c      	bne.n	80017d8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017be:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	4a27      	ldr	r2, [pc, #156]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ca:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	69bb      	ldr	r3, [r7, #24]
}
 80017d6:	e03c      	b.n	8001852 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_TIM_Base_MspInit+0xfc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10c      	bne.n	80017fc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 80017e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697b      	ldr	r3, [r7, #20]
}
 80017fa:	e02a      	b.n	8001852 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <HAL_TIM_Base_MspInit+0x100>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d114      	bne.n	8001830 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 800180c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001810:	6613      	str	r3, [r2, #96]	@ 0x60
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2019      	movs	r0, #25
 8001824:	f001 fce3 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001828:	2019      	movs	r0, #25
 800182a:	f001 fcfa 	bl	8003222 <HAL_NVIC_EnableIRQ>
}
 800182e:	e010      	b.n	8001852 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <HAL_TIM_Base_MspInit+0x104>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10b      	bne.n	8001852 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 8001840:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001844:	6613      	str	r3, [r2, #96]	@ 0x60
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_TIM_Base_MspInit+0xf8>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40012c00 	.word	0x40012c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40013400 	.word	0x40013400
 8001868:	40014400 	.word	0x40014400
 800186c:	40015000 	.word	0x40015000

08001870 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	@ 0x38
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4b      	ldr	r2, [pc, #300]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x14c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d145      	bne.n	800191e <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001892:	4b4b      	ldr	r3, [pc, #300]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001896:	4a4a      	ldr	r2, [pc, #296]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6593      	str	r3, [r2, #88]	@ 0x58
 800189e:	4b48      	ldr	r3, [pc, #288]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b45      	ldr	r3, [pc, #276]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	4a44      	ldr	r2, [pc, #272]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b6:	4b42      	ldr	r3, [pc, #264]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b3f      	ldr	r3, [pc, #252]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4a3e      	ldr	r2, [pc, #248]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ce:	4b3c      	ldr	r3, [pc, #240]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 80018da:	2340      	movs	r3, #64	@ 0x40
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ea:	2302      	movs	r3, #2
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f8:	f001 ff28 	bl	800374c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800190c:	2302      	movs	r3, #2
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	482b      	ldr	r0, [pc, #172]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x154>)
 8001918:	f001 ff18 	bl	800374c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800191c:	e04a      	b.n	80019b4 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a29      	ldr	r2, [pc, #164]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0x158>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d145      	bne.n	80019b4 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	4a24      	ldr	r2, [pc, #144]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6593      	str	r3, [r2, #88]	@ 0x58
 8001934:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194c:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8001970:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001982:	230a      	movs	r3, #10
 8001984:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001990:	f001 fedc 	bl	800374c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019a4:	2302      	movs	r3, #2
 80019a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4807      	ldr	r0, [pc, #28]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x15c>)
 80019b0:	f001 fecc 	bl	800374c <HAL_GPIO_Init>
}
 80019b4:	bf00      	nop
 80019b6:	3738      	adds	r7, #56	@ 0x38
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000800 	.word	0x48000800
 80019c8:	40000800 	.word	0x40000800
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a31      	ldr	r2, [pc, #196]	@ (8001ab4 <HAL_TIM_MspPostInit+0xe4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d11d      	bne.n	8001a2e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	4a30      	ldr	r2, [pc, #192]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fe:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8001a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4825      	ldr	r0, [pc, #148]	@ (8001abc <HAL_TIM_MspPostInit+0xec>)
 8001a28:	f001 fe90 	bl	800374c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8001a2c:	e03d      	b.n	8001aaa <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <HAL_TIM_MspPostInit+0xf0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d138      	bne.n	8001aaa <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a44:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_TIM_MspPostInit+0xe8>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4810      	ldr	r0, [pc, #64]	@ (8001ac4 <HAL_TIM_MspPostInit+0xf4>)
 8001a84:	f001 fe62 	bl	800374c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8001a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8001a9a:	2306      	movs	r3, #6
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <HAL_TIM_MspPostInit+0xec>)
 8001aa6:	f001 fe51 	bl	800374c <HAL_GPIO_Init>
}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	@ 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40013400 	.word	0x40013400
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	40015000 	.word	0x40015000
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b09e      	sub	sp, #120	@ 0x78
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2254      	movs	r2, #84	@ 0x54
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 f8f1 	bl	8007cd0 <memset>
  if(huart->Instance==USART2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a37      	ldr	r2, [pc, #220]	@ (8001bd0 <HAL_UART_MspInit+0x108>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d167      	bne.n	8001bc8 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af8:	2302      	movs	r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fdc1 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b10:	f7ff fd4c 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b14:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd4 <HAL_UART_MspInit+0x10c>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b18:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd4 <HAL_UART_MspInit+0x10c>)
 8001b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b20:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <HAL_UART_MspInit+0x10c>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <HAL_UART_MspInit+0x10c>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	4a28      	ldr	r2, [pc, #160]	@ (8001bd4 <HAL_UART_MspInit+0x10c>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b38:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <HAL_UART_MspInit+0x10c>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b44:	230c      	movs	r3, #12
 8001b46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b54:	2307      	movs	r3, #7
 8001b56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b62:	f001 fdf3 	bl	800374c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b68:	4a1c      	ldr	r2, [pc, #112]	@ (8001bdc <HAL_UART_MspInit+0x114>)
 8001b6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b6e:	221b      	movs	r2, #27
 8001b70:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b74:	2210      	movs	r2, #16
 8001b76:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b80:	2280      	movs	r2, #128	@ 0x80
 8001b82:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b9c:	480e      	ldr	r0, [pc, #56]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001b9e:	f001 fb5b 	bl	8003258 <HAL_DMA_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001ba8:	f7ff fd00 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001bb0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <HAL_UART_MspInit+0x110>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2026      	movs	r0, #38	@ 0x26
 8001bbe:	f001 fb16 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bc2:	2026      	movs	r0, #38	@ 0x26
 8001bc4:	f001 fb2d 	bl	8003222 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bc8:	bf00      	nop
 8001bca:	3778      	adds	r7, #120	@ 0x78
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40004400 	.word	0x40004400
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	200007a8 	.word	0x200007a8
 8001bdc:	40020008 	.word	0x40020008

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <NMI_Handler+0x4>

08001be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c36:	f000 f8e1 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <DMA1_Channel1_IRQHandler+0x10>)
 8001c46:	f001 fc6f 	bl	8003528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200007a8 	.word	0x200007a8

08001c54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8001c58:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c5c:	f001 ff10 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001c6a:	f003 fa65 	bl	8005138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000148 	.word	0x20000148

08001c78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c7c:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001c7e:	f003 fa5b 	bl	8005138 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001c82:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001c84:	f003 fa58 	bl	8005138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000148 	.word	0x20000148
 8001c90:	20000544 	.word	0x20000544

08001c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <USART2_IRQHandler+0x10>)
 8001c9a:	f004 fd99 	bl	80067d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200006dc 	.word	0x200006dc

08001ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8001cac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001cb0:	f001 fee6 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8001cb4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001cb8:	f001 fee2 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8001cbc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001cc0:	f001 fede 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 8001cc4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cc8:	f001 feda 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8001ccc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001cd0:	f001 fed6 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8001cd4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001cd8:	f001 fed2 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d04:	480d      	ldr	r0, [pc, #52]	@ (8001d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d08:	f7ff ffea 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d0c:	480c      	ldr	r0, [pc, #48]	@ (8001d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0e:	490d      	ldr	r1, [pc, #52]	@ (8001d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <LoopForever+0xe>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d24:	4c0a      	ldr	r4, [pc, #40]	@ (8001d50 <LoopForever+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d32:	f005 ffdb 	bl	8007cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d36:	f7fe fdf5 	bl	8000924 <main>

08001d3a <LoopForever>:

LoopForever:
    b LoopForever
 8001d3a:	e7fe      	b.n	8001d3a <LoopForever>
  ldr   r0, =_estack
 8001d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d48:	08007de0 	.word	0x08007de0
  ldr r2, =_sbss
 8001d4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d50:	20000abc 	.word	0x20000abc

08001d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC1_2_IRQHandler>

08001d56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f001 fa39 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f80e 	bl	8001d88 <HAL_InitTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	e001      	b.n	8001d7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d78:	f7ff fc1e 	bl	80015b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <HAL_InitTick+0x68>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d022      	beq.n	8001de2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d9c:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_InitTick+0x6c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <HAL_InitTick+0x68>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fa44 	bl	800323e <HAL_SYSTICK_Config>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10f      	bne.n	8001ddc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	d809      	bhi.n	8001dd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dca:	f001 fa10 	bl	80031ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <HAL_InitTick+0x70>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e004      	b.n	8001de6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e001      	b.n	8001de6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_IncTick+0x1c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_IncTick+0x20>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a03      	ldr	r2, [pc, #12]	@ (8001e18 <HAL_IncTick+0x1c>)
 8001e0c:	6013      	str	r3, [r2, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	20000980 	.word	0x20000980
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000980 	.word	0x20000980

08001e38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	609a      	str	r2, [r3, #8]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3360      	adds	r3, #96	@ 0x60
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <LL_ADC_SetOffset+0x44>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	03fff000 	.word	0x03fff000

08001ee8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3360      	adds	r3, #96	@ 0x60
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3360      	adds	r3, #96	@ 0x60
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f3e:	bf00      	nop
 8001f40:	371c      	adds	r7, #28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3360      	adds	r3, #96	@ 0x60
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3360      	adds	r3, #96	@ 0x60
 8001f90:	461a      	mov	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001faa:	bf00      	nop
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	615a      	str	r2, [r3, #20]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3330      	adds	r3, #48	@ 0x30
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	4413      	add	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	211f      	movs	r1, #31
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	f003 011f 	and.w	r1, r3, #31
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	431a      	orrs	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3314      	adds	r3, #20
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	0e5b      	lsrs	r3, r3, #25
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	4413      	add	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0d1b      	lsrs	r3, r3, #20
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	2107      	movs	r1, #7
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	401a      	ands	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	0d1b      	lsrs	r3, r3, #20
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	431a      	orrs	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0318 	and.w	r3, r3, #24
 80020ae:	4908      	ldr	r1, [pc, #32]	@ (80020d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	400b      	ands	r3, r1
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	431a      	orrs	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	0007ffff 	.word	0x0007ffff

080020d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80020e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6093      	str	r3, [r2, #8]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800210c:	d101      	bne.n	8002112 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002134:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800215c:	d101      	bne.n	8002162 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <LL_ADC_IsEnabled+0x18>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <LL_ADC_IsEnabled+0x1a>
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d101      	bne.n	80021ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d101      	bne.n	80021d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1a9      	b.n	8002552 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff f9f7 	bl	8001600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff67 	bl	80020f8 <LL_ADC_IsDeepPowerDownEnabled>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff4d 	bl	80020d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff82 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d115      	bne.n	8002276 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ff66 	bl	8002120 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002254:	4b9c      	ldr	r3, [pc, #624]	@ (80024c8 <HAL_ADC_Init+0x2e4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	4a9c      	ldr	r2, [pc, #624]	@ (80024cc <HAL_ADC_Init+0x2e8>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	3301      	adds	r3, #1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002268:	e002      	b.n	8002270 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3b01      	subs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f9      	bne.n	800226a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff64 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10d      	bne.n	80022a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228a:	f043 0210 	orr.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff75 	bl	8002196 <LL_ADC_REG_IsConversionOngoing>
 80022ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 8142 	bne.w	8002540 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 813e 	bne.w	8002540 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022cc:	f043 0202 	orr.w	r2, r3, #2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff49 	bl	8002170 <LL_ADC_IsEnabled>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d141      	bne.n	8002368 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ec:	d004      	beq.n	80022f8 <HAL_ADC_Init+0x114>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a77      	ldr	r2, [pc, #476]	@ (80024d0 <HAL_ADC_Init+0x2ec>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d10f      	bne.n	8002318 <HAL_ADC_Init+0x134>
 80022f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022fc:	f7ff ff38 	bl	8002170 <LL_ADC_IsEnabled>
 8002300:	4604      	mov	r4, r0
 8002302:	4873      	ldr	r0, [pc, #460]	@ (80024d0 <HAL_ADC_Init+0x2ec>)
 8002304:	f7ff ff34 	bl	8002170 <LL_ADC_IsEnabled>
 8002308:	4603      	mov	r3, r0
 800230a:	4323      	orrs	r3, r4
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e012      	b.n	800233e <HAL_ADC_Init+0x15a>
 8002318:	486e      	ldr	r0, [pc, #440]	@ (80024d4 <HAL_ADC_Init+0x2f0>)
 800231a:	f7ff ff29 	bl	8002170 <LL_ADC_IsEnabled>
 800231e:	4604      	mov	r4, r0
 8002320:	486d      	ldr	r0, [pc, #436]	@ (80024d8 <HAL_ADC_Init+0x2f4>)
 8002322:	f7ff ff25 	bl	8002170 <LL_ADC_IsEnabled>
 8002326:	4603      	mov	r3, r0
 8002328:	431c      	orrs	r4, r3
 800232a:	486c      	ldr	r0, [pc, #432]	@ (80024dc <HAL_ADC_Init+0x2f8>)
 800232c:	f7ff ff20 	bl	8002170 <LL_ADC_IsEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	4323      	orrs	r3, r4
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800234a:	d004      	beq.n	8002356 <HAL_ADC_Init+0x172>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5f      	ldr	r2, [pc, #380]	@ (80024d0 <HAL_ADC_Init+0x2ec>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_ADC_Init+0x176>
 8002356:	4a62      	ldr	r2, [pc, #392]	@ (80024e0 <HAL_ADC_Init+0x2fc>)
 8002358:	e000      	b.n	800235c <HAL_ADC_Init+0x178>
 800235a:	4a62      	ldr	r2, [pc, #392]	@ (80024e4 <HAL_ADC_Init+0x300>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7ff fd68 	bl	8001e38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7f5b      	ldrb	r3, [r3, #29]
 800236c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002372:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002378:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800237e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002386:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002392:	2b01      	cmp	r3, #1
 8002394:	d106      	bne.n	80023a4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	045b      	lsls	r3, r3, #17
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d009      	beq.n	80023c0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b48      	ldr	r3, [pc, #288]	@ (80024e8 <HAL_ADC_Init+0x304>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fee4 	bl	80021bc <LL_ADC_INJ_IsConversionOngoing>
 80023f4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d17f      	bne.n	80024fc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d17c      	bne.n	80024fc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002406:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800240e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800241e:	f023 0302 	bic.w	r3, r3, #2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d017      	beq.n	8002464 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002442:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800244c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6911      	ldr	r1, [r2, #16]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002462:	e013      	b.n	800248c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002472:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002484:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002488:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002492:	2b01      	cmp	r3, #1
 8002494:	d12a      	bne.n	80024ec <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024b8:	430a      	orrs	r2, r1
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	e019      	b.n	80024fc <HAL_ADC_Init+0x318>
 80024c8:	20000000 	.word	0x20000000
 80024cc:	053e2d63 	.word	0x053e2d63
 80024d0:	50000100 	.word	0x50000100
 80024d4:	50000400 	.word	0x50000400
 80024d8:	50000500 	.word	0x50000500
 80024dc:	50000600 	.word	0x50000600
 80024e0:	50000300 	.word	0x50000300
 80024e4:	50000700 	.word	0x50000700
 80024e8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10c      	bne.n	800251e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f023 010f 	bic.w	r1, r3, #15
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30
 800251c:	e007      	b.n	800252e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 020f 	bic.w	r2, r2, #15
 800252c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800253e:	e007      	b.n	8002550 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002544:	f043 0210 	orr.w	r2, r3, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002550:	7ffb      	ldrb	r3, [r7, #31]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	@ 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd90      	pop	{r4, r7, pc}
 800255a:	bf00      	nop

0800255c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0b6      	sub	sp, #216	@ 0xd8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002576:	2b01      	cmp	r3, #1
 8002578:	d102      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x24>
 800257a:	2302      	movs	r3, #2
 800257c:	f000 bc13 	b.w	8002da6 <HAL_ADC_ConfigChannel+0x84a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe02 	bl	8002196 <LL_ADC_REG_IsConversionOngoing>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 83f3 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f7ff fd18 	bl	8001fdc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fdf0 	bl	8002196 <LL_ADC_REG_IsConversionOngoing>
 80025b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fdfc 	bl	80021bc <LL_ADC_INJ_IsConversionOngoing>
 80025c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 81d9 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 81d4 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025e4:	d10f      	bne.n	8002606 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7ff fd1f 	bl	8002034 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fcd9 	bl	8001fb6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002604:	e00e      	b.n	8002624 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	461a      	mov	r2, r3
 8002614:	f7ff fd0e 	bl	8002034 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fcc9 	bl	8001fb6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	08db      	lsrs	r3, r3, #3
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d022      	beq.n	800268c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6919      	ldr	r1, [r3, #16]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002656:	f7ff fc23 	bl	8001ea0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6919      	ldr	r1, [r3, #16]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	461a      	mov	r2, r3
 8002668:	f7ff fc6f 	bl	8001f4a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x126>
 800267c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002680:	e000      	b.n	8002684 <HAL_ADC_ConfigChannel+0x128>
 8002682:	2300      	movs	r3, #0
 8002684:	461a      	mov	r2, r3
 8002686:	f7ff fc7b 	bl	8001f80 <LL_ADC_SetOffsetSaturation>
 800268a:	e17b      	b.n	8002984 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fc28 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x15c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fc1d 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 021f 	and.w	r2, r3, #31
 80026b6:	e01e      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x19a>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc12 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e004      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80026ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <HAL_ADC_ConfigChannel+0x1b2>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	e018      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1e4>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800272a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e004      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002740:	429a      	cmp	r2, r3
 8002742:	d106      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fbe1 	bl	8001f14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fbc5 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_ADC_ConfigChannel+0x222>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fbba 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	e01e      	b.n	80027bc <HAL_ADC_ConfigChannel+0x260>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbaf 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800279c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e004      	b.n	80027ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x278>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	e018      	b.n	8002806 <HAL_ADC_ConfigChannel+0x2aa>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80027e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80027f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e004      	b.n	8002806 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80027fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002806:	429a      	cmp	r2, r3
 8002808:	d106      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	2101      	movs	r1, #1
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fb7e 	bl	8001f14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2102      	movs	r1, #2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fb62 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2e8>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2102      	movs	r1, #2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fb57 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	e01e      	b.n	8002882 <HAL_ADC_ConfigChannel+0x326>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2102      	movs	r1, #2
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fb4c 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002862:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800286a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e004      	b.n	8002880 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002876:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_ADC_ConfigChannel+0x33e>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	e016      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x36c>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e004      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d106      	bne.n	80028da <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fb1d 	bl	8001f14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2103      	movs	r1, #3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fb01 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x3aa>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2103      	movs	r1, #3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff faf6 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	e017      	b.n	8002936 <HAL_ADC_ConfigChannel+0x3da>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff faeb 	bl	8001ee8 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800291e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002920:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002922:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e003      	b.n	8002934 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800292c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_ConfigChannel+0x3f2>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	e011      	b.n	8002972 <HAL_ADC_ConfigChannel+0x416>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800295c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800295e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e003      	b.n	8002972 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800296a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002972:	429a      	cmp	r2, r3
 8002974:	d106      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2200      	movs	r2, #0
 800297c:	2103      	movs	r1, #3
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fac8 	bl	8001f14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fbf1 	bl	8002170 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 813d 	bne.w	8002c10 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff fb72 	bl	800208c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4aa2      	ldr	r2, [pc, #648]	@ (8002c38 <HAL_ADC_ConfigChannel+0x6dc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	f040 812e 	bne.w	8002c10 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x480>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2b09      	cmp	r3, #9
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e019      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x4b4>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80029ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80029ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e003      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80029f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	bf94      	ite	ls
 8002a0a:	2301      	movls	r3, #1
 8002a0c:	2300      	movhi	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d079      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x4d4>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	069b      	lsls	r3, r3, #26
 8002a2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a2e:	e015      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x500>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x520>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0e9b      	lsrs	r3, r3, #26
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	e017      	b.n	8002aac <HAL_ADC_ConfigChannel+0x550>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	ea42 0103 	orr.w	r1, r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x576>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	051b      	lsls	r3, r3, #20
 8002ad0:	e018      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x5a8>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e003      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	430b      	orrs	r3, r1
 8002b06:	e07e      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x5c8>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	069b      	lsls	r3, r3, #26
 8002b1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b22:	e015      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x5f4>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x614>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	e017      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x644>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	61fb      	str	r3, [r7, #28]
  return result;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	ea42 0103 	orr.w	r1, r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x670>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	e01b      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x6a8>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	613b      	str	r3, [r7, #16]
  return result;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e003      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 021f 	and.w	r2, r3, #31
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b1e      	subs	r3, #30
 8002bfe:	051b      	lsls	r3, r3, #20
 8002c00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c04:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f7ff fa12 	bl	8002034 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <HAL_ADC_ConfigChannel+0x6e0>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80be 	beq.w	8002d9a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c26:	d004      	beq.n	8002c32 <HAL_ADC_ConfigChannel+0x6d6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <HAL_ADC_ConfigChannel+0x6e4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10a      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x6ec>
 8002c32:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c34:	e009      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x6ee>
 8002c36:	bf00      	nop
 8002c38:	407f0000 	.word	0x407f0000
 8002c3c:	80080000 	.word	0x80080000
 8002c40:	50000100 	.word	0x50000100
 8002c44:	50000300 	.word	0x50000300
 8002c48:	4b59      	ldr	r3, [pc, #356]	@ (8002db0 <HAL_ADC_ConfigChannel+0x854>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff f91a 	bl	8001e84 <LL_ADC_GetCommonPathInternalCh>
 8002c50:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a56      	ldr	r2, [pc, #344]	@ (8002db4 <HAL_ADC_ConfigChannel+0x858>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x70c>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a55      	ldr	r2, [pc, #340]	@ (8002db8 <HAL_ADC_ConfigChannel+0x85c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d13a      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d134      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c7c:	d005      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x72e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a4e      	ldr	r2, [pc, #312]	@ (8002dbc <HAL_ADC_ConfigChannel+0x860>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	f040 8085 	bne.w	8002d94 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c92:	d004      	beq.n	8002c9e <HAL_ADC_ConfigChannel+0x742>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a49      	ldr	r2, [pc, #292]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x864>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x746>
 8002c9e:	4a49      	ldr	r2, [pc, #292]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x868>)
 8002ca0:	e000      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x748>
 8002ca2:	4a43      	ldr	r2, [pc, #268]	@ (8002db0 <HAL_ADC_ConfigChannel+0x854>)
 8002ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ca8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f7ff f8d5 	bl	8001e5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb4:	4b44      	ldr	r3, [pc, #272]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x86c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	4a44      	ldr	r2, [pc, #272]	@ (8002dcc <HAL_ADC_ConfigChannel+0x870>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cce:	e002      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cdc:	e05a      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x874>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d125      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11f      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x864>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d104      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x7ac>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a34      	ldr	r2, [pc, #208]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x878>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d047      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d10:	d004      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0x7c0>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x864>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x7c4>
 8002d1c:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x868>)
 8002d1e:	e000      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x7c6>
 8002d20:	4a23      	ldr	r2, [pc, #140]	@ (8002db0 <HAL_ADC_ConfigChannel+0x854>)
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f7ff f896 	bl	8001e5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d32:	e031      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a27      	ldr	r2, [pc, #156]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x87c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d12d      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d127      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x864>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d5c:	d004      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0x80c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x864>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x810>
 8002d68:	4a16      	ldr	r2, [pc, #88]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x868>)
 8002d6a:	e000      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x812>
 8002d6c:	4a10      	ldr	r2, [pc, #64]	@ (8002db0 <HAL_ADC_ConfigChannel+0x854>)
 8002d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7ff f870 	bl	8001e5e <LL_ADC_SetCommonPathInternalCh>
 8002d7e:	e00c      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d92:	e002      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002da2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	37d8      	adds	r7, #216	@ 0xd8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	50000700 	.word	0x50000700
 8002db4:	c3210000 	.word	0xc3210000
 8002db8:	90c00010 	.word	0x90c00010
 8002dbc:	50000600 	.word	0x50000600
 8002dc0:	50000100 	.word	0x50000100
 8002dc4:	50000300 	.word	0x50000300
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	053e2d63 	.word	0x053e2d63
 8002dd0:	c7520000 	.word	0xc7520000
 8002dd4:	50000500 	.word	0x50000500
 8002dd8:	cb840000 	.word	0xcb840000

08002ddc <LL_ADC_IsEnabled>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <LL_ADC_IsEnabled+0x18>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <LL_ADC_IsEnabled+0x1a>
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d101      	bne.n	8002e1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b0a1      	sub	sp, #132	@ 0x84
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0e7      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e52:	2300      	movs	r3, #0
 8002e54:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e5e:	d102      	bne.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e60:	4b6f      	ldr	r3, [pc, #444]	@ (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	e009      	b.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d102      	bne.n	8002e76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002e70:	4b6d      	ldr	r3, [pc, #436]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	e001      	b.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0be      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ffb1 	bl	8002e02 <LL_ADC_REG_IsConversionOngoing>
 8002ea0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ffab 	bl	8002e02 <LL_ADC_REG_IsConversionOngoing>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 80a0 	bne.w	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 809c 	bne.w	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ec4:	d004      	beq.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a55      	ldr	r2, [pc, #340]	@ (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ed0:	4b56      	ldr	r3, [pc, #344]	@ (800302c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ed4:	4b56      	ldr	r3, [pc, #344]	@ (8003030 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002ed6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d04b      	beq.n	8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ee0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ef2:	035b      	lsls	r3, r3, #13
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002efa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f04:	d004      	beq.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a45      	ldr	r2, [pc, #276]	@ (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d10f      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002f10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f14:	f7ff ff62 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	4841      	ldr	r0, [pc, #260]	@ (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f1c:	f7ff ff5e 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4323      	orrs	r3, r4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e012      	b.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002f30:	483c      	ldr	r0, [pc, #240]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f32:	f7ff ff53 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f36:	4604      	mov	r4, r0
 8002f38:	483b      	ldr	r0, [pc, #236]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f3a:	f7ff ff4f 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	431c      	orrs	r4, r3
 8002f42:	483c      	ldr	r0, [pc, #240]	@ (8003034 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f44:	f7ff ff4a 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4323      	orrs	r3, r4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d056      	beq.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f62:	f023 030f 	bic.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	6811      	ldr	r1, [r2, #0]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	6892      	ldr	r2, [r2, #8]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	431a      	orrs	r2, r3
 8002f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f74:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f76:	e047      	b.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f82:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8c:	d004      	beq.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a23      	ldr	r2, [pc, #140]	@ (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10f      	bne.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002f98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f9c:	f7ff ff1e 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	481f      	ldr	r0, [pc, #124]	@ (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fa4:	f7ff ff1a 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4323      	orrs	r3, r4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e012      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002fb8:	481a      	ldr	r0, [pc, #104]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fba:	f7ff ff0f 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4819      	ldr	r0, [pc, #100]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fc2:	f7ff ff0b 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	431c      	orrs	r4, r3
 8002fca:	481a      	ldr	r0, [pc, #104]	@ (8003034 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002fcc:	f7ff ff06 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d012      	beq.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fea:	f023 030f 	bic.w	r3, r3, #15
 8002fee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ff0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff2:	e009      	b.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003006:	e000      	b.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003008:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003012:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003016:	4618      	mov	r0, r3
 8003018:	3784      	adds	r7, #132	@ 0x84
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	bf00      	nop
 8003020:	50000100 	.word	0x50000100
 8003024:	50000400 	.word	0x50000400
 8003028:	50000500 	.word	0x50000500
 800302c:	50000300 	.word	0x50000300
 8003030:	50000700 	.word	0x50000700
 8003034:	50000600 	.word	0x50000600

08003038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0c      	ldr	r3, [pc, #48]	@ (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306a:	4a04      	ldr	r2, [pc, #16]	@ (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	60d3      	str	r3, [r2, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	@ (8003098 <__NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	@ (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	@ (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	@ (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	@ 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
         );
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	@ 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a4:	d301      	bcc.n	80031aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031aa:	4a0a      	ldr	r2, [pc, #40]	@ (80031d4 <SysTick_Config+0x40>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b2:	210f      	movs	r1, #15
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f7ff ff8e 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <SysTick_Config+0x40>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <SysTick_Config+0x40>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff29 	bl	8003038 <__NVIC_SetPriorityGrouping>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff40 	bl	8003080 <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff90 	bl	800312c <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5f 	bl	80030d8 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff33 	bl	800309c <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffa4 	bl	8003194 <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e08d      	b.n	8003386 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <HAL_DMA_Init+0x138>)
 8003272:	429a      	cmp	r2, r3
 8003274:	d80f      	bhi.n	8003296 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	4b45      	ldr	r3, [pc, #276]	@ (8003394 <HAL_DMA_Init+0x13c>)
 800327e:	4413      	add	r3, r2
 8003280:	4a45      	ldr	r2, [pc, #276]	@ (8003398 <HAL_DMA_Init+0x140>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	009a      	lsls	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a42      	ldr	r2, [pc, #264]	@ (800339c <HAL_DMA_Init+0x144>)
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40
 8003294:	e00e      	b.n	80032b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	4b40      	ldr	r3, [pc, #256]	@ (80033a0 <HAL_DMA_Init+0x148>)
 800329e:	4413      	add	r3, r2
 80032a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003398 <HAL_DMA_Init+0x140>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	009a      	lsls	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a3c      	ldr	r2, [pc, #240]	@ (80033a4 <HAL_DMA_Init+0x14c>)
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80032ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f9be 	bl	8003688 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003314:	d102      	bne.n	800331c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003330:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d010      	beq.n	800335c <HAL_DMA_Init+0x104>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b04      	cmp	r3, #4
 8003340:	d80c      	bhi.n	800335c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9de 	bl	8003704 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	e008      	b.n	800336e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40020407 	.word	0x40020407
 8003394:	bffdfff8 	.word	0xbffdfff8
 8003398:	cccccccd 	.word	0xcccccccd
 800339c:	40020000 	.word	0x40020000
 80033a0:	bffdfbf8 	.word	0xbffdfbf8
 80033a4:	40020400 	.word	0x40020400

080033a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d005      	beq.n	80033cc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2204      	movs	r2, #4
 80033c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	e037      	b.n	800343c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 020e 	bic.w	r2, r2, #14
 80033da:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ea:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003418:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003430:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800343a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d00d      	beq.n	800348e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2204      	movs	r2, #4
 8003476:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	e047      	b.n	800351e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 020e 	bic.w	r2, r2, #14
 800349c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f003 021f 	and.w	r2, r3, #31
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00c      	beq.n	80034fe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
    }
  }
  return status;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2204      	movs	r2, #4
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d026      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x7a>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d021      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d107      	bne.n	800357c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	2104      	movs	r1, #4
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003594:	2b00      	cmp	r3, #0
 8003596:	d071      	beq.n	800367c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035a0:	e06c      	b.n	800367c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2202      	movs	r2, #2
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02e      	beq.n	8003614 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d029      	beq.n	8003614 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 020a 	bic.w	r2, r2, #10
 80035dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f003 021f 	and.w	r2, r3, #31
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2102      	movs	r1, #2
 80035f4:	fa01 f202 	lsl.w	r2, r1, r2
 80035f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d038      	beq.n	800367c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003612:	e033      	b.n	800367c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2208      	movs	r2, #8
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02a      	beq.n	800367e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d025      	beq.n	800367e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 020e 	bic.w	r2, r2, #14
 8003640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f003 021f 	and.w	r2, r3, #31
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800367c:	bf00      	nop
 800367e:	bf00      	nop
}
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	4b16      	ldr	r3, [pc, #88]	@ (80036f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003698:	429a      	cmp	r2, r3
 800369a:	d802      	bhi.n	80036a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800369c:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e001      	b.n	80036a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80036a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3b08      	subs	r3, #8
 80036b2:	4a12      	ldr	r2, [pc, #72]	@ (80036fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	009a      	lsls	r2, r3, #2
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003700 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80036d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2201      	movs	r2, #1
 80036dc:	409a      	lsls	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40020407 	.word	0x40020407
 80036f4:	40020800 	.word	0x40020800
 80036f8:	40020820 	.word	0x40020820
 80036fc:	cccccccd 	.word	0xcccccccd
 8003700:	40020880 	.word	0x40020880

08003704 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	461a      	mov	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a08      	ldr	r2, [pc, #32]	@ (8003748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003726:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3b01      	subs	r3, #1
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2201      	movs	r2, #1
 8003732:	409a      	lsls	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	1000823f 	.word	0x1000823f
 8003748:	40020940 	.word	0x40020940

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800375a:	e15a      	b.n	8003a12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 814c 	beq.w	8003a0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d005      	beq.n	800378c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003788:	2b02      	cmp	r3, #2
 800378a:	d130      	bne.n	80037ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c2:	2201      	movs	r2, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 0201 	and.w	r2, r3, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d017      	beq.n	800382a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d123      	bne.n	800387e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	08da      	lsrs	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	6939      	ldr	r1, [r7, #16]
 800387a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0203 	and.w	r2, r3, #3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80a6 	beq.w	8003a0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003a30 <HAL_GPIO_Init+0x2e4>)
 80038c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003a30 <HAL_GPIO_Init+0x2e4>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80038cc:	4b58      	ldr	r3, [pc, #352]	@ (8003a30 <HAL_GPIO_Init+0x2e4>)
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d8:	4a56      	ldr	r2, [pc, #344]	@ (8003a34 <HAL_GPIO_Init+0x2e8>)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	220f      	movs	r2, #15
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003902:	d01f      	beq.n	8003944 <HAL_GPIO_Init+0x1f8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a4c      	ldr	r2, [pc, #304]	@ (8003a38 <HAL_GPIO_Init+0x2ec>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d019      	beq.n	8003940 <HAL_GPIO_Init+0x1f4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a4b      	ldr	r2, [pc, #300]	@ (8003a3c <HAL_GPIO_Init+0x2f0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <HAL_GPIO_Init+0x1f0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a4a      	ldr	r2, [pc, #296]	@ (8003a40 <HAL_GPIO_Init+0x2f4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00d      	beq.n	8003938 <HAL_GPIO_Init+0x1ec>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a49      	ldr	r2, [pc, #292]	@ (8003a44 <HAL_GPIO_Init+0x2f8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <HAL_GPIO_Init+0x1e8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a48      	ldr	r2, [pc, #288]	@ (8003a48 <HAL_GPIO_Init+0x2fc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_GPIO_Init+0x1e4>
 800392c:	2305      	movs	r3, #5
 800392e:	e00a      	b.n	8003946 <HAL_GPIO_Init+0x1fa>
 8003930:	2306      	movs	r3, #6
 8003932:	e008      	b.n	8003946 <HAL_GPIO_Init+0x1fa>
 8003934:	2304      	movs	r3, #4
 8003936:	e006      	b.n	8003946 <HAL_GPIO_Init+0x1fa>
 8003938:	2303      	movs	r3, #3
 800393a:	e004      	b.n	8003946 <HAL_GPIO_Init+0x1fa>
 800393c:	2302      	movs	r3, #2
 800393e:	e002      	b.n	8003946 <HAL_GPIO_Init+0x1fa>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_GPIO_Init+0x1fa>
 8003944:	2300      	movs	r3, #0
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	f002 0203 	and.w	r2, r2, #3
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	4093      	lsls	r3, r2
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003956:	4937      	ldr	r1, [pc, #220]	@ (8003a34 <HAL_GPIO_Init+0x2e8>)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	3302      	adds	r3, #2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003964:	4b39      	ldr	r3, [pc, #228]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003988:	4a30      	ldr	r2, [pc, #192]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800398e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039b2:	4a26      	ldr	r2, [pc, #152]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80039b8:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039dc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a06:	4a11      	ldr	r2, [pc, #68]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f47f ae9d 	bne.w	800375c <HAL_GPIO_Init+0x10>
  }
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010000 	.word	0x40010000
 8003a38:	48000400 	.word	0x48000400
 8003a3c:	48000800 	.word	0x48000800
 8003a40:	48000c00 	.word	0x48000c00
 8003a44:	48001000 	.word	0x48001000
 8003a48:	48001400 	.word	0x48001400
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a60:	787b      	ldrb	r3, [r7, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a8a:	4b08      	ldr	r3, [pc, #32]	@ (8003aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d006      	beq.n	8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a96:	4a05      	ldr	r2, [pc, #20]	@ (8003aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f806 	bl	8003ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40010400 	.word	0x40010400

08003ab0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d141      	bne.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae2:	d131      	bne.n	8003b48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae4:	4b47      	ldr	r3, [pc, #284]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aea:	4a46      	ldr	r2, [pc, #280]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af4:	4b43      	ldr	r3, [pc, #268]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003afc:	4a41      	ldr	r2, [pc, #260]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b04:	4b40      	ldr	r3, [pc, #256]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2232      	movs	r2, #50	@ 0x32
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	0c9b      	lsrs	r3, r3, #18
 8003b16:	3301      	adds	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1a:	e002      	b.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b22:	4b38      	ldr	r3, [pc, #224]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2e:	d102      	bne.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f2      	bne.n	8003b1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b36:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b42:	d158      	bne.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e057      	b.n	8003bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b48:	4b2e      	ldr	r3, [pc, #184]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b58:	e04d      	b.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b60:	d141      	bne.n	8003be6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b62:	4b28      	ldr	r3, [pc, #160]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6e:	d131      	bne.n	8003bd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b70:	4b24      	ldr	r3, [pc, #144]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b76:	4a23      	ldr	r2, [pc, #140]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b80:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b88:	4a1e      	ldr	r2, [pc, #120]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b90:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2232      	movs	r2, #50	@ 0x32
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	0c9b      	lsrs	r3, r3, #18
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba6:	e002      	b.n	8003bae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bae:	4b15      	ldr	r3, [pc, #84]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bba:	d102      	bne.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f2      	bne.n	8003ba8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc2:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bce:	d112      	bne.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e011      	b.n	8003bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bda:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003be4:	e007      	b.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003be6:	4b07      	ldr	r3, [pc, #28]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bee:	4a05      	ldr	r2, [pc, #20]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bf4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40007000 	.word	0x40007000
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	431bde83 	.word	0x431bde83

08003c10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c14:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a04      	ldr	r2, [pc, #16]	@ (8003c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c1e:	6093      	str	r3, [r2, #8]
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40007000 	.word	0x40007000

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e2fe      	b.n	8004240 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d075      	beq.n	8003d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4e:	4b97      	ldr	r3, [pc, #604]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c58:	4b94      	ldr	r3, [pc, #592]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d102      	bne.n	8003c6e <HAL_RCC_OscConfig+0x3e>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d002      	beq.n	8003c74 <HAL_RCC_OscConfig+0x44>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	4b8d      	ldr	r3, [pc, #564]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x108>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d157      	bne.n	8003d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e2d9      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x74>
 8003c96:	4b85      	ldr	r3, [pc, #532]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a84      	ldr	r2, [pc, #528]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b7f      	ldr	r3, [pc, #508]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7e      	ldr	r2, [pc, #504]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b7c      	ldr	r3, [pc, #496]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7b      	ldr	r2, [pc, #492]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	4b78      	ldr	r3, [pc, #480]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a77      	ldr	r2, [pc, #476]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b75      	ldr	r3, [pc, #468]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a74      	ldr	r2, [pc, #464]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fe f89a 	bl	8001e20 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fe f896 	bl	8001e20 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	@ 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e29e      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d02:	4b6a      	ldr	r3, [pc, #424]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xc0>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fe f886 	bl	8001e20 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fe f882 	bl	8001e20 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	@ 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e28a      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d2a:	4b60      	ldr	r3, [pc, #384]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0xe8>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d075      	beq.n	8003e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d46:	4b59      	ldr	r3, [pc, #356]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d50:	4b56      	ldr	r3, [pc, #344]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d102      	bne.n	8003d66 <HAL_RCC_OscConfig+0x136>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_OscConfig+0x13c>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d11f      	bne.n	8003dac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_OscConfig+0x154>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e25d      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b49      	ldr	r3, [pc, #292]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	4946      	ldr	r1, [pc, #280]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d98:	4b45      	ldr	r3, [pc, #276]	@ (8003eb0 <HAL_RCC_OscConfig+0x280>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fd fff3 	bl	8001d88 <HAL_InitTick>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d043      	beq.n	8003e30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e249      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d023      	beq.n	8003dfc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db4:	4b3d      	ldr	r3, [pc, #244]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a3c      	ldr	r2, [pc, #240]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe f82e 	bl	8001e20 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc8:	f7fe f82a 	bl	8001e20 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e232      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dda:	4b34      	ldr	r3, [pc, #208]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de6:	4b31      	ldr	r3, [pc, #196]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	061b      	lsls	r3, r3, #24
 8003df4:	492d      	ldr	r1, [pc, #180]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
 8003dfa:	e01a      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003e02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe f80a 	bl	8001e20 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e10:	f7fe f806 	bl	8001e20 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e20e      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e22:	4b22      	ldr	r3, [pc, #136]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x1e0>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d041      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01c      	beq.n	8003e80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b19      	ldr	r3, [pc, #100]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4c:	4a17      	ldr	r2, [pc, #92]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fd ffe3 	bl	8001e20 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fd ffdf 	bl	8001e20 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e1e7      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e70:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ef      	beq.n	8003e5e <HAL_RCC_OscConfig+0x22e>
 8003e7e:	e020      	b.n	8003ec2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e80:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e86:	4a09      	ldr	r2, [pc, #36]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd ffc6 	bl	8001e20 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e96:	e00d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fd ffc2 	bl	8001e20 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d906      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1ca      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1ea      	bne.n	8003e98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80a6 	beq.w	800401c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ed4:	4b84      	ldr	r3, [pc, #528]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x2b4>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x2b6>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00d      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	4b7f      	ldr	r3, [pc, #508]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eee:	4a7e      	ldr	r2, [pc, #504]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f02:	2301      	movs	r3, #1
 8003f04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f06:	4b79      	ldr	r3, [pc, #484]	@ (80040ec <HAL_RCC_OscConfig+0x4bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d118      	bne.n	8003f44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f12:	4b76      	ldr	r3, [pc, #472]	@ (80040ec <HAL_RCC_OscConfig+0x4bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a75      	ldr	r2, [pc, #468]	@ (80040ec <HAL_RCC_OscConfig+0x4bc>)
 8003f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f1e:	f7fd ff7f 	bl	8001e20 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f26:	f7fd ff7b 	bl	8001e20 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e183      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f38:	4b6c      	ldr	r3, [pc, #432]	@ (80040ec <HAL_RCC_OscConfig+0x4bc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d108      	bne.n	8003f5e <HAL_RCC_OscConfig+0x32e>
 8003f4c:	4b66      	ldr	r3, [pc, #408]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f52:	4a65      	ldr	r2, [pc, #404]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f5c:	e024      	b.n	8003fa8 <HAL_RCC_OscConfig+0x378>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d110      	bne.n	8003f88 <HAL_RCC_OscConfig+0x358>
 8003f66:	4b60      	ldr	r3, [pc, #384]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6c:	4a5e      	ldr	r2, [pc, #376]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	f043 0304 	orr.w	r3, r3, #4
 8003f72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f76:	4b5c      	ldr	r3, [pc, #368]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f86:	e00f      	b.n	8003fa8 <HAL_RCC_OscConfig+0x378>
 8003f88:	4b57      	ldr	r3, [pc, #348]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8e:	4a56      	ldr	r2, [pc, #344]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f98:	4b53      	ldr	r3, [pc, #332]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9e:	4a52      	ldr	r2, [pc, #328]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003fa0:	f023 0304 	bic.w	r3, r3, #4
 8003fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d016      	beq.n	8003fde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd ff36 	bl	8001e20 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fd ff32 	bl	8001e20 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e138      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fce:	4b46      	ldr	r3, [pc, #280]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0ed      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x388>
 8003fdc:	e015      	b.n	800400a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fd ff1f 	bl	8001e20 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7fd ff1b 	bl	8001e20 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e121      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1ed      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800400a:	7ffb      	ldrb	r3, [r7, #31]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004010:	4b35      	ldr	r3, [pc, #212]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004014:	4a34      	ldr	r2, [pc, #208]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800401a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d03c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01c      	beq.n	800406a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004030:	4b2d      	ldr	r3, [pc, #180]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8004032:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004036:	4a2c      	ldr	r2, [pc, #176]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004040:	f7fd feee 	bl	8001e20 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004048:	f7fd feea 	bl	8001e20 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0f2      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800405a:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 800405c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ef      	beq.n	8004048 <HAL_RCC_OscConfig+0x418>
 8004068:	e01b      	b.n	80040a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800406a:	4b1f      	ldr	r3, [pc, #124]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 800406c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004070:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407a:	f7fd fed1 	bl	8001e20 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004082:	f7fd fecd 	bl	8001e20 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0d5      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004094:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 8004096:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1ef      	bne.n	8004082 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80c9 	beq.w	800423e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ac:	4b0e      	ldr	r3, [pc, #56]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	f000 8083 	beq.w	80041c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d15e      	bne.n	8004180 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a08      	ldr	r2, [pc, #32]	@ (80040e8 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd fea7 	bl	8001e20 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d4:	e00c      	b.n	80040f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fd fea3 	bl	8001e20 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d905      	bls.n	80040f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0ab      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f0:	4b55      	ldr	r3, [pc, #340]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ec      	bne.n	80040d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fc:	4b52      	ldr	r3, [pc, #328]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	4b52      	ldr	r3, [pc, #328]	@ (800424c <HAL_RCC_OscConfig+0x61c>)
 8004102:	4013      	ands	r3, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6a11      	ldr	r1, [r2, #32]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800410c:	3a01      	subs	r2, #1
 800410e:	0112      	lsls	r2, r2, #4
 8004110:	4311      	orrs	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004116:	0212      	lsls	r2, r2, #8
 8004118:	4311      	orrs	r1, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800411e:	0852      	lsrs	r2, r2, #1
 8004120:	3a01      	subs	r2, #1
 8004122:	0552      	lsls	r2, r2, #21
 8004124:	4311      	orrs	r1, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800412a:	0852      	lsrs	r2, r2, #1
 800412c:	3a01      	subs	r2, #1
 800412e:	0652      	lsls	r2, r2, #25
 8004130:	4311      	orrs	r1, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004136:	06d2      	lsls	r2, r2, #27
 8004138:	430a      	orrs	r2, r1
 800413a:	4943      	ldr	r1, [pc, #268]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 800413c:	4313      	orrs	r3, r2
 800413e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b41      	ldr	r3, [pc, #260]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a40      	ldr	r2, [pc, #256]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 8004146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800414a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800414c:	4b3e      	ldr	r3, [pc, #248]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a3d      	ldr	r2, [pc, #244]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004156:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd fe62 	bl	8001e20 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd fe5e 	bl	8001e20 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e066      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004172:	4b35      	ldr	r3, [pc, #212]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x530>
 800417e:	e05e      	b.n	800423e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a30      	ldr	r2, [pc, #192]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 8004186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800418a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fe48 	bl	8001e20 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd fe44 	bl	8001e20 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e04c      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a6:	4b28      	ldr	r3, [pc, #160]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80041b2:	4b25      	ldr	r3, [pc, #148]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	4924      	ldr	r1, [pc, #144]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 80041b8:	4b25      	ldr	r3, [pc, #148]	@ (8004250 <HAL_RCC_OscConfig+0x620>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	60cb      	str	r3, [r1, #12]
 80041be:	e03e      	b.n	800423e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e039      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004248 <HAL_RCC_OscConfig+0x618>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f003 0203 	and.w	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d12c      	bne.n	800423a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	3b01      	subs	r3, #1
 80041ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d123      	bne.n	800423a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d11b      	bne.n	800423a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d113      	bne.n	800423a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	3b01      	subs	r3, #1
 8004220:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d109      	bne.n	800423a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	3b01      	subs	r3, #1
 8004234:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	019f800c 	.word	0x019f800c
 8004250:	feeefffc 	.word	0xfeeefffc

08004254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e11e      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800426c:	4b91      	ldr	r3, [pc, #580]	@ (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d910      	bls.n	800429c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b8e      	ldr	r3, [pc, #568]	@ (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 020f 	bic.w	r2, r3, #15
 8004282:	498c      	ldr	r1, [pc, #560]	@ (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b8a      	ldr	r3, [pc, #552]	@ (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e106      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d073      	beq.n	8004390 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d129      	bne.n	8004304 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b0:	4b81      	ldr	r3, [pc, #516]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0f4      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042c0:	f000 f99e 	bl	8004600 <RCC_GetSysClockFreqFromPLLSource>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4a7c      	ldr	r2, [pc, #496]	@ (80044bc <HAL_RCC_ClockConfig+0x268>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d93f      	bls.n	800434e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042ce:	4b7a      	ldr	r3, [pc, #488]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d033      	beq.n	800434e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d12f      	bne.n	800434e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ee:	4b72      	ldr	r3, [pc, #456]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042f6:	4a70      	ldr	r2, [pc, #448]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80042f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042fe:	2380      	movs	r3, #128	@ 0x80
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e024      	b.n	800434e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d107      	bne.n	800431c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430c:	4b6a      	ldr	r3, [pc, #424]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0c6      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800431c:	4b66      	ldr	r3, [pc, #408]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0be      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800432c:	f000 f8ce 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8004330:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4a61      	ldr	r2, [pc, #388]	@ (80044bc <HAL_RCC_ClockConfig+0x268>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d909      	bls.n	800434e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800433a:	4b5f      	ldr	r3, [pc, #380]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004342:	4a5d      	ldr	r2, [pc, #372]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 8004344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004348:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800434e:	4b5a      	ldr	r3, [pc, #360]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 0203 	bic.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4957      	ldr	r1, [pc, #348]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800435c:	4313      	orrs	r3, r2
 800435e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004360:	f7fd fd5e 	bl	8001e20 <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	e00a      	b.n	800437e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004368:	f7fd fd5a 	bl	8001e20 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e095      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	4b4e      	ldr	r3, [pc, #312]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 020c 	and.w	r2, r3, #12
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	429a      	cmp	r2, r3
 800438e:	d1eb      	bne.n	8004368 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d023      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a8:	4b43      	ldr	r3, [pc, #268]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a42      	ldr	r2, [pc, #264]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043c0:	4b3d      	ldr	r3, [pc, #244]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043c8:	4a3b      	ldr	r2, [pc, #236]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b39      	ldr	r3, [pc, #228]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4936      	ldr	r1, [pc, #216]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b80      	cmp	r3, #128	@ 0x80
 80043e8:	d105      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043ea:	4b33      	ldr	r3, [pc, #204]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4a32      	ldr	r2, [pc, #200]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f6:	4b2f      	ldr	r3, [pc, #188]	@ (80044b4 <HAL_RCC_ClockConfig+0x260>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d21d      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004404:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 020f 	bic.w	r2, r3, #15
 800440c:	4929      	ldr	r1, [pc, #164]	@ (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004414:	f7fd fd04 	bl	8001e20 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800441c:	f7fd fd00 	bl	8001e20 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e03b      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d1ed      	bne.n	800441c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4917      	ldr	r1, [pc, #92]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446a:	4b13      	ldr	r3, [pc, #76]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490f      	ldr	r1, [pc, #60]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800447e:	f000 f825 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8004482:	4602      	mov	r2, r0
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <HAL_RCC_ClockConfig+0x264>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	490c      	ldr	r1, [pc, #48]	@ (80044c0 <HAL_RCC_ClockConfig+0x26c>)
 8004490:	5ccb      	ldrb	r3, [r1, r3]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <HAL_RCC_ClockConfig+0x270>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800449e:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <HAL_RCC_ClockConfig+0x274>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fd fc70 	bl	8001d88 <HAL_InitTick>
 80044a8:	4603      	mov	r3, r0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40022000 	.word	0x40022000
 80044b8:	40021000 	.word	0x40021000
 80044bc:	04c4b400 	.word	0x04c4b400
 80044c0:	08007d90 	.word	0x08007d90
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000004 	.word	0x20000004

080044cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d102      	bne.n	80044e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044de:	4b2a      	ldr	r3, [pc, #168]	@ (8004588 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	e047      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044e4:	4b27      	ldr	r3, [pc, #156]	@ (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d102      	bne.n	80044f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044f0:	4b26      	ldr	r3, [pc, #152]	@ (800458c <HAL_RCC_GetSysClockFreq+0xc0>)
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e03e      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044f6:	4b23      	ldr	r3, [pc, #140]	@ (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b0c      	cmp	r3, #12
 8004500:	d136      	bne.n	8004570 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004502:	4b20      	ldr	r3, [pc, #128]	@ (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800450c:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	3301      	adds	r3, #1
 8004518:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d10c      	bne.n	800453a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004520:	4a1a      	ldr	r2, [pc, #104]	@ (800458c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	4a16      	ldr	r2, [pc, #88]	@ (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800452a:	68d2      	ldr	r2, [r2, #12]
 800452c:	0a12      	lsrs	r2, r2, #8
 800452e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	617b      	str	r3, [r7, #20]
      break;
 8004538:	e00c      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800453a:	4a13      	ldr	r2, [pc, #76]	@ (8004588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	4a10      	ldr	r2, [pc, #64]	@ (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004544:	68d2      	ldr	r2, [r2, #12]
 8004546:	0a12      	lsrs	r2, r2, #8
 8004548:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800454c:	fb02 f303 	mul.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
      break;
 8004552:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	0e5b      	lsrs	r3, r3, #25
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	3301      	adds	r3, #1
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e001      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004574:	693b      	ldr	r3, [r7, #16]
}
 8004576:	4618      	mov	r0, r3
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	00f42400 	.word	0x00f42400
 800458c:	016e3600 	.word	0x016e3600

08004590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b03      	ldr	r3, [pc, #12]	@ (80045a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000000 	.word	0x20000000

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045ac:	f7ff fff0 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4904      	ldr	r1, [pc, #16]	@ (80045d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	08007da0 	.word	0x08007da0

080045d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045d8:	f7ff ffda 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0adb      	lsrs	r3, r3, #11
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4904      	ldr	r1, [pc, #16]	@ (80045fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	08007da0 	.word	0x08007da0

08004600 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004606:	4b1e      	ldr	r3, [pc, #120]	@ (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d10c      	bne.n	800463e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004624:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	4a14      	ldr	r2, [pc, #80]	@ (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800462e:	68d2      	ldr	r2, [r2, #12]
 8004630:	0a12      	lsrs	r2, r2, #8
 8004632:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	617b      	str	r3, [r7, #20]
    break;
 800463c:	e00c      	b.n	8004658 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800463e:	4a12      	ldr	r2, [pc, #72]	@ (8004688 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	4a0e      	ldr	r2, [pc, #56]	@ (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004648:	68d2      	ldr	r2, [r2, #12]
 800464a:	0a12      	lsrs	r2, r2, #8
 800464c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	617b      	str	r3, [r7, #20]
    break;
 8004656:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004658:	4b09      	ldr	r3, [pc, #36]	@ (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	0e5b      	lsrs	r3, r3, #25
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	3301      	adds	r3, #1
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004672:	687b      	ldr	r3, [r7, #4]
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40021000 	.word	0x40021000
 8004684:	016e3600 	.word	0x016e3600
 8004688:	00f42400 	.word	0x00f42400

0800468c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004694:	2300      	movs	r3, #0
 8004696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004698:	2300      	movs	r3, #0
 800469a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8098 	beq.w	80047da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ae:	4b43      	ldr	r3, [pc, #268]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	4b40      	ldr	r3, [pc, #256]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046be:	4a3f      	ldr	r2, [pc, #252]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046c6:	4b3d      	ldr	r3, [pc, #244]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d6:	4b3a      	ldr	r3, [pc, #232]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a39      	ldr	r2, [pc, #228]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046e2:	f7fd fb9d 	bl	8001e20 <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e8:	e009      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fd fb99 	bl	8001e20 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d902      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	74fb      	strb	r3, [r7, #19]
        break;
 80046fc:	e005      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046fe:	4b30      	ldr	r3, [pc, #192]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ef      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d159      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004710:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01e      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	429a      	cmp	r2, r3
 800472a:	d019      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800472c:	4b23      	ldr	r3, [pc, #140]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004736:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004738:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	4a1f      	ldr	r2, [pc, #124]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004748:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004758:	4a18      	ldr	r2, [pc, #96]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476a:	f7fd fb59 	bl	8001e20 <HAL_GetTick>
 800476e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004770:	e00b      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fd fb55 	bl	8001e20 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d902      	bls.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	74fb      	strb	r3, [r7, #19]
            break;
 8004788:	e006      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478a:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ec      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800479e:	4b07      	ldr	r3, [pc, #28]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ac:	4903      	ldr	r1, [pc, #12]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047b4:	e008      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	74bb      	strb	r3, [r7, #18]
 80047ba:	e005      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c8:	7c7b      	ldrb	r3, [r7, #17]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d105      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ce:	4ba7      	ldr	r3, [pc, #668]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d2:	4aa6      	ldr	r2, [pc, #664]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e6:	4ba1      	ldr	r3, [pc, #644]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ec:	f023 0203 	bic.w	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	499d      	ldr	r1, [pc, #628]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004808:	4b98      	ldr	r3, [pc, #608]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480e:	f023 020c 	bic.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	4995      	ldr	r1, [pc, #596]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800482a:	4b90      	ldr	r3, [pc, #576]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004830:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	498c      	ldr	r1, [pc, #560]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800484c:	4b87      	ldr	r3, [pc, #540]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	4984      	ldr	r1, [pc, #528]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800486e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	497b      	ldr	r1, [pc, #492]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004890:	4b76      	ldr	r3, [pc, #472]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004896:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	4973      	ldr	r1, [pc, #460]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048b2:	4b6e      	ldr	r3, [pc, #440]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	496a      	ldr	r1, [pc, #424]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048d4:	4b65      	ldr	r3, [pc, #404]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4962      	ldr	r1, [pc, #392]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048f6:	4b5d      	ldr	r3, [pc, #372]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	4959      	ldr	r1, [pc, #356]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004918:	4b54      	ldr	r3, [pc, #336]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	4951      	ldr	r1, [pc, #324]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800493a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	4948      	ldr	r1, [pc, #288]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004958:	2b00      	cmp	r3, #0
 800495a:	d015      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800495c:	4b43      	ldr	r3, [pc, #268]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	4940      	ldr	r1, [pc, #256]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800497a:	d105      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800497c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a3a      	ldr	r2, [pc, #232]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004986:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004994:	4b35      	ldr	r3, [pc, #212]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a2:	4932      	ldr	r1, [pc, #200]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b2:	d105      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049be:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049cc:	4b27      	ldr	r3, [pc, #156]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	4924      	ldr	r1, [pc, #144]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049ea:	d105      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ec:	4b1f      	ldr	r3, [pc, #124]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d015      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a04:	4b19      	ldr	r3, [pc, #100]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	4916      	ldr	r1, [pc, #88]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a22:	d105      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a24:	4b11      	ldr	r3, [pc, #68]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a10      	ldr	r2, [pc, #64]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d019      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	4908      	ldr	r1, [pc, #32]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a5a:	d109      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a5c:	4b03      	ldr	r3, [pc, #12]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a02      	ldr	r2, [pc, #8]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a66:	60d3      	str	r3, [r2, #12]
 8004a68:	e002      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a7c:	4b29      	ldr	r3, [pc, #164]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	4926      	ldr	r1, [pc, #152]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a9c:	4b21      	ldr	r3, [pc, #132]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a20      	ldr	r2, [pc, #128]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac2:	4918      	ldr	r1, [pc, #96]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ad4:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a12      	ldr	r2, [pc, #72]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ade:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004aec:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004af2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	490a      	ldr	r1, [pc, #40]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b0a:	d105      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b18:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000

08004b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e09d      	b.n	8004c76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b4a:	d009      	beq.n	8004b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	61da      	str	r2, [r3, #28]
 8004b52:	e005      	b.n	8004b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fd94 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ba0:	d902      	bls.n	8004ba8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e002      	b.n	8004bae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004bb6:	d007      	beq.n	8004bc8 <HAL_SPI_Init+0xa0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0a:	ea42 0103 	orr.w	r1, r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	0c1b      	lsrs	r3, r3, #16
 8004c24:	f003 0204 	and.w	r2, r3, #4
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c44:	ea42 0103 	orr.w	r1, r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e054      	b.n	8004d3c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d111      	bne.n	8004cc2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f001 fb42 	bl	8006330 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a23      	ldr	r2, [pc, #140]	@ (8004d44 <HAL_TIM_Base_Init+0xc4>)
 8004cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 feb1 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	08001769 	.word	0x08001769

08004d48 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e054      	b.n	8004e04 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d111      	bne.n	8004d8a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 fade 	bl	8006330 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a23      	ldr	r2, [pc, #140]	@ (8004e0c <HAL_TIM_OC_Init+0xc4>)
 8004d80:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fe4d 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	08004e11 	.word	0x08004e11

08004e10 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e054      	b.n	8004ee0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d111      	bne.n	8004e66 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 fa70 	bl	8006330 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a23      	ldr	r2, [pc, #140]	@ (8004ee8 <HAL_TIM_PWM_Init+0xc4>)
 8004e5c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f000 fddf 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	08004eed 	.word	0x08004eed

08004eec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e04c      	b.n	8004fae <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d111      	bne.n	8004f44 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f001 fa01 	bl	8006330 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb8 <HAL_TIM_OnePulse_Init+0xb8>)
 8004f3a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fd70 	bl	8005a3c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0208 	bic.w	r2, r2, #8
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	08004fbd 	.word	0x08004fbd

08004fbc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0a2      	b.n	800512a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d111      	bne.n	8005014 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f001 f999 	bl	8006330 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a4a      	ldr	r2, [pc, #296]	@ (8005134 <HAL_TIM_Encoder_Init+0x164>)
 800500a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800502a:	f023 0307 	bic.w	r3, r3, #7
 800502e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 fcfe 	bl	8005a3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005068:	f023 0303 	bic.w	r3, r3, #3
 800506c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	4313      	orrs	r3, r2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005086:	f023 030c 	bic.w	r3, r3, #12
 800508a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	4313      	orrs	r3, r2
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	011a      	lsls	r2, r3, #4
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	4313      	orrs	r3, r2
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80050c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80050cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	4313      	orrs	r3, r2
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	08001871 	.word	0x08001871

08005138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d026      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d021      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0202 	mvn.w	r2, #2
 800516c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
 800518c:	e009      	b.n	80051a2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d026      	beq.n	8005200 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d021      	beq.n	8005200 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0204 	mvn.w	r2, #4
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
 80051e4:	e009      	b.n	80051fa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d026      	beq.n	8005258 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d021      	beq.n	8005258 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0208 	mvn.w	r2, #8
 800521c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2204      	movs	r2, #4
 8005222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4798      	blx	r3
 800523c:	e009      	b.n	8005252 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b00      	cmp	r3, #0
 8005260:	d026      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d021      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0210 	mvn.w	r2, #16
 8005274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2208      	movs	r2, #8
 800527a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
 8005294:	e009      	b.n	80052aa <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00e      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d009      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0201 	mvn.w	r2, #1
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00e      	beq.n	800535a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800534e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00e      	beq.n	8005382 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f06f 0220 	mvn.w	r2, #32
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00e      	beq.n	80053aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800539e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00e      	beq.n	8005422 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005446:	2302      	movs	r3, #2
 8005448:	e066      	b.n	8005518 <HAL_TIM_OC_ConfigChannel+0xec>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b14      	cmp	r3, #20
 8005456:	d857      	bhi.n	8005508 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005458:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <HAL_TIM_OC_ConfigChannel+0x34>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	080054b5 	.word	0x080054b5
 8005464:	08005509 	.word	0x08005509
 8005468:	08005509 	.word	0x08005509
 800546c:	08005509 	.word	0x08005509
 8005470:	080054c3 	.word	0x080054c3
 8005474:	08005509 	.word	0x08005509
 8005478:	08005509 	.word	0x08005509
 800547c:	08005509 	.word	0x08005509
 8005480:	080054d1 	.word	0x080054d1
 8005484:	08005509 	.word	0x08005509
 8005488:	08005509 	.word	0x08005509
 800548c:	08005509 	.word	0x08005509
 8005490:	080054df 	.word	0x080054df
 8005494:	08005509 	.word	0x08005509
 8005498:	08005509 	.word	0x08005509
 800549c:	08005509 	.word	0x08005509
 80054a0:	080054ed 	.word	0x080054ed
 80054a4:	08005509 	.word	0x08005509
 80054a8:	08005509 	.word	0x08005509
 80054ac:	08005509 	.word	0x08005509
 80054b0:	080054fb 	.word	0x080054fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fb72 	bl	8005ba4 <TIM_OC1_SetConfig>
      break;
 80054c0:	e025      	b.n	800550e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fc05 	bl	8005cd8 <TIM_OC2_SetConfig>
      break;
 80054ce:	e01e      	b.n	800550e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fc92 	bl	8005e00 <TIM_OC3_SetConfig>
      break;
 80054dc:	e017      	b.n	800550e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fd1d 	bl	8005f24 <TIM_OC4_SetConfig>
      break;
 80054ea:	e010      	b.n	800550e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fdaa 	bl	800604c <TIM_OC5_SetConfig>
      break;
 80054f8:	e009      	b.n	800550e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fe0d 	bl	8006120 <TIM_OC6_SetConfig>
      break;
 8005506:	e002      	b.n	800550e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75fb      	strb	r3, [r7, #23]
      break;
 800550c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800553a:	2302      	movs	r3, #2
 800553c:	e0ff      	b.n	800573e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b14      	cmp	r3, #20
 800554a:	f200 80f0 	bhi.w	800572e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800554e:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	080055a9 	.word	0x080055a9
 8005558:	0800572f 	.word	0x0800572f
 800555c:	0800572f 	.word	0x0800572f
 8005560:	0800572f 	.word	0x0800572f
 8005564:	080055e9 	.word	0x080055e9
 8005568:	0800572f 	.word	0x0800572f
 800556c:	0800572f 	.word	0x0800572f
 8005570:	0800572f 	.word	0x0800572f
 8005574:	0800562b 	.word	0x0800562b
 8005578:	0800572f 	.word	0x0800572f
 800557c:	0800572f 	.word	0x0800572f
 8005580:	0800572f 	.word	0x0800572f
 8005584:	0800566b 	.word	0x0800566b
 8005588:	0800572f 	.word	0x0800572f
 800558c:	0800572f 	.word	0x0800572f
 8005590:	0800572f 	.word	0x0800572f
 8005594:	080056ad 	.word	0x080056ad
 8005598:	0800572f 	.word	0x0800572f
 800559c:	0800572f 	.word	0x0800572f
 80055a0:	0800572f 	.word	0x0800572f
 80055a4:	080056ed 	.word	0x080056ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 faf8 	bl	8005ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0208 	orr.w	r2, r2, #8
 80055c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0204 	bic.w	r2, r2, #4
 80055d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6999      	ldr	r1, [r3, #24]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	619a      	str	r2, [r3, #24]
      break;
 80055e6:	e0a5      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fb72 	bl	8005cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	619a      	str	r2, [r3, #24]
      break;
 8005628:	e084      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fbe5 	bl	8005e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0208 	orr.w	r2, r2, #8
 8005644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0204 	bic.w	r2, r2, #4
 8005654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69d9      	ldr	r1, [r3, #28]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	61da      	str	r2, [r3, #28]
      break;
 8005668:	e064      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fc57 	bl	8005f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69d9      	ldr	r1, [r3, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	021a      	lsls	r2, r3, #8
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	61da      	str	r2, [r3, #28]
      break;
 80056aa:	e043      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fcca 	bl	800604c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0204 	bic.w	r2, r2, #4
 80056d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056ea:	e023      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fd14 	bl	8006120 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005706:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005716:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800572c:	e002      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
      break;
 8005732:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop

08005748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIM_ConfigClockSource+0x1c>
 8005760:	2302      	movs	r3, #2
 8005762:	e0f6      	b.n	8005952 <HAL_TIM_ConfigClockSource+0x20a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005782:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800578e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a6f      	ldr	r2, [pc, #444]	@ (800595c <HAL_TIM_ConfigClockSource+0x214>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	f000 80c1 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 80057a4:	4a6d      	ldr	r2, [pc, #436]	@ (800595c <HAL_TIM_ConfigClockSource+0x214>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f200 80c6 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 80057ac:	4a6c      	ldr	r2, [pc, #432]	@ (8005960 <HAL_TIM_ConfigClockSource+0x218>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	f000 80b9 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 80057b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005960 <HAL_TIM_ConfigClockSource+0x218>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f200 80be 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 80057bc:	4a69      	ldr	r2, [pc, #420]	@ (8005964 <HAL_TIM_ConfigClockSource+0x21c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	f000 80b1 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 80057c4:	4a67      	ldr	r2, [pc, #412]	@ (8005964 <HAL_TIM_ConfigClockSource+0x21c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	f200 80b6 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 80057cc:	4a66      	ldr	r2, [pc, #408]	@ (8005968 <HAL_TIM_ConfigClockSource+0x220>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	f000 80a9 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 80057d4:	4a64      	ldr	r2, [pc, #400]	@ (8005968 <HAL_TIM_ConfigClockSource+0x220>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	f200 80ae 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 80057dc:	4a63      	ldr	r2, [pc, #396]	@ (800596c <HAL_TIM_ConfigClockSource+0x224>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	f000 80a1 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 80057e4:	4a61      	ldr	r2, [pc, #388]	@ (800596c <HAL_TIM_ConfigClockSource+0x224>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f200 80a6 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 80057ec:	4a60      	ldr	r2, [pc, #384]	@ (8005970 <HAL_TIM_ConfigClockSource+0x228>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	f000 8099 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 80057f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005970 <HAL_TIM_ConfigClockSource+0x228>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	f200 809e 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 80057fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005800:	f000 8091 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 8005804:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005808:	f200 8096 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 800580c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005810:	f000 8089 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 8005814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005818:	f200 808e 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 800581c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005820:	d03e      	beq.n	80058a0 <HAL_TIM_ConfigClockSource+0x158>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005826:	f200 8087 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 800582a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582e:	f000 8086 	beq.w	800593e <HAL_TIM_ConfigClockSource+0x1f6>
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005836:	d87f      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 8005838:	2b70      	cmp	r3, #112	@ 0x70
 800583a:	d01a      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x12a>
 800583c:	2b70      	cmp	r3, #112	@ 0x70
 800583e:	d87b      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 8005840:	2b60      	cmp	r3, #96	@ 0x60
 8005842:	d050      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x19e>
 8005844:	2b60      	cmp	r3, #96	@ 0x60
 8005846:	d877      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 8005848:	2b50      	cmp	r3, #80	@ 0x50
 800584a:	d03c      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x17e>
 800584c:	2b50      	cmp	r3, #80	@ 0x50
 800584e:	d873      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d058      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x1be>
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d86f      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 8005858:	2b30      	cmp	r3, #48	@ 0x30
 800585a:	d064      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 800585c:	2b30      	cmp	r3, #48	@ 0x30
 800585e:	d86b      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d060      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 8005864:	2b20      	cmp	r3, #32
 8005866:	d867      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05c      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 800586c:	2b10      	cmp	r3, #16
 800586e:	d05a      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x1de>
 8005870:	e062      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005882:	f000 fd35 	bl	80062f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	609a      	str	r2, [r3, #8]
      break;
 800589e:	e04f      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058b0:	f000 fd1e 	bl	80062f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058c2:	609a      	str	r2, [r3, #8]
      break;
 80058c4:	e03c      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	461a      	mov	r2, r3
 80058d4:	f000 fc90 	bl	80061f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2150      	movs	r1, #80	@ 0x50
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fce9 	bl	80062b6 <TIM_ITRx_SetConfig>
      break;
 80058e4:	e02c      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f2:	461a      	mov	r2, r3
 80058f4:	f000 fcaf 	bl	8006256 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2160      	movs	r1, #96	@ 0x60
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fcd9 	bl	80062b6 <TIM_ITRx_SetConfig>
      break;
 8005904:	e01c      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	461a      	mov	r2, r3
 8005914:	f000 fc70 	bl	80061f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2140      	movs	r1, #64	@ 0x40
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fcc9 	bl	80062b6 <TIM_ITRx_SetConfig>
      break;
 8005924:	e00c      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f000 fcc0 	bl	80062b6 <TIM_ITRx_SetConfig>
      break;
 8005936:	e003      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
      break;
 800593c:	e000      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800593e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	00100070 	.word	0x00100070
 8005960:	00100060 	.word	0x00100060
 8005964:	00100050 	.word	0x00100050
 8005968:	00100040 	.word	0x00100040
 800596c:	00100030 	.word	0x00100030
 8005970:	00100020 	.word	0x00100020

08005974 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8005b80 <TIM_Base_SetConfig+0x144>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d017      	beq.n	8005a84 <TIM_Base_SetConfig+0x48>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5a:	d013      	beq.n	8005a84 <TIM_Base_SetConfig+0x48>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a49      	ldr	r2, [pc, #292]	@ (8005b84 <TIM_Base_SetConfig+0x148>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00f      	beq.n	8005a84 <TIM_Base_SetConfig+0x48>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a48      	ldr	r2, [pc, #288]	@ (8005b88 <TIM_Base_SetConfig+0x14c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00b      	beq.n	8005a84 <TIM_Base_SetConfig+0x48>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a47      	ldr	r2, [pc, #284]	@ (8005b8c <TIM_Base_SetConfig+0x150>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <TIM_Base_SetConfig+0x48>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a46      	ldr	r2, [pc, #280]	@ (8005b90 <TIM_Base_SetConfig+0x154>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_Base_SetConfig+0x48>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a45      	ldr	r2, [pc, #276]	@ (8005b94 <TIM_Base_SetConfig+0x158>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d108      	bne.n	8005a96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a39      	ldr	r2, [pc, #228]	@ (8005b80 <TIM_Base_SetConfig+0x144>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d023      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa4:	d01f      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a36      	ldr	r2, [pc, #216]	@ (8005b84 <TIM_Base_SetConfig+0x148>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01b      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a35      	ldr	r2, [pc, #212]	@ (8005b88 <TIM_Base_SetConfig+0x14c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d017      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a34      	ldr	r2, [pc, #208]	@ (8005b8c <TIM_Base_SetConfig+0x150>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a33      	ldr	r2, [pc, #204]	@ (8005b90 <TIM_Base_SetConfig+0x154>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00f      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a33      	ldr	r2, [pc, #204]	@ (8005b98 <TIM_Base_SetConfig+0x15c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a32      	ldr	r2, [pc, #200]	@ (8005b9c <TIM_Base_SetConfig+0x160>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a31      	ldr	r2, [pc, #196]	@ (8005ba0 <TIM_Base_SetConfig+0x164>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_Base_SetConfig+0xaa>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8005b94 <TIM_Base_SetConfig+0x158>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d108      	bne.n	8005af8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a18      	ldr	r2, [pc, #96]	@ (8005b80 <TIM_Base_SetConfig+0x144>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d013      	beq.n	8005b4c <TIM_Base_SetConfig+0x110>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a1a      	ldr	r2, [pc, #104]	@ (8005b90 <TIM_Base_SetConfig+0x154>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00f      	beq.n	8005b4c <TIM_Base_SetConfig+0x110>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005b98 <TIM_Base_SetConfig+0x15c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_Base_SetConfig+0x110>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a19      	ldr	r2, [pc, #100]	@ (8005b9c <TIM_Base_SetConfig+0x160>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d007      	beq.n	8005b4c <TIM_Base_SetConfig+0x110>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ba0 <TIM_Base_SetConfig+0x164>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_Base_SetConfig+0x110>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a13      	ldr	r2, [pc, #76]	@ (8005b94 <TIM_Base_SetConfig+0x158>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d103      	bne.n	8005b54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d105      	bne.n	8005b72 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f023 0201 	bic.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]
  }
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40012c00 	.word	0x40012c00
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40000c00 	.word	0x40000c00
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40015000 	.word	0x40015000
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800

08005ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f023 0201 	bic.w	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f023 0302 	bic.w	r3, r3, #2
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a30      	ldr	r2, [pc, #192]	@ (8005cc0 <TIM_OC1_SetConfig+0x11c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <TIM_OC1_SetConfig+0x88>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc4 <TIM_OC1_SetConfig+0x120>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00f      	beq.n	8005c2c <TIM_OC1_SetConfig+0x88>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc8 <TIM_OC1_SetConfig+0x124>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00b      	beq.n	8005c2c <TIM_OC1_SetConfig+0x88>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a2d      	ldr	r2, [pc, #180]	@ (8005ccc <TIM_OC1_SetConfig+0x128>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d007      	beq.n	8005c2c <TIM_OC1_SetConfig+0x88>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd0 <TIM_OC1_SetConfig+0x12c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_OC1_SetConfig+0x88>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd4 <TIM_OC1_SetConfig+0x130>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10c      	bne.n	8005c46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0308 	bic.w	r3, r3, #8
 8005c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc0 <TIM_OC1_SetConfig+0x11c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <TIM_OC1_SetConfig+0xd2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc4 <TIM_OC1_SetConfig+0x120>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00f      	beq.n	8005c76 <TIM_OC1_SetConfig+0xd2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc8 <TIM_OC1_SetConfig+0x124>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <TIM_OC1_SetConfig+0xd2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1a      	ldr	r2, [pc, #104]	@ (8005ccc <TIM_OC1_SetConfig+0x128>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_OC1_SetConfig+0xd2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a19      	ldr	r2, [pc, #100]	@ (8005cd0 <TIM_OC1_SetConfig+0x12c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_OC1_SetConfig+0xd2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <TIM_OC1_SetConfig+0x130>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d111      	bne.n	8005c9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40013400 	.word	0x40013400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40014400 	.word	0x40014400
 8005cd0:	40014800 	.word	0x40014800
 8005cd4:	40015000 	.word	0x40015000

08005cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f023 0210 	bic.w	r2, r3, #16
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0320 	bic.w	r3, r3, #32
 8005d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a2c      	ldr	r2, [pc, #176]	@ (8005de8 <TIM_OC2_SetConfig+0x110>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <TIM_OC2_SetConfig+0x74>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005dec <TIM_OC2_SetConfig+0x114>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC2_SetConfig+0x74>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a2a      	ldr	r2, [pc, #168]	@ (8005df0 <TIM_OC2_SetConfig+0x118>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10d      	bne.n	8005d68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005de8 <TIM_OC2_SetConfig+0x110>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <TIM_OC2_SetConfig+0xc0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1e      	ldr	r2, [pc, #120]	@ (8005dec <TIM_OC2_SetConfig+0x114>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00f      	beq.n	8005d98 <TIM_OC2_SetConfig+0xc0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005df4 <TIM_OC2_SetConfig+0x11c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00b      	beq.n	8005d98 <TIM_OC2_SetConfig+0xc0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a1d      	ldr	r2, [pc, #116]	@ (8005df8 <TIM_OC2_SetConfig+0x120>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d007      	beq.n	8005d98 <TIM_OC2_SetConfig+0xc0>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <TIM_OC2_SetConfig+0x124>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC2_SetConfig+0xc0>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a17      	ldr	r2, [pc, #92]	@ (8005df0 <TIM_OC2_SetConfig+0x118>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d113      	bne.n	8005dc0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005da6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	621a      	str	r2, [r3, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40015000 	.word	0x40015000
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8005f0c <TIM_OC3_SetConfig+0x10c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_OC3_SetConfig+0x72>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2a      	ldr	r2, [pc, #168]	@ (8005f10 <TIM_OC3_SetConfig+0x110>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_OC3_SetConfig+0x72>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a29      	ldr	r2, [pc, #164]	@ (8005f14 <TIM_OC3_SetConfig+0x114>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10d      	bne.n	8005e8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1e      	ldr	r2, [pc, #120]	@ (8005f0c <TIM_OC3_SetConfig+0x10c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <TIM_OC3_SetConfig+0xbe>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	@ (8005f10 <TIM_OC3_SetConfig+0x110>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00f      	beq.n	8005ebe <TIM_OC3_SetConfig+0xbe>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f18 <TIM_OC3_SetConfig+0x118>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00b      	beq.n	8005ebe <TIM_OC3_SetConfig+0xbe>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f1c <TIM_OC3_SetConfig+0x11c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <TIM_OC3_SetConfig+0xbe>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f20 <TIM_OC3_SetConfig+0x120>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_OC3_SetConfig+0xbe>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a16      	ldr	r2, [pc, #88]	@ (8005f14 <TIM_OC3_SetConfig+0x114>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d113      	bne.n	8005ee6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	621a      	str	r2, [r3, #32]
}
 8005f00:	bf00      	nop
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40013400 	.word	0x40013400
 8005f14:	40015000 	.word	0x40015000
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800

08005f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	031b      	lsls	r3, r3, #12
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a2c      	ldr	r2, [pc, #176]	@ (8006034 <TIM_OC4_SetConfig+0x110>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_OC4_SetConfig+0x74>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8006038 <TIM_OC4_SetConfig+0x114>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_OC4_SetConfig+0x74>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a2a      	ldr	r2, [pc, #168]	@ (800603c <TIM_OC4_SetConfig+0x118>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d10d      	bne.n	8005fb4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	031b      	lsls	r3, r3, #12
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8006034 <TIM_OC4_SetConfig+0x110>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xc0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006038 <TIM_OC4_SetConfig+0x114>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xc0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8006040 <TIM_OC4_SetConfig+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xc0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a1d      	ldr	r2, [pc, #116]	@ (8006044 <TIM_OC4_SetConfig+0x120>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xc0>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8006048 <TIM_OC4_SetConfig+0x124>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC4_SetConfig+0xc0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a17      	ldr	r2, [pc, #92]	@ (800603c <TIM_OC4_SetConfig+0x118>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d113      	bne.n	800600c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ff2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	019b      	lsls	r3, r3, #6
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	019b      	lsls	r3, r3, #6
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40013400 	.word	0x40013400
 800603c:	40015000 	.word	0x40015000
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	40014800 	.word	0x40014800

0800604c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a19      	ldr	r2, [pc, #100]	@ (8006108 <TIM_OC5_SetConfig+0xbc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <TIM_OC5_SetConfig+0x82>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a18      	ldr	r2, [pc, #96]	@ (800610c <TIM_OC5_SetConfig+0xc0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00f      	beq.n	80060ce <TIM_OC5_SetConfig+0x82>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a17      	ldr	r2, [pc, #92]	@ (8006110 <TIM_OC5_SetConfig+0xc4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00b      	beq.n	80060ce <TIM_OC5_SetConfig+0x82>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a16      	ldr	r2, [pc, #88]	@ (8006114 <TIM_OC5_SetConfig+0xc8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d007      	beq.n	80060ce <TIM_OC5_SetConfig+0x82>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a15      	ldr	r2, [pc, #84]	@ (8006118 <TIM_OC5_SetConfig+0xcc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_OC5_SetConfig+0x82>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a14      	ldr	r2, [pc, #80]	@ (800611c <TIM_OC5_SetConfig+0xd0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d109      	bne.n	80060e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	621a      	str	r2, [r3, #32]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800
 800611c:	40015000 	.word	0x40015000

08006120 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	051b      	lsls	r3, r3, #20
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a1a      	ldr	r2, [pc, #104]	@ (80061e0 <TIM_OC6_SetConfig+0xc0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d013      	beq.n	80061a4 <TIM_OC6_SetConfig+0x84>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a19      	ldr	r2, [pc, #100]	@ (80061e4 <TIM_OC6_SetConfig+0xc4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00f      	beq.n	80061a4 <TIM_OC6_SetConfig+0x84>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a18      	ldr	r2, [pc, #96]	@ (80061e8 <TIM_OC6_SetConfig+0xc8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00b      	beq.n	80061a4 <TIM_OC6_SetConfig+0x84>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a17      	ldr	r2, [pc, #92]	@ (80061ec <TIM_OC6_SetConfig+0xcc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d007      	beq.n	80061a4 <TIM_OC6_SetConfig+0x84>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a16      	ldr	r2, [pc, #88]	@ (80061f0 <TIM_OC6_SetConfig+0xd0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_OC6_SetConfig+0x84>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <TIM_OC6_SetConfig+0xd4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d109      	bne.n	80061b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40013400 	.word	0x40013400
 80061e8:	40014000 	.word	0x40014000
 80061ec:	40014400 	.word	0x40014400
 80061f0:	40014800 	.word	0x40014800
 80061f4:	40015000 	.word	0x40015000

080061f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 0201 	bic.w	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 030a 	bic.w	r3, r3, #10
 8006234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006256:	b480      	push	{r7}
 8006258:	b087      	sub	sp, #28
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f023 0210 	bic.w	r2, r3, #16
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	031b      	lsls	r3, r3, #12
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006292:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80062cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f043 0307 	orr.w	r3, r3, #7
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	609a      	str	r2, [r3, #8]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800630a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	021a      	lsls	r2, r3, #8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	431a      	orrs	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4313      	orrs	r3, r2
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	609a      	str	r2, [r3, #8]
}
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a26      	ldr	r2, [pc, #152]	@ (80063d4 <TIM_ResetCallback+0xa4>)
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a25      	ldr	r2, [pc, #148]	@ (80063d8 <TIM_ResetCallback+0xa8>)
 8006344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a24      	ldr	r2, [pc, #144]	@ (80063dc <TIM_ResetCallback+0xac>)
 800634c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a23      	ldr	r2, [pc, #140]	@ (80063e0 <TIM_ResetCallback+0xb0>)
 8006354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a22      	ldr	r2, [pc, #136]	@ (80063e4 <TIM_ResetCallback+0xb4>)
 800635c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a21      	ldr	r2, [pc, #132]	@ (80063e8 <TIM_ResetCallback+0xb8>)
 8006364:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a20      	ldr	r2, [pc, #128]	@ (80063ec <TIM_ResetCallback+0xbc>)
 800636c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a1f      	ldr	r2, [pc, #124]	@ (80063f0 <TIM_ResetCallback+0xc0>)
 8006374:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1e      	ldr	r2, [pc, #120]	@ (80063f4 <TIM_ResetCallback+0xc4>)
 800637c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1d      	ldr	r2, [pc, #116]	@ (80063f8 <TIM_ResetCallback+0xc8>)
 8006384:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <TIM_ResetCallback+0xcc>)
 800638c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <TIM_ResetCallback+0xd0>)
 8006394:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a1a      	ldr	r2, [pc, #104]	@ (8006404 <TIM_ResetCallback+0xd4>)
 800639c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a19      	ldr	r2, [pc, #100]	@ (8006408 <TIM_ResetCallback+0xd8>)
 80063a4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a18      	ldr	r2, [pc, #96]	@ (800640c <TIM_ResetCallback+0xdc>)
 80063ac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a17      	ldr	r2, [pc, #92]	@ (8006410 <TIM_ResetCallback+0xe0>)
 80063b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a16      	ldr	r2, [pc, #88]	@ (8006414 <TIM_ResetCallback+0xe4>)
 80063bc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a15      	ldr	r2, [pc, #84]	@ (8006418 <TIM_ResetCallback+0xe8>)
 80063c4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	08005975 	.word	0x08005975
 80063d8:	08005989 	.word	0x08005989
 80063dc:	08005a01 	.word	0x08005a01
 80063e0:	08005a15 	.word	0x08005a15
 80063e4:	080059b1 	.word	0x080059b1
 80063e8:	080059c5 	.word	0x080059c5
 80063ec:	0800599d 	.word	0x0800599d
 80063f0:	080059d9 	.word	0x080059d9
 80063f4:	080059ed 	.word	0x080059ed
 80063f8:	08005a29 	.word	0x08005a29
 80063fc:	08006671 	.word	0x08006671
 8006400:	08006685 	.word	0x08006685
 8006404:	08006699 	.word	0x08006699
 8006408:	080066ad 	.word	0x080066ad
 800640c:	080066c1 	.word	0x080066c1
 8006410:	080066d5 	.word	0x080066d5
 8006414:	080066e9 	.word	0x080066e9
 8006418:	080066fd 	.word	0x080066fd

0800641c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006430:	2302      	movs	r3, #2
 8006432:	e074      	b.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a34      	ldr	r2, [pc, #208]	@ (800652c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d009      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a33      	ldr	r2, [pc, #204]	@ (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d004      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a31      	ldr	r2, [pc, #196]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d108      	bne.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006478:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a21      	ldr	r2, [pc, #132]	@ (800652c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d01d      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1d      	ldr	r2, [pc, #116]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a15      	ldr	r2, [pc, #84]	@ (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a18      	ldr	r2, [pc, #96]	@ (8006544 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a11      	ldr	r2, [pc, #68]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10c      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4313      	orrs	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40013400 	.word	0x40013400
 8006534:	40015000 	.word	0x40015000
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40014000 	.word	0x40014000

08006548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006560:	2302      	movs	r3, #2
 8006562:	e078      	b.n	8006656 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006668 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a19      	ldr	r2, [pc, #100]	@ (800666c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d11c      	bne.n	8006644 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	051b      	lsls	r3, r3, #20
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40012c00 	.word	0x40012c00
 8006668:	40013400 	.word	0x40013400
 800666c:	40015000 	.word	0x40015000

08006670 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e050      	b.n	80067c4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006728:	2b00      	cmp	r3, #0
 800672a:	d114      	bne.n	8006756 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fbfb 	bl	8006f30 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a21      	ldr	r2, [pc, #132]	@ (80067cc <HAL_UART_Init+0xbc>)
 8006748:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2224      	movs	r2, #36	@ 0x24
 800675a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0201 	bic.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 ff28 	bl	80075cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fc29 	bl	8006fd4 <UART_SetConfig>
 8006782:	4603      	mov	r3, r0
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e01b      	b.n	80067c4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800679a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 ffa7 	bl	8007710 <UART_CheckIdleState>
 80067c2:	4603      	mov	r3, r0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	08001ac9 	.word	0x08001ac9

080067d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b0ba      	sub	sp, #232	@ 0xe8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80067fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80067fe:	4013      	ands	r3, r2
 8006800:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11b      	bne.n	8006844 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800680c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d015      	beq.n	8006844 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d009      	beq.n	8006844 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8312 	beq.w	8006e5e <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
      }
      return;
 8006842:	e30c      	b.n	8006e5e <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006844:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8129 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800684e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006852:	4b90      	ldr	r3, [pc, #576]	@ (8006a94 <HAL_UART_IRQHandler+0x2c4>)
 8006854:	4013      	ands	r3, r2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800685a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800685e:	4b8e      	ldr	r3, [pc, #568]	@ (8006a98 <HAL_UART_IRQHandler+0x2c8>)
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 811c 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d011      	beq.n	8006898 <HAL_UART_IRQHandler+0xc8>
 8006874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2201      	movs	r2, #1
 8006886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688e:	f043 0201 	orr.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d011      	beq.n	80068c8 <HAL_UART_IRQHandler+0xf8>
 80068a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2202      	movs	r2, #2
 80068b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068be:	f043 0204 	orr.w	r2, r3, #4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d011      	beq.n	80068f8 <HAL_UART_IRQHandler+0x128>
 80068d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00b      	beq.n	80068f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2204      	movs	r2, #4
 80068e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ee:	f043 0202 	orr.w	r2, r3, #2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d017      	beq.n	8006934 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d105      	bne.n	800691c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006910:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006914:	4b5f      	ldr	r3, [pc, #380]	@ (8006a94 <HAL_UART_IRQHandler+0x2c4>)
 8006916:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2208      	movs	r2, #8
 8006922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692a:	f043 0208 	orr.w	r2, r3, #8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800693c:	2b00      	cmp	r3, #0
 800693e:	d012      	beq.n	8006966 <HAL_UART_IRQHandler+0x196>
 8006940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006944:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00c      	beq.n	8006966 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695c:	f043 0220 	orr.w	r2, r3, #32
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8278 	beq.w	8006e62 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d013      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800697e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d105      	bne.n	8006996 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800698a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800698e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ba:	2b40      	cmp	r3, #64	@ 0x40
 80069bc:	d005      	beq.n	80069ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d058      	beq.n	8006a7c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 ffb7 	bl	800793e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069da:	2b40      	cmp	r3, #64	@ 0x40
 80069dc:	d148      	bne.n	8006a70 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3308      	adds	r3, #8
 8006a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1d9      	bne.n	80069de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d017      	beq.n	8006a64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a3a:	4a18      	ldr	r2, [pc, #96]	@ (8006a9c <HAL_UART_IRQHandler+0x2cc>)
 8006a3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fc fd08 	bl	800345a <HAL_DMA_Abort_IT>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01f      	beq.n	8006a90 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006a5e:	4610      	mov	r0, r2
 8006a60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a62:	e015      	b.n	8006a90 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6e:	e00f      	b.n	8006a90 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7a:	e009      	b.n	8006a90 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006a8e:	e1e8      	b.n	8006e62 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	bf00      	nop
    return;
 8006a92:	e1e6      	b.n	8006e62 <HAL_UART_IRQHandler+0x692>
 8006a94:	10000001 	.word	0x10000001
 8006a98:	04000120 	.word	0x04000120
 8006a9c:	08007a0b 	.word	0x08007a0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 8176 	bne.w	8006d96 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 816f 	beq.w	8006d96 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8168 	beq.w	8006d96 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2210      	movs	r2, #16
 8006acc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad8:	2b40      	cmp	r3, #64	@ 0x40
 8006ada:	f040 80dc 	bne.w	8006c96 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80b1 	beq.w	8006c58 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006afc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b00:	429a      	cmp	r2, r3
 8006b02:	f080 80a9 	bcs.w	8006c58 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f040 8087 	bne.w	8006c32 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1da      	bne.n	8006b24 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e1      	bne.n	8006b6e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3308      	adds	r3, #8
 8006bca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e3      	bne.n	8006baa <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c00:	f023 0310 	bic.w	r3, r3, #16
 8006c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e4      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fc fbbb 	bl	80033a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	1a8a      	subs	r2, r1, r2
 8006c4e:	b292      	uxth	r2, r2
 8006c50:	4611      	mov	r1, r2
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006c56:	e106      	b.n	8006e66 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c62:	429a      	cmp	r2, r3
 8006c64:	f040 80ff 	bne.w	8006e66 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	f040 80f5 	bne.w	8006e66 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8006c8e:	4611      	mov	r1, r2
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
      return;
 8006c94:	e0e7      	b.n	8006e66 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 80d9 	beq.w	8006e6a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8006cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80d4 	beq.w	8006e6a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e4      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	623b      	str	r3, [r7, #32]
   return(result);
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d0e:	f023 0301 	bic.w	r3, r3, #1
 8006d12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d20:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e1      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f023 0310 	bic.w	r3, r3, #16
 8006d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	69b9      	ldr	r1, [r7, #24]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	617b      	str	r3, [r7, #20]
   return(result);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e4      	bne.n	8006d48 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006d8a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8006d8e:	4611      	mov	r1, r2
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d94:	e069      	b.n	8006e6a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d010      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x5f4>
 8006da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006db6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dc2:	e055      	b.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d014      	beq.n	8006dfa <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006de0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d03e      	beq.n	8006e6e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
    }
    return;
 8006df8:	e039      	b.n	8006e6e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <HAL_UART_IRQHandler+0x64a>
 8006e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fe0d 	bl	8007a32 <UART_EndTransmit_IT>
    return;
 8006e18:	e02a      	b.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <HAL_UART_IRQHandler+0x66e>
 8006e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e2a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e3c:	e018      	b.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d012      	beq.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
 8006e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da0e      	bge.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e5c:	e008      	b.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
      return;
 8006e5e:	bf00      	nop
 8006e60:	e006      	b.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
    return;
 8006e62:	bf00      	nop
 8006e64:	e004      	b.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
      return;
 8006e66:	bf00      	nop
 8006e68:	e002      	b.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
      return;
 8006e6a:	bf00      	nop
 8006e6c:	e000      	b.n	8006e70 <HAL_UART_IRQHandler+0x6a0>
    return;
 8006e6e:	bf00      	nop
  }
}
 8006e70:	37e8      	adds	r7, #232	@ 0xe8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fa4 <UART_InitCallbacksToDefault+0x74>)
 8006f3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a19      	ldr	r2, [pc, #100]	@ (8006fa8 <UART_InitCallbacksToDefault+0x78>)
 8006f44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <UART_InitCallbacksToDefault+0x7c>)
 8006f4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a17      	ldr	r2, [pc, #92]	@ (8006fb0 <UART_InitCallbacksToDefault+0x80>)
 8006f54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a16      	ldr	r2, [pc, #88]	@ (8006fb4 <UART_InitCallbacksToDefault+0x84>)
 8006f5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a15      	ldr	r2, [pc, #84]	@ (8006fb8 <UART_InitCallbacksToDefault+0x88>)
 8006f64:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a14      	ldr	r2, [pc, #80]	@ (8006fbc <UART_InitCallbacksToDefault+0x8c>)
 8006f6c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a13      	ldr	r2, [pc, #76]	@ (8006fc0 <UART_InitCallbacksToDefault+0x90>)
 8006f74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a12      	ldr	r2, [pc, #72]	@ (8006fc4 <UART_InitCallbacksToDefault+0x94>)
 8006f7c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a11      	ldr	r2, [pc, #68]	@ (8006fc8 <UART_InitCallbacksToDefault+0x98>)
 8006f84:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a10      	ldr	r2, [pc, #64]	@ (8006fcc <UART_InitCallbacksToDefault+0x9c>)
 8006f8c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a0f      	ldr	r2, [pc, #60]	@ (8006fd0 <UART_InitCallbacksToDefault+0xa0>)
 8006f94:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	08006e8d 	.word	0x08006e8d
 8006fa8:	08006e79 	.word	0x08006e79
 8006fac:	08006eb5 	.word	0x08006eb5
 8006fb0:	08006ea1 	.word	0x08006ea1
 8006fb4:	08006ec9 	.word	0x08006ec9
 8006fb8:	08006edd 	.word	0x08006edd
 8006fbc:	08006ef1 	.word	0x08006ef1
 8006fc0:	08006f05 	.word	0x08006f05
 8006fc4:	08007a8d 	.word	0x08007a8d
 8006fc8:	08007aa1 	.word	0x08007aa1
 8006fcc:	08007ab5 	.word	0x08007ab5
 8006fd0:	08006f19 	.word	0x08006f19

08006fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd8:	b08c      	sub	sp, #48	@ 0x30
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4baa      	ldr	r3, [pc, #680]	@ (80072ac <UART_SetConfig+0x2d8>)
 8007004:	4013      	ands	r3, r2
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700c:	430b      	orrs	r3, r1
 800700e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a9f      	ldr	r2, [pc, #636]	@ (80072b0 <UART_SetConfig+0x2dc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800703c:	4313      	orrs	r3, r2
 800703e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800704a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007054:	430b      	orrs	r3, r1
 8007056:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	f023 010f 	bic.w	r1, r3, #15
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a90      	ldr	r2, [pc, #576]	@ (80072b4 <UART_SetConfig+0x2e0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d125      	bne.n	80070c4 <UART_SetConfig+0xf0>
 8007078:	4b8f      	ldr	r3, [pc, #572]	@ (80072b8 <UART_SetConfig+0x2e4>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d81a      	bhi.n	80070bc <UART_SetConfig+0xe8>
 8007086:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <UART_SetConfig+0xb8>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070ad 	.word	0x080070ad
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070b5 	.word	0x080070b5
 800709c:	2301      	movs	r3, #1
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e116      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070aa:	e112      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	e10e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e10a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e106      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7c      	ldr	r2, [pc, #496]	@ (80072bc <UART_SetConfig+0x2e8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d138      	bne.n	8007140 <UART_SetConfig+0x16c>
 80070ce:	4b7a      	ldr	r3, [pc, #488]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d4:	f003 030c 	and.w	r3, r3, #12
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	d82d      	bhi.n	8007138 <UART_SetConfig+0x164>
 80070dc:	a201      	add	r2, pc, #4	@ (adr r2, 80070e4 <UART_SetConfig+0x110>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	08007119 	.word	0x08007119
 80070e8:	08007139 	.word	0x08007139
 80070ec:	08007139 	.word	0x08007139
 80070f0:	08007139 	.word	0x08007139
 80070f4:	08007129 	.word	0x08007129
 80070f8:	08007139 	.word	0x08007139
 80070fc:	08007139 	.word	0x08007139
 8007100:	08007139 	.word	0x08007139
 8007104:	08007121 	.word	0x08007121
 8007108:	08007139 	.word	0x08007139
 800710c:	08007139 	.word	0x08007139
 8007110:	08007139 	.word	0x08007139
 8007114:	08007131 	.word	0x08007131
 8007118:	2300      	movs	r3, #0
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e0d8      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007120:	2302      	movs	r3, #2
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e0d4      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712e:	e0d0      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e0cc      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713e:	e0c8      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a5e      	ldr	r2, [pc, #376]	@ (80072c0 <UART_SetConfig+0x2ec>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d125      	bne.n	8007196 <UART_SetConfig+0x1c2>
 800714a:	4b5b      	ldr	r3, [pc, #364]	@ (80072b8 <UART_SetConfig+0x2e4>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007154:	2b30      	cmp	r3, #48	@ 0x30
 8007156:	d016      	beq.n	8007186 <UART_SetConfig+0x1b2>
 8007158:	2b30      	cmp	r3, #48	@ 0x30
 800715a:	d818      	bhi.n	800718e <UART_SetConfig+0x1ba>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d00a      	beq.n	8007176 <UART_SetConfig+0x1a2>
 8007160:	2b20      	cmp	r3, #32
 8007162:	d814      	bhi.n	800718e <UART_SetConfig+0x1ba>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <UART_SetConfig+0x19a>
 8007168:	2b10      	cmp	r3, #16
 800716a:	d008      	beq.n	800717e <UART_SetConfig+0x1aa>
 800716c:	e00f      	b.n	800718e <UART_SetConfig+0x1ba>
 800716e:	2300      	movs	r3, #0
 8007170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007174:	e0ad      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007176:	2302      	movs	r3, #2
 8007178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717c:	e0a9      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800717e:	2304      	movs	r3, #4
 8007180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007184:	e0a5      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007186:	2308      	movs	r3, #8
 8007188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718c:	e0a1      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800718e:	2310      	movs	r3, #16
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007194:	e09d      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a4a      	ldr	r2, [pc, #296]	@ (80072c4 <UART_SetConfig+0x2f0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d125      	bne.n	80071ec <UART_SetConfig+0x218>
 80071a0:	4b45      	ldr	r3, [pc, #276]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80071ac:	d016      	beq.n	80071dc <UART_SetConfig+0x208>
 80071ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80071b0:	d818      	bhi.n	80071e4 <UART_SetConfig+0x210>
 80071b2:	2b80      	cmp	r3, #128	@ 0x80
 80071b4:	d00a      	beq.n	80071cc <UART_SetConfig+0x1f8>
 80071b6:	2b80      	cmp	r3, #128	@ 0x80
 80071b8:	d814      	bhi.n	80071e4 <UART_SetConfig+0x210>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <UART_SetConfig+0x1f0>
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x200>
 80071c2:	e00f      	b.n	80071e4 <UART_SetConfig+0x210>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	e082      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d2:	e07e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071da:	e07a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e076      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e072      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a35      	ldr	r2, [pc, #212]	@ (80072c8 <UART_SetConfig+0x2f4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d12a      	bne.n	800724c <UART_SetConfig+0x278>
 80071f6:	4b30      	ldr	r3, [pc, #192]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007204:	d01a      	beq.n	800723c <UART_SetConfig+0x268>
 8007206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800720a:	d81b      	bhi.n	8007244 <UART_SetConfig+0x270>
 800720c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007210:	d00c      	beq.n	800722c <UART_SetConfig+0x258>
 8007212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007216:	d815      	bhi.n	8007244 <UART_SetConfig+0x270>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <UART_SetConfig+0x250>
 800721c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007220:	d008      	beq.n	8007234 <UART_SetConfig+0x260>
 8007222:	e00f      	b.n	8007244 <UART_SetConfig+0x270>
 8007224:	2300      	movs	r3, #0
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722a:	e052      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800722c:	2302      	movs	r3, #2
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007232:	e04e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007234:	2304      	movs	r3, #4
 8007236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723a:	e04a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800723c:	2308      	movs	r3, #8
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007242:	e046      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007244:	2310      	movs	r3, #16
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724a:	e042      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <UART_SetConfig+0x2dc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d13a      	bne.n	80072cc <UART_SetConfig+0x2f8>
 8007256:	4b18      	ldr	r3, [pc, #96]	@ (80072b8 <UART_SetConfig+0x2e4>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007264:	d01a      	beq.n	800729c <UART_SetConfig+0x2c8>
 8007266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800726a:	d81b      	bhi.n	80072a4 <UART_SetConfig+0x2d0>
 800726c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007270:	d00c      	beq.n	800728c <UART_SetConfig+0x2b8>
 8007272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007276:	d815      	bhi.n	80072a4 <UART_SetConfig+0x2d0>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <UART_SetConfig+0x2b0>
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007280:	d008      	beq.n	8007294 <UART_SetConfig+0x2c0>
 8007282:	e00f      	b.n	80072a4 <UART_SetConfig+0x2d0>
 8007284:	2300      	movs	r3, #0
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728a:	e022      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007292:	e01e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729a:	e01a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e016      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e012      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80072ac:	cfff69f3 	.word	0xcfff69f3
 80072b0:	40008000 	.word	0x40008000
 80072b4:	40013800 	.word	0x40013800
 80072b8:	40021000 	.word	0x40021000
 80072bc:	40004400 	.word	0x40004400
 80072c0:	40004800 	.word	0x40004800
 80072c4:	40004c00 	.word	0x40004c00
 80072c8:	40005000 	.word	0x40005000
 80072cc:	2310      	movs	r3, #16
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4aae      	ldr	r2, [pc, #696]	@ (8007590 <UART_SetConfig+0x5bc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	f040 8097 	bne.w	800740c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d823      	bhi.n	800732e <UART_SetConfig+0x35a>
 80072e6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <UART_SetConfig+0x318>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007311 	.word	0x08007311
 80072f0:	0800732f 	.word	0x0800732f
 80072f4:	08007319 	.word	0x08007319
 80072f8:	0800732f 	.word	0x0800732f
 80072fc:	0800731f 	.word	0x0800731f
 8007300:	0800732f 	.word	0x0800732f
 8007304:	0800732f 	.word	0x0800732f
 8007308:	0800732f 	.word	0x0800732f
 800730c:	08007327 	.word	0x08007327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007310:	f7fd f94a 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8007314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007316:	e010      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007318:	4b9e      	ldr	r3, [pc, #632]	@ (8007594 <UART_SetConfig+0x5c0>)
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800731c:	e00d      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800731e:	f7fd f8d5 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8007322:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007324:	e009      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800732c:	e005      	b.n	800733a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007338:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8130 	beq.w	80075a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	4a94      	ldr	r2, [pc, #592]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800734c:	461a      	mov	r2, r3
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	fbb3 f3f2 	udiv	r3, r3, r2
 8007354:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	429a      	cmp	r2, r3
 8007364:	d305      	bcc.n	8007372 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	429a      	cmp	r2, r3
 8007370:	d903      	bls.n	800737a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007378:	e113      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	2200      	movs	r2, #0
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	60fa      	str	r2, [r7, #12]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	4a84      	ldr	r2, [pc, #528]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738c:	b29b      	uxth	r3, r3
 800738e:	2200      	movs	r2, #0
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800739c:	f7f8 ff3c 	bl	8000218 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4610      	mov	r0, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	020b      	lsls	r3, r1, #8
 80073b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073b6:	0202      	lsls	r2, r0, #8
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	6849      	ldr	r1, [r1, #4]
 80073bc:	0849      	lsrs	r1, r1, #1
 80073be:	2000      	movs	r0, #0
 80073c0:	460c      	mov	r4, r1
 80073c2:	4605      	mov	r5, r0
 80073c4:	eb12 0804 	adds.w	r8, r2, r4
 80073c8:	eb43 0905 	adc.w	r9, r3, r5
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	469a      	mov	sl, r3
 80073d4:	4693      	mov	fp, r2
 80073d6:	4652      	mov	r2, sl
 80073d8:	465b      	mov	r3, fp
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f8 ff1b 	bl	8000218 <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4613      	mov	r3, r2
 80073e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073f0:	d308      	bcc.n	8007404 <UART_SetConfig+0x430>
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073f8:	d204      	bcs.n	8007404 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	e0ce      	b.n	80075a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800740a:	e0ca      	b.n	80075a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007414:	d166      	bne.n	80074e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007416:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800741a:	2b08      	cmp	r3, #8
 800741c:	d827      	bhi.n	800746e <UART_SetConfig+0x49a>
 800741e:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <UART_SetConfig+0x450>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007449 	.word	0x08007449
 8007428:	08007451 	.word	0x08007451
 800742c:	08007459 	.word	0x08007459
 8007430:	0800746f 	.word	0x0800746f
 8007434:	0800745f 	.word	0x0800745f
 8007438:	0800746f 	.word	0x0800746f
 800743c:	0800746f 	.word	0x0800746f
 8007440:	0800746f 	.word	0x0800746f
 8007444:	08007467 	.word	0x08007467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fd f8ae 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 800744c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800744e:	e014      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007450:	f7fd f8c0 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8007454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007456:	e010      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007458:	4b4e      	ldr	r3, [pc, #312]	@ (8007594 <UART_SetConfig+0x5c0>)
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800745c:	e00d      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745e:	f7fd f835 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8007462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007464:	e009      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800746c:	e005      	b.n	800747a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8090 	beq.w	80075a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	4a44      	ldr	r2, [pc, #272]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800748c:	461a      	mov	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	fbb3 f3f2 	udiv	r3, r3, r2
 8007494:	005a      	lsls	r2, r3, #1
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	441a      	add	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	d916      	bls.n	80074dc <UART_SetConfig+0x508>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b4:	d212      	bcs.n	80074dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f023 030f 	bic.w	r3, r3, #15
 80074be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	8bfb      	ldrh	r3, [r7, #30]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	8bfa      	ldrh	r2, [r7, #30]
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	e062      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074e2:	e05e      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d828      	bhi.n	800753e <UART_SetConfig+0x56a>
 80074ec:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0x520>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007519 	.word	0x08007519
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007529 	.word	0x08007529
 8007500:	0800753f 	.word	0x0800753f
 8007504:	0800752f 	.word	0x0800752f
 8007508:	0800753f 	.word	0x0800753f
 800750c:	0800753f 	.word	0x0800753f
 8007510:	0800753f 	.word	0x0800753f
 8007514:	08007537 	.word	0x08007537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007518:	f7fd f846 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 800751c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800751e:	e014      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007520:	f7fd f858 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8007524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007526:	e010      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007528:	4b1a      	ldr	r3, [pc, #104]	@ (8007594 <UART_SetConfig+0x5c0>)
 800752a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800752c:	e00d      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752e:	f7fc ffcd 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8007532:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007534:	e009      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800753c:	e005      	b.n	800754a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007548:	bf00      	nop
    }

    if (pclk != 0U)
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d028      	beq.n	80075a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	4a10      	ldr	r2, [pc, #64]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800755a:	461a      	mov	r2, r3
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	441a      	add	r2, r3
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007572:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d910      	bls.n	800759c <UART_SetConfig+0x5c8>
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007580:	d20c      	bcs.n	800759c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	b29a      	uxth	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60da      	str	r2, [r3, #12]
 800758c:	e009      	b.n	80075a2 <UART_SetConfig+0x5ce>
 800758e:	bf00      	nop
 8007590:	40008000 	.word	0x40008000
 8007594:	00f42400 	.word	0x00f42400
 8007598:	08007da8 	.word	0x08007da8
      }
      else
      {
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2200      	movs	r2, #0
 80075b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3730      	adds	r7, #48	@ 0x30
 80075c6:	46bd      	mov	sp, r7
 80075c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01a      	beq.n	80076e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ca:	d10a      	bne.n	80076e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	605a      	str	r2, [r3, #4]
  }
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b098      	sub	sp, #96	@ 0x60
 8007714:	af02      	add	r7, sp, #8
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007720:	f7fa fb7e 	bl	8001e20 <HAL_GetTick>
 8007724:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d12f      	bne.n	8007794 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773c:	2200      	movs	r2, #0
 800773e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f88e 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d022      	beq.n	8007794 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800775c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007762:	653b      	str	r3, [r7, #80]	@ 0x50
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776c:	647b      	str	r3, [r7, #68]	@ 0x44
 800776e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800777a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e6      	bne.n	800774e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e063      	b.n	800785c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d149      	bne.n	8007836 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077aa:	2200      	movs	r2, #0
 80077ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f857 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d03c      	beq.n	8007836 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30
 80077dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e6      	bne.n	80077bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800780e:	61fa      	str	r2, [r7, #28]
 8007810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	69b9      	ldr	r1, [r7, #24]
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	617b      	str	r3, [r7, #20]
   return(result);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e5      	bne.n	80077ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e012      	b.n	800785c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3758      	adds	r7, #88	@ 0x58
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	4613      	mov	r3, r2
 8007872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007874:	e04f      	b.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787c:	d04b      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787e:	f7fa facf 	bl	8001e20 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	429a      	cmp	r2, r3
 800788c:	d302      	bcc.n	8007894 <UART_WaitOnFlagUntilTimeout+0x30>
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e04e      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d037      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b80      	cmp	r3, #128	@ 0x80
 80078aa:	d034      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d031      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d110      	bne.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2208      	movs	r2, #8
 80078c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f838 	bl	800793e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2208      	movs	r2, #8
 80078d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e029      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078f0:	d111      	bne.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f81e 	bl	800793e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e00f      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	bf0c      	ite	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	2300      	movne	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d0a0      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800793e:	b480      	push	{r7}
 8007940:	b095      	sub	sp, #84	@ 0x54
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800795a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007964:	643b      	str	r3, [r7, #64]	@ 0x40
 8007966:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800796a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	61fb      	str	r3, [r7, #28]
   return(result);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800799c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800799e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e3      	bne.n	8007978 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d118      	bne.n	80079ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f023 0310 	bic.w	r3, r3, #16
 80079cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6979      	ldr	r1, [r7, #20]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	613b      	str	r3, [r7, #16]
   return(result);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079fe:	bf00      	nop
 8007a00:	3754      	adds	r7, #84	@ 0x54
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b088      	sub	sp, #32
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a4e:	61fb      	str	r3, [r7, #28]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6979      	ldr	r1, [r7, #20]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	613b      	str	r3, [r7, #16]
   return(result);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e6      	bne.n	8007a3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a84:	bf00      	nop
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d101      	bne.n	8007ade <HAL_UARTEx_DisableFifoMode+0x16>
 8007ada:	2302      	movs	r3, #2
 8007adc:	e027      	b.n	8007b2e <HAL_UARTEx_DisableFifoMode+0x66>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2224      	movs	r2, #36	@ 0x24
 8007aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0201 	bic.w	r2, r2, #1
 8007b04:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d101      	bne.n	8007b52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b4e:	2302      	movs	r3, #2
 8007b50:	e02d      	b.n	8007bae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2224      	movs	r2, #36	@ 0x24
 8007b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0201 	bic.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f850 	bl	8007c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e02d      	b.n	8007c2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2224      	movs	r2, #36	@ 0x24
 8007bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0201 	bic.w	r2, r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f812 	bl	8007c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d108      	bne.n	8007c56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c54:	e031      	b.n	8007cba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c56:	2308      	movs	r3, #8
 8007c58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c5a:	2308      	movs	r3, #8
 8007c5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	0e5b      	lsrs	r3, r3, #25
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	0f5b      	lsrs	r3, r3, #29
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	7b3a      	ldrb	r2, [r7, #12]
 8007c82:	4911      	ldr	r1, [pc, #68]	@ (8007cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8007c84:	5c8a      	ldrb	r2, [r1, r2]
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c8a:	7b3a      	ldrb	r2, [r7, #12]
 8007c8c:	490f      	ldr	r1, [pc, #60]	@ (8007ccc <UARTEx_SetNbDataToProcess+0x98>)
 8007c8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	7b7a      	ldrb	r2, [r7, #13]
 8007ca0:	4909      	ldr	r1, [pc, #36]	@ (8007cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8007ca2:	5c8a      	ldrb	r2, [r1, r2]
 8007ca4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ca8:	7b7a      	ldrb	r2, [r7, #13]
 8007caa:	4908      	ldr	r1, [pc, #32]	@ (8007ccc <UARTEx_SetNbDataToProcess+0x98>)
 8007cac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cae:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	08007dc0 	.word	0x08007dc0
 8007ccc:	08007dc8 	.word	0x08007dc8

08007cd0 <memset>:
 8007cd0:	4402      	add	r2, r0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d100      	bne.n	8007cda <memset+0xa>
 8007cd8:	4770      	bx	lr
 8007cda:	f803 1b01 	strb.w	r1, [r3], #1
 8007cde:	e7f9      	b.n	8007cd4 <memset+0x4>

08007ce0 <__errno>:
 8007ce0:	4b01      	ldr	r3, [pc, #4]	@ (8007ce8 <__errno+0x8>)
 8007ce2:	6818      	ldr	r0, [r3, #0]
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	2000000c 	.word	0x2000000c

08007cec <__libc_init_array>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	4d0d      	ldr	r5, [pc, #52]	@ (8007d24 <__libc_init_array+0x38>)
 8007cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8007d28 <__libc_init_array+0x3c>)
 8007cf2:	1b64      	subs	r4, r4, r5
 8007cf4:	10a4      	asrs	r4, r4, #2
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	42a6      	cmp	r6, r4
 8007cfa:	d109      	bne.n	8007d10 <__libc_init_array+0x24>
 8007cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8007d2c <__libc_init_array+0x40>)
 8007cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8007d30 <__libc_init_array+0x44>)
 8007d00:	f000 f83a 	bl	8007d78 <_init>
 8007d04:	1b64      	subs	r4, r4, r5
 8007d06:	10a4      	asrs	r4, r4, #2
 8007d08:	2600      	movs	r6, #0
 8007d0a:	42a6      	cmp	r6, r4
 8007d0c:	d105      	bne.n	8007d1a <__libc_init_array+0x2e>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d14:	4798      	blx	r3
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7ee      	b.n	8007cf8 <__libc_init_array+0xc>
 8007d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1e:	4798      	blx	r3
 8007d20:	3601      	adds	r6, #1
 8007d22:	e7f2      	b.n	8007d0a <__libc_init_array+0x1e>
 8007d24:	08007dd8 	.word	0x08007dd8
 8007d28:	08007dd8 	.word	0x08007dd8
 8007d2c:	08007dd8 	.word	0x08007dd8
 8007d30:	08007ddc 	.word	0x08007ddc

08007d34 <sqrtf>:
 8007d34:	b508      	push	{r3, lr}
 8007d36:	ed2d 8b02 	vpush	{d8}
 8007d3a:	eeb0 8a40 	vmov.f32	s16, s0
 8007d3e:	f000 f817 	bl	8007d70 <__ieee754_sqrtf>
 8007d42:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4a:	d60c      	bvs.n	8007d66 <sqrtf+0x32>
 8007d4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007d6c <sqrtf+0x38>
 8007d50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d58:	d505      	bpl.n	8007d66 <sqrtf+0x32>
 8007d5a:	f7ff ffc1 	bl	8007ce0 <__errno>
 8007d5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007d62:	2321      	movs	r3, #33	@ 0x21
 8007d64:	6003      	str	r3, [r0, #0]
 8007d66:	ecbd 8b02 	vpop	{d8}
 8007d6a:	bd08      	pop	{r3, pc}
 8007d6c:	00000000 	.word	0x00000000

08007d70 <__ieee754_sqrtf>:
 8007d70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007d74:	4770      	bx	lr
	...

08007d78 <_init>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr

08007d84 <_fini>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	bf00      	nop
 8007d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8a:	bc08      	pop	{r3}
 8007d8c:	469e      	mov	lr, r3
 8007d8e:	4770      	bx	lr
