
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc74  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800de4c  0800de4c  0000ee4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e25c  0800e25c  000102b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e25c  0800e25c  0000f25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e264  0800e264  000102b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e264  0800e264  0000f264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e268  0800e268  0000f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b4  20000000  0800e26c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b78  200002b8  0800e520  000102b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e30  0800e520  00010e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027d16  00000000  00000000  000102e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000494d  00000000  00000000  00037ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  0003c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c3  00000000  00000000  0003e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056f5  00000000  00000000  0003fb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026b9b  00000000  00000000  000451f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a610  00000000  00000000  0006bd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001863a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c94  00000000  00000000  001863e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018e07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002b8 	.word	0x200002b8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800de34 	.word	0x0800de34

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002bc 	.word	0x200002bc
 8000214:	0800de34 	.word	0x0800de34

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000ea0:	213c      	movs	r1, #60	@ 0x3c
 8000ea2:	6838      	ldr	r0, [r7, #0]
 8000ea4:	f007 fbf2 	bl	800868c <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef8:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	dd05      	ble.n	8000f1a <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8000f14:	3b60      	subs	r3, #96	@ 0x60
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e008      	b.n	8000f2c <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4a48      	ldr	r2, [pc, #288]	@ (8001040 <Encoder_Update+0x15c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	da04      	bge.n	8000f2c <Encoder_Update+0x48>
        deltaRaw += 60000;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8000f28:	3360      	adds	r3, #96	@ 0x60
 8000f2a:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3c:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001044 <Encoder_Update+0x160>
 8000f40:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f44:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001048 <Encoder_Update+0x164>
 8000f48:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f66:	ed97 7a00 	vldr	s14, [r7]
 8000f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f84:	ed97 7a00 	vldr	s14, [r7]
 8000f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f98:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800104c <Encoder_Update+0x168>
 8000f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fcc:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001048 <Encoder_Update+0x164>
 8000fd0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000fd4:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8000fd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000ff2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ff6:	ed97 7a00 	vldr	s14, [r7]
 8000ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001010:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001014:	ed97 7a00 	vldr	s14, [r7]
 8001018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	ffff8ad0 	.word	0xffff8ad0
 8001044:	40c90fda 	.word	0x40c90fda
 8001048:	463b8000 	.word	0x463b8000
 800104c:	42651738 	.word	0x42651738

08001050 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	ee07 3a90 	vmov	s15, r3
}
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	ee07 3a90 	vmov	s15, r3
}
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <Encoder_GetPosition_mm>:

float Encoder_GetDegree(Encoder *enc) {
	return enc->position_degree;
}

float Encoder_GetPosition_mm(Encoder *enc) {
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	ee07 3a90 	vmov	s15, r3
}
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d4:	ee07 3a90 	vmov	s15, r3
}
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <PS2_ButtonCircle>:

    HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
//    HAL_Delay(5);
}

uint8_t PS2_ButtonCircle() {
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <PS2_ButtonCircle+0x20>)
 80010ee:	791b      	ldrb	r3, [r3, #4]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	200002d4 	.word	0x200002d4

0800110c <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <PS2_ButtonSquare+0x1c>)
 8001112:	791b      	ldrb	r3, [r3, #4]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	09db      	lsrs	r3, r3, #7
 800111c:	b2db      	uxtb	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	200002d4 	.word	0x200002d4

0800112c <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <PS2_ButtonTriangle+0x20>)
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	bf0c      	ite	eq
 800113c:	2301      	moveq	r3, #1
 800113e:	2300      	movne	r3, #0
 8001140:	b2db      	uxtb	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	200002d4 	.word	0x200002d4

08001150 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <PS2_ButtonCross+0x20>)
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf0c      	ite	eq
 8001160:	2301      	moveq	r3, #1
 8001162:	2300      	movne	r3, #0
 8001164:	b2db      	uxtb	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	200002d4 	.word	0x200002d4

08001174 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <PS2_ButtonR1+0x20>)
 800117a:	791b      	ldrb	r3, [r3, #4]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	200002d4 	.word	0x200002d4

08001198 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <PS2_ButtonR2+0x20>)
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	200002d4 	.word	0x200002d4

080011bc <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <PS2_ButtonSelect+0x20>)
 80011c2:	78db      	ldrb	r3, [r3, #3]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	200002d4 	.word	0x200002d4

080011e0 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <PS2_ButtonStart+0x20>)
 80011e6:	78db      	ldrb	r3, [r3, #3]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	200002d4 	.word	0x200002d4

08001204 <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <PS2_ButtonL2+0x20>)
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf0c      	ite	eq
 8001214:	2301      	moveq	r3, #1
 8001216:	2300      	movne	r3, #0
 8001218:	b2db      	uxtb	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	200002d4 	.word	0x200002d4

08001228 <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3370      	adds	r3, #112	@ 0x70
 8001236:	2204      	movs	r2, #4
 8001238:	2104      	movs	r1, #4
 800123a:	f00b fbe4 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0008 	add.w	r0, r3, #8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	33b0      	adds	r3, #176	@ 0xb0
 8001248:	2204      	movs	r2, #4
 800124a:	2104      	movs	r1, #4
 800124c:	f00b fbdb 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f103 0010 	add.w	r0, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	33f0      	adds	r3, #240	@ 0xf0
 800125a:	2204      	movs	r2, #4
 800125c:	2104      	movs	r1, #4
 800125e:	f00b fbd2 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f103 0018 	add.w	r0, r3, #24
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800126e:	2204      	movs	r2, #4
 8001270:	2104      	movs	r1, #4
 8001272:	f00b fbc8 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f103 0020 	add.w	r0, r3, #32
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8001282:	2204      	movs	r2, #4
 8001284:	2104      	movs	r1, #4
 8001286:	f00b fbbe 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001296:	2204      	movs	r2, #4
 8001298:	2104      	movs	r1, #4
 800129a:	f00b fbb4 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80012aa:	2204      	movs	r2, #4
 80012ac:	2104      	movs	r1, #4
 80012ae:	f00b fbaa 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80012be:	2201      	movs	r2, #1
 80012c0:	2104      	movs	r1, #4
 80012c2:	f00b fba0 	bl	800ca06 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80012d2:	2201      	movs	r2, #1
 80012d4:	2104      	movs	r1, #4
 80012d6:	f00b fb96 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80012e6:	2201      	movs	r2, #1
 80012e8:	2104      	movs	r1, #4
 80012ea:	f00b fb8c 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012fa:	2201      	movs	r2, #1
 80012fc:	2104      	movs	r1, #4
 80012fe:	f00b fb82 	bl	800ca06 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800130e:	2204      	movs	r2, #4
 8001310:	2104      	movs	r1, #4
 8001312:	f00b fb78 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001322:	2204      	movs	r2, #4
 8001324:	2104      	movs	r1, #4
 8001326:	f00b fb6e 	bl	800ca06 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001336:	2204      	movs	r2, #4
 8001338:	2104      	movs	r1, #4
 800133a:	f00b fb64 	bl	800ca06 <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	e00b      	b.n	800135c <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	338c      	adds	r3, #140	@ 0x8c
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	3304      	adds	r3, #4
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b03      	cmp	r3, #3
 8001360:	ddf0      	ble.n	8001344 <Kalman_Init+0x11c>
    }
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e01c      	b.n	80013b8 <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	e013      	b.n	80013ac <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	429a      	cmp	r2, r3
 800138a:	d101      	bne.n	8001390 <Kalman_SetProcessNoise+0x24>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	e001      	b.n	8001394 <Kalman_SetProcessNoise+0x28>
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	0091      	lsls	r1, r2, #2
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	440a      	add	r2, r1
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	324c      	adds	r2, #76	@ 0x4c
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	440a      	add	r2, r1
 80013a4:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	dde8      	ble.n	8001384 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	dddf      	ble.n	800137e <Kalman_SetProcessNoise+0x12>
        }
    }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e01c      	b.n	8001418 <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	e013      	b.n	800140c <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d101      	bne.n	80013f0 <Kalman_SetMeasurementNoise+0x24>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	e001      	b.n	80013f4 <Kalman_SetMeasurementNoise+0x28>
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	0091      	lsls	r1, r2, #2
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	440a      	add	r2, r1
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	325c      	adds	r2, #92	@ 0x5c
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	440a      	add	r2, r1
 8001404:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3301      	adds	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b03      	cmp	r3, #3
 8001410:	dde8      	ble.n	80013e4 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3301      	adds	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b03      	cmp	r3, #3
 800141c:	dddf      	ble.n	80013de <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3358      	adds	r3, #88	@ 0x58
 8001460:	461a      	mov	r2, r3
 8001462:	f00b fe5f 	bl	800d124 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f103 0008 	add.w	r0, r3, #8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3360      	adds	r3, #96	@ 0x60
 8001476:	461a      	mov	r2, r3
 8001478:	f00b fe54 	bl	800d124 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3340      	adds	r3, #64	@ 0x40
 800148c:	461a      	mov	r2, r3
 800148e:	f00b fa7f 	bl	800c990 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3358      	adds	r3, #88	@ 0x58
 800149e:	461a      	mov	r2, r3
 80014a0:	f00b fe40 	bl	800d124 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3360      	adds	r3, #96	@ 0x60
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f00b feee 	bl	800d28e <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3328      	adds	r3, #40	@ 0x28
 80014c2:	461a      	mov	r2, r3
 80014c4:	f00b fe2e 	bl	800d124 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0118 	add.w	r1, r3, #24
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3328      	adds	r3, #40	@ 0x28
 80014d8:	461a      	mov	r2, r3
 80014da:	f00b fa59 	bl	800c990 <arm_mat_add_f32>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b088      	sub	sp, #32
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	e00e      	b.n	8001514 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3394      	adds	r3, #148	@ 0x94
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3304      	adds	r3, #4
 800150c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b03      	cmp	r3, #3
 8001518:	dded      	ble.n	80014f6 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f103 0210 	add.w	r2, r3, #16
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3360      	adds	r3, #96	@ 0x60
 8001524:	4619      	mov	r1, r3
 8001526:	4610      	mov	r0, r2
 8001528:	f00b feb1 	bl	800d28e <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3358      	adds	r3, #88	@ 0x58
 800153c:	461a      	mov	r2, r3
 800153e:	f00b fdf1 	bl	800d124 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f103 0010 	add.w	r0, r3, #16
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3368      	adds	r3, #104	@ 0x68
 8001552:	461a      	mov	r2, r3
 8001554:	f00b fde6 	bl	800d124 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f103 0120 	add.w	r1, r3, #32
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3368      	adds	r3, #104	@ 0x68
 8001568:	461a      	mov	r2, r3
 800156a:	f00b fa11 	bl	800c990 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3368      	adds	r3, #104	@ 0x68
 8001578:	4619      	mov	r1, r3
 800157a:	4610      	mov	r0, r2
 800157c:	f00b fa5b 	bl	800ca36 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3330      	adds	r3, #48	@ 0x30
 8001590:	461a      	mov	r2, r3
 8001592:	f00b fdc7 	bl	800d124 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f103 0010 	add.w	r0, r3, #16
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3348      	adds	r3, #72	@ 0x48
 80015a6:	461a      	mov	r2, r3
 80015a8:	f00b fdbc 	bl	800d124 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	e01c      	b.n	80015ec <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	3394      	adds	r3, #148	@ 0x94
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3304      	adds	r3, #4
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3390      	adds	r3, #144	@ 0x90
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3304      	adds	r3, #4
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	3390      	adds	r3, #144	@ 0x90
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3304      	adds	r3, #4
 80015e2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	dddf      	ble.n	80015b2 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3348      	adds	r3, #72	@ 0x48
 8001602:	461a      	mov	r2, r3
 8001604:	f00b fd8e 	bl	800d124 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e01c      	b.n	8001648 <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	338c      	adds	r3, #140	@ 0x8c
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	3304      	adds	r3, #4
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3390      	adds	r3, #144	@ 0x90
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3304      	adds	r3, #4
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	338c      	adds	r3, #140	@ 0x8c
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3304      	adds	r3, #4
 800163e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b03      	cmp	r3, #3
 800164c:	dddf      	ble.n	800160e <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e00b      	b.n	800166c <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	3398      	adds	r3, #152	@ 0x98
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3304      	adds	r3, #4
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	3301      	adds	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	ddf0      	ble.n	8001654 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e00e      	b.n	8001696 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	3398      	adds	r3, #152	@ 0x98
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3304      	adds	r3, #4
 800168a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800168e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b03      	cmp	r3, #3
 800169a:	dded      	ble.n	8001678 <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f103 0110 	add.w	r1, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3360      	adds	r3, #96	@ 0x60
 80016ac:	461a      	mov	r2, r3
 80016ae:	f00b fd39 	bl	800d124 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3358      	adds	r3, #88	@ 0x58
 80016c2:	461a      	mov	r2, r3
 80016c4:	f00b fda8 	bl	800d218 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3328      	adds	r3, #40	@ 0x28
 80016d8:	461a      	mov	r2, r3
 80016da:	f00b fd23 	bl	800d124 <arm_mat_mult_f32>
}
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <modbus_1t5_Timeout+0x1c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2201      	movs	r2, #1
 80016f6:	751a      	strb	r2, [r3, #20]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	200002dc 	.word	0x200002dc

08001708 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <modbus_3t5_Timeout+0x1c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	755a      	strb	r2, [r3, #21]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200002dc 	.word	0x200002dc

08001728 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <modbus_UART_Recived+0x60>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <modbus_UART_Recived+0x60>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8001742:	1c59      	adds	r1, r3, #1
 8001744:	b289      	uxth	r1, r1
 8001746:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 800174a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800174e:	d210      	bcs.n	8001772 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <modbus_UART_Recived+0x60>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68d8      	ldr	r0, [r3, #12]
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <modbus_UART_Recived+0x60>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <modbus_UART_Recived+0x60>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001762:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001766:	4413      	add	r3, r2
 8001768:	3302      	adds	r3, #2
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	f008 fd9d 	bl	800a2ac <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001772:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <modbus_UART_Recived+0x60>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200002dc 	.word	0x200002dc

0800178c <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001796:	4a24      	ldr	r2, [pc, #144]	@ (8001828 <Modbus_init+0x9c>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800179c:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <Modbus_init+0x9c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80017a4:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <Modbus_init+0x9c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	4a20      	ldr	r2, [pc, #128]	@ (800182c <Modbus_init+0xa0>)
 80017ac:	2114      	movs	r1, #20
 80017ae:	4618      	mov	r0, r3
 80017b0:	f007 fc72 	bl	8009098 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <Modbus_init+0x9c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <Modbus_init+0xa4>)
 80017bc:	210e      	movs	r1, #14
 80017be:	4618      	mov	r0, r3
 80017c0:	f007 fc6a 	bl	8009098 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <Modbus_init+0x9c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001834 <Modbus_init+0xa8>)
 80017cc:	2103      	movs	r1, #3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f008 fcb2 	bl	800a138 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <Modbus_init+0x9c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68d8      	ldr	r0, [r3, #12]
 80017da:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <Modbus_init+0x9c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <Modbus_init+0x9c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80017e6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80017ea:	4413      	add	r3, r2
 80017ec:	3302      	adds	r3, #2
 80017ee:	2201      	movs	r2, #1
 80017f0:	4619      	mov	r1, r3
 80017f2:	f008 fd5b 	bl	800a2ac <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <Modbus_init+0x9c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10c      	bne.n	8001820 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <Modbus_init+0x9c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4618      	mov	r0, r3
 800180e:	f006 fb2d 	bl	8007e6c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <Modbus_init+0x9c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f006 fdf4 	bl	8008408 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200002dc 	.word	0x200002dc
 800182c:	080016e9 	.word	0x080016e9
 8001830:	08001709 	.word	0x08001709
 8001834:	08001729 	.word	0x08001729

08001838 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001844:	23ff      	movs	r3, #255	@ 0xff
 8001846:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001848:	23ff      	movs	r3, #255	@ 0xff
 800184a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800184c:	e013      	b.n	8001876 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	7bbb      	ldrb	r3, [r7, #14]
 8001858:	4053      	eors	r3, r2
 800185a:	b2db      	uxtb	r3, r3
 800185c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800185e:	4a10      	ldr	r2, [pc, #64]	@ (80018a0 <CRC16+0x68>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	4053      	eors	r3, r2
 800186a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800186c:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <CRC16+0x6c>)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001876:	883b      	ldrh	r3, [r7, #0]
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	803a      	strh	r2, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e6      	bne.n	800184e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	b21b      	sxth	r3, r3
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b21a      	sxth	r2, r3
 8001888:	7bbb      	ldrb	r3, [r7, #14]
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21b      	sxth	r3, r3
 8001890:	b29b      	uxth	r3, r3
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000100 	.word	0x20000100
 80018a4:	20000000 	.word	0x20000000

080018a8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80018ae:	4b80      	ldr	r3, [pc, #512]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	7e1b      	ldrb	r3, [r3, #24]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d80a      	bhi.n	80018d0 <Modbus_Protocal_Worker+0x28>
 80018ba:	a201      	add	r2, pc, #4	@ (adr r2, 80018c0 <Modbus_Protocal_Worker+0x18>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	080018db 	.word	0x080018db
 80018c4:	08001a79 	.word	0x08001a79
 80018c8:	08001965 	.word	0x08001965
 80018cc:	0800198b 	.word	0x0800198b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80018d0:	4b77      	ldr	r3, [pc, #476]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	761a      	strb	r2, [r3, #24]
		break;
 80018d8:	e0e6      	b.n	8001aa8 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80018da:	4b75      	ldr	r3, [pc, #468]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80018e6:	f000 f9d5 	bl	8001c94 <Modbus_Emission>
 80018ea:	e01c      	b.n	8001926 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80018ec:	4b70      	ldr	r3, [pc, #448]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	7d9b      	ldrb	r3, [r3, #22]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d017      	beq.n	8001926 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80018f6:	4b6e      	ldr	r3, [pc, #440]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80018fe:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001906:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b67      	ldr	r3, [pc, #412]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800191e:	4b64      	ldr	r3, [pc, #400]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2203      	movs	r2, #3
 8001924:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001926:	4b62      	ldr	r3, [pc, #392]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001930:	2b20      	cmp	r3, #32
 8001932:	f040 80b2 	bne.w	8001a9a <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001936:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001940:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68d8      	ldr	r0, [r3, #12]
 8001946:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b59      	ldr	r3, [pc, #356]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001952:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001956:	4413      	add	r3, r2
 8001958:	3302      	adds	r3, #2
 800195a:	2201      	movs	r2, #1
 800195c:	4619      	mov	r1, r3
 800195e:	f008 fca5 	bl	800a2ac <HAL_UART_Receive_IT>
		}
		break;
 8001962:	e09a      	b.n	8001a9a <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001964:	4b52      	ldr	r3, [pc, #328]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	7d1b      	ldrb	r3, [r3, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8097 	beq.w	8001a9e <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001970:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001978:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	22fe      	movs	r2, #254	@ 0xfe
 800197e:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001980:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2204      	movs	r2, #4
 8001986:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001988:	e089      	b.n	8001a9e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800198a:	4b49      	ldr	r3, [pc, #292]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	7d9b      	ldrb	r3, [r3, #22]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8001994:	4b46      	ldr	r3, [pc, #280]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80019a0:	4b43      	ldr	r3, [pc, #268]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	22ff      	movs	r2, #255	@ 0xff
 80019a6:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80019a8:	4b41      	ldr	r3, [pc, #260]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80019b0:	f113 0f02 	cmn.w	r3, #2
 80019b4:	d150      	bne.n	8001a58 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80019b6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80019be:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80019c6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80019ce:	3b02      	subs	r3, #2
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f7ff ff30 	bl	8001838 <CRC16>
 80019d8:	4603      	mov	r3, r0
 80019da:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80019dc:	793a      	ldrb	r2, [r7, #4]
 80019de:	4b34      	ldr	r3, [pc, #208]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80019ea:	3b02      	subs	r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d10c      	bne.n	8001a10 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80019f6:	797a      	ldrb	r2, [r7, #5]
 80019f8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001a04:	3b01      	subs	r3, #1
 8001a06:	440b      	add	r3, r1
 8001a08:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d004      	beq.n	8001a1a <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001a10:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	22ff      	movs	r2, #255	@ 0xff
 8001a16:	75da      	strb	r2, [r3, #23]
				break;
 8001a18:	e046      	b.n	8001aa8 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001a1a:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001a22:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d113      	bne.n	8001a54 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001a2c:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001a3c:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001a46:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f00b fc93 	bl	800d374 <memcpy>

			//execute command
			Modbus_frame_response();
 8001a4e:	f000 f909 	bl	8001c64 <Modbus_frame_response>
 8001a52:	e001      	b.n	8001a58 <Modbus_Protocal_Worker+0x1b0>
				break;
 8001a54:	bf00      	nop
					}
		break;


	}
}
 8001a56:	e027      	b.n	8001aa8 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	7d5b      	ldrb	r3, [r3, #21]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01f      	beq.n	8001aa2 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f008 fce7 	bl	800a444 <HAL_UART_AbortReceive>
		break;
 8001a76:	e014      	b.n	8001aa2 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a78:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d10f      	bne.n	8001aa6 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <Modbus_Protocal_Worker+0x208>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	761a      	strb	r2, [r3, #24]
		break;
 8001a98:	e005      	b.n	8001aa6 <Modbus_Protocal_Worker+0x1fe>
		break;
 8001a9a:	bf00      	nop
 8001a9c:	e004      	b.n	8001aa8 <Modbus_Protocal_Worker+0x200>
		break;
 8001a9e:	bf00      	nop
 8001aa0:	e002      	b.n	8001aa8 <Modbus_Protocal_Worker+0x200>
		break;
 8001aa2:	bf00      	nop
 8001aa4:	e000      	b.n	8001aa8 <Modbus_Protocal_Worker+0x200>
		break;
 8001aa6:	bf00      	nop
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200002dc 	.word	0x200002dc

08001ab4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	7e9b      	ldrb	r3, [r3, #26]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	7ed2      	ldrb	r2, [r2, #27]
 8001aca:	4413      	add	r3, r2
 8001acc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001ace:	88fa      	ldrh	r2, [r7, #6]
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d903      	bls.n	8001ae2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001ada:	2002      	movs	r0, #2
 8001adc:	f000 f8a0 	bl	8001c20 <ModbusErrorReply>
			 return;
 8001ae0:	e023      	b.n	8001b2a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	440b      	add	r3, r1
 8001af2:	7f12      	ldrb	r2, [r2, #28]
 8001af4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	7f52      	ldrb	r2, [r2, #29]
 8001b08:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f00b fc2a 	bl	800d374 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <modbusWrite1Register+0x7c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2205      	movs	r2, #5
 8001b26:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200002dc 	.word	0x200002dc

08001b34 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001b3a:	4b38      	ldr	r3, [pc, #224]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	7f1b      	ldrb	r3, [r3, #28]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4a35      	ldr	r2, [pc, #212]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	7f52      	ldrb	r2, [r2, #29]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001b4e:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	7e9b      	ldrb	r3, [r3, #26]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4a30      	ldr	r2, [pc, #192]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	7ed2      	ldrb	r2, [r2, #27]
 8001b5e:	4413      	add	r3, r2
 8001b60:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <modbusRead1Register+0x3a>
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	2b7d      	cmp	r3, #125	@ 0x7d
 8001b6c:	d903      	bls.n	8001b76 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f000 f856 	bl	8001c20 <ModbusErrorReply>
		 return;
 8001b74:	e04e      	b.n	8001c14 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001b76:	88ba      	ldrh	r2, [r7, #4]
 8001b78:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d808      	bhi.n	8001b94 <modbusRead1Register+0x60>
 8001b82:	88ba      	ldrh	r2, [r7, #4]
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4413      	add	r3, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d903      	bls.n	8001b9c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001b94:	2002      	movs	r0, #2
 8001b96:	f000 f843 	bl	8001c20 <ModbusErrorReply>
		 return;
 8001b9a:	e03b      	b.n	8001c14 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0052      	lsls	r2, r2, #1
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001bb6:	2400      	movs	r4, #0
 8001bb8:	e020      	b.n	8001bfc <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	4423      	add	r3, r4
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	18d1      	adds	r1, r2, r3
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	1c63      	adds	r3, r4, #1
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	7849      	ldrb	r1, [r1, #1]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	88bb      	ldrh	r3, [r7, #4]
 8001be2:	4423      	add	r3, r4
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	18d1      	adds	r1, r2, r3
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	0063      	lsls	r3, r4, #1
 8001bee:	3303      	adds	r3, #3
 8001bf0:	7809      	ldrb	r1, [r1, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001bfa:	3401      	adds	r4, #1
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	429c      	cmp	r4, r3
 8001c00:	dbdb      	blt.n	8001bba <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <modbusRead1Register+0xe8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0052      	lsls	r2, r2, #1
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200002dc 	.word	0x200002dc

08001c20 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <ModbusErrorReply+0x40>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	7e5a      	ldrb	r2, [r3, #25]
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <ModbusErrorReply+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <ModbusErrorReply+0x40>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	79fa      	ldrb	r2, [r7, #7]
 8001c44:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <ModbusErrorReply+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	200002dc 	.word	0x200002dc

08001c64 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <Modbus_frame_response+0x2c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	7e5b      	ldrb	r3, [r3, #25]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d004      	beq.n	8001c7c <Modbus_frame_response+0x18>
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d105      	bne.n	8001c82 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001c76:	f7ff ff1d 	bl	8001ab4 <modbusWrite1Register>
		break;
 8001c7a:	e006      	b.n	8001c8a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001c7c:	f7ff ff5a 	bl	8001b34 <modbusRead1Register>
		break;
 8001c80:	e003      	b.n	8001c8a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff ffcc 	bl	8001c20 <ModbusErrorReply>
		break;
 8001c88:	bf00      	nop

	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002dc 	.word	0x200002dc

08001c94 <Modbus_Emission>:

void Modbus_Emission()
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001c9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d15d      	bne.n	8001d64 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b37      	ldr	r3, [pc, #220]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	7812      	ldrb	r2, [r2, #0]
 8001cb2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001cb6:	4b35      	ldr	r3, [pc, #212]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001cbe:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001cc0:	4b32      	ldr	r3, [pc, #200]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8001cc8:	4b30      	ldr	r3, [pc, #192]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f00b fb4f 	bl	800d374 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3203      	adds	r2, #3
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001cec:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001cf4:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001cfc:	3b02      	subs	r3, #2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f7ff fd99 	bl	8001838 <CRC16>
 8001d06:	4603      	mov	r3, r0
 8001d08:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001d16:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001d18:	7939      	ldrb	r1, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001d2e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001d30:	7979      	ldrb	r1, [r7, #5]
 8001d32:	4413      	add	r3, r2
 8001d34:	460a      	mov	r2, r1
 8001d36:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d10d      	bne.n	8001d64 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001d5a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f008 faf0 	bl	800a344 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <Modbus_Emission+0xf8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2202      	movs	r2, #2
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200002dc 	.word	0x200002dc

08001d90 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8001d90:	b4b0      	push	{r4, r5, r7}
 8001d92:	b09f      	sub	sp, #124	@ 0x7c
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001d98:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001d9c:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001da0:	ed87 2b08 	vstr	d2, [r7, #32]
 8001da4:	ed87 3b06 	vstr	d3, [r7, #24]
 8001da8:	ed87 4b04 	vstr	d4, [r7, #16]
 8001dac:	ed87 5b02 	vstr	d5, [r7, #8]
 8001db0:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8001db4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001db8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dc0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001dc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dc8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001dd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dd8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001de0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001de8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8001dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dee:	461d      	mov	r5, r3
 8001df0:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e04:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001e08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e0a:	377c      	adds	r7, #124	@ 0x7c
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bcb0      	pop	{r4, r5, r7}
 8001e10:	4770      	bx	lr

08001e12 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8001e12:	b4b0      	push	{r4, r5, r7}
 8001e14:	b09f      	sub	sp, #124	@ 0x7c
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001e1a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001e1e:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001e22:	ed87 2b08 	vstr	d2, [r7, #32]
 8001e26:	ed87 3b06 	vstr	d3, [r7, #24]
 8001e2a:	ed87 4b04 	vstr	d4, [r7, #16]
 8001e2e:	ed87 5b02 	vstr	d5, [r7, #8]
 8001e32:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8001e36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e42:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e4a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e52:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001e56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e5a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e62:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e6a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8001e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e70:	461d      	mov	r5, r3
 8001e72:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e86:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001e8a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e8c:	377c      	adds	r7, #124	@ 0x7c
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bcb0      	pop	{r4, r5, r7}
 8001e92:	4770      	bx	lr

08001e94 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	@ 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6178      	str	r0, [r7, #20]
 8001e9c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ea0:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ea4:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ea8:	edc7 1a01 	vstr	s3, [r7, #4]
 8001eac:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8001eb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8001ec0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	db02      	blt.n	8001ed4 <InitTrajectorySegment+0x40>
 8001ece:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ed2:	e000      	b.n	8001ed6 <InitTrajectorySegment+0x42>
 8001ed4:	4b49      	ldr	r3, [pc, #292]	@ (8001ffc <InitTrajectorySegment+0x168>)
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8001ed8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001edc:	eef0 7ae7 	vabs.f32	s15, s15
 8001ee0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8001ee4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ee8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8001ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001efc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f00:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f08:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8001f14:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f1c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f28:	d524      	bpl.n	8001f74 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8001f2a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f36:	eeb0 0a66 	vmov.f32	s0, s13
 8001f3a:	f00b fa29 	bl	800d390 <sqrtf>
 8001f3e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8001f4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8001f58:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001f72:	e027      	b.n	8001fc4 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8001f74:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f7c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f84:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8001f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8001f9a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f9e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8001fb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fb6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8001fd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fd4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fe6:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fec:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	621a      	str	r2, [r3, #32]
}
 8001ff4:	bf00      	nop
 8001ff6:	3730      	adds	r7, #48	@ 0x30
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	bf800000 	.word	0xbf800000

08002000 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8002000:	b480      	push	{r7}
 8002002:	b08f      	sub	sp, #60	@ 0x3c
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002012:	ed97 7a00 	vldr	s14, [r7]
 8002016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 800201e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	d503      	bpl.n	8002034 <GetTrajectoryPosition+0x34>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	e0b4      	b.n	800219e <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	edd3 7a07 	vldr	s15, [r3, #28]
 800203a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800203e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	db03      	blt.n	8002050 <GetTrajectoryPosition+0x50>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	edd3 7a01 	vldr	s15, [r3, #4]
 800204e:	e0a6      	b.n	800219e <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edd3 7a04 	vldr	s15, [r3, #16]
 8002068:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800206c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d512      	bpl.n	800209c <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 8002076:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800207a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800207e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002082:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800208e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002092:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	e080      	b.n	800219e <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	ed93 7a04 	vldr	s14, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80020a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80020b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b8:	d525      	bpl.n	8002106 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80020c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80020d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80020d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020dc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80020e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e4:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 80020e8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80020ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80020f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002104:	e04b      	b.n	800219e <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8002112:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002116:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800211a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800211e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002126:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002136:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 800213a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800213e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	ed97 7a07 	vldr	s14, [r7, #28]
 800214a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214e:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8002152:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002156:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800215a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800215e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002166:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 800216a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800216e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002176:	edd7 7a06 	vldr	s15, [r7, #24]
 800217a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002182:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002186:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800218a:	edd7 7a05 	vldr	s15, [r7, #20]
 800218e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002192:	edd7 7a05 	vldr	s15, [r7, #20]
 8002196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800219e:	eeb0 0a67 	vmov.f32	s0, s15
 80021a2:	373c      	adds	r7, #60	@ 0x3c
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80021be:	ed97 7a00 	vldr	s14, [r7]
 80021c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 80021ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	d502      	bpl.n	80021de <GetTrajectoryVelocity+0x32>
 80021d8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8002288 <GetTrajectoryVelocity+0xdc>
 80021dc:	e04d      	b.n	800227a <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80021e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80021e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	db02      	blt.n	80021f8 <GetTrajectoryVelocity+0x4c>
 80021f2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002288 <GetTrajectoryVelocity+0xdc>
 80021f6:	e040      	b.n	800227a <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edd3 7a04 	vldr	s15, [r3, #16]
 800220a:	ed97 7a05 	vldr	s14, [r7, #20]
 800220e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002216:	d506      	bpl.n	8002226 <GetTrajectoryVelocity+0x7a>
        return a * t;
 8002218:	ed97 7a04 	vldr	s14, [r7, #16]
 800221c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	e029      	b.n	800227a <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	ed93 7a04 	vldr	s14, [r3, #16]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	ed97 7a05 	vldr	s14, [r7, #20]
 800223a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002242:	d502      	bpl.n	800224a <GetTrajectoryVelocity+0x9e>
        return v;
 8002244:	edd7 7a03 	vldr	s15, [r7, #12]
 8002248:	e017      	b.n	800227a <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002250:	ed97 7a05 	vldr	s14, [r7, #20]
 8002254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	edd3 7a05 	vldr	s15, [r3, #20]
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 8002266:	ed97 7a04 	vldr	s14, [r7, #16]
 800226a:	edd7 7a02 	vldr	s15, [r7, #8]
 800226e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002272:	ed97 7a03 	vldr	s14, [r7, #12]
 8002276:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800227a:	eeb0 0a67 	vmov.f32	s0, s15
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	00000000 	.word	0x00000000

0800228c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	@ 0x30
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2220      	movs	r2, #32
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00b f833 	bl	800d310 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022aa:	4b32      	ldr	r3, [pc, #200]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022b2:	4b30      	ldr	r3, [pc, #192]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80022b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80022c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022cc:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d2:	4b28      	ldr	r3, [pc, #160]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022d4:	2204      	movs	r2, #4
 80022d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022d8:	4b26      	ldr	r3, [pc, #152]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022de:	4b25      	ldr	r3, [pc, #148]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80022e4:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ea:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f2:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <MX_ADC1_Init+0xe8>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <MX_ADC1_Init+0xe8>)
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <MX_ADC1_Init+0xe8>)
 8002308:	2200      	movs	r2, #0
 800230a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <MX_ADC1_Init+0xe8>)
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002314:	4817      	ldr	r0, [pc, #92]	@ (8002374 <MX_ADC1_Init+0xe8>)
 8002316:	f002 fd47 	bl	8004da8 <HAL_ADC_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002320:	f001 fbac 	bl	8003a7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800232c:	4619      	mov	r1, r3
 800232e:	4811      	ldr	r0, [pc, #68]	@ (8002374 <MX_ADC1_Init+0xe8>)
 8002330:	f003 fce4 	bl	8005cfc <HAL_ADCEx_MultiModeConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800233a:	f001 fb9f 	bl	8003a7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_ADC1_Init+0xec>)
 8002340:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002342:	2306      	movs	r3, #6
 8002344:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800234a:	237f      	movs	r3, #127	@ 0x7f
 800234c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800234e:	2304      	movs	r3, #4
 8002350:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	@ (8002374 <MX_ADC1_Init+0xe8>)
 800235c:	f002 ffd2 	bl	8005304 <HAL_ADC_ConfigChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002366:	f001 fb89 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3730      	adds	r7, #48	@ 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200002e0 	.word	0x200002e0
 8002378:	04300002 	.word	0x04300002

0800237c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002382:	463b      	mov	r3, r7
 8002384:	2220      	movs	r2, #32
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f00a ffc1 	bl	800d310 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800238e:	4b2b      	ldr	r3, [pc, #172]	@ (800243c <MX_ADC2_Init+0xc0>)
 8002390:	4a2b      	ldr	r2, [pc, #172]	@ (8002440 <MX_ADC2_Init+0xc4>)
 8002392:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002394:	4b29      	ldr	r3, [pc, #164]	@ (800243c <MX_ADC2_Init+0xc0>)
 8002396:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800239a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800239c:	4b27      	ldr	r3, [pc, #156]	@ (800243c <MX_ADC2_Init+0xc0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a2:	4b26      	ldr	r3, [pc, #152]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80023a8:	4b24      	ldr	r3, [pc, #144]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023ae:	4b23      	ldr	r3, [pc, #140]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023b4:	4b21      	ldr	r3, [pc, #132]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023b6:	2204      	movs	r2, #4
 80023b8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80023c6:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023da:	4b18      	ldr	r3, [pc, #96]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80023e0:	4b16      	ldr	r3, [pc, #88]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023e8:	4b14      	ldr	r3, [pc, #80]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80023ee:	4b13      	ldr	r3, [pc, #76]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023f6:	4811      	ldr	r0, [pc, #68]	@ (800243c <MX_ADC2_Init+0xc0>)
 80023f8:	f002 fcd6 	bl	8004da8 <HAL_ADC_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002402:	f001 fb3b 	bl	8003a7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002406:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <MX_ADC2_Init+0xc8>)
 8002408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800240a:	2306      	movs	r3, #6
 800240c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002412:	237f      	movs	r3, #127	@ 0x7f
 8002414:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002416:	2304      	movs	r3, #4
 8002418:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800241e:	463b      	mov	r3, r7
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	@ (800243c <MX_ADC2_Init+0xc0>)
 8002424:	f002 ff6e 	bl	8005304 <HAL_ADC_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800242e:	f001 fb25 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000034c 	.word	0x2000034c
 8002440:	50000100 	.word	0x50000100
 8002444:	08600004 	.word	0x08600004

08002448 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b0a0      	sub	sp, #128	@ 0x80
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002460:	f107 0318 	add.w	r3, r7, #24
 8002464:	2254      	movs	r2, #84	@ 0x54
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f00a ff51 	bl	800d310 <memset>
  if(adcHandle->Instance==ADC1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002476:	d13e      	bne.n	80024f6 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800247c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800247e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002482:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002484:	f107 0318 	add.w	r3, r7, #24
 8002488:	4618      	mov	r0, r3
 800248a:	f005 f921 	bl	80076d0 <HAL_RCCEx_PeriphCLKConfig>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002494:	f001 faf2 	bl	8003a7c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002498:	4b3a      	ldr	r3, [pc, #232]	@ (8002584 <HAL_ADC_MspInit+0x13c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	4a39      	ldr	r2, [pc, #228]	@ (8002584 <HAL_ADC_MspInit+0x13c>)
 80024a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024a2:	4b38      	ldr	r3, [pc, #224]	@ (8002584 <HAL_ADC_MspInit+0x13c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d10b      	bne.n	80024c2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024aa:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	4a36      	ldr	r2, [pc, #216]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 80024b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b6:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	4a30      	ldr	r2, [pc, #192]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80024da:	2303      	movs	r3, #3
 80024dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024de:	2303      	movs	r3, #3
 80024e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024ea:	4619      	mov	r1, r3
 80024ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f0:	f004 f95a 	bl	80067a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80024f4:	e042      	b.n	800257c <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a24      	ldr	r2, [pc, #144]	@ (800258c <HAL_ADC_MspInit+0x144>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d13d      	bne.n	800257c <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002504:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002506:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800250a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	4618      	mov	r0, r3
 8002512:	f005 f8dd 	bl	80076d0 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 800251c:	f001 faae 	bl	8003a7c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002520:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <HAL_ADC_MspInit+0x13c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a17      	ldr	r2, [pc, #92]	@ (8002584 <HAL_ADC_MspInit+0x13c>)
 8002528:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800252a:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <HAL_ADC_MspInit+0x13c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d10b      	bne.n	800254a <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002536:	4a14      	ldr	r2, [pc, #80]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 8002538:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800253c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254e:	4a0e      	ldr	r2, [pc, #56]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002556:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <HAL_ADC_MspInit+0x140>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8002562:	2302      	movs	r3, #2
 8002564:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002566:	2303      	movs	r3, #3
 8002568:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002578:	f004 f916 	bl	80067a8 <HAL_GPIO_Init>
}
 800257c:	bf00      	nop
 800257e:	3780      	adds	r7, #128	@ 0x80
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200003b8 	.word	0x200003b8
 8002588:	40021000 	.word	0x40021000
 800258c:	50000100 	.word	0x50000100

08002590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <MX_DMA_Init+0x50>)
 8002598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259a:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <MX_DMA_Init+0x50>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80025a2:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <MX_DMA_Init+0x50>)
 80025a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ae:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <MX_DMA_Init+0x50>)
 80025b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b2:	4a0b      	ldr	r2, [pc, #44]	@ (80025e0 <MX_DMA_Init+0x50>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <MX_DMA_Init+0x50>)
 80025bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	200b      	movs	r0, #11
 80025cc:	f003 fd79 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025d0:	200b      	movs	r0, #11
 80025d2:	f003 fd90 	bl	80060f6 <HAL_NVIC_EnableIRQ>

}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	@ 0x28
 80025e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002730 <MX_GPIO_Init+0x14c>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	4a4c      	ldr	r2, [pc, #304]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002606:	4b4a      	ldr	r3, [pc, #296]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002612:	4b47      	ldr	r3, [pc, #284]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	4a46      	ldr	r2, [pc, #280]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002618:	f043 0320 	orr.w	r3, r3, #32
 800261c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261e:	4b44      	ldr	r3, [pc, #272]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b41      	ldr	r3, [pc, #260]	@ (8002730 <MX_GPIO_Init+0x14c>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	4a40      	ldr	r2, [pc, #256]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002636:	4b3e      	ldr	r3, [pc, #248]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	4a3a      	ldr	r2, [pc, #232]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264e:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <MX_GPIO_Init+0x14c>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	2102      	movs	r1, #2
 800265e:	4835      	ldr	r0, [pc, #212]	@ (8002734 <MX_GPIO_Init+0x150>)
 8002660:	f004 fa24 	bl	8006aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	2140      	movs	r1, #64	@ 0x40
 8002668:	4833      	ldr	r0, [pc, #204]	@ (8002738 <MX_GPIO_Init+0x154>)
 800266a:	f004 fa1f 	bl	8006aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 800266e:	2201      	movs	r2, #1
 8002670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002674:	4830      	ldr	r0, [pc, #192]	@ (8002738 <MX_GPIO_Init+0x154>)
 8002676:	f004 fa19 	bl	8006aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 800267a:	2302      	movs	r3, #2
 800267c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267e:	2301      	movs	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	4828      	ldr	r0, [pc, #160]	@ (8002734 <MX_GPIO_Init+0x150>)
 8002692:	f004 f889 	bl	80067a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin|Limit_Switch_pen_1_Pin;
 8002696:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800269a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800269c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	4821      	ldr	r0, [pc, #132]	@ (8002734 <MX_GPIO_Init+0x150>)
 80026ae:	f004 f87b 	bl	80067a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 80026b2:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80026b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	481b      	ldr	r0, [pc, #108]	@ (8002738 <MX_GPIO_Init+0x154>)
 80026cc:	f004 f86c 	bl	80067a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80026d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4619      	mov	r1, r3
 80026e6:	4814      	ldr	r0, [pc, #80]	@ (8002738 <MX_GPIO_Init+0x154>)
 80026e8:	f004 f85e 	bl	80067a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 80026ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	480d      	ldr	r0, [pc, #52]	@ (8002738 <MX_GPIO_Init+0x154>)
 8002704:	f004 f850 	bl	80067a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2017      	movs	r0, #23
 800270e:	f003 fcd8 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002712:	2017      	movs	r0, #23
 8002714:	f003 fcef 	bl	80060f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2100      	movs	r1, #0
 800271c:	2028      	movs	r0, #40	@ 0x28
 800271e:	f003 fcd0 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002722:	2028      	movs	r0, #40	@ 0x28
 8002724:	f003 fce7 	bl	80060f6 <HAL_NVIC_EnableIRQ>

}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	@ 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	48000400 	.word	0x48000400
 8002738:	48000800 	.word	0x48000800
 800273c:	00000000 	.word	0x00000000

08002740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b09c      	sub	sp, #112	@ 0x70
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002746:	f002 f8b2 	bl	80048ae <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800274a:	f000 fefd 	bl	8003548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800274e:	f7ff ff49 	bl	80025e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002752:	f7ff ff1d 	bl	8002590 <MX_DMA_Init>
  MX_TIM3_Init();
 8002756:	f001 fb93 	bl	8003e80 <MX_TIM3_Init>
  MX_ADC1_Init();
 800275a:	f7ff fd97 	bl	800228c <MX_ADC1_Init>
  MX_TIM1_Init();
 800275e:	f001 faed 	bl	8003d3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002762:	f001 fb3f 	bl	8003de4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002766:	f001 fbe1 	bl	8003f2c <MX_TIM4_Init>
  MX_TIM20_Init();
 800276a:	f001 fd65 	bl	8004238 <MX_TIM20_Init>
  MX_TIM8_Init();
 800276e:	f001 fc33 	bl	8003fd8 <MX_TIM8_Init>
  MX_TIM16_Init();
 8002772:	f001 fce1 	bl	8004138 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8002776:	f001 ff97 	bl	80046a8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800277a:	f7ff fdff 	bl	800237c <MX_ADC2_Init>
  MX_SPI1_Init();
 800277e:	f001 f983 	bl	8003a88 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8002782:	48a0      	ldr	r0, [pc, #640]	@ (8002a04 <main+0x2c4>)
 8002784:	f005 fb02 	bl	8007d8c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8002788:	489f      	ldr	r0, [pc, #636]	@ (8002a08 <main+0x2c8>)
 800278a:	f005 faff 	bl	8007d8c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800278e:	210c      	movs	r1, #12
 8002790:	489d      	ldr	r0, [pc, #628]	@ (8002a08 <main+0x2c8>)
 8002792:	f005 fcbf 	bl	8008114 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8002796:	2100      	movs	r1, #0
 8002798:	489a      	ldr	r0, [pc, #616]	@ (8002a04 <main+0x2c4>)
 800279a:	f005 fcbb 	bl	8008114 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 800279e:	2108      	movs	r1, #8
 80027a0:	4898      	ldr	r0, [pc, #608]	@ (8002a04 <main+0x2c4>)
 80027a2:	f005 fcb7 	bl	8008114 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 80027a6:	4999      	ldr	r1, [pc, #612]	@ (8002a0c <main+0x2cc>)
 80027a8:	4899      	ldr	r0, [pc, #612]	@ (8002a10 <main+0x2d0>)
 80027aa:	f7fe fb71 	bl	8000e90 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80027ae:	4999      	ldr	r1, [pc, #612]	@ (8002a14 <main+0x2d4>)
 80027b0:	4899      	ldr	r0, [pc, #612]	@ (8002a18 <main+0x2d8>)
 80027b2:	f7fe fb6d 	bl	8000e90 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 80027b6:	4899      	ldr	r0, [pc, #612]	@ (8002a1c <main+0x2dc>)
 80027b8:	f002 fcb2 	bl	8005120 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80027bc:	4898      	ldr	r0, [pc, #608]	@ (8002a20 <main+0x2e0>)
 80027be:	f005 fb55 	bl	8007e6c <HAL_TIM_Base_Start_IT>

	int lastTick = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	66fb      	str	r3, [r7, #108]	@ 0x6c

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80027c6:	213c      	movs	r1, #60	@ 0x3c
 80027c8:	4892      	ldr	r0, [pc, #584]	@ (8002a14 <main+0x2d4>)
 80027ca:	f005 ff5f 	bl	800868c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80027ce:	213c      	movs	r1, #60	@ 0x3c
 80027d0:	488e      	ldr	r0, [pc, #568]	@ (8002a0c <main+0x2cc>)
 80027d2:	f005 ff5b 	bl	800868c <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 80027d6:	4b93      	ldr	r3, [pc, #588]	@ (8002a24 <main+0x2e4>)
 80027d8:	4a93      	ldr	r2, [pc, #588]	@ (8002a28 <main+0x2e8>)
 80027da:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80027dc:	4b91      	ldr	r3, [pc, #580]	@ (8002a24 <main+0x2e4>)
 80027de:	4a93      	ldr	r2, [pc, #588]	@ (8002a2c <main+0x2ec>)
 80027e0:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80027e2:	4b90      	ldr	r3, [pc, #576]	@ (8002a24 <main+0x2e4>)
 80027e4:	2215      	movs	r2, #21
 80027e6:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 80027e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a24 <main+0x2e4>)
 80027ea:	22c8      	movs	r2, #200	@ 0xc8
 80027ec:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80027ee:	4990      	ldr	r1, [pc, #576]	@ (8002a30 <main+0x2f0>)
 80027f0:	488c      	ldr	r0, [pc, #560]	@ (8002a24 <main+0x2e4>)
 80027f2:	f7fe ffcb 	bl	800178c <Modbus_init>

	Kalman_Init(&kf_pris);
 80027f6:	488f      	ldr	r0, [pc, #572]	@ (8002a34 <main+0x2f4>)
 80027f8:	f7fe fd16 	bl	8001228 <Kalman_Init>

	kf_pris.A_data[0] = 1;
 80027fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002a34 <main+0x2f4>)
 80027fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002802:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 8002804:	4b8b      	ldr	r3, [pc, #556]	@ (8002a34 <main+0x2f4>)
 8002806:	4a8c      	ldr	r2, [pc, #560]	@ (8002a38 <main+0x2f8>)
 8002808:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 800280a:	4b8a      	ldr	r3, [pc, #552]	@ (8002a34 <main+0x2f4>)
 800280c:	4a8b      	ldr	r2, [pc, #556]	@ (8002a3c <main+0x2fc>)
 800280e:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 8002810:	4b88      	ldr	r3, [pc, #544]	@ (8002a34 <main+0x2f4>)
 8002812:	4a8b      	ldr	r2, [pc, #556]	@ (8002a40 <main+0x300>)
 8002814:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 8002816:	4b87      	ldr	r3, [pc, #540]	@ (8002a34 <main+0x2f4>)
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 8002820:	4b84      	ldr	r3, [pc, #528]	@ (8002a34 <main+0x2f4>)
 8002822:	4a88      	ldr	r2, [pc, #544]	@ (8002a44 <main+0x304>)
 8002824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 8002828:	4b82      	ldr	r3, [pc, #520]	@ (8002a34 <main+0x2f4>)
 800282a:	4a87      	ldr	r2, [pc, #540]	@ (8002a48 <main+0x308>)
 800282c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 8002830:	4b80      	ldr	r3, [pc, #512]	@ (8002a34 <main+0x2f4>)
 8002832:	4a86      	ldr	r2, [pc, #536]	@ (8002a4c <main+0x30c>)
 8002834:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 8002838:	4b7e      	ldr	r3, [pc, #504]	@ (8002a34 <main+0x2f4>)
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 8002842:	4b7c      	ldr	r3, [pc, #496]	@ (8002a34 <main+0x2f4>)
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 800284c:	4b79      	ldr	r3, [pc, #484]	@ (8002a34 <main+0x2f4>)
 800284e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002852:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 8002856:	4b77      	ldr	r3, [pc, #476]	@ (8002a34 <main+0x2f4>)
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 8002860:	4b74      	ldr	r3, [pc, #464]	@ (8002a34 <main+0x2f4>)
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 800286a:	4b72      	ldr	r3, [pc, #456]	@ (8002a34 <main+0x2f4>)
 800286c:	4a78      	ldr	r2, [pc, #480]	@ (8002a50 <main+0x310>)
 800286e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 8002872:	4b70      	ldr	r3, [pc, #448]	@ (8002a34 <main+0x2f4>)
 8002874:	4a77      	ldr	r2, [pc, #476]	@ (8002a54 <main+0x314>)
 8002876:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 800287a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a34 <main+0x2f4>)
 800287c:	4a76      	ldr	r2, [pc, #472]	@ (8002a58 <main+0x318>)
 800287e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 8002882:	4b6c      	ldr	r3, [pc, #432]	@ (8002a34 <main+0x2f4>)
 8002884:	4a75      	ldr	r2, [pc, #468]	@ (8002a5c <main+0x31c>)
 8002886:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 800288a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a34 <main+0x2f4>)
 800288c:	4a74      	ldr	r2, [pc, #464]	@ (8002a60 <main+0x320>)
 800288e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 8002892:	4b68      	ldr	r3, [pc, #416]	@ (8002a34 <main+0x2f4>)
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 800289c:	4b65      	ldr	r3, [pc, #404]	@ (8002a34 <main+0x2f4>)
 800289e:	4a71      	ldr	r2, [pc, #452]	@ (8002a64 <main+0x324>)
 80028a0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80028a4:	2300      	movs	r3, #0
 80028a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028a8:	e01d      	b.n	80028e6 <main+0x1a6>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80028aa:	2300      	movs	r3, #0
 80028ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80028ae:	e014      	b.n	80028da <main+0x19a>
	        kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 80028b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80028b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d102      	bne.n	80028be <main+0x17e>
 80028b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80028bc:	e001      	b.n	80028c2 <main+0x182>
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028c4:	0099      	lsls	r1, r3, #2
 80028c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c8:	440b      	add	r3, r1
 80028ca:	495a      	ldr	r1, [pc, #360]	@ (8002a34 <main+0x2f4>)
 80028cc:	333c      	adds	r3, #60	@ 0x3c
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80028d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028d6:	3301      	adds	r3, #1
 80028d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80028da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028dc:	2b03      	cmp	r3, #3
 80028de:	dde7      	ble.n	80028b0 <main+0x170>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80028e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028e2:	3301      	adds	r3, #1
 80028e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	ddde      	ble.n	80028aa <main+0x16a>
	    }
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 80028ec:	4b51      	ldr	r3, [pc, #324]	@ (8002a34 <main+0x2f4>)
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 80028f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a34 <main+0x2f4>)
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8002900:	4b4c      	ldr	r3, [pc, #304]	@ (8002a34 <main+0x2f4>)
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 800290a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a34 <main+0x2f4>)
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 8002914:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8002a68 <main+0x328>
 8002918:	4846      	ldr	r0, [pc, #280]	@ (8002a34 <main+0x2f4>)
 800291a:	f7fe fd57 	bl	80013cc <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 800291e:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8002a6c <main+0x32c>
 8002922:	4844      	ldr	r0, [pc, #272]	@ (8002a34 <main+0x2f4>)
 8002924:	f7fe fd22 	bl	800136c <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 8002928:	4851      	ldr	r0, [pc, #324]	@ (8002a70 <main+0x330>)
 800292a:	f7fe fc7d 	bl	8001228 <Kalman_Init>

	kf_rev.A_data[0] = 1;
 800292e:	4b50      	ldr	r3, [pc, #320]	@ (8002a70 <main+0x330>)
 8002930:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002934:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 8002936:	4b4e      	ldr	r3, [pc, #312]	@ (8002a70 <main+0x330>)
 8002938:	4a4e      	ldr	r2, [pc, #312]	@ (8002a74 <main+0x334>)
 800293a:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 800293c:	4b4c      	ldr	r3, [pc, #304]	@ (8002a70 <main+0x330>)
 800293e:	4a4e      	ldr	r2, [pc, #312]	@ (8002a78 <main+0x338>)
 8002940:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 8002942:	4b4b      	ldr	r3, [pc, #300]	@ (8002a70 <main+0x330>)
 8002944:	4a4d      	ldr	r2, [pc, #308]	@ (8002a7c <main+0x33c>)
 8002946:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 8002948:	4b49      	ldr	r3, [pc, #292]	@ (8002a70 <main+0x330>)
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 8002952:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <main+0x330>)
 8002954:	4a4a      	ldr	r2, [pc, #296]	@ (8002a80 <main+0x340>)
 8002956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 800295a:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <main+0x330>)
 800295c:	4a49      	ldr	r2, [pc, #292]	@ (8002a84 <main+0x344>)
 800295e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 8002962:	4b43      	ldr	r3, [pc, #268]	@ (8002a70 <main+0x330>)
 8002964:	4a48      	ldr	r2, [pc, #288]	@ (8002a88 <main+0x348>)
 8002966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 800296a:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <main+0x330>)
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 8002974:	4b3e      	ldr	r3, [pc, #248]	@ (8002a70 <main+0x330>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 800297e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a70 <main+0x330>)
 8002980:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002984:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 8002988:	4b39      	ldr	r3, [pc, #228]	@ (8002a70 <main+0x330>)
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 8002992:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <main+0x330>)
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 800299c:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <main+0x330>)
 800299e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a8c <main+0x34c>)
 80029a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 80029a4:	4b32      	ldr	r3, [pc, #200]	@ (8002a70 <main+0x330>)
 80029a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002a90 <main+0x350>)
 80029a8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 80029ac:	4b30      	ldr	r3, [pc, #192]	@ (8002a70 <main+0x330>)
 80029ae:	4a39      	ldr	r2, [pc, #228]	@ (8002a94 <main+0x354>)
 80029b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 80029b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a70 <main+0x330>)
 80029b6:	4a38      	ldr	r2, [pc, #224]	@ (8002a98 <main+0x358>)
 80029b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 80029bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002a70 <main+0x330>)
 80029be:	4a37      	ldr	r2, [pc, #220]	@ (8002a9c <main+0x35c>)
 80029c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 80029c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a70 <main+0x330>)
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 80029ce:	4b28      	ldr	r3, [pc, #160]	@ (8002a70 <main+0x330>)
 80029d0:	4a33      	ldr	r2, [pc, #204]	@ (8002aa0 <main+0x360>)
 80029d2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 80029d6:	2300      	movs	r3, #0
 80029d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80029da:	e077      	b.n	8002acc <main+0x38c>
	    for (int j = 0; j < 4; j++) {
 80029dc:	2300      	movs	r3, #0
 80029de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029e0:	e06e      	b.n	8002ac0 <main+0x380>
	        if (i == j) {
 80029e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d15c      	bne.n	8002aa4 <main+0x364>
	            kf_rev.H_data[i * 4 + j] = 1.0f;
 80029ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029ec:	009a      	lsls	r2, r3, #2
 80029ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029f0:	4413      	add	r3, r2
 80029f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a70 <main+0x330>)
 80029f4:	333c      	adds	r3, #60	@ 0x3c
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e05b      	b.n	8002aba <main+0x37a>
 8002a02:	bf00      	nop
 8002a04:	20001afc 	.word	0x20001afc
 8002a08:	20001964 	.word	0x20001964
 8002a0c:	20001898 	.word	0x20001898
 8002a10:	200003bc 	.word	0x200003bc
 8002a14:	200017cc 	.word	0x200017cc
 8002a18:	200003f0 	.word	0x200003f0
 8002a1c:	200002e0 	.word	0x200002e0
 8002a20:	20001700 	.word	0x20001700
 8002a24:	20000734 	.word	0x20000734
 8002a28:	20001bc8 	.word	0x20001bc8
 8002a2c:	20001a30 	.word	0x20001a30
 8002a30:	20000c0c 	.word	0x20000c0c
 8002a34:	20000e78 	.word	0x20000e78
 8002a38:	3a5c11e4 	.word	0x3a5c11e4
 8002a3c:	b4e160df 	.word	0xb4e160df
 8002a40:	3757157b 	.word	0x3757157b
 8002a44:	3f2dd97f 	.word	0x3f2dd97f
 8002a48:	ba5c11e4 	.word	0xba5c11e4
 8002a4c:	3cd20afa 	.word	0x3cd20afa
 8002a50:	bd2c27a6 	.word	0xbd2c27a6
 8002a54:	37b03ea2 	.word	0x37b03ea2
 8002a58:	bdc3e426 	.word	0xbdc3e426
 8002a5c:	36866b47 	.word	0x36866b47
 8002a60:	3c034092 	.word	0x3c034092
 8002a64:	3e90b0f2 	.word	0x3e90b0f2
 8002a68:	3c23d70a 	.word	0x3c23d70a
 8002a6c:	3f666666 	.word	0x3f666666
 8002a70:	2000119c 	.word	0x2000119c
 8002a74:	3a830bb9 	.word	0x3a830bb9
 8002a78:	b6327146 	.word	0xb6327146
 8002a7c:	33ae1e34 	.word	0x33ae1e34
 8002a80:	3f7fe5c9 	.word	0x3f7fe5c9
 8002a84:	bbae429e 	.word	0xbbae429e
 8002a88:	392a143b 	.word	0x392a143b
 8002a8c:	c02fbe77 	.word	0xc02fbe77
 8002a90:	3bef4e01 	.word	0x3bef4e01
 8002a94:	3e0aa64c 	.word	0x3e0aa64c
 8002a98:	34012bd0 	.word	0x34012bd0
 8002a9c:	397c4992 	.word	0x397c4992
 8002aa0:	3fd7ae14 	.word	0x3fd7ae14
	        } else {
	            kf_rev.H_data[i * 4 + j] = 0.0f;
 8002aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aa6:	009a      	lsls	r2, r3, #2
 8002aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aaa:	4413      	add	r3, r2
 8002aac:	4ac0      	ldr	r2, [pc, #768]	@ (8002db0 <main+0x670>)
 8002aae:	333c      	adds	r3, #60	@ 0x3c
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < 4; j++) {
 8002aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002abc:	3301      	adds	r3, #1
 8002abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	dd8d      	ble.n	80029e2 <main+0x2a2>
	for (int i = 0; i < 2; i++) {
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac8:	3301      	adds	r3, #1
 8002aca:	663b      	str	r3, [r7, #96]	@ 0x60
 8002acc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	dd84      	ble.n	80029dc <main+0x29c>
	        }
	    }
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8002ad2:	4bb7      	ldr	r3, [pc, #732]	@ (8002db0 <main+0x670>)
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8002adc:	4bb4      	ldr	r3, [pc, #720]	@ (8002db0 <main+0x670>)
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8002ae6:	4bb2      	ldr	r3, [pc, #712]	@ (8002db0 <main+0x670>)
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8002af0:	4baf      	ldr	r3, [pc, #700]	@ (8002db0 <main+0x670>)
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8002afa:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 8002db4 <main+0x674>
 8002afe:	48ac      	ldr	r0, [pc, #688]	@ (8002db0 <main+0x670>)
 8002b00:	f7fe fc64 	bl	80013cc <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8002b04:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8002db8 <main+0x678>
 8002b08:	48a9      	ldr	r0, [pc, #676]	@ (8002db0 <main+0x670>)
 8002b0a:	f7fe fc2f 	bl	800136c <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01, 1.77e-01, 3.8719, 0.0016);
 8002b0e:	4cab      	ldr	r4, [pc, #684]	@ (8002dbc <main+0x67c>)
 8002b10:	463b      	mov	r3, r7
 8002b12:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 8002d48 <main+0x608>
 8002b16:	ed9f 5b8e 	vldr	d5, [pc, #568]	@ 8002d50 <main+0x610>
 8002b1a:	ed9f 4b8f 	vldr	d4, [pc, #572]	@ 8002d58 <main+0x618>
 8002b1e:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 8002d58 <main+0x618>
 8002b22:	ed9f 2b8f 	vldr	d2, [pc, #572]	@ 8002d60 <main+0x620>
 8002b26:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 8002d68 <main+0x628>
 8002b2a:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 8002d70 <main+0x630>
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f92e 	bl	8001d90 <create_prismatic_motor>
 8002b34:	4625      	mov	r5, r4
 8002b36:	463c      	mov	r4, r7
 8002b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b48:	e885 0003 	stmia.w	r5, {r0, r1}
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00, 1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);
 8002b4c:	4c9c      	ldr	r4, [pc, #624]	@ (8002dc0 <main+0x680>)
 8002b4e:	463b      	mov	r3, r7
 8002b50:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 8002d78 <main+0x638>
 8002b54:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 8002d80 <main+0x640>
 8002b58:	ed9f 4b8b 	vldr	d4, [pc, #556]	@ 8002d88 <main+0x648>
 8002b5c:	ed9f 3b8c 	vldr	d3, [pc, #560]	@ 8002d90 <main+0x650>
 8002b60:	ed9f 2b8d 	vldr	d2, [pc, #564]	@ 8002d98 <main+0x658>
 8002b64:	ed9f 1b8e 	vldr	d1, [pc, #568]	@ 8002da0 <main+0x660>
 8002b68:	ed9f 0b8f 	vldr	d0, [pc, #572]	@ 8002da8 <main+0x668>
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f950 	bl	8001e12 <create_motor>
 8002b72:	4625      	mov	r5, r4
 8002b74:	463c      	mov	r4, r7
 8002b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b86:	e885 0003 	stmia.w	r5, {r0, r1}

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8002b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8002dc4 <main+0x684>)
 8002b8c:	4a8e      	ldr	r2, [pc, #568]	@ (8002dc8 <main+0x688>)
 8002b8e:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8002b90:	4b8c      	ldr	r3, [pc, #560]	@ (8002dc4 <main+0x684>)
 8002b92:	4a8e      	ldr	r2, [pc, #568]	@ (8002dcc <main+0x68c>)
 8002b94:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8002b96:	4b8b      	ldr	r3, [pc, #556]	@ (8002dc4 <main+0x684>)
 8002b98:	4a8b      	ldr	r2, [pc, #556]	@ (8002dc8 <main+0x688>)
 8002b9a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4889      	ldr	r0, [pc, #548]	@ (8002dc4 <main+0x684>)
 8002ba0:	f009 fec0 	bl	800c924 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8002ba4:	4b8a      	ldr	r3, [pc, #552]	@ (8002dd0 <main+0x690>)
 8002ba6:	4a8b      	ldr	r2, [pc, #556]	@ (8002dd4 <main+0x694>)
 8002ba8:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8002baa:	4b89      	ldr	r3, [pc, #548]	@ (8002dd0 <main+0x690>)
 8002bac:	4a87      	ldr	r2, [pc, #540]	@ (8002dcc <main+0x68c>)
 8002bae:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8002bb0:	4b87      	ldr	r3, [pc, #540]	@ (8002dd0 <main+0x690>)
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4885      	ldr	r0, [pc, #532]	@ (8002dd0 <main+0x690>)
 8002bbc:	f009 feb2 	bl	800c924 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 100.0;
 8002bc0:	4b85      	ldr	r3, [pc, #532]	@ (8002dd8 <main+0x698>)
 8002bc2:	4a86      	ldr	r2, [pc, #536]	@ (8002ddc <main+0x69c>)
 8002bc4:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 40.0;
 8002bc6:	4b84      	ldr	r3, [pc, #528]	@ (8002dd8 <main+0x698>)
 8002bc8:	4a85      	ldr	r2, [pc, #532]	@ (8002de0 <main+0x6a0>)
 8002bca:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 4.0;
 8002bcc:	4b82      	ldr	r3, [pc, #520]	@ (8002dd8 <main+0x698>)
 8002bce:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002bd2:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4880      	ldr	r0, [pc, #512]	@ (8002dd8 <main+0x698>)
 8002bd8:	f009 fea4 	bl	800c924 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8002bdc:	4b81      	ldr	r3, [pc, #516]	@ (8002de4 <main+0x6a4>)
 8002bde:	4a82      	ldr	r2, [pc, #520]	@ (8002de8 <main+0x6a8>)
 8002be0:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8002be2:	4b80      	ldr	r3, [pc, #512]	@ (8002de4 <main+0x6a4>)
 8002be4:	4a81      	ldr	r2, [pc, #516]	@ (8002dec <main+0x6ac>)
 8002be6:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8002be8:	4b7e      	ldr	r3, [pc, #504]	@ (8002de4 <main+0x6a4>)
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	487c      	ldr	r0, [pc, #496]	@ (8002de4 <main+0x6a4>)
 8002bf4:	f009 fe96 	bl	800c924 <arm_pid_init_f32>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
		HAL_ADC_Start(&hadc1);
 8002bf8:	487d      	ldr	r0, [pc, #500]	@ (8002df0 <main+0x6b0>)
 8002bfa:	f002 fa91 	bl	8005120 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8002bfe:	487d      	ldr	r0, [pc, #500]	@ (8002df4 <main+0x6b4>)
 8002c00:	f002 fa8e 	bl	8005120 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 8002c04:	487a      	ldr	r0, [pc, #488]	@ (8002df0 <main+0x6b0>)
 8002c06:	f002 fb6f 	bl	80052e8 <HAL_ADC_GetValue>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002df8 <main+0x6b8>)
 8002c10:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 8002c12:	4878      	ldr	r0, [pc, #480]	@ (8002df4 <main+0x6b4>)
 8002c14:	f002 fb68 	bl	80052e8 <HAL_ADC_GetValue>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	4b77      	ldr	r3, [pc, #476]	@ (8002dfc <main+0x6bc>)
 8002c1e:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8002c20:	4b77      	ldr	r3, [pc, #476]	@ (8002e00 <main+0x6c0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	4a77      	ldr	r2, [pc, #476]	@ (8002e04 <main+0x6c4>)
 8002c28:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8002c2a:	4b77      	ldr	r3, [pc, #476]	@ (8002e08 <main+0x6c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	4a76      	ldr	r2, [pc, #472]	@ (8002e0c <main+0x6cc>)
 8002c32:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8002c34:	f7fe fe38 	bl	80018a8 <Modbus_Protocal_Worker>
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 8002c38:	f001 fe9e 	bl	8004978 <HAL_GetTick>
 8002c3c:	6578      	str	r0, [r7, #84]	@ 0x54
		float dt = (currentTick - lastTick) / 1000.0f;
 8002c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c4c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002e10 <main+0x6d0>
 8002c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c54:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.001f) {
 8002c58:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002c5c:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002e14 <main+0x6d4>
 8002c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	f2c0 81ce 	blt.w	8003008 <main+0x8c8>
			Encoder_Update(&encoder1, dt);
 8002c6c:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8002c70:	4869      	ldr	r0, [pc, #420]	@ (8002e18 <main+0x6d8>)
 8002c72:	f7fe f937 	bl	8000ee4 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8002c76:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8002c7a:	4868      	ldr	r0, [pc, #416]	@ (8002e1c <main+0x6dc>)
 8002c7c:	f7fe f932 	bl	8000ee4 <Encoder_Update>
			lastTick = currentTick;
 8002c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c82:	66fb      	str	r3, [r7, #108]	@ 0x6c

			p1 = Encoder_GetPosition_mm(&encoder1);
 8002c84:	4864      	ldr	r0, [pc, #400]	@ (8002e18 <main+0x6d8>)
 8002c86:	f7fe fa10 	bl	80010aa <Encoder_GetPosition_mm>
 8002c8a:	eef0 7a40 	vmov.f32	s15, s0
 8002c8e:	4b64      	ldr	r3, [pc, #400]	@ (8002e20 <main+0x6e0>)
 8002c90:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8002c94:	4860      	ldr	r0, [pc, #384]	@ (8002e18 <main+0x6d8>)
 8002c96:	f7fe f9ea 	bl	800106e <Encoder_GetVelocity>
 8002c9a:	eef0 7a40 	vmov.f32	s15, s0
 8002c9e:	4b61      	ldr	r3, [pc, #388]	@ (8002e24 <main+0x6e4>)
 8002ca0:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8002ca4:	485c      	ldr	r0, [pc, #368]	@ (8002e18 <main+0x6d8>)
 8002ca6:	f7fe f9f1 	bl	800108c <Encoder_GetAcceleration>
 8002caa:	eef0 7a40 	vmov.f32	s15, s0
 8002cae:	4b5e      	ldr	r3, [pc, #376]	@ (8002e28 <main+0x6e8>)
 8002cb0:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8002cb4:	4859      	ldr	r0, [pc, #356]	@ (8002e1c <main+0x6dc>)
 8002cb6:	f7fe f9cb 	bl	8001050 <Encoder_GetPosition>
 8002cba:	eef0 7a40 	vmov.f32	s15, s0
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <main+0x6ec>)
 8002cc0:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8002cc4:	4855      	ldr	r0, [pc, #340]	@ (8002e1c <main+0x6dc>)
 8002cc6:	f7fe f9d2 	bl	800106e <Encoder_GetVelocity>
 8002cca:	eef0 7a40 	vmov.f32	s15, s0
 8002cce:	4b58      	ldr	r3, [pc, #352]	@ (8002e30 <main+0x6f0>)
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8002cd4:	4851      	ldr	r0, [pc, #324]	@ (8002e1c <main+0x6dc>)
 8002cd6:	f7fe f9d9 	bl	800108c <Encoder_GetAcceleration>
 8002cda:	eef0 7a40 	vmov.f32	s15, s0
 8002cde:	4b55      	ldr	r3, [pc, #340]	@ (8002e34 <main+0x6f4>)
 8002ce0:	edc3 7a00 	vstr	s15, [r3]

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8002ce4:	484c      	ldr	r0, [pc, #304]	@ (8002e18 <main+0x6d8>)
 8002ce6:	f7fe f9e0 	bl	80010aa <Encoder_GetPosition_mm>
 8002cea:	eef0 7a40 	vmov.f32	s15, s0
 8002cee:	4b52      	ldr	r3, [pc, #328]	@ (8002e38 <main+0x6f8>)
 8002cf0:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8002cf4:	4848      	ldr	r0, [pc, #288]	@ (8002e18 <main+0x6d8>)
 8002cf6:	f7fe f9e7 	bl	80010c8 <Encoder_GetVelocity_mm>
 8002cfa:	eef0 7a40 	vmov.f32	s15, s0
 8002cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8002e38 <main+0x6f8>)
 8002d00:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 8002d04:	4b4c      	ldr	r3, [pc, #304]	@ (8002e38 <main+0x6f8>)
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 8002d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e38 <main+0x6f8>)
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 8002d14:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <main+0x6fc>)
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d1e:	4848      	ldr	r0, [pc, #288]	@ (8002e40 <main+0x700>)
 8002d20:	f7fe fb84 	bl	800142c <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 8002d24:	4846      	ldr	r0, [pc, #280]	@ (8002e40 <main+0x700>)
 8002d26:	f7fe fb91 	bl	800144c <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 8002d2a:	4943      	ldr	r1, [pc, #268]	@ (8002e38 <main+0x6f8>)
 8002d2c:	4844      	ldr	r0, [pc, #272]	@ (8002e40 <main+0x700>)
 8002d2e:	f7fe fbda 	bl	80014e6 <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100/30);
 8002d32:	483a      	ldr	r0, [pc, #232]	@ (8002e1c <main+0x6dc>)
 8002d34:	f7fe f98c 	bl	8001050 <Encoder_GetPosition>
 8002d38:	eeb0 7a40 	vmov.f32	s14, s0
 8002d3c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002d40:	e080      	b.n	8002e44 <main+0x704>
 8002d42:	bf00      	nop
 8002d44:	f3af 8000 	nop.w
 8002d48:	eb1c432d 	.word	0xeb1c432d
 8002d4c:	3f5a36e2 	.word	0x3f5a36e2
 8002d50:	b50b0f28 	.word	0xb50b0f28
 8002d54:	400ef9a6 	.word	0x400ef9a6
 8002d58:	9db22d0e 	.word	0x9db22d0e
 8002d5c:	3fc6a7ef 	.word	0x3fc6a7ef
 8002d60:	00000000 	.word	0x00000000
 8002d64:	3fec0000 	.word	0x3fec0000
 8002d68:	3c968944 	.word	0x3c968944
 8002d6c:	3f3f969e 	.word	0x3f3f969e
 8002d70:	05857aff 	.word	0x05857aff
 8002d74:	3f2e03f7 	.word	0x3f2e03f7
 8002d78:	fa8f7db7 	.word	0xfa8f7db7
 8002d7c:	3f3615eb 	.word	0x3f3615eb
 8002d80:	f9db22d1 	.word	0xf9db22d1
 8002d84:	3fe06a7e 	.word	0x3fe06a7e
 8002d88:	a7daa4fc 	.word	0xa7daa4fc
 8002d8c:	3ff331e3 	.word	0x3ff331e3
 8002d90:	e147ae14 	.word	0xe147ae14
 8002d94:	3ffa147a 	.word	0x3ffa147a
 8002d98:	df3b645a 	.word	0xdf3b645a
 8002d9c:	3fe78d4f 	.word	0x3fe78d4f
 8002da0:	003eea21 	.word	0x003eea21
 8002da4:	3f7c4da9 	.word	0x3f7c4da9
 8002da8:	4dd2f1aa 	.word	0x4dd2f1aa
 8002dac:	3fc81062 	.word	0x3fc81062
 8002db0:	2000119c 	.word	0x2000119c
 8002db4:	3da3d70a 	.word	0x3da3d70a
 8002db8:	3df5c28f 	.word	0x3df5c28f
 8002dbc:	200014c0 	.word	0x200014c0
 8002dc0:	200014f8 	.word	0x200014f8
 8002dc4:	20000da8 	.word	0x20000da8
 8002dc8:	3e99999a 	.word	0x3e99999a
 8002dcc:	3c23d70a 	.word	0x3c23d70a
 8002dd0:	20000dcc 	.word	0x20000dcc
 8002dd4:	3da3d70a 	.word	0x3da3d70a
 8002dd8:	20000df4 	.word	0x20000df4
 8002ddc:	42c80000 	.word	0x42c80000
 8002de0:	42200000 	.word	0x42200000
 8002de4:	20000e30 	.word	0x20000e30
 8002de8:	40400000 	.word	0x40400000
 8002dec:	3dcccccd 	.word	0x3dcccccd
 8002df0:	200002e0 	.word	0x200002e0
 8002df4:	2000034c 	.word	0x2000034c
 8002df8:	20000730 	.word	0x20000730
 8002dfc:	20000732 	.word	0x20000732
 8002e00:	200017cc 	.word	0x200017cc
 8002e04:	20000424 	.word	0x20000424
 8002e08:	20001898 	.word	0x20001898
 8002e0c:	20000428 	.word	0x20000428
 8002e10:	447a0000 	.word	0x447a0000
 8002e14:	3a83126f 	.word	0x3a83126f
 8002e18:	200003bc 	.word	0x200003bc
 8002e1c:	200003f0 	.word	0x200003f0
 8002e20:	20000714 	.word	0x20000714
 8002e24:	20000718 	.word	0x20000718
 8002e28:	2000071c 	.word	0x2000071c
 8002e2c:	20000720 	.word	0x20000720
 8002e30:	20000724 	.word	0x20000724
 8002e34:	20000728 	.word	0x20000728
 8002e38:	20001530 	.word	0x20001530
 8002e3c:	20000df0 	.word	0x20000df0
 8002e40:	20000e78 	.word	0x20000e78
 8002e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e48:	4b7f      	ldr	r3, [pc, #508]	@ (8003048 <main+0x908>)
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100/30);
 8002e4e:	487f      	ldr	r0, [pc, #508]	@ (800304c <main+0x90c>)
 8002e50:	f7fe f90d 	bl	800106e <Encoder_GetVelocity>
 8002e54:	eeb0 7a40 	vmov.f32	s14, s0
 8002e58:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e60:	4b79      	ldr	r3, [pc, #484]	@ (8003048 <main+0x908>)
 8002e62:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Rev[2] = 0;
 8002e66:	4b78      	ldr	r3, [pc, #480]	@ (8003048 <main+0x908>)
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 8002e6e:	4b76      	ldr	r3, [pc, #472]	@ (8003048 <main+0x908>)
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8002e76:	4b76      	ldr	r3, [pc, #472]	@ (8003050 <main+0x910>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e80:	4874      	ldr	r0, [pc, #464]	@ (8003054 <main+0x914>)
 8002e82:	f7fe fad3 	bl	800142c <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8002e86:	4873      	ldr	r0, [pc, #460]	@ (8003054 <main+0x914>)
 8002e88:	f7fe fae0 	bl	800144c <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 8002e8c:	496e      	ldr	r1, [pc, #440]	@ (8003048 <main+0x908>)
 8002e8e:	4871      	ldr	r0, [pc, #452]	@ (8003054 <main+0x914>)
 8002e90:	f7fe fb29 	bl	80014e6 <Kalman_Update>
//				}
////				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
//				count_Tim2 = 0;
//			}

			Revolute_dis();
 8002e94:	f000 fd08 	bl	80038a8 <Revolute_dis>
			count_Tim2 += 1;
 8002e98:	4b6f      	ldr	r3, [pc, #444]	@ (8003058 <main+0x918>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8003058 <main+0x918>)
 8002ea0:	6013      	str	r3, [r2, #0]
			// Velocity Control
			velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0/30.0);
 8002ea2:	486a      	ldr	r0, [pc, #424]	@ (800304c <main+0x90c>)
 8002ea4:	f7fe f8e3 	bl	800106e <Encoder_GetVelocity>
 8002ea8:	ee10 3a10 	vmov	r3, s0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd fb17 	bl	80004e0 <__aeabi_f2d>
 8002eb2:	a35f      	add	r3, pc, #380	@ (adr r3, 8003030 <main+0x8f0>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f7fd fc94 	bl	80007e4 <__aeabi_ddiv>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f7fd fdfe 	bl	8000ac4 <__aeabi_d2f>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a64      	ldr	r2, [pc, #400]	@ (800305c <main+0x91c>)
 8002ecc:	6013      	str	r3, [r2, #0]
			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
 8002ece:	4b64      	ldr	r3, [pc, #400]	@ (8003060 <main+0x920>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4a62      	ldr	r2, [pc, #392]	@ (8003064 <main+0x924>)
 8002edc:	4413      	add	r3, r2
 8002ede:	4a62      	ldr	r2, [pc, #392]	@ (8003068 <main+0x928>)
 8002ee0:	edd2 7a00 	vldr	s15, [r2]
 8002ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff f95f 	bl	80021ac <GetTrajectoryVelocity>
 8002eee:	eeb0 7a40 	vmov.f32	s14, s0
 8002ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800306c <main+0x92c>)
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002efc:	4b5c      	ldr	r3, [pc, #368]	@ (8003070 <main+0x930>)
 8002efe:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_rev = setvelocity_rev - velocity_rev;
			delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 8002f02:	4b5b      	ldr	r3, [pc, #364]	@ (8003070 <main+0x930>)
 8002f04:	ed93 7a00 	vldr	s14, [r3]
 8002f08:	4b52      	ldr	r3, [pc, #328]	@ (8003054 <main+0x914>)
 8002f0a:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 8002f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f12:	4b58      	ldr	r3, [pc, #352]	@ (8003074 <main+0x934>)
 8002f14:	edc3 7a00 	vstr	s15, [r3]
			V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 8002f18:	4b56      	ldr	r3, [pc, #344]	@ (8003074 <main+0x934>)
 8002f1a:	edd3 7a00 	vldr	s15, [r3]
 8002f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f22:	f000 fc23 	bl	800376c <Revolute_velocity_control>
 8002f26:	eef0 7a40 	vmov.f32	s15, s0
 8002f2a:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <main+0x910>)
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 8002f30:	4b49      	ldr	r3, [pc, #292]	@ (8003058 <main+0x918>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b09      	cmp	r3, #9
 8002f36:	dd67      	ble.n	8003008 <main+0x8c8>
				// Position Control
				position_rev = Encoder_GetPosition(&encoder2) / (100.0/30.0);
 8002f38:	4844      	ldr	r0, [pc, #272]	@ (800304c <main+0x90c>)
 8002f3a:	f7fe f889 	bl	8001050 <Encoder_GetPosition>
 8002f3e:	ee10 3a10 	vmov	r3, s0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd facc 	bl	80004e0 <__aeabi_f2d>
 8002f48:	a339      	add	r3, pc, #228	@ (adr r3, 8003030 <main+0x8f0>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd fc49 	bl	80007e4 <__aeabi_ddiv>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fdb3 	bl	8000ac4 <__aeabi_d2f>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a45      	ldr	r2, [pc, #276]	@ (8003078 <main+0x938>)
 8002f62:	6013      	str	r3, [r2, #0]
				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global);
 8002f64:	4b3e      	ldr	r3, [pc, #248]	@ (8003060 <main+0x920>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4a3c      	ldr	r2, [pc, #240]	@ (8003064 <main+0x924>)
 8002f72:	4413      	add	r3, r2
 8002f74:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <main+0x928>)
 8002f76:	edd2 7a00 	vldr	s15, [r2]
 8002f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff f83e 	bl	8002000 <GetTrajectoryPosition>
 8002f84:	eef0 7a40 	vmov.f32	s15, s0
 8002f88:	4b3c      	ldr	r3, [pc, #240]	@ (800307c <main+0x93c>)
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
				delta_posi_rev = setposition_rev - position_rev;
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800307c <main+0x93c>)
 8002f90:	ed93 7a00 	vldr	s14, [r3]
 8002f94:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <main+0x938>)
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f9e:	4b38      	ldr	r3, [pc, #224]	@ (8003080 <main+0x940>)
 8002fa0:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 8002fa4:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <main+0x940>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fa99 	bl	80004e0 <__aeabi_f2d>
 8002fae:	a322      	add	r3, pc, #136	@ (adr r3, 8003038 <main+0x8f8>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd fd68 	bl	8000a88 <__aeabi_dcmple>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <main+0x8aa>
 8002fbe:	4b30      	ldr	r3, [pc, #192]	@ (8003080 <main+0x940>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fa8c 	bl	80004e0 <__aeabi_f2d>
 8002fc8:	a31d      	add	r3, pc, #116	@ (adr r3, 8003040 <main+0x900>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd fd65 	bl	8000a9c <__aeabi_dcmpge>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <main+0x8aa>
					V_rev_posi_PID = 0;
 8002fd8:	4b24      	ldr	r3, [pc, #144]	@ (800306c <main+0x92c>)
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
					V_rev_velo_PID = 0;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <main+0x910>)
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e00b      	b.n	8003002 <main+0x8c2>
				} else {
					V_rev_posi_PID = Revolute_position_control(delta_posi_rev);
 8002fea:	4b25      	ldr	r3, [pc, #148]	@ (8003080 <main+0x940>)
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff4:	f000 fb42 	bl	800367c <Revolute_position_control>
 8002ff8:	eef0 7a40 	vmov.f32	s15, s0
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <main+0x92c>)
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
				count_Tim2 = 0;
 8003002:	4b15      	ldr	r3, [pc, #84]	@ (8003058 <main+0x918>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
//		}
//		pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
//		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,pwm_pris_velo);

		if (V_rev_velo_PID < 0) {
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <main+0x910>)
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	d539      	bpl.n	800308c <main+0x94c>
			DIR_18V = 1;
 8003018:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <main+0x944>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
			V_absolute_rev = fabsf(V_rev_velo_PID);
 800301e:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <main+0x910>)
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	eef0 7ae7 	vabs.f32	s15, s15
 8003028:	4b17      	ldr	r3, [pc, #92]	@ (8003088 <main+0x948>)
 800302a:	edc3 7a00 	vstr	s15, [r3]
 800302e:	e03c      	b.n	80030aa <main+0x96a>
 8003030:	aaaaaaab 	.word	0xaaaaaaab
 8003034:	400aaaaa 	.word	0x400aaaaa
 8003038:	9999999a 	.word	0x9999999a
 800303c:	3fb99999 	.word	0x3fb99999
 8003040:	9999999a 	.word	0x9999999a
 8003044:	bfb99999 	.word	0xbfb99999
 8003048:	20001540 	.word	0x20001540
 800304c:	200003f0 	.word	0x200003f0
 8003050:	20000e5c 	.word	0x20000e5c
 8003054:	2000119c 	.word	0x2000119c
 8003058:	20000da4 	.word	0x20000da4
 800305c:	20000e54 	.word	0x20000e54
 8003060:	2000043c 	.word	0x2000043c
 8003064:	200005a8 	.word	0x200005a8
 8003068:	20000710 	.word	0x20000710
 800306c:	20000e20 	.word	0x20000e20
 8003070:	20000e58 	.word	0x20000e58
 8003074:	20000e6c 	.word	0x20000e6c
 8003078:	20000e18 	.word	0x20000e18
 800307c:	20000e1c 	.word	0x20000e1c
 8003080:	20000e2c 	.word	0x20000e2c
 8003084:	20000d9c 	.word	0x20000d9c
 8003088:	20000e70 	.word	0x20000e70
		} else if (V_rev_velo_PID > 0) {
 800308c:	4b8e      	ldr	r3, [pc, #568]	@ (80032c8 <main+0xb88>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	dd06      	ble.n	80030aa <main+0x96a>
			DIR_18V = 0;
 800309c:	4b8b      	ldr	r3, [pc, #556]	@ (80032cc <main+0xb8c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
			V_absolute_rev = V_rev_velo_PID;
 80030a2:	4b89      	ldr	r3, [pc, #548]	@ (80032c8 <main+0xb88>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a8a      	ldr	r2, [pc, #552]	@ (80032d0 <main+0xb90>)
 80030a8:	6013      	str	r3, [r2, #0]
		}
		V_plant = V_absolute_rev + voltage_dis_rev;
 80030aa:	4b89      	ldr	r3, [pc, #548]	@ (80032d0 <main+0xb90>)
 80030ac:	ed93 7a00 	vldr	s14, [r3]
 80030b0:	4b88      	ldr	r3, [pc, #544]	@ (80032d4 <main+0xb94>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ba:	4b87      	ldr	r3, [pc, #540]	@ (80032d8 <main+0xb98>)
 80030bc:	edc3 7a00 	vstr	s15, [r3]
		if (V_plant > 18) {
 80030c0:	4b85      	ldr	r3, [pc, #532]	@ (80032d8 <main+0xb98>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80030ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	dd02      	ble.n	80030da <main+0x99a>
			V_plant = 18;
 80030d4:	4b80      	ldr	r3, [pc, #512]	@ (80032d8 <main+0xb98>)
 80030d6:	4a81      	ldr	r2, [pc, #516]	@ (80032dc <main+0xb9c>)
 80030d8:	601a      	str	r2, [r3, #0]
		}
		pwm_rev_velo = (V_plant / 18) * 65535;
 80030da:	4b7f      	ldr	r3, [pc, #508]	@ (80032d8 <main+0xb98>)
 80030dc:	ed93 7a00 	vldr	s14, [r3]
 80030e0:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 80030e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030e8:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80032e0 <main+0xba0>
 80030ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030f0:	4b7c      	ldr	r3, [pc, #496]	@ (80032e4 <main+0xba4>)
 80030f2:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 80030f6:	4b75      	ldr	r3, [pc, #468]	@ (80032cc <main+0xb8c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	4879      	ldr	r0, [pc, #484]	@ (80032e8 <main+0xba8>)
 8003102:	f003 fcd3 	bl	8006aac <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,pwm_rev_velo);
 8003106:	4b77      	ldr	r3, [pc, #476]	@ (80032e4 <main+0xba4>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	4b77      	ldr	r3, [pc, #476]	@ (80032ec <main+0xbac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003114:	ee17 2a90 	vmov	r2, s15
 8003118:	63da      	str	r2, [r3, #60]	@ 0x3c

//		PS2_ReadData();
		Circle = PS2_ButtonCircle();
 800311a:	f7fd ffe5 	bl	80010e8 <PS2_ButtonCircle>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4b73      	ldr	r3, [pc, #460]	@ (80032f0 <main+0xbb0>)
 8003124:	601a      	str	r2, [r3, #0]
		Square = PS2_ButtonSquare();
 8003126:	f7fd fff1 	bl	800110c <PS2_ButtonSquare>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	4b71      	ldr	r3, [pc, #452]	@ (80032f4 <main+0xbb4>)
 8003130:	601a      	str	r2, [r3, #0]
		Triangle = PS2_ButtonTriangle();
 8003132:	f7fd fffb 	bl	800112c <PS2_ButtonTriangle>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	4b6f      	ldr	r3, [pc, #444]	@ (80032f8 <main+0xbb8>)
 800313c:	601a      	str	r2, [r3, #0]
		Cross = PS2_ButtonCross();
 800313e:	f7fe f807 	bl	8001150 <PS2_ButtonCross>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	4b6d      	ldr	r3, [pc, #436]	@ (80032fc <main+0xbbc>)
 8003148:	601a      	str	r2, [r3, #0]
		R1 = PS2_ButtonR1();
 800314a:	f7fe f813 	bl	8001174 <PS2_ButtonR1>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	4b6b      	ldr	r3, [pc, #428]	@ (8003300 <main+0xbc0>)
 8003154:	601a      	str	r2, [r3, #0]
		R2 = PS2_ButtonR2();
 8003156:	f7fe f81f 	bl	8001198 <PS2_ButtonR2>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	4b69      	ldr	r3, [pc, #420]	@ (8003304 <main+0xbc4>)
 8003160:	601a      	str	r2, [r3, #0]
		Select = PS2_ButtonSelect();
 8003162:	f7fe f82b 	bl	80011bc <PS2_ButtonSelect>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	4b67      	ldr	r3, [pc, #412]	@ (8003308 <main+0xbc8>)
 800316c:	601a      	str	r2, [r3, #0]
		Start = PS2_ButtonStart();
 800316e:	f7fe f837 	bl	80011e0 <PS2_ButtonStart>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	4b65      	ldr	r3, [pc, #404]	@ (800330c <main+0xbcc>)
 8003178:	601a      	str	r2, [r3, #0]
		L2 = PS2_ButtonL2();
 800317a:	f7fe f843 	bl	8001204 <PS2_ButtonL2>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	4b63      	ldr	r3, [pc, #396]	@ (8003310 <main+0xbd0>)
 8003184:	601a      	str	r2, [r3, #0]
//				count += 1;
//			}
//		}
//		prevSelect = selectPressed;

		t_global = HAL_GetTick() / 1000.0f;
 8003186:	f001 fbf7 	bl	8004978 <HAL_GetTick>
 800318a:	ee07 0a90 	vmov	s15, r0
 800318e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003192:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003314 <main+0xbd4>
 8003196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800319a:	4b5f      	ldr	r3, [pc, #380]	@ (8003318 <main+0xbd8>)
 800319c:	edc3 7a00 	vstr	s15, [r3]
//		if (t_global > Prismatic[current_segment].t_start + Prismatic[current_segment].t_total) {
//			if (current_segment < 9) {
//				current_segment++;
//			}
//		}
		for (int i = 0; i < 10; i++) {
 80031a0:	2300      	movs	r3, #0
 80031a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031a4:	e11c      	b.n	80033e0 <main+0xca0>
			float start_pris = PrismaticTenPoints[i];
 80031a6:	4a5d      	ldr	r2, [pc, #372]	@ (800331c <main+0xbdc>)
 80031a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
			float end_pris = PrismaticTenPoints[i + 1];
 80031b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031b4:	3301      	adds	r3, #1
 80031b6:	4a59      	ldr	r2, [pc, #356]	@ (800331c <main+0xbdc>)
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	64bb      	str	r3, [r7, #72]	@ 0x48
			float start_rev = RevoluteTenPoints[i];
 80031c0:	4a57      	ldr	r2, [pc, #348]	@ (8003320 <main+0xbe0>)
 80031c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	647b      	str	r3, [r7, #68]	@ 0x44
			float end_rev = RevoluteTenPoints[i + 1];
 80031cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ce:	3301      	adds	r3, #1
 80031d0:	4a53      	ldr	r2, [pc, #332]	@ (8003320 <main+0xbe0>)
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	643b      	str	r3, [r7, #64]	@ 0x40
			// กำหนดเวลาเริ่มต้นของ segment นี้
			float t_start_pris = (i == 0) ? t_global : Prismatic[i - 1].t_start + Prismatic[i - 1].t_total + delay_pris[i - 1];
 80031da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d021      	beq.n	8003224 <main+0xae4>
 80031e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031e2:	1e5a      	subs	r2, r3, #1
 80031e4:	494f      	ldr	r1, [pc, #316]	@ (8003324 <main+0xbe4>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3320      	adds	r3, #32
 80031f2:	ed93 7a00 	vldr	s14, [r3]
 80031f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031f8:	1e5a      	subs	r2, r3, #1
 80031fa:	494a      	ldr	r1, [pc, #296]	@ (8003324 <main+0xbe4>)
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	331c      	adds	r3, #28
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003212:	3b01      	subs	r3, #1
 8003214:	4a44      	ldr	r2, [pc, #272]	@ (8003328 <main+0xbe8>)
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	edd3 7a00 	vldr	s15, [r3]
 800321e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003222:	e002      	b.n	800322a <main+0xaea>
 8003224:	4b3c      	ldr	r3, [pc, #240]	@ (8003318 <main+0xbd8>)
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
			InitTrajectorySegment(&Prismatic[i], start_pris, end_pris, v_max_rev, a_max_rev, t_start_pris);
 800322e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4a3a      	ldr	r2, [pc, #232]	@ (8003324 <main+0xbe4>)
 800323a:	4413      	add	r3, r2
 800323c:	ed97 2a0f 	vldr	s4, [r7, #60]	@ 0x3c
 8003240:	eddf 1a3a 	vldr	s3, [pc, #232]	@ 800332c <main+0xbec>
 8003244:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8003248:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 800324c:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fe1f 	bl	8001e94 <InitTrajectorySegment>
			delay_pris[i] = 5.5f - Prismatic[i].t_total;
 8003256:	4933      	ldr	r1, [pc, #204]	@ (8003324 <main+0xbe4>)
 8003258:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	331c      	adds	r3, #28
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 800326e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003272:	4a2d      	ldr	r2, [pc, #180]	@ (8003328 <main+0xbe8>)
 8003274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	edc3 7a00 	vstr	s15, [r3]
			float t_start_rev = (i == 0) ? t_global : Revolute[i - 1].t_start + Revolute[i - 1].t_total + delay_rev[i - 1];
 800327e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003280:	2b00      	cmp	r3, #0
 8003282:	d059      	beq.n	8003338 <main+0xbf8>
 8003284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003286:	1e5a      	subs	r2, r3, #1
 8003288:	4929      	ldr	r1, [pc, #164]	@ (8003330 <main+0xbf0>)
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3320      	adds	r3, #32
 8003296:	ed93 7a00 	vldr	s14, [r3]
 800329a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	4924      	ldr	r1, [pc, #144]	@ (8003330 <main+0xbf0>)
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	331c      	adds	r3, #28
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032b6:	3b01      	subs	r3, #1
 80032b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003334 <main+0xbf4>)
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	e03a      	b.n	800333e <main+0xbfe>
 80032c8:	20000e5c 	.word	0x20000e5c
 80032cc:	20000d9c 	.word	0x20000d9c
 80032d0:	20000e70 	.word	0x20000e70
 80032d4:	20000da0 	.word	0x20000da0
 80032d8:	20000e74 	.word	0x20000e74
 80032dc:	41900000 	.word	0x41900000
 80032e0:	477fff00 	.word	0x477fff00
 80032e4:	20000e60 	.word	0x20000e60
 80032e8:	48000800 	.word	0x48000800
 80032ec:	20001afc 	.word	0x20001afc
 80032f0:	2000155c 	.word	0x2000155c
 80032f4:	20001560 	.word	0x20001560
 80032f8:	20001564 	.word	0x20001564
 80032fc:	20001568 	.word	0x20001568
 8003300:	2000156c 	.word	0x2000156c
 8003304:	20001570 	.word	0x20001570
 8003308:	20001574 	.word	0x20001574
 800330c:	20001578 	.word	0x20001578
 8003310:	2000157c 	.word	0x2000157c
 8003314:	447a0000 	.word	0x447a0000
 8003318:	20000710 	.word	0x20000710
 800331c:	20000200 	.word	0x20000200
 8003320:	2000022c 	.word	0x2000022c
 8003324:	20000440 	.word	0x20000440
 8003328:	20001580 	.word	0x20001580
 800332c:	3ecccccd 	.word	0x3ecccccd
 8003330:	200005a8 	.word	0x200005a8
 8003334:	200015a8 	.word	0x200015a8
 8003338:	4b78      	ldr	r3, [pc, #480]	@ (800351c <main+0xddc>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			InitTrajectorySegment(&Revolute[i], start_rev, end_rev, v_max_rev, a_max_rev, t_start_rev);
 8003342:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4a74      	ldr	r2, [pc, #464]	@ (8003520 <main+0xde0>)
 800334e:	4413      	add	r3, r2
 8003350:	ed97 2a0e 	vldr	s4, [r7, #56]	@ 0x38
 8003354:	eddf 1a73 	vldr	s3, [pc, #460]	@ 8003524 <main+0xde4>
 8003358:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800335c:	edd7 0a10 	vldr	s1, [r7, #64]	@ 0x40
 8003360:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fd95 	bl	8001e94 <InitTrajectorySegment>
			delay_rev[i] = 5.5f - Revolute[i].t_total;
 800336a:	496d      	ldr	r1, [pc, #436]	@ (8003520 <main+0xde0>)
 800336c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	331c      	adds	r3, #28
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8003382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003386:	4a68      	ldr	r2, [pc, #416]	@ (8003528 <main+0xde8>)
 8003388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	edc3 7a00 	vstr	s15, [r3]
			// ป้องกันกรณีเคลื่อนที่ช้ามากจน delay < 0
			if (delay_pris[i] < 0.0f) {
 8003392:	4a66      	ldr	r2, [pc, #408]	@ (800352c <main+0xdec>)
 8003394:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d506      	bpl.n	80033b6 <main+0xc76>
				delay_pris[i] = 0.0f;
 80033a8:	4a60      	ldr	r2, [pc, #384]	@ (800352c <main+0xdec>)
 80033aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
			}
			if (delay_rev[i] < 0.0f) {
 80033b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003528 <main+0xde8>)
 80033b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d506      	bpl.n	80033da <main+0xc9a>
				delay_rev[i] = 0.0f;
 80033cc:	4a56      	ldr	r2, [pc, #344]	@ (8003528 <main+0xde8>)
 80033ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 10; i++) {
 80033da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033dc:	3301      	adds	r3, #1
 80033de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033e2:	2b09      	cmp	r3, #9
 80033e4:	f77f aedf 	ble.w	80031a6 <main+0xa66>
			}
		}
		current_segment = 0;
 80033e8:	4b51      	ldr	r3, [pc, #324]	@ (8003530 <main+0xdf0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

		if (current_segment < 10) {
 80033ee:	4b50      	ldr	r3, [pc, #320]	@ (8003530 <main+0xdf0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b09      	cmp	r3, #9
 80033f4:	dc54      	bgt.n	80034a0 <main+0xd60>
			pos_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
 80033f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003530 <main+0xdf0>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4a4c      	ldr	r2, [pc, #304]	@ (8003534 <main+0xdf4>)
 8003404:	4413      	add	r3, r2
 8003406:	4a45      	ldr	r2, [pc, #276]	@ (800351c <main+0xddc>)
 8003408:	edd2 7a00 	vldr	s15, [r2]
 800340c:	eeb0 0a67 	vmov.f32	s0, s15
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fdf5 	bl	8002000 <GetTrajectoryPosition>
 8003416:	eef0 7a40 	vmov.f32	s15, s0
 800341a:	4b47      	ldr	r3, [pc, #284]	@ (8003538 <main+0xdf8>)
 800341c:	edc3 7a00 	vstr	s15, [r3]
			vel_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global);
 8003420:	4b43      	ldr	r3, [pc, #268]	@ (8003530 <main+0xdf0>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a41      	ldr	r2, [pc, #260]	@ (8003534 <main+0xdf4>)
 800342e:	4413      	add	r3, r2
 8003430:	4a3a      	ldr	r2, [pc, #232]	@ (800351c <main+0xddc>)
 8003432:	edd2 7a00 	vldr	s15, [r2]
 8003436:	eeb0 0a67 	vmov.f32	s0, s15
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe feb6 	bl	80021ac <GetTrajectoryVelocity>
 8003440:	eef0 7a40 	vmov.f32	s15, s0
 8003444:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <main+0xdfc>)
 8003446:	edc3 7a00 	vstr	s15, [r3]
			pos_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global);
 800344a:	4b39      	ldr	r3, [pc, #228]	@ (8003530 <main+0xdf0>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4a32      	ldr	r2, [pc, #200]	@ (8003520 <main+0xde0>)
 8003458:	4413      	add	r3, r2
 800345a:	4a30      	ldr	r2, [pc, #192]	@ (800351c <main+0xddc>)
 800345c:	edd2 7a00 	vldr	s15, [r2]
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe fdcb 	bl	8002000 <GetTrajectoryPosition>
 800346a:	eef0 7a40 	vmov.f32	s15, s0
 800346e:	4b34      	ldr	r3, [pc, #208]	@ (8003540 <main+0xe00>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
			vel_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global);
 8003474:	4b2e      	ldr	r3, [pc, #184]	@ (8003530 <main+0xdf0>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <main+0xde0>)
 8003482:	4413      	add	r3, r2
 8003484:	4a25      	ldr	r2, [pc, #148]	@ (800351c <main+0xddc>)
 8003486:	edd2 7a00 	vldr	s15, [r2]
 800348a:	eeb0 0a67 	vmov.f32	s0, s15
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe fe8c 	bl	80021ac <GetTrajectoryVelocity>
 8003494:	eef0 7a40 	vmov.f32	s15, s0
 8003498:	4b2a      	ldr	r3, [pc, #168]	@ (8003544 <main+0xe04>)
 800349a:	edc3 7a00 	vstr	s15, [r3]
 800349e:	e011      	b.n	80034c4 <main+0xd84>
		} else {
			pos_pris = Prismatic[9].end_pos;
 80034a0:	4b24      	ldr	r3, [pc, #144]	@ (8003534 <main+0xdf4>)
 80034a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80034a6:	4a24      	ldr	r2, [pc, #144]	@ (8003538 <main+0xdf8>)
 80034a8:	6013      	str	r3, [r2, #0]
			vel_pris = 0.0f;
 80034aa:	4b24      	ldr	r3, [pc, #144]	@ (800353c <main+0xdfc>)
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
			pos_rev = Revolute[9].end_pos;
 80034b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <main+0xde0>)
 80034b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80034b8:	4a21      	ldr	r2, [pc, #132]	@ (8003540 <main+0xe00>)
 80034ba:	6013      	str	r3, [r2, #0]
			vel_rev = 0.0f;
 80034bc:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <main+0xe04>)
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
		}

		if (t_global > Prismatic[current_segment].t_start + Prismatic[current_segment].t_total) {
 80034c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <main+0xdf0>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	491a      	ldr	r1, [pc, #104]	@ (8003534 <main+0xdf4>)
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3320      	adds	r3, #32
 80034d6:	ed93 7a00 	vldr	s14, [r3]
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <main+0xdf0>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4915      	ldr	r1, [pc, #84]	@ (8003534 <main+0xdf4>)
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	331c      	adds	r3, #28
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f4:	4b09      	ldr	r3, [pc, #36]	@ (800351c <main+0xddc>)
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003502:	d509      	bpl.n	8003518 <main+0xdd8>
			if (current_segment < 9) {
 8003504:	4b0a      	ldr	r3, [pc, #40]	@ (8003530 <main+0xdf0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b08      	cmp	r3, #8
 800350a:	f73f ab75 	bgt.w	8002bf8 <main+0x4b8>
				current_segment++;
 800350e:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <main+0xdf0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a06      	ldr	r2, [pc, #24]	@ (8003530 <main+0xdf0>)
 8003516:	6013      	str	r3, [r2, #0]
	while (1) {
 8003518:	f7ff bb6e 	b.w	8002bf8 <main+0x4b8>
 800351c:	20000710 	.word	0x20000710
 8003520:	200005a8 	.word	0x200005a8
 8003524:	3ecccccd 	.word	0x3ecccccd
 8003528:	200015a8 	.word	0x200015a8
 800352c:	20001580 	.word	0x20001580
 8003530:	2000043c 	.word	0x2000043c
 8003534:	20000440 	.word	0x20000440
 8003538:	2000042c 	.word	0x2000042c
 800353c:	20000430 	.word	0x20000430
 8003540:	20000434 	.word	0x20000434
 8003544:	20000438 	.word	0x20000438

08003548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b094      	sub	sp, #80	@ 0x50
 800354c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800354e:	f107 0318 	add.w	r3, r7, #24
 8003552:	2238      	movs	r2, #56	@ 0x38
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f009 feda 	bl	800d310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]
 8003564:	609a      	str	r2, [r3, #8]
 8003566:	60da      	str	r2, [r3, #12]
 8003568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800356a:	2000      	movs	r0, #0
 800356c:	f003 face 	bl	8006b0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003570:	2302      	movs	r3, #2
 8003572:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800357a:	2340      	movs	r3, #64	@ 0x40
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800357e:	2302      	movs	r3, #2
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003582:	2302      	movs	r3, #2
 8003584:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003586:	2304      	movs	r3, #4
 8003588:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800358a:	2355      	movs	r3, #85	@ 0x55
 800358c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800358e:	2302      	movs	r3, #2
 8003590:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003592:	2302      	movs	r3, #2
 8003594:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003596:	2302      	movs	r3, #2
 8003598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800359a:	f107 0318 	add.w	r3, r7, #24
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 fb68 	bl	8006c74 <HAL_RCC_OscConfig>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80035aa:	f000 fa67 	bl	8003a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ae:	230f      	movs	r3, #15
 80035b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035b2:	2303      	movs	r3, #3
 80035b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	2104      	movs	r1, #4
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 fe66 	bl	8007298 <HAL_RCC_ClockConfig>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80035d2:	f000 fa53 	bl	8003a7c <Error_Handler>
  }
}
 80035d6:	bf00      	nop
 80035d8:	3750      	adds	r7, #80	@ 0x50
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f0:	d103      	bne.n	80035fa <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 80035f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x84>)
 80035f4:	2209      	movs	r2, #9
 80035f6:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 80035f8:	e02e      	b.n	8003658 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003600:	d103      	bne.n	800360a <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8003602:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x84>)
 8003604:	220a      	movs	r2, #10
 8003606:	601a      	str	r2, [r3, #0]
}
 8003608:	e026      	b.n	8003658 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003610:	d103      	bne.n	800361a <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8003612:	4b14      	ldr	r3, [pc, #80]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x84>)
 8003614:	220b      	movs	r2, #11
 8003616:	601a      	str	r2, [r3, #0]
}
 8003618:	e01e      	b.n	8003658 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003620:	d103      	bne.n	800362a <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8003622:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x84>)
 8003624:	220c      	movs	r2, #12
 8003626:	601a      	str	r2, [r3, #0]
}
 8003628:	e016      	b.n	8003658 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003630:	d103      	bne.n	800363a <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8003632:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x84>)
 8003634:	220d      	movs	r2, #13
 8003636:	601a      	str	r2, [r3, #0]
}
 8003638:	e00e      	b.n	8003658 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003640:	d103      	bne.n	800364a <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8003642:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x84>)
 8003644:	220e      	movs	r2, #14
 8003646:	601a      	str	r2, [r3, #0]
}
 8003648:	e006      	b.n	8003658 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003650:	d102      	bne.n	8003658 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8003652:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x84>)
 8003654:	220f      	movs	r2, #15
 8003656:	601a      	str	r2, [r3, #0]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	2000072c 	.word	0x2000072c

08003668 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
//	if (htim == &htim2) {
//		PS2_ReadData();
//	}
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <Revolute_position_control>:

	error_velo_pris[1] = error_velo_pris[0];
	return V_pris_velo_PID;
}

float Revolute_position_control(float delta_posi) {
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 8003686:	4a36      	ldr	r2, [pc, #216]	@ (8003760 <Revolute_position_control+0xe4>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 800368c:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <Revolute_position_control+0xe4>)
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	d50a      	bpl.n	80036b2 <Revolute_position_control+0x36>
 800369c:	4b30      	ldr	r3, [pc, #192]	@ (8003760 <Revolute_position_control+0xe4>)
 800369e:	edd3 7a01 	vldr	s15, [r3, #4]
 80036a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036aa:	dd02      	ble.n	80036b2 <Revolute_position_control+0x36>
		anti_windup = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e014      	b.n	80036dc <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 80036b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003760 <Revolute_position_control+0xe4>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	dd0a      	ble.n	80036d8 <Revolute_position_control+0x5c>
 80036c2:	4b27      	ldr	r3, [pc, #156]	@ (8003760 <Revolute_position_control+0xe4>)
 80036c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80036c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	d502      	bpl.n	80036d8 <Revolute_position_control+0x5c>
		anti_windup = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e001      	b.n	80036dc <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 80036d8:	2301      	movs	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	4b21      	ldr	r3, [pc, #132]	@ (8003764 <Revolute_position_control+0xe8>)
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	ed93 7a00 	vldr	s14, [r3]
 80036ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ee:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80036fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003702:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	edd3 6a02 	vldr	s13, [r3, #8]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003716:	ee37 7a27 	vadd.f32	s14, s14, s15
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003724:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800373c:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <Revolute_position_control+0xec>)
 8003740:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 8003742:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <Revolute_position_control+0xe4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a06      	ldr	r2, [pc, #24]	@ (8003760 <Revolute_position_control+0xe4>)
 8003748:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 800374a:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <Revolute_position_control+0xec>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	ee07 3a90 	vmov	s15, r3
}
 8003752:	eeb0 0a67 	vmov.f32	s0, s15
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	20000e24 	.word	0x20000e24
 8003764:	20000df4 	.word	0x20000df4
 8003768:	20000e20 	.word	0x20000e20

0800376c <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] =  delta_velo;
 8003776:	4a47      	ldr	r2, [pc, #284]	@ (8003894 <Revolute_velocity_control+0x128>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 800377c:	4b45      	ldr	r3, [pc, #276]	@ (8003894 <Revolute_velocity_control+0x128>)
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	d50a      	bpl.n	80037a2 <Revolute_velocity_control+0x36>
 800378c:	4b41      	ldr	r3, [pc, #260]	@ (8003894 <Revolute_velocity_control+0x128>)
 800378e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	dd02      	ble.n	80037a2 <Revolute_velocity_control+0x36>
		anti_windup = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e014      	b.n	80037cc <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 80037a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003894 <Revolute_velocity_control+0x128>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	dd0a      	ble.n	80037c8 <Revolute_velocity_control+0x5c>
 80037b2:	4b38      	ldr	r3, [pc, #224]	@ (8003894 <Revolute_velocity_control+0x128>)
 80037b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80037b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	d502      	bpl.n	80037c8 <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e001      	b.n	80037cc <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 80037cc:	4b32      	ldr	r3, [pc, #200]	@ (8003898 <Revolute_velocity_control+0x12c>)
 80037ce:	edd3 7a00 	vldr	s15, [r3]
 80037d2:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80037d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037de:	db07      	blt.n	80037f0 <Revolute_velocity_control+0x84>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 80037e6:	4b2d      	ldr	r3, [pc, #180]	@ (800389c <Revolute_velocity_control+0x130>)
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	61da      	str	r2, [r3, #28]
 80037ee:	e002      	b.n	80037f6 <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 80037f0:	4b2a      	ldr	r3, [pc, #168]	@ (800389c <Revolute_velocity_control+0x130>)
 80037f2:	4a2b      	ldr	r2, [pc, #172]	@ (80038a0 <Revolute_velocity_control+0x134>)
 80037f4:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 80037f6:	4b28      	ldr	r3, [pc, #160]	@ (8003898 <Revolute_velocity_control+0x12c>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8003800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003808:	dd02      	ble.n	8003810 <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 800380a:	4b23      	ldr	r3, [pc, #140]	@ (8003898 <Revolute_velocity_control+0x12c>)
 800380c:	4a25      	ldr	r2, [pc, #148]	@ (80038a4 <Revolute_velocity_control+0x138>)
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	4b22      	ldr	r3, [pc, #136]	@ (800389c <Revolute_velocity_control+0x130>)
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	ed93 7a00 	vldr	s14, [r3]
 800381e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003822:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	edd3 6a01 	vldr	s13, [r3, #4]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003832:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003836:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	edd3 7a04 	vldr	s15, [r3, #16]
 8003846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800384a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003858:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	615a      	str	r2, [r3, #20]
    return (out);
 8003870:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 8003872:	4a09      	ldr	r2, [pc, #36]	@ (8003898 <Revolute_velocity_control+0x12c>)
 8003874:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 8003876:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <Revolute_velocity_control+0x128>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a06      	ldr	r2, [pc, #24]	@ (8003894 <Revolute_velocity_control+0x128>)
 800387c:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <Revolute_velocity_control+0x12c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	ee07 3a90 	vmov	s15, r3
}
 8003886:	eeb0 0a67 	vmov.f32	s0, s15
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	20000e64 	.word	0x20000e64
 8003898:	20000e5c 	.word	0x20000e5c
 800389c:	20000e30 	.word	0x20000e30
 80038a0:	3a83126f 	.word	0x3a83126f
 80038a4:	41900000 	.word	0x41900000

080038a8 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 80038a8:	b5b0      	push	{r4, r5, r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	load = (8.2 * 9.81 * 0.45 * sinf(Encoder_GetPosition(&encoder2) / (100.0/30.0))) +
 80038ac:	486c      	ldr	r0, [pc, #432]	@ (8003a60 <Revolute_dis+0x1b8>)
 80038ae:	f7fd fbcf 	bl	8001050 <Encoder_GetPosition>
 80038b2:	ee10 3a10 	vmov	r3, s0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fe12 	bl	80004e0 <__aeabi_f2d>
 80038bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8003a38 <Revolute_dis+0x190>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc ff8f 	bl	80007e4 <__aeabi_ddiv>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	f7fd f8f9 	bl	8000ac4 <__aeabi_d2f>
 80038d2:	4603      	mov	r3, r0
 80038d4:	ee00 3a10 	vmov	s0, r3
 80038d8:	f009 fd78 	bl	800d3cc <sinf>
 80038dc:	ee10 3a10 	vmov	r3, s0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fdfd 	bl	80004e0 <__aeabi_f2d>
 80038e6:	a356      	add	r3, pc, #344	@ (adr r3, 8003a40 <Revolute_dis+0x198>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fe50 	bl	8000590 <__aeabi_dmul>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4614      	mov	r4, r2
 80038f6:	461d      	mov	r5, r3
			(0.3 * 9.81 * sinf(Encoder_GetPosition(&encoder2) / (100.0/30.0)) * 0.4);
 80038f8:	4859      	ldr	r0, [pc, #356]	@ (8003a60 <Revolute_dis+0x1b8>)
 80038fa:	f7fd fba9 	bl	8001050 <Encoder_GetPosition>
 80038fe:	ee10 3a10 	vmov	r3, s0
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fdec 	bl	80004e0 <__aeabi_f2d>
 8003908:	a34b      	add	r3, pc, #300	@ (adr r3, 8003a38 <Revolute_dis+0x190>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc ff69 	bl	80007e4 <__aeabi_ddiv>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f7fd f8d3 	bl	8000ac4 <__aeabi_d2f>
 800391e:	4603      	mov	r3, r0
 8003920:	ee00 3a10 	vmov	s0, r3
 8003924:	f009 fd52 	bl	800d3cc <sinf>
 8003928:	ee10 3a10 	vmov	r3, s0
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fdd7 	bl	80004e0 <__aeabi_f2d>
 8003932:	a345      	add	r3, pc, #276	@ (adr r3, 8003a48 <Revolute_dis+0x1a0>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fe2a 	bl	8000590 <__aeabi_dmul>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	a342      	add	r3, pc, #264	@ (adr r3, 8003a50 <Revolute_dis+0x1a8>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fe21 	bl	8000590 <__aeabi_dmul>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
	load = (8.2 * 9.81 * 0.45 * sinf(Encoder_GetPosition(&encoder2) / (100.0/30.0))) +
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f7fc fc65 	bl	8000224 <__adddf3>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f8af 	bl	8000ac4 <__aeabi_d2f>
 8003966:	4603      	mov	r3, r0
 8003968:	4a3e      	ldr	r2, [pc, #248]	@ (8003a64 <Revolute_dis+0x1bc>)
 800396a:	6013      	str	r3, [r2, #0]
	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0/30.0));
 800396c:	483c      	ldr	r0, [pc, #240]	@ (8003a60 <Revolute_dis+0x1b8>)
 800396e:	f7fd fb6f 	bl	8001050 <Encoder_GetPosition>
 8003972:	ee10 3a10 	vmov	r3, s0
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fdb2 	bl	80004e0 <__aeabi_f2d>
 800397c:	a32e      	add	r3, pc, #184	@ (adr r3, 8003a38 <Revolute_dis+0x190>)
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f7fc ff2f 	bl	80007e4 <__aeabi_ddiv>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	f7fd f899 	bl	8000ac4 <__aeabi_d2f>
 8003992:	4603      	mov	r3, r0
 8003994:	ee00 3a10 	vmov	s0, r3
 8003998:	f009 fd18 	bl	800d3cc <sinf>
 800399c:	eef0 7a40 	vmov.f32	s15, s0
 80039a0:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <Revolute_dis+0x1c0>)
 80039a2:	edc3 7a00 	vstr	s15, [r3]
	encoder = Encoder_GetPosition(&encoder2) / (100.0/30.0);
 80039a6:	482e      	ldr	r0, [pc, #184]	@ (8003a60 <Revolute_dis+0x1b8>)
 80039a8:	f7fd fb52 	bl	8001050 <Encoder_GetPosition>
 80039ac:	ee10 3a10 	vmov	r3, s0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fd95 	bl	80004e0 <__aeabi_f2d>
 80039b6:	a320      	add	r3, pc, #128	@ (adr r3, 8003a38 <Revolute_dis+0x190>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc ff12 	bl	80007e4 <__aeabi_ddiv>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7fd f87c 	bl	8000ac4 <__aeabi_d2f>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4a27      	ldr	r2, [pc, #156]	@ (8003a6c <Revolute_dis+0x1c4>)
 80039d0:	6013      	str	r3, [r2, #0]
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2] * 1.0 / 3.3;
 80039d2:	4b27      	ldr	r3, [pc, #156]	@ (8003a70 <Revolute_dis+0x1c8>)
 80039d4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80039d8:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <Revolute_dis+0x1c8>)
 80039da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80039de:	f7fc ff01 	bl	80007e4 <__aeabi_ddiv>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4614      	mov	r4, r2
 80039e8:	461d      	mov	r5, r3
 80039ea:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <Revolute_dis+0x1cc>)
 80039ec:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc fd75 	bl	80004e0 <__aeabi_f2d>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4620      	mov	r0, r4
 80039fc:	4629      	mov	r1, r5
 80039fe:	f7fc fdc7 	bl	8000590 <__aeabi_dmul>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	a313      	add	r3, pc, #76	@ (adr r3, 8003a58 <Revolute_dis+0x1b0>)
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f7fc fee8 	bl	80007e4 <__aeabi_ddiv>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f7fd f852 	bl	8000ac4 <__aeabi_d2f>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a15      	ldr	r2, [pc, #84]	@ (8003a78 <Revolute_dis+0x1d0>)
 8003a24:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 8003a26:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <Revolute_dis+0x1d0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	ee07 3a90 	vmov	s15, r3
}
 8003a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a32:	bdb0      	pop	{r4, r5, r7, pc}
 8003a34:	f3af 8000 	nop.w
 8003a38:	aaaaaaab 	.word	0xaaaaaaab
 8003a3c:	400aaaaa 	.word	0x400aaaaa
 8003a40:	8e219652 	.word	0x8e219652
 8003a44:	40421975 	.word	0x40421975
 8003a48:	95810625 	.word	0x95810625
 8003a4c:	40078b43 	.word	0x40078b43
 8003a50:	9999999a 	.word	0x9999999a
 8003a54:	3fd99999 	.word	0x3fd99999
 8003a58:	66666666 	.word	0x66666666
 8003a5c:	400a6666 	.word	0x400a6666
 8003a60:	200003f0 	.word	0x200003f0
 8003a64:	20001550 	.word	0x20001550
 8003a68:	20001554 	.word	0x20001554
 8003a6c:	20001558 	.word	0x20001558
 8003a70:	200014f8 	.word	0x200014f8
 8003a74:	2000119c 	.word	0x2000119c
 8003a78:	20000da0 	.word	0x20000da0

08003a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a80:	b672      	cpsid	i
}
 8003a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <Error_Handler+0x8>

08003a88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b00 <MX_SPI1_Init+0x78>)
 8003a90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a92:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003a94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a9a:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003aa0:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003aa2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003aa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003aa8:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003aaa:	2202      	movs	r2, #2
 8003aac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003abc:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003abe:	2238      	movs	r2, #56	@ 0x38
 8003ac0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ac4:	2280      	movs	r2, #128	@ 0x80
 8003ac6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ace:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ad6:	2207      	movs	r2, #7
 8003ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ada:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ae6:	4805      	ldr	r0, [pc, #20]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ae8:	f004 f840 	bl	8007b6c <HAL_SPI_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003af2:	f7ff ffc3 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200015d0 	.word	0x200015d0
 8003b00:	40013000 	.word	0x40013000

08003b04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	@ 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a25      	ldr	r2, [pc, #148]	@ (8003bb8 <HAL_SPI_MspInit+0xb4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d144      	bne.n	8003bb0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b26:	4b25      	ldr	r3, [pc, #148]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	4a24      	ldr	r2, [pc, #144]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b32:	4b22      	ldr	r3, [pc, #136]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	4a1e      	ldr	r2, [pc, #120]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b56:	4b19      	ldr	r3, [pc, #100]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b62:	4b16      	ldr	r3, [pc, #88]	@ (8003bbc <HAL_SPI_MspInit+0xb8>)
 8003b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003b6e:	2320      	movs	r3, #32
 8003b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b7e:	2305      	movs	r3, #5
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	4619      	mov	r1, r3
 8003b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b8c:	f002 fe0c 	bl	80067a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b90:	2330      	movs	r3, #48	@ 0x30
 8003b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b94:	2302      	movs	r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ba0:	2305      	movs	r3, #5
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4805      	ldr	r0, [pc, #20]	@ (8003bc0 <HAL_SPI_MspInit+0xbc>)
 8003bac:	f002 fdfc 	bl	80067a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3728      	adds	r7, #40	@ 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40013000 	.word	0x40013000
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	48000400 	.word	0x48000400

08003bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bca:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bce:	4a0e      	ldr	r2, [pc, #56]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_MspInit+0x44>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	4a08      	ldr	r2, [pc, #32]	@ (8003c08 <HAL_MspInit+0x44>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bee:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003bfa:	f003 f82b 	bl	8006c54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000

08003c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <NMI_Handler+0x4>

08003c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c18:	bf00      	nop
 8003c1a:	e7fd      	b.n	8003c18 <HardFault_Handler+0x4>

08003c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <MemManage_Handler+0x4>

08003c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <BusFault_Handler+0x4>

08003c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c30:	bf00      	nop
 8003c32:	e7fd      	b.n	8003c30 <UsageFault_Handler+0x4>

08003c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c62:	f000 fe77 	bl	8004954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c70:	4802      	ldr	r0, [pc, #8]	@ (8003c7c <DMA1_Channel1_IRQHandler+0x10>)
 8003c72:	f002 fc3e 	bl	80064f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20001c94 	.word	0x20001c94

08003c80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8003c84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003c88:	f002 ff28 	bl	8006adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c94:	4802      	ldr	r0, [pc, #8]	@ (8003ca0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003c96:	f004 fd87 	bl	80087a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20001634 	.word	0x20001634

08003ca4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ca8:	4803      	ldr	r0, [pc, #12]	@ (8003cb8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003caa:	f004 fd7d 	bl	80087a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003cae:	4803      	ldr	r0, [pc, #12]	@ (8003cbc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003cb0:	f004 fd7a 	bl	80087a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20001634 	.word	0x20001634
 8003cbc:	20001a30 	.word	0x20001a30

08003cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cc4:	4802      	ldr	r0, [pc, #8]	@ (8003cd0 <TIM2_IRQHandler+0x10>)
 8003cc6:	f004 fd6f 	bl	80087a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20001700 	.word	0x20001700

08003cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cd8:	4802      	ldr	r0, [pc, #8]	@ (8003ce4 <USART2_IRQHandler+0x10>)
 8003cda:	f006 fc69 	bl	800a5b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20001bc8 	.word	0x20001bc8

08003ce8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8003cec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003cf0:	f002 fef4 	bl	8006adc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003cf4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003cf8:	f002 fef0 	bl	8006adc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8003cfc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003d00:	f002 feec 	bl	8006adc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8003d04:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003d08:	f002 fee8 	bl	8006adc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8003d0c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003d10:	f002 fee4 	bl	8006adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <SystemInit+0x20>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	4a05      	ldr	r2, [pc, #20]	@ (8003d38 <SystemInit+0x20>)
 8003d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d42:	f107 0310 	add.w	r3, r7, #16
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
 8003d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d5a:	4b20      	ldr	r3, [pc, #128]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003d5c:	4a20      	ldr	r2, [pc, #128]	@ (8003de0 <MX_TIM1_Init+0xa4>)
 8003d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d60:	4b1e      	ldr	r3, [pc, #120]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d66:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003d6e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d74:	4b19      	ldr	r3, [pc, #100]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d7a:	4b18      	ldr	r3, [pc, #96]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d80:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d86:	4815      	ldr	r0, [pc, #84]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003d88:	f003 ff9c 	bl	8007cc4 <HAL_TIM_Base_Init>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003d92:	f7ff fe73 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d9c:	f107 0310 	add.w	r3, r7, #16
 8003da0:	4619      	mov	r1, r3
 8003da2:	480e      	ldr	r0, [pc, #56]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003da4:	f005 f808 	bl	8008db8 <HAL_TIM_ConfigClockSource>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003dae:	f7ff fe65 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db2:	2300      	movs	r3, #0
 8003db4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4806      	ldr	r0, [pc, #24]	@ (8003ddc <MX_TIM1_Init+0xa0>)
 8003dc4:	f005 ffde 	bl	8009d84 <HAL_TIMEx_MasterConfigSynchronization>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003dce:	f7ff fe55 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003dd2:	bf00      	nop
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20001634 	.word	0x20001634
 8003de0:	40012c00 	.word	0x40012c00

08003de4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dea:	f107 0310 	add.w	r3, r7, #16
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df8:	1d3b      	adds	r3, r7, #4
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e02:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e0c:	22a9      	movs	r2, #169	@ 0xa9
 8003e0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e10:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003e16:	4b19      	ldr	r3, [pc, #100]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1e:	4b17      	ldr	r3, [pc, #92]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e24:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e2a:	4814      	ldr	r0, [pc, #80]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e2c:	f003 ff4a 	bl	8007cc4 <HAL_TIM_Base_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003e36:	f7ff fe21 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e40:	f107 0310 	add.w	r3, r7, #16
 8003e44:	4619      	mov	r1, r3
 8003e46:	480d      	ldr	r0, [pc, #52]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e48:	f004 ffb6 	bl	8008db8 <HAL_TIM_ConfigClockSource>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003e52:	f7ff fe13 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4806      	ldr	r0, [pc, #24]	@ (8003e7c <MX_TIM2_Init+0x98>)
 8003e64:	f005 ff8e 	bl	8009d84 <HAL_TIMEx_MasterConfigSynchronization>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003e6e:	f7ff fe05 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e72:	bf00      	nop
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20001700 	.word	0x20001700

08003e80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08c      	sub	sp, #48	@ 0x30
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e86:	f107 030c 	add.w	r3, r7, #12
 8003e8a:	2224      	movs	r2, #36	@ 0x24
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f009 fa3e 	bl	800d310 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e94:	463b      	mov	r3, r7
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e9e:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <MX_TIM3_Init+0xa4>)
 8003ea0:	4a21      	ldr	r2, [pc, #132]	@ (8003f28 <MX_TIM3_Init+0xa8>)
 8003ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f24 <MX_TIM3_Init+0xa4>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <MX_TIM3_Init+0xa4>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f24 <MX_TIM3_Init+0xa4>)
 8003eb2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003eb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <MX_TIM3_Init+0xa4>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ebe:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <MX_TIM3_Init+0xa4>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003edc:	2301      	movs	r3, #1
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003ee8:	f107 030c 	add.w	r3, r7, #12
 8003eec:	4619      	mov	r1, r3
 8003eee:	480d      	ldr	r0, [pc, #52]	@ (8003f24 <MX_TIM3_Init+0xa4>)
 8003ef0:	f004 fb18 	bl	8008524 <HAL_TIM_Encoder_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003efa:	f7ff fdbf 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f06:	463b      	mov	r3, r7
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4806      	ldr	r0, [pc, #24]	@ (8003f24 <MX_TIM3_Init+0xa4>)
 8003f0c:	f005 ff3a 	bl	8009d84 <HAL_TIMEx_MasterConfigSynchronization>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003f16:	f7ff fdb1 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f1a:	bf00      	nop
 8003f1c:	3730      	adds	r7, #48	@ 0x30
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200017cc 	.word	0x200017cc
 8003f28:	40000400 	.word	0x40000400

08003f2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	@ 0x30
 8003f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f32:	f107 030c 	add.w	r3, r7, #12
 8003f36:	2224      	movs	r2, #36	@ 0x24
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f009 f9e8 	bl	800d310 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f40:	463b      	mov	r3, r7
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f4a:	4b21      	ldr	r3, [pc, #132]	@ (8003fd0 <MX_TIM4_Init+0xa4>)
 8003f4c:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <MX_TIM4_Init+0xa8>)
 8003f4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f50:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd0 <MX_TIM4_Init+0xa4>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f56:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd0 <MX_TIM4_Init+0xa4>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd0 <MX_TIM4_Init+0xa4>)
 8003f5e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003f62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f64:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd0 <MX_TIM4_Init+0xa4>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6a:	4b19      	ldr	r3, [pc, #100]	@ (8003fd0 <MX_TIM4_Init+0xa4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f70:	2303      	movs	r3, #3
 8003f72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f84:	2300      	movs	r3, #0
 8003f86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f94:	f107 030c 	add.w	r3, r7, #12
 8003f98:	4619      	mov	r1, r3
 8003f9a:	480d      	ldr	r0, [pc, #52]	@ (8003fd0 <MX_TIM4_Init+0xa4>)
 8003f9c:	f004 fac2 	bl	8008524 <HAL_TIM_Encoder_Init>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003fa6:	f7ff fd69 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4806      	ldr	r0, [pc, #24]	@ (8003fd0 <MX_TIM4_Init+0xa4>)
 8003fb8:	f005 fee4 	bl	8009d84 <HAL_TIMEx_MasterConfigSynchronization>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003fc2:	f7ff fd5b 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003fc6:	bf00      	nop
 8003fc8:	3730      	adds	r7, #48	@ 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20001898 	.word	0x20001898
 8003fd4:	40000800 	.word	0x40000800

08003fd8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b09c      	sub	sp, #112	@ 0x70
 8003fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fde:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ff8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
 8004008:	615a      	str	r2, [r3, #20]
 800400a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	2234      	movs	r2, #52	@ 0x34
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f009 f97c 	bl	800d310 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004018:	4b45      	ldr	r3, [pc, #276]	@ (8004130 <MX_TIM8_Init+0x158>)
 800401a:	4a46      	ldr	r2, [pc, #280]	@ (8004134 <MX_TIM8_Init+0x15c>)
 800401c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800401e:	4b44      	ldr	r3, [pc, #272]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004024:	4b42      	ldr	r3, [pc, #264]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800402a:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <MX_TIM8_Init+0x158>)
 800402c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004030:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004032:	4b3f      	ldr	r3, [pc, #252]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004038:	4b3d      	ldr	r3, [pc, #244]	@ (8004130 <MX_TIM8_Init+0x158>)
 800403a:	2200      	movs	r2, #0
 800403c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800403e:	4b3c      	ldr	r3, [pc, #240]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004044:	483a      	ldr	r0, [pc, #232]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004046:	f003 fe3d 	bl	8007cc4 <HAL_TIM_Base_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8004050:	f7ff fd14 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004058:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800405a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800405e:	4619      	mov	r1, r3
 8004060:	4833      	ldr	r0, [pc, #204]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004062:	f004 fea9 	bl	8008db8 <HAL_TIM_ConfigClockSource>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800406c:	f7ff fd06 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004070:	482f      	ldr	r0, [pc, #188]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004072:	f003 ffe1 	bl	8008038 <HAL_TIM_PWM_Init>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800407c:	f7ff fcfe 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004080:	2300      	movs	r3, #0
 8004082:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004084:	2300      	movs	r3, #0
 8004086:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004088:	2300      	movs	r3, #0
 800408a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800408c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004090:	4619      	mov	r1, r3
 8004092:	4827      	ldr	r0, [pc, #156]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004094:	f005 fe76 	bl	8009d84 <HAL_TIMEx_MasterConfigSynchronization>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800409e:	f7ff fced 	bl	8003a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040a2:	2360      	movs	r3, #96	@ 0x60
 80040a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040aa:	2300      	movs	r3, #0
 80040ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040ae:	2300      	movs	r3, #0
 80040b0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80040c2:	220c      	movs	r2, #12
 80040c4:	4619      	mov	r1, r3
 80040c6:	481a      	ldr	r0, [pc, #104]	@ (8004130 <MX_TIM8_Init+0x158>)
 80040c8:	f004 fd62 	bl	8008b90 <HAL_TIM_PWM_ConfigChannel>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80040d2:	f7ff fcd3 	bl	8003a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80040f4:	2300      	movs	r3, #0
 80040f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80040fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004106:	2300      	movs	r3, #0
 8004108:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800410a:	2300      	movs	r3, #0
 800410c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4807      	ldr	r0, [pc, #28]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004114:	f005 fecc 	bl	8009eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 800411e:	f7ff fcad 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004122:	4803      	ldr	r0, [pc, #12]	@ (8004130 <MX_TIM8_Init+0x158>)
 8004124:	f000 fa44 	bl	80045b0 <HAL_TIM_MspPostInit>

}
 8004128:	bf00      	nop
 800412a:	3770      	adds	r7, #112	@ 0x70
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20001964 	.word	0x20001964
 8004134:	40013400 	.word	0x40013400

08004138 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b094      	sub	sp, #80	@ 0x50
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800413e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	611a      	str	r2, [r3, #16]
 800414e:	615a      	str	r2, [r3, #20]
 8004150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004152:	463b      	mov	r3, r7
 8004154:	2234      	movs	r2, #52	@ 0x34
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f009 f8d9 	bl	800d310 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800415e:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <MX_TIM16_Init+0xf8>)
 8004160:	4a34      	ldr	r2, [pc, #208]	@ (8004234 <MX_TIM16_Init+0xfc>)
 8004162:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004164:	4b32      	ldr	r3, [pc, #200]	@ (8004230 <MX_TIM16_Init+0xf8>)
 8004166:	22a9      	movs	r2, #169	@ 0xa9
 8004168:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800416a:	4b31      	ldr	r3, [pc, #196]	@ (8004230 <MX_TIM16_Init+0xf8>)
 800416c:	2200      	movs	r2, #0
 800416e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8004170:	4b2f      	ldr	r3, [pc, #188]	@ (8004230 <MX_TIM16_Init+0xf8>)
 8004172:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8004176:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004178:	4b2d      	ldr	r3, [pc, #180]	@ (8004230 <MX_TIM16_Init+0xf8>)
 800417a:	2200      	movs	r2, #0
 800417c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800417e:	4b2c      	ldr	r3, [pc, #176]	@ (8004230 <MX_TIM16_Init+0xf8>)
 8004180:	2200      	movs	r2, #0
 8004182:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004184:	4b2a      	ldr	r3, [pc, #168]	@ (8004230 <MX_TIM16_Init+0xf8>)
 8004186:	2200      	movs	r2, #0
 8004188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800418a:	4829      	ldr	r0, [pc, #164]	@ (8004230 <MX_TIM16_Init+0xf8>)
 800418c:	f003 fd9a 	bl	8007cc4 <HAL_TIM_Base_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8004196:	f7ff fc71 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800419a:	4825      	ldr	r0, [pc, #148]	@ (8004230 <MX_TIM16_Init+0xf8>)
 800419c:	f003 fede 	bl	8007f5c <HAL_TIM_OC_Init>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80041a6:	f7ff fc69 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80041aa:	2108      	movs	r1, #8
 80041ac:	4820      	ldr	r0, [pc, #128]	@ (8004230 <MX_TIM16_Init+0xf8>)
 80041ae:	f004 f8c3 	bl	8008338 <HAL_TIM_OnePulse_Init>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80041b8:	f7ff fc60 	bl	8003a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80041bc:	2310      	movs	r3, #16
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 80041c0:	f240 5399 	movw	r3, #1433	@ 0x599
 80041c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041c6:	2300      	movs	r3, #0
 80041c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041ca:	2300      	movs	r3, #0
 80041cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041de:	2200      	movs	r2, #0
 80041e0:	4619      	mov	r1, r3
 80041e2:	4813      	ldr	r0, [pc, #76]	@ (8004230 <MX_TIM16_Init+0xf8>)
 80041e4:	f004 fc5a 	bl	8008a9c <HAL_TIM_OC_ConfigChannel>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 80041ee:	f7ff fc45 	bl	8003a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004206:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800420a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004214:	463b      	mov	r3, r7
 8004216:	4619      	mov	r1, r3
 8004218:	4805      	ldr	r0, [pc, #20]	@ (8004230 <MX_TIM16_Init+0xf8>)
 800421a:	f005 fe49 	bl	8009eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8004224:	f7ff fc2a 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004228:	bf00      	nop
 800422a:	3750      	adds	r7, #80	@ 0x50
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20001a30 	.word	0x20001a30
 8004234:	40014400 	.word	0x40014400

08004238 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b09c      	sub	sp, #112	@ 0x70
 800423c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800423e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004258:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	611a      	str	r2, [r3, #16]
 8004268:	615a      	str	r2, [r3, #20]
 800426a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	2234      	movs	r2, #52	@ 0x34
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f009 f84c 	bl	800d310 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8004278:	4b4b      	ldr	r3, [pc, #300]	@ (80043a8 <MX_TIM20_Init+0x170>)
 800427a:	4a4c      	ldr	r2, [pc, #304]	@ (80043ac <MX_TIM20_Init+0x174>)
 800427c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 800427e:	4b4a      	ldr	r3, [pc, #296]	@ (80043a8 <MX_TIM20_Init+0x170>)
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004284:	4b48      	ldr	r3, [pc, #288]	@ (80043a8 <MX_TIM20_Init+0x170>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800428a:	4b47      	ldr	r3, [pc, #284]	@ (80043a8 <MX_TIM20_Init+0x170>)
 800428c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004290:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004292:	4b45      	ldr	r3, [pc, #276]	@ (80043a8 <MX_TIM20_Init+0x170>)
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8004298:	4b43      	ldr	r3, [pc, #268]	@ (80043a8 <MX_TIM20_Init+0x170>)
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800429e:	4b42      	ldr	r3, [pc, #264]	@ (80043a8 <MX_TIM20_Init+0x170>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80042a4:	4840      	ldr	r0, [pc, #256]	@ (80043a8 <MX_TIM20_Init+0x170>)
 80042a6:	f003 fd0d 	bl	8007cc4 <HAL_TIM_Base_Init>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 80042b0:	f7ff fbe4 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80042ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80042be:	4619      	mov	r1, r3
 80042c0:	4839      	ldr	r0, [pc, #228]	@ (80043a8 <MX_TIM20_Init+0x170>)
 80042c2:	f004 fd79 	bl	8008db8 <HAL_TIM_ConfigClockSource>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80042cc:	f7ff fbd6 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80042d0:	4835      	ldr	r0, [pc, #212]	@ (80043a8 <MX_TIM20_Init+0x170>)
 80042d2:	f003 feb1 	bl	8008038 <HAL_TIM_PWM_Init>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80042dc:	f7ff fbce 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e0:	2300      	movs	r3, #0
 80042e2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80042e4:	2300      	movs	r3, #0
 80042e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80042ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80042f0:	4619      	mov	r1, r3
 80042f2:	482d      	ldr	r0, [pc, #180]	@ (80043a8 <MX_TIM20_Init+0x170>)
 80042f4:	f005 fd46 	bl	8009d84 <HAL_TIMEx_MasterConfigSynchronization>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 80042fe:	f7ff fbbd 	bl	8003a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004302:	2360      	movs	r3, #96	@ 0x60
 8004304:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800430a:	2300      	movs	r3, #0
 800430c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800430e:	2300      	movs	r3, #0
 8004310:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004312:	2300      	movs	r3, #0
 8004314:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800431a:	2300      	movs	r3, #0
 800431c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800431e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004322:	2200      	movs	r2, #0
 8004324:	4619      	mov	r1, r3
 8004326:	4820      	ldr	r0, [pc, #128]	@ (80043a8 <MX_TIM20_Init+0x170>)
 8004328:	f004 fc32 	bl	8008b90 <HAL_TIM_PWM_ConfigChannel>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8004332:	f7ff fba3 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004336:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800433a:	2208      	movs	r2, #8
 800433c:	4619      	mov	r1, r3
 800433e:	481a      	ldr	r0, [pc, #104]	@ (80043a8 <MX_TIM20_Init+0x170>)
 8004340:	f004 fc26 	bl	8008b90 <HAL_TIM_PWM_ConfigChannel>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 800434a:	f7ff fb97 	bl	8003a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004366:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800436c:	2300      	movs	r3, #0
 800436e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004370:	2300      	movs	r3, #0
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004374:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004378:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800437e:	2300      	movs	r3, #0
 8004380:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004382:	2300      	movs	r3, #0
 8004384:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4807      	ldr	r0, [pc, #28]	@ (80043a8 <MX_TIM20_Init+0x170>)
 800438c:	f005 fd90 	bl	8009eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8004396:	f7ff fb71 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800439a:	4803      	ldr	r0, [pc, #12]	@ (80043a8 <MX_TIM20_Init+0x170>)
 800439c:	f000 f908 	bl	80045b0 <HAL_TIM_MspPostInit>

}
 80043a0:	bf00      	nop
 80043a2:	3770      	adds	r7, #112	@ 0x70
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20001afc 	.word	0x20001afc
 80043ac:	40015000 	.word	0x40015000

080043b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3d      	ldr	r2, [pc, #244]	@ (80044b4 <HAL_TIM_Base_MspInit+0x104>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d11c      	bne.n	80043fc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043c2:	4b3d      	ldr	r3, [pc, #244]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 80043c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c6:	4a3c      	ldr	r2, [pc, #240]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 80043c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80043cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80043ce:	4b3a      	ldr	r3, [pc, #232]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 80043d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2100      	movs	r1, #0
 80043de:	2018      	movs	r0, #24
 80043e0:	f001 fe6f 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80043e4:	2018      	movs	r0, #24
 80043e6:	f001 fe86 	bl	80060f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2100      	movs	r1, #0
 80043ee:	2019      	movs	r0, #25
 80043f0:	f001 fe67 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80043f4:	2019      	movs	r0, #25
 80043f6:	f001 fe7e 	bl	80060f6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 80043fa:	e056      	b.n	80044aa <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d114      	bne.n	8004430 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004406:	4b2c      	ldr	r3, [pc, #176]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440a:	4a2b      	ldr	r2, [pc, #172]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6593      	str	r3, [r2, #88]	@ 0x58
 8004412:	4b29      	ldr	r3, [pc, #164]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 8004414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	201c      	movs	r0, #28
 8004424:	f001 fe4d 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004428:	201c      	movs	r0, #28
 800442a:	f001 fe64 	bl	80060f6 <HAL_NVIC_EnableIRQ>
}
 800442e:	e03c      	b.n	80044aa <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a21      	ldr	r2, [pc, #132]	@ (80044bc <HAL_TIM_Base_MspInit+0x10c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10c      	bne.n	8004454 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800443a:	4b1f      	ldr	r3, [pc, #124]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 8004440:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004444:	6613      	str	r3, [r2, #96]	@ 0x60
 8004446:	4b1c      	ldr	r3, [pc, #112]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 8004448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]
}
 8004452:	e02a      	b.n	80044aa <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_TIM_Base_MspInit+0x110>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d114      	bne.n	8004488 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800445e:	4b16      	ldr	r3, [pc, #88]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 8004460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004462:	4a15      	ldr	r2, [pc, #84]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 8004464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004468:	6613      	str	r3, [r2, #96]	@ 0x60
 800446a:	4b13      	ldr	r3, [pc, #76]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 800446c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004476:	2200      	movs	r2, #0
 8004478:	2100      	movs	r1, #0
 800447a:	2019      	movs	r0, #25
 800447c:	f001 fe21 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004480:	2019      	movs	r0, #25
 8004482:	f001 fe38 	bl	80060f6 <HAL_NVIC_EnableIRQ>
}
 8004486:	e010      	b.n	80044aa <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0d      	ldr	r2, [pc, #52]	@ (80044c4 <HAL_TIM_Base_MspInit+0x114>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d10b      	bne.n	80044aa <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 8004494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004496:	4a08      	ldr	r2, [pc, #32]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 8004498:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800449c:	6613      	str	r3, [r2, #96]	@ 0x60
 800449e:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <HAL_TIM_Base_MspInit+0x108>)
 80044a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
}
 80044aa:	bf00      	nop
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40013400 	.word	0x40013400
 80044c0:	40014400 	.word	0x40014400
 80044c4:	40015000 	.word	0x40015000

080044c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08c      	sub	sp, #48	@ 0x30
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d0:	f107 031c 	add.w	r3, r7, #28
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2f      	ldr	r2, [pc, #188]	@ (80045a4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d129      	bne.n	800453e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044ea:	4b2f      	ldr	r3, [pc, #188]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80044ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ee:	4a2e      	ldr	r2, [pc, #184]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f6:	4b2c      	ldr	r3, [pc, #176]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004506:	4a28      	ldr	r2, [pc, #160]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800450e:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 800451a:	23c0      	movs	r3, #192	@ 0xc0
 800451c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451e:	2302      	movs	r3, #2
 8004520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2300      	movs	r3, #0
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800452a:	2302      	movs	r3, #2
 800452c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800452e:	f107 031c 	add.w	r3, r7, #28
 8004532:	4619      	mov	r1, r3
 8004534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004538:	f002 f936 	bl	80067a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800453c:	e02e      	b.n	800459c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1a      	ldr	r2, [pc, #104]	@ (80045ac <HAL_TIM_Encoder_MspInit+0xe4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d129      	bne.n	800459c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004548:	4b17      	ldr	r3, [pc, #92]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	4a16      	ldr	r2, [pc, #88]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800454e:	f043 0304 	orr.w	r3, r3, #4
 8004552:	6593      	str	r3, [r2, #88]	@ 0x58
 8004554:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004560:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004564:	4a10      	ldr	r2, [pc, #64]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800456c:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800456e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8004578:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800457c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004586:	2300      	movs	r3, #0
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800458a:	230a      	movs	r3, #10
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458e:	f107 031c 	add.w	r3, r7, #28
 8004592:	4619      	mov	r1, r3
 8004594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004598:	f002 f906 	bl	80067a8 <HAL_GPIO_Init>
}
 800459c:	bf00      	nop
 800459e:	3730      	adds	r7, #48	@ 0x30
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40000800 	.word	0x40000800

080045b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	@ 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a31      	ldr	r2, [pc, #196]	@ (8004694 <HAL_TIM_MspPostInit+0xe4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d11d      	bne.n	800460e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045d2:	4b31      	ldr	r3, [pc, #196]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 80045d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d6:	4a30      	ldr	r2, [pc, #192]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045de:	4b2e      	ldr	r3, [pc, #184]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 80045e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80045ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f0:	2302      	movs	r3, #2
 80045f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f8:	2300      	movs	r3, #0
 80045fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80045fc:	2304      	movs	r3, #4
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	4619      	mov	r1, r3
 8004606:	4825      	ldr	r0, [pc, #148]	@ (800469c <HAL_TIM_MspPostInit+0xec>)
 8004608:	f002 f8ce 	bl	80067a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800460c:	e03d      	b.n	800468a <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a23      	ldr	r2, [pc, #140]	@ (80046a0 <HAL_TIM_MspPostInit+0xf0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d138      	bne.n	800468a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004618:	4b1f      	ldr	r3, [pc, #124]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 800461a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461c:	4a1e      	ldr	r2, [pc, #120]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 800461e:	f043 0302 	orr.w	r3, r3, #2
 8004622:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004624:	4b1c      	ldr	r3, [pc, #112]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 8004626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004630:	4b19      	ldr	r3, [pc, #100]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 8004632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004634:	4a18      	ldr	r2, [pc, #96]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800463c:	4b16      	ldr	r3, [pc, #88]	@ (8004698 <HAL_TIM_MspPostInit+0xe8>)
 800463e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8004648:	2304      	movs	r3, #4
 800464a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464c:	2302      	movs	r3, #2
 800464e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004654:	2300      	movs	r3, #0
 8004656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8004658:	2303      	movs	r3, #3
 800465a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	4619      	mov	r1, r3
 8004662:	4810      	ldr	r0, [pc, #64]	@ (80046a4 <HAL_TIM_MspPostInit+0xf4>)
 8004664:	f002 f8a0 	bl	80067a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8004668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800466c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466e:	2302      	movs	r3, #2
 8004670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004676:	2300      	movs	r3, #0
 8004678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800467a:	2306      	movs	r3, #6
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 800467e:	f107 0314 	add.w	r3, r7, #20
 8004682:	4619      	mov	r1, r3
 8004684:	4805      	ldr	r0, [pc, #20]	@ (800469c <HAL_TIM_MspPostInit+0xec>)
 8004686:	f002 f88f 	bl	80067a8 <HAL_GPIO_Init>
}
 800468a:	bf00      	nop
 800468c:	3728      	adds	r7, #40	@ 0x28
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40013400 	.word	0x40013400
 8004698:	40021000 	.word	0x40021000
 800469c:	48000800 	.word	0x48000800
 80046a0:	40015000 	.word	0x40015000
 80046a4:	48000400 	.word	0x48000400

080046a8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046ac:	4b23      	ldr	r3, [pc, #140]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046ae:	4a24      	ldr	r2, [pc, #144]	@ (8004740 <MX_USART2_UART_Init+0x98>)
 80046b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80046b2:	4b22      	ldr	r3, [pc, #136]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046b4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80046b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80046ba:	4b20      	ldr	r3, [pc, #128]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80046c0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80046c8:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046d0:	4b1a      	ldr	r3, [pc, #104]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046d2:	220c      	movs	r2, #12
 80046d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046d6:	4b19      	ldr	r3, [pc, #100]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046dc:	4b17      	ldr	r3, [pc, #92]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046de:	2200      	movs	r2, #0
 80046e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046e2:	4b16      	ldr	r3, [pc, #88]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046e8:	4b14      	ldr	r3, [pc, #80]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046ee:	4b13      	ldr	r3, [pc, #76]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046f4:	4811      	ldr	r0, [pc, #68]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046f6:	f005 fcbf 	bl	800a078 <HAL_UART_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004700:	f7ff f9bc 	bl	8003a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004704:	2100      	movs	r1, #0
 8004706:	480d      	ldr	r0, [pc, #52]	@ (800473c <MX_USART2_UART_Init+0x94>)
 8004708:	f008 f841 	bl	800c78e <HAL_UARTEx_SetTxFifoThreshold>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8004712:	f7ff f9b3 	bl	8003a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004716:	2100      	movs	r1, #0
 8004718:	4808      	ldr	r0, [pc, #32]	@ (800473c <MX_USART2_UART_Init+0x94>)
 800471a:	f008 f876 	bl	800c80a <HAL_UARTEx_SetRxFifoThreshold>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004724:	f7ff f9aa 	bl	8003a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004728:	4804      	ldr	r0, [pc, #16]	@ (800473c <MX_USART2_UART_Init+0x94>)
 800472a:	f007 fff7 	bl	800c71c <HAL_UARTEx_DisableFifoMode>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8004734:	f7ff f9a2 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004738:	bf00      	nop
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20001bc8 	.word	0x20001bc8
 8004740:	40004400 	.word	0x40004400

08004744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b09e      	sub	sp, #120	@ 0x78
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	2254      	movs	r2, #84	@ 0x54
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f008 fdd3 	bl	800d310 <memset>
  if(uartHandle->Instance==USART2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a37      	ldr	r2, [pc, #220]	@ (800484c <HAL_UART_MspInit+0x108>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d167      	bne.n	8004844 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004774:	2302      	movs	r3, #2
 8004776:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	4618      	mov	r0, r3
 8004782:	f002 ffa5 	bl	80076d0 <HAL_RCCEx_PeriphCLKConfig>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800478c:	f7ff f976 	bl	8003a7c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004790:	4b2f      	ldr	r3, [pc, #188]	@ (8004850 <HAL_UART_MspInit+0x10c>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004794:	4a2e      	ldr	r2, [pc, #184]	@ (8004850 <HAL_UART_MspInit+0x10c>)
 8004796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800479a:	6593      	str	r3, [r2, #88]	@ 0x58
 800479c:	4b2c      	ldr	r3, [pc, #176]	@ (8004850 <HAL_UART_MspInit+0x10c>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a8:	4b29      	ldr	r3, [pc, #164]	@ (8004850 <HAL_UART_MspInit+0x10c>)
 80047aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ac:	4a28      	ldr	r2, [pc, #160]	@ (8004850 <HAL_UART_MspInit+0x10c>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047b4:	4b26      	ldr	r3, [pc, #152]	@ (8004850 <HAL_UART_MspInit+0x10c>)
 80047b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047c0:	230c      	movs	r3, #12
 80047c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c4:	2302      	movs	r3, #2
 80047c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047cc:	2300      	movs	r3, #0
 80047ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047d0:	2307      	movs	r3, #7
 80047d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047d8:	4619      	mov	r1, r3
 80047da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047de:	f001 ffe3 	bl	80067a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80047e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004854 <HAL_UART_MspInit+0x110>)
 80047e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004858 <HAL_UART_MspInit+0x114>)
 80047e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80047e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004854 <HAL_UART_MspInit+0x110>)
 80047ea:	221b      	movs	r2, #27
 80047ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047ee:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <HAL_UART_MspInit+0x110>)
 80047f0:	2210      	movs	r2, #16
 80047f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047f4:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <HAL_UART_MspInit+0x110>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047fa:	4b16      	ldr	r3, [pc, #88]	@ (8004854 <HAL_UART_MspInit+0x110>)
 80047fc:	2280      	movs	r2, #128	@ 0x80
 80047fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004800:	4b14      	ldr	r3, [pc, #80]	@ (8004854 <HAL_UART_MspInit+0x110>)
 8004802:	2200      	movs	r2, #0
 8004804:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004806:	4b13      	ldr	r3, [pc, #76]	@ (8004854 <HAL_UART_MspInit+0x110>)
 8004808:	2200      	movs	r2, #0
 800480a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800480c:	4b11      	ldr	r3, [pc, #68]	@ (8004854 <HAL_UART_MspInit+0x110>)
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <HAL_UART_MspInit+0x110>)
 8004814:	2200      	movs	r2, #0
 8004816:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004818:	480e      	ldr	r0, [pc, #56]	@ (8004854 <HAL_UART_MspInit+0x110>)
 800481a:	f001 fc87 	bl	800612c <HAL_DMA_Init>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8004824:	f7ff f92a 	bl	8003a7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a0a      	ldr	r2, [pc, #40]	@ (8004854 <HAL_UART_MspInit+0x110>)
 800482c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800482e:	4a09      	ldr	r2, [pc, #36]	@ (8004854 <HAL_UART_MspInit+0x110>)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004834:	2200      	movs	r2, #0
 8004836:	2100      	movs	r1, #0
 8004838:	2026      	movs	r0, #38	@ 0x26
 800483a:	f001 fc42 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800483e:	2026      	movs	r0, #38	@ 0x26
 8004840:	f001 fc59 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004844:	bf00      	nop
 8004846:	3778      	adds	r7, #120	@ 0x78
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40004400 	.word	0x40004400
 8004850:	40021000 	.word	0x40021000
 8004854:	20001c94 	.word	0x20001c94
 8004858:	40020008 	.word	0x40020008

0800485c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800485c:	480d      	ldr	r0, [pc, #52]	@ (8004894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800485e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004860:	f7ff fa5a 	bl	8003d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004864:	480c      	ldr	r0, [pc, #48]	@ (8004898 <LoopForever+0x6>)
  ldr r1, =_edata
 8004866:	490d      	ldr	r1, [pc, #52]	@ (800489c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004868:	4a0d      	ldr	r2, [pc, #52]	@ (80048a0 <LoopForever+0xe>)
  movs r3, #0
 800486a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800486c:	e002      	b.n	8004874 <LoopCopyDataInit>

0800486e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800486e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004872:	3304      	adds	r3, #4

08004874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004878:	d3f9      	bcc.n	800486e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800487a:	4a0a      	ldr	r2, [pc, #40]	@ (80048a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800487c:	4c0a      	ldr	r4, [pc, #40]	@ (80048a8 <LoopForever+0x16>)
  movs r3, #0
 800487e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004880:	e001      	b.n	8004886 <LoopFillZerobss>

08004882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004884:	3204      	adds	r2, #4

08004886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004888:	d3fb      	bcc.n	8004882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800488a:	f008 fd4f 	bl	800d32c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800488e:	f7fd ff57 	bl	8002740 <main>

08004892 <LoopForever>:

LoopForever:
    b LoopForever
 8004892:	e7fe      	b.n	8004892 <LoopForever>
  ldr   r0, =_estack
 8004894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800489c:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 80048a0:	0800e26c 	.word	0x0800e26c
  ldr r2, =_sbss
 80048a4:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 80048a8:	20001e30 	.word	0x20001e30

080048ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048ac:	e7fe      	b.n	80048ac <ADC1_2_IRQHandler>

080048ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048b8:	2003      	movs	r0, #3
 80048ba:	f001 fbf7 	bl	80060ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048be:	2000      	movs	r0, #0
 80048c0:	f000 f80e 	bl	80048e0 <HAL_InitTick>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	71fb      	strb	r3, [r7, #7]
 80048ce:	e001      	b.n	80048d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048d0:	f7ff f978 	bl	8003bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048d4:	79fb      	ldrb	r3, [r7, #7]

}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80048ec:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <HAL_InitTick+0x68>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d022      	beq.n	800493a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80048f4:	4b15      	ldr	r3, [pc, #84]	@ (800494c <HAL_InitTick+0x6c>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b13      	ldr	r3, [pc, #76]	@ (8004948 <HAL_InitTick+0x68>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004900:	fbb1 f3f3 	udiv	r3, r1, r3
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fc02 	bl	8006112 <HAL_SYSTICK_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	d809      	bhi.n	800492e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800491a:	2200      	movs	r2, #0
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	f04f 30ff 	mov.w	r0, #4294967295
 8004922:	f001 fbce 	bl	80060c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004926:	4a0a      	ldr	r2, [pc, #40]	@ (8004950 <HAL_InitTick+0x70>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	e007      	b.n	800493e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
 8004932:	e004      	b.n	800493e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	e001      	b.n	800493e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800493e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000260 	.word	0x20000260
 800494c:	20000258 	.word	0x20000258
 8004950:	2000025c 	.word	0x2000025c

08004954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_IncTick+0x1c>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_IncTick+0x20>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4413      	add	r3, r2
 8004962:	4a03      	ldr	r2, [pc, #12]	@ (8004970 <HAL_IncTick+0x1c>)
 8004964:	6013      	str	r3, [r2, #0]
}
 8004966:	bf00      	nop
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	20001cf4 	.word	0x20001cf4
 8004974:	20000260 	.word	0x20000260

08004978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return uwTick;
 800497c:	4b03      	ldr	r3, [pc, #12]	@ (800498c <HAL_GetTick+0x14>)
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20001cf4 	.word	0x20001cf4

08004990 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	609a      	str	r2, [r3, #8]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	609a      	str	r2, [r3, #8]
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3360      	adds	r3, #96	@ 0x60
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b08      	ldr	r3, [pc, #32]	@ (8004a3c <LL_ADC_SetOffset+0x44>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	03fff000 	.word	0x03fff000

08004a40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3360      	adds	r3, #96	@ 0x60
 8004a4e:	461a      	mov	r2, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3360      	adds	r3, #96	@ 0x60
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3360      	adds	r3, #96	@ 0x60
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3360      	adds	r3, #96	@ 0x60
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	615a      	str	r2, [r3, #20]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3330      	adds	r3, #48	@ 0x30
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	4413      	add	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	211f      	movs	r1, #31
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0e9b      	lsrs	r3, r3, #26
 8004b6c:	f003 011f 	and.w	r1, r3, #31
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	0e5b      	lsrs	r3, r3, #25
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	4413      	add	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	0d1b      	lsrs	r3, r3, #20
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2107      	movs	r1, #7
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	401a      	ands	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	0d1b      	lsrs	r3, r3, #20
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f003 0318 	and.w	r3, r3, #24
 8004c06:	4908      	ldr	r1, [pc, #32]	@ (8004c28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004c08:	40d9      	lsrs	r1, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	400b      	ands	r3, r1
 8004c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c12:	431a      	orrs	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	0007ffff 	.word	0x0007ffff

08004c2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 031f 	and.w	r3, r3, #31
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6093      	str	r3, [r2, #8]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c80:	d101      	bne.n	8004c86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004ca4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ca8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cd0:	d101      	bne.n	8004cd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <LL_ADC_IsEnabled+0x18>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <LL_ADC_IsEnabled+0x1a>
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d42:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d46:	f043 0204 	orr.w	r2, r3, #4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d101      	bne.n	8004d72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d101      	bne.n	8004d98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b089      	sub	sp, #36	@ 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e1a9      	b.n	8005116 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fd fb39 	bl	8002448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff3f 	bl	8004c6c <LL_ADC_IsDeepPowerDownEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d004      	beq.n	8004dfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff25 	bl	8004c48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff5a 	bl	8004cbc <LL_ADC_IsInternalRegulatorEnabled>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d115      	bne.n	8004e3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff ff3e 	bl	8004c94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e18:	4b9c      	ldr	r3, [pc, #624]	@ (800508c <HAL_ADC_Init+0x2e4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	4a9c      	ldr	r2, [pc, #624]	@ (8005090 <HAL_ADC_Init+0x2e8>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	3301      	adds	r3, #1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004e2c:	e002      	b.n	8004e34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f9      	bne.n	8004e2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff ff3c 	bl	8004cbc <LL_ADC_IsInternalRegulatorEnabled>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	f043 0210 	orr.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ff75 	bl	8004d5a <LL_ADC_REG_IsConversionOngoing>
 8004e70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 8142 	bne.w	8005104 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 813e 	bne.w	8005104 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004e90:	f043 0202 	orr.w	r2, r3, #2
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff ff35 	bl	8004d0c <LL_ADC_IsEnabled>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d141      	bne.n	8004f2c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eb0:	d004      	beq.n	8004ebc <HAL_ADC_Init+0x114>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a77      	ldr	r2, [pc, #476]	@ (8005094 <HAL_ADC_Init+0x2ec>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10f      	bne.n	8004edc <HAL_ADC_Init+0x134>
 8004ebc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ec0:	f7ff ff24 	bl	8004d0c <LL_ADC_IsEnabled>
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	4873      	ldr	r0, [pc, #460]	@ (8005094 <HAL_ADC_Init+0x2ec>)
 8004ec8:	f7ff ff20 	bl	8004d0c <LL_ADC_IsEnabled>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4323      	orrs	r3, r4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2301      	moveq	r3, #1
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e012      	b.n	8004f02 <HAL_ADC_Init+0x15a>
 8004edc:	486e      	ldr	r0, [pc, #440]	@ (8005098 <HAL_ADC_Init+0x2f0>)
 8004ede:	f7ff ff15 	bl	8004d0c <LL_ADC_IsEnabled>
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	486d      	ldr	r0, [pc, #436]	@ (800509c <HAL_ADC_Init+0x2f4>)
 8004ee6:	f7ff ff11 	bl	8004d0c <LL_ADC_IsEnabled>
 8004eea:	4603      	mov	r3, r0
 8004eec:	431c      	orrs	r4, r3
 8004eee:	486c      	ldr	r0, [pc, #432]	@ (80050a0 <HAL_ADC_Init+0x2f8>)
 8004ef0:	f7ff ff0c 	bl	8004d0c <LL_ADC_IsEnabled>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4323      	orrs	r3, r4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d012      	beq.n	8004f2c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f0e:	d004      	beq.n	8004f1a <HAL_ADC_Init+0x172>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5f      	ldr	r2, [pc, #380]	@ (8005094 <HAL_ADC_Init+0x2ec>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_Init+0x176>
 8004f1a:	4a62      	ldr	r2, [pc, #392]	@ (80050a4 <HAL_ADC_Init+0x2fc>)
 8004f1c:	e000      	b.n	8004f20 <HAL_ADC_Init+0x178>
 8004f1e:	4a62      	ldr	r2, [pc, #392]	@ (80050a8 <HAL_ADC_Init+0x300>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7ff fd32 	bl	8004990 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	7f5b      	ldrb	r3, [r3, #29]
 8004f30:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f36:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004f3c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004f42:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f4a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d106      	bne.n	8004f68 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	045b      	lsls	r3, r3, #17
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	4b48      	ldr	r3, [pc, #288]	@ (80050ac <HAL_ADC_Init+0x304>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	69b9      	ldr	r1, [r7, #24]
 8004f94:	430b      	orrs	r3, r1
 8004f96:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fee4 	bl	8004d80 <LL_ADC_INJ_IsConversionOngoing>
 8004fb8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d17f      	bne.n	80050c0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d17c      	bne.n	80050c0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004fca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fd2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fe2:	f023 0302 	bic.w	r3, r3, #2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	69b9      	ldr	r1, [r7, #24]
 8004fec:	430b      	orrs	r3, r1
 8004fee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d017      	beq.n	8005028 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005006:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005010:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6911      	ldr	r1, [r2, #16]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	430b      	orrs	r3, r1
 8005022:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005026:	e013      	b.n	8005050 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005036:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800504c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005056:	2b01      	cmp	r3, #1
 8005058:	d12a      	bne.n	80050b0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005070:	4311      	orrs	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005076:	4311      	orrs	r1, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800507c:	430a      	orrs	r2, r1
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	611a      	str	r2, [r3, #16]
 800508a:	e019      	b.n	80050c0 <HAL_ADC_Init+0x318>
 800508c:	20000258 	.word	0x20000258
 8005090:	053e2d63 	.word	0x053e2d63
 8005094:	50000100 	.word	0x50000100
 8005098:	50000400 	.word	0x50000400
 800509c:	50000500 	.word	0x50000500
 80050a0:	50000600 	.word	0x50000600
 80050a4:	50000300 	.word	0x50000300
 80050a8:	50000700 	.word	0x50000700
 80050ac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10c      	bne.n	80050e2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	f023 010f 	bic.w	r1, r3, #15
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
 80050e0:	e007      	b.n	80050f2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 020f 	bic.w	r2, r2, #15
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	f043 0201 	orr.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005102:	e007      	b.n	8005114 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005108:	f043 0210 	orr.w	r2, r3, #16
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005114:	7ffb      	ldrb	r3, [r7, #31]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3724      	adds	r7, #36	@ 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd90      	pop	{r4, r7, pc}
 800511e:	bf00      	nop

08005120 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005130:	d004      	beq.n	800513c <HAL_ADC_Start+0x1c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a67      	ldr	r2, [pc, #412]	@ (80052d4 <HAL_ADC_Start+0x1b4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_ADC_Start+0x20>
 800513c:	4b66      	ldr	r3, [pc, #408]	@ (80052d8 <HAL_ADC_Start+0x1b8>)
 800513e:	e000      	b.n	8005142 <HAL_ADC_Start+0x22>
 8005140:	4b66      	ldr	r3, [pc, #408]	@ (80052dc <HAL_ADC_Start+0x1bc>)
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fd72 	bl	8004c2c <LL_ADC_GetMultimode>
 8005148:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fe03 	bl	8004d5a <LL_ADC_REG_IsConversionOngoing>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 80b4 	bne.w	80052c4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_ADC_Start+0x4a>
 8005166:	2302      	movs	r3, #2
 8005168:	e0af      	b.n	80052ca <HAL_ADC_Start+0x1aa>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fd06 	bl	8005b84 <ADC_Enable>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 809b 	bne.w	80052ba <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005188:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a4d      	ldr	r2, [pc, #308]	@ (80052d4 <HAL_ADC_Start+0x1b4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_ADC_Start+0x96>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a4e      	ldr	r2, [pc, #312]	@ (80052e0 <HAL_ADC_Start+0x1c0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d002      	beq.n	80051b2 <HAL_ADC_Start+0x92>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	e003      	b.n	80051ba <HAL_ADC_Start+0x9a>
 80051b2:	4b4c      	ldr	r3, [pc, #304]	@ (80052e4 <HAL_ADC_Start+0x1c4>)
 80051b4:	e001      	b.n	80051ba <HAL_ADC_Start+0x9a>
 80051b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	4293      	cmp	r3, r2
 80051c0:	d002      	beq.n	80051c8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e0:	d106      	bne.n	80051f0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e6:	f023 0206 	bic.w	r2, r3, #6
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80051ee:	e002      	b.n	80051f6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	221c      	movs	r2, #28
 80051fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a32      	ldr	r2, [pc, #200]	@ (80052d4 <HAL_ADC_Start+0x1b4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_ADC_Start+0x104>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a32      	ldr	r2, [pc, #200]	@ (80052e0 <HAL_ADC_Start+0x1c0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d002      	beq.n	8005220 <HAL_ADC_Start+0x100>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	e003      	b.n	8005228 <HAL_ADC_Start+0x108>
 8005220:	4b30      	ldr	r3, [pc, #192]	@ (80052e4 <HAL_ADC_Start+0x1c4>)
 8005222:	e001      	b.n	8005228 <HAL_ADC_Start+0x108>
 8005224:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	4293      	cmp	r3, r2
 800522e:	d008      	beq.n	8005242 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b05      	cmp	r3, #5
 800523a:	d002      	beq.n	8005242 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b09      	cmp	r3, #9
 8005240:	d114      	bne.n	800526c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005254:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005258:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fd64 	bl	8004d32 <LL_ADC_REG_StartConversion>
 800526a:	e02d      	b.n	80052c8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005270:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a15      	ldr	r2, [pc, #84]	@ (80052d4 <HAL_ADC_Start+0x1b4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_ADC_Start+0x176>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a16      	ldr	r2, [pc, #88]	@ (80052e0 <HAL_ADC_Start+0x1c0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d002      	beq.n	8005292 <HAL_ADC_Start+0x172>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	e003      	b.n	800529a <HAL_ADC_Start+0x17a>
 8005292:	4b14      	ldr	r3, [pc, #80]	@ (80052e4 <HAL_ADC_Start+0x1c4>)
 8005294:	e001      	b.n	800529a <HAL_ADC_Start+0x17a>
 8005296:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800529a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80052b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052b8:	e006      	b.n	80052c8 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80052c2:	e001      	b.n	80052c8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
 80052c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	50000100 	.word	0x50000100
 80052d8:	50000300 	.word	0x50000300
 80052dc:	50000700 	.word	0x50000700
 80052e0:	50000500 	.word	0x50000500
 80052e4:	50000400 	.word	0x50000400

080052e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b0b6      	sub	sp, #216	@ 0xd8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800531e:	2b01      	cmp	r3, #1
 8005320:	d102      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x24>
 8005322:	2302      	movs	r3, #2
 8005324:	f000 bc13 	b.w	8005b4e <HAL_ADC_ConfigChannel+0x84a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fd10 	bl	8004d5a <LL_ADC_REG_IsConversionOngoing>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 83f3 	bne.w	8005b28 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f7ff fbf0 	bl	8004b34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fcfe 	bl	8004d5a <LL_ADC_REG_IsConversionOngoing>
 800535e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fd0a 	bl	8004d80 <LL_ADC_INJ_IsConversionOngoing>
 800536c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005370:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 81d9 	bne.w	800572c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800537a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800537e:	2b00      	cmp	r3, #0
 8005380:	f040 81d4 	bne.w	800572c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800538c:	d10f      	bne.n	80053ae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	4619      	mov	r1, r3
 800539a:	f7ff fbf7 	bl	8004b8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fbb1 	bl	8004b0e <LL_ADC_SetSamplingTimeCommonConfig>
 80053ac:	e00e      	b.n	80053cc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f7ff fbe6 	bl	8004b8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fba1 	bl	8004b0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d022      	beq.n	8005434 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6919      	ldr	r1, [r3, #16]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053fe:	f7ff fafb 	bl	80049f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6919      	ldr	r1, [r3, #16]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	461a      	mov	r2, r3
 8005410:	f7ff fb47 	bl	8004aa2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005420:	2b01      	cmp	r3, #1
 8005422:	d102      	bne.n	800542a <HAL_ADC_ConfigChannel+0x126>
 8005424:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005428:	e000      	b.n	800542c <HAL_ADC_ConfigChannel+0x128>
 800542a:	2300      	movs	r3, #0
 800542c:	461a      	mov	r2, r3
 800542e:	f7ff fb53 	bl	8004ad8 <LL_ADC_SetOffsetSaturation>
 8005432:	e17b      	b.n	800572c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fb00 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 8005440:	4603      	mov	r3, r0
 8005442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x15c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff faf5 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 8005456:	4603      	mov	r3, r0
 8005458:	0e9b      	lsrs	r3, r3, #26
 800545a:	f003 021f 	and.w	r2, r3, #31
 800545e:	e01e      	b.n	800549e <HAL_ADC_ConfigChannel+0x19a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff faea 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 800546c:	4603      	mov	r3, r0
 800546e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005472:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005476:	fa93 f3a3 	rbit	r3, r3
 800547a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800547e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005482:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800548e:	2320      	movs	r3, #32
 8005490:	e004      	b.n	800549c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005496:	fab3 f383 	clz	r3, r3
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x1b2>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	0e9b      	lsrs	r3, r3, #26
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	e018      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x1e4>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80054c2:	fa93 f3a3 	rbit	r3, r3
 80054c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80054ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80054d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80054da:	2320      	movs	r3, #32
 80054dc:	e004      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80054de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d106      	bne.n	80054fa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fab9 	bl	8004a6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2101      	movs	r1, #1
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff fa9d 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 8005506:	4603      	mov	r3, r0
 8005508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x222>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2101      	movs	r1, #1
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fa92 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 800551c:	4603      	mov	r3, r0
 800551e:	0e9b      	lsrs	r3, r3, #26
 8005520:	f003 021f 	and.w	r2, r3, #31
 8005524:	e01e      	b.n	8005564 <HAL_ADC_ConfigChannel+0x260>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2101      	movs	r1, #1
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fa87 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 8005532:	4603      	mov	r3, r0
 8005534:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800553c:	fa93 f3a3 	rbit	r3, r3
 8005540:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800554c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005554:	2320      	movs	r3, #32
 8005556:	e004      	b.n	8005562 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800555c:	fab3 f383 	clz	r3, r3
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <HAL_ADC_ConfigChannel+0x278>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	0e9b      	lsrs	r3, r3, #26
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	e018      	b.n	80055ae <HAL_ADC_ConfigChannel+0x2aa>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005598:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80055a0:	2320      	movs	r3, #32
 80055a2:	e004      	b.n	80055ae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80055a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055a8:	fab3 f383 	clz	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d106      	bne.n	80055c0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2101      	movs	r1, #1
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fa56 	bl	8004a6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2102      	movs	r1, #2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff fa3a 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x2e8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fa2f 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 80055e2:	4603      	mov	r3, r0
 80055e4:	0e9b      	lsrs	r3, r3, #26
 80055e6:	f003 021f 	and.w	r2, r3, #31
 80055ea:	e01e      	b.n	800562a <HAL_ADC_ConfigChannel+0x326>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2102      	movs	r1, #2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fa24 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005602:	fa93 f3a3 	rbit	r3, r3
 8005606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800560a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800560e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005612:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800561a:	2320      	movs	r3, #32
 800561c:	e004      	b.n	8005628 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800561e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005622:	fab3 f383 	clz	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x33e>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	0e9b      	lsrs	r3, r3, #26
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	e016      	b.n	8005670 <HAL_ADC_ConfigChannel+0x36c>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800564e:	fa93 f3a3 	rbit	r3, r3
 8005652:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005654:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800565a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005662:	2320      	movs	r3, #32
 8005664:	e004      	b.n	8005670 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005670:	429a      	cmp	r2, r3
 8005672:	d106      	bne.n	8005682 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2200      	movs	r2, #0
 800567a:	2102      	movs	r1, #2
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff f9f5 	bl	8004a6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2103      	movs	r1, #3
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff f9d9 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 800568e:	4603      	mov	r3, r0
 8005690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <HAL_ADC_ConfigChannel+0x3aa>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2103      	movs	r1, #3
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff f9ce 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 80056a4:	4603      	mov	r3, r0
 80056a6:	0e9b      	lsrs	r3, r3, #26
 80056a8:	f003 021f 	and.w	r2, r3, #31
 80056ac:	e017      	b.n	80056de <HAL_ADC_ConfigChannel+0x3da>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2103      	movs	r1, #3
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff f9c3 	bl	8004a40 <LL_ADC_GetOffsetChannel>
 80056ba:	4603      	mov	r3, r0
 80056bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056c0:	fa93 f3a3 	rbit	r3, r3
 80056c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80056c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80056ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80056d0:	2320      	movs	r3, #32
 80056d2:	e003      	b.n	80056dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80056d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056d6:	fab3 f383 	clz	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d105      	bne.n	80056f6 <HAL_ADC_ConfigChannel+0x3f2>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0e9b      	lsrs	r3, r3, #26
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	e011      	b.n	800571a <HAL_ADC_ConfigChannel+0x416>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056fe:	fa93 f3a3 	rbit	r3, r3
 8005702:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005706:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800570e:	2320      	movs	r3, #32
 8005710:	e003      	b.n	800571a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005714:	fab3 f383 	clz	r3, r3
 8005718:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800571a:	429a      	cmp	r2, r3
 800571c:	d106      	bne.n	800572c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	2103      	movs	r1, #3
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff f9a0 	bl	8004a6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff faeb 	bl	8004d0c <LL_ADC_IsEnabled>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	f040 813d 	bne.w	80059b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	461a      	mov	r2, r3
 800574c:	f7ff fa4a 	bl	8004be4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4aa2      	ldr	r2, [pc, #648]	@ (80059e0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	f040 812e 	bne.w	80059b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10b      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x480>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0e9b      	lsrs	r3, r3, #26
 8005772:	3301      	adds	r3, #1
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2b09      	cmp	r3, #9
 800577a:	bf94      	ite	ls
 800577c:	2301      	movls	r3, #1
 800577e:	2300      	movhi	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e019      	b.n	80057b8 <HAL_ADC_ConfigChannel+0x4b4>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005794:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800579c:	2320      	movs	r3, #32
 800579e:	e003      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80057a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057a2:	fab3 f383 	clz	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	3301      	adds	r3, #1
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	2b09      	cmp	r3, #9
 80057b0:	bf94      	ite	ls
 80057b2:	2301      	movls	r3, #1
 80057b4:	2300      	movhi	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d079      	beq.n	80058b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d107      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x4d4>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	0e9b      	lsrs	r3, r3, #26
 80057ce:	3301      	adds	r3, #1
 80057d0:	069b      	lsls	r3, r3, #26
 80057d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057d6:	e015      	b.n	8005804 <HAL_ADC_ConfigChannel+0x500>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80057e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80057ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80057f0:	2320      	movs	r3, #32
 80057f2:	e003      	b.n	80057fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80057f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	3301      	adds	r3, #1
 80057fe:	069b      	lsls	r3, r3, #26
 8005800:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x520>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	0e9b      	lsrs	r3, r3, #26
 8005816:	3301      	adds	r3, #1
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2101      	movs	r1, #1
 800581e:	fa01 f303 	lsl.w	r3, r1, r3
 8005822:	e017      	b.n	8005854 <HAL_ADC_ConfigChannel+0x550>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800582c:	fa93 f3a3 	rbit	r3, r3
 8005830:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005834:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800583c:	2320      	movs	r3, #32
 800583e:	e003      	b.n	8005848 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	3301      	adds	r3, #1
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2101      	movs	r1, #1
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	ea42 0103 	orr.w	r1, r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <HAL_ADC_ConfigChannel+0x576>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	0e9b      	lsrs	r3, r3, #26
 800586a:	3301      	adds	r3, #1
 800586c:	f003 021f 	and.w	r2, r3, #31
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	051b      	lsls	r3, r3, #20
 8005878:	e018      	b.n	80058ac <HAL_ADC_ConfigChannel+0x5a8>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005882:	fa93 f3a3 	rbit	r3, r3
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800588c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005892:	2320      	movs	r3, #32
 8005894:	e003      	b.n	800589e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005898:	fab3 f383 	clz	r3, r3
 800589c:	b2db      	uxtb	r3, r3
 800589e:	3301      	adds	r3, #1
 80058a0:	f003 021f 	and.w	r2, r3, #31
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058ac:	430b      	orrs	r3, r1
 80058ae:	e07e      	b.n	80059ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d107      	bne.n	80058cc <HAL_ADC_ConfigChannel+0x5c8>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	0e9b      	lsrs	r3, r3, #26
 80058c2:	3301      	adds	r3, #1
 80058c4:	069b      	lsls	r3, r3, #26
 80058c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058ca:	e015      	b.n	80058f8 <HAL_ADC_ConfigChannel+0x5f4>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d4:	fa93 f3a3 	rbit	r3, r3
 80058d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80058da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058dc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80058e4:	2320      	movs	r3, #32
 80058e6:	e003      	b.n	80058f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	fab3 f383 	clz	r3, r3
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	3301      	adds	r3, #1
 80058f2:	069b      	lsls	r3, r3, #26
 80058f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x614>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0e9b      	lsrs	r3, r3, #26
 800590a:	3301      	adds	r3, #1
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2101      	movs	r1, #1
 8005912:	fa01 f303 	lsl.w	r3, r1, r3
 8005916:	e017      	b.n	8005948 <HAL_ADC_ConfigChannel+0x644>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	fa93 f3a3 	rbit	r3, r3
 8005924:	61fb      	str	r3, [r7, #28]
  return result;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005930:	2320      	movs	r3, #32
 8005932:	e003      	b.n	800593c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	fab3 f383 	clz	r3, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	3301      	adds	r3, #1
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	ea42 0103 	orr.w	r1, r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10d      	bne.n	8005974 <HAL_ADC_ConfigChannel+0x670>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	0e9b      	lsrs	r3, r3, #26
 800595e:	3301      	adds	r3, #1
 8005960:	f003 021f 	and.w	r2, r3, #31
 8005964:	4613      	mov	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	4413      	add	r3, r2
 800596a:	3b1e      	subs	r3, #30
 800596c:	051b      	lsls	r3, r3, #20
 800596e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005972:	e01b      	b.n	80059ac <HAL_ADC_ConfigChannel+0x6a8>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	fa93 f3a3 	rbit	r3, r3
 8005980:	613b      	str	r3, [r7, #16]
  return result;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800598c:	2320      	movs	r3, #32
 800598e:	e003      	b.n	8005998 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	fab3 f383 	clz	r3, r3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	3301      	adds	r3, #1
 800599a:	f003 021f 	and.w	r2, r3, #31
 800599e:	4613      	mov	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	3b1e      	subs	r3, #30
 80059a6:	051b      	lsls	r3, r3, #20
 80059a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059b2:	4619      	mov	r1, r3
 80059b4:	f7ff f8ea 	bl	8004b8c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b09      	ldr	r3, [pc, #36]	@ (80059e4 <HAL_ADC_ConfigChannel+0x6e0>)
 80059be:	4013      	ands	r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80be 	beq.w	8005b42 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059ce:	d004      	beq.n	80059da <HAL_ADC_ConfigChannel+0x6d6>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a04      	ldr	r2, [pc, #16]	@ (80059e8 <HAL_ADC_ConfigChannel+0x6e4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10a      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x6ec>
 80059da:	4b04      	ldr	r3, [pc, #16]	@ (80059ec <HAL_ADC_ConfigChannel+0x6e8>)
 80059dc:	e009      	b.n	80059f2 <HAL_ADC_ConfigChannel+0x6ee>
 80059de:	bf00      	nop
 80059e0:	407f0000 	.word	0x407f0000
 80059e4:	80080000 	.word	0x80080000
 80059e8:	50000100 	.word	0x50000100
 80059ec:	50000300 	.word	0x50000300
 80059f0:	4b59      	ldr	r3, [pc, #356]	@ (8005b58 <HAL_ADC_ConfigChannel+0x854>)
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fff2 	bl	80049dc <LL_ADC_GetCommonPathInternalCh>
 80059f8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a56      	ldr	r2, [pc, #344]	@ (8005b5c <HAL_ADC_ConfigChannel+0x858>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_ADC_ConfigChannel+0x70c>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a55      	ldr	r2, [pc, #340]	@ (8005b60 <HAL_ADC_ConfigChannel+0x85c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d13a      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d134      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a24:	d005      	beq.n	8005a32 <HAL_ADC_ConfigChannel+0x72e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a4e      	ldr	r2, [pc, #312]	@ (8005b64 <HAL_ADC_ConfigChannel+0x860>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	f040 8085 	bne.w	8005b3c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a3a:	d004      	beq.n	8005a46 <HAL_ADC_ConfigChannel+0x742>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a49      	ldr	r2, [pc, #292]	@ (8005b68 <HAL_ADC_ConfigChannel+0x864>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <HAL_ADC_ConfigChannel+0x746>
 8005a46:	4a49      	ldr	r2, [pc, #292]	@ (8005b6c <HAL_ADC_ConfigChannel+0x868>)
 8005a48:	e000      	b.n	8005a4c <HAL_ADC_ConfigChannel+0x748>
 8005a4a:	4a43      	ldr	r2, [pc, #268]	@ (8005b58 <HAL_ADC_ConfigChannel+0x854>)
 8005a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f7fe ffad 	bl	80049b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a5c:	4b44      	ldr	r3, [pc, #272]	@ (8005b70 <HAL_ADC_ConfigChannel+0x86c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	099b      	lsrs	r3, r3, #6
 8005a62:	4a44      	ldr	r2, [pc, #272]	@ (8005b74 <HAL_ADC_ConfigChannel+0x870>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a76:	e002      	b.n	8005a7e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f9      	bne.n	8005a78 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a84:	e05a      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b78 <HAL_ADC_ConfigChannel+0x874>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d125      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d11f      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a31      	ldr	r2, [pc, #196]	@ (8005b68 <HAL_ADC_ConfigChannel+0x864>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d104      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x7ac>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a34      	ldr	r2, [pc, #208]	@ (8005b7c <HAL_ADC_ConfigChannel+0x878>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d047      	beq.n	8005b40 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ab8:	d004      	beq.n	8005ac4 <HAL_ADC_ConfigChannel+0x7c0>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a2a      	ldr	r2, [pc, #168]	@ (8005b68 <HAL_ADC_ConfigChannel+0x864>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d101      	bne.n	8005ac8 <HAL_ADC_ConfigChannel+0x7c4>
 8005ac4:	4a29      	ldr	r2, [pc, #164]	@ (8005b6c <HAL_ADC_ConfigChannel+0x868>)
 8005ac6:	e000      	b.n	8005aca <HAL_ADC_ConfigChannel+0x7c6>
 8005ac8:	4a23      	ldr	r2, [pc, #140]	@ (8005b58 <HAL_ADC_ConfigChannel+0x854>)
 8005aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	f7fe ff6e 	bl	80049b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ada:	e031      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a27      	ldr	r2, [pc, #156]	@ (8005b80 <HAL_ADC_ConfigChannel+0x87c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d12d      	bne.n	8005b42 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d127      	bne.n	8005b42 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b68 <HAL_ADC_ConfigChannel+0x864>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b04:	d004      	beq.n	8005b10 <HAL_ADC_ConfigChannel+0x80c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a17      	ldr	r2, [pc, #92]	@ (8005b68 <HAL_ADC_ConfigChannel+0x864>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x810>
 8005b10:	4a16      	ldr	r2, [pc, #88]	@ (8005b6c <HAL_ADC_ConfigChannel+0x868>)
 8005b12:	e000      	b.n	8005b16 <HAL_ADC_ConfigChannel+0x812>
 8005b14:	4a10      	ldr	r2, [pc, #64]	@ (8005b58 <HAL_ADC_ConfigChannel+0x854>)
 8005b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7fe ff48 	bl	80049b6 <LL_ADC_SetCommonPathInternalCh>
 8005b26:	e00c      	b.n	8005b42 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b2c:	f043 0220 	orr.w	r2, r3, #32
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005b3a:	e002      	b.n	8005b42 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b3c:	bf00      	nop
 8005b3e:	e000      	b.n	8005b42 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005b4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	37d8      	adds	r7, #216	@ 0xd8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	50000700 	.word	0x50000700
 8005b5c:	c3210000 	.word	0xc3210000
 8005b60:	90c00010 	.word	0x90c00010
 8005b64:	50000600 	.word	0x50000600
 8005b68:	50000100 	.word	0x50000100
 8005b6c:	50000300 	.word	0x50000300
 8005b70:	20000258 	.word	0x20000258
 8005b74:	053e2d63 	.word	0x053e2d63
 8005b78:	c7520000 	.word	0xc7520000
 8005b7c:	50000500 	.word	0x50000500
 8005b80:	cb840000 	.word	0xcb840000

08005b84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff f8b9 	bl	8004d0c <LL_ADC_IsEnabled>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d176      	bne.n	8005c8e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8005c98 <ADC_Enable+0x114>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb2:	f043 0210 	orr.w	r2, r3, #16
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e062      	b.n	8005c90 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff f888 	bl	8004ce4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bdc:	d004      	beq.n	8005be8 <ADC_Enable+0x64>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2e      	ldr	r2, [pc, #184]	@ (8005c9c <ADC_Enable+0x118>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <ADC_Enable+0x68>
 8005be8:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca0 <ADC_Enable+0x11c>)
 8005bea:	e000      	b.n	8005bee <ADC_Enable+0x6a>
 8005bec:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca4 <ADC_Enable+0x120>)
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe fef4 	bl	80049dc <LL_ADC_GetCommonPathInternalCh>
 8005bf4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d013      	beq.n	8005c26 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8005ca8 <ADC_Enable+0x124>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	099b      	lsrs	r3, r3, #6
 8005c04:	4a29      	ldr	r2, [pc, #164]	@ (8005cac <ADC_Enable+0x128>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	099b      	lsrs	r3, r3, #6
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	4613      	mov	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c18:	e002      	b.n	8005c20 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f9      	bne.n	8005c1a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c26:	f7fe fea7 	bl	8004978 <HAL_GetTick>
 8005c2a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c2c:	e028      	b.n	8005c80 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f86a 	bl	8004d0c <LL_ADC_IsEnabled>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f84e 	bl	8004ce4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c48:	f7fe fe96 	bl	8004978 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d914      	bls.n	8005c80 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d00d      	beq.n	8005c80 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c68:	f043 0210 	orr.w	r2, r3, #16
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c74:	f043 0201 	orr.w	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e007      	b.n	8005c90 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d1cf      	bne.n	8005c2e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	8000003f 	.word	0x8000003f
 8005c9c:	50000100 	.word	0x50000100
 8005ca0:	50000300 	.word	0x50000300
 8005ca4:	50000700 	.word	0x50000700
 8005ca8:	20000258 	.word	0x20000258
 8005cac:	053e2d63 	.word	0x053e2d63

08005cb0 <LL_ADC_IsEnabled>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <LL_ADC_IsEnabled+0x18>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <LL_ADC_IsEnabled+0x1a>
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d101      	bne.n	8005cee <LL_ADC_REG_IsConversionOngoing+0x18>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b0a1      	sub	sp, #132	@ 0x84
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e0e7      	b.n	8005eea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005d22:	2300      	movs	r3, #0
 8005d24:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005d26:	2300      	movs	r3, #0
 8005d28:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d32:	d102      	bne.n	8005d3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005d34:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	e009      	b.n	8005d4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d102      	bne.n	8005d4a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005d44:	4b6d      	ldr	r3, [pc, #436]	@ (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	e001      	b.n	8005d4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0be      	b.n	8005eea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff ffb1 	bl	8005cd6 <LL_ADC_REG_IsConversionOngoing>
 8005d74:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff ffab 	bl	8005cd6 <LL_ADC_REG_IsConversionOngoing>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 80a0 	bne.w	8005ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 809c 	bne.w	8005ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d98:	d004      	beq.n	8005da4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a55      	ldr	r2, [pc, #340]	@ (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d101      	bne.n	8005da8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005da4:	4b56      	ldr	r3, [pc, #344]	@ (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005da6:	e000      	b.n	8005daa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005da8:	4b56      	ldr	r3, [pc, #344]	@ (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005daa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d04b      	beq.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005db4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	6859      	ldr	r1, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dc6:	035b      	lsls	r3, r3, #13
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dd8:	d004      	beq.n	8005de4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a45      	ldr	r2, [pc, #276]	@ (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d10f      	bne.n	8005e04 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005de4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005de8:	f7ff ff62 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005dec:	4604      	mov	r4, r0
 8005dee:	4841      	ldr	r0, [pc, #260]	@ (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005df0:	f7ff ff5e 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005df4:	4603      	mov	r3, r0
 8005df6:	4323      	orrs	r3, r4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e012      	b.n	8005e2a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005e04:	483c      	ldr	r0, [pc, #240]	@ (8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e06:	f7ff ff53 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	483b      	ldr	r0, [pc, #236]	@ (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e0e:	f7ff ff4f 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005e12:	4603      	mov	r3, r0
 8005e14:	431c      	orrs	r4, r3
 8005e16:	483c      	ldr	r0, [pc, #240]	@ (8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005e18:	f7ff ff4a 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4323      	orrs	r3, r4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d056      	beq.n	8005edc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005e36:	f023 030f 	bic.w	r3, r3, #15
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	6811      	ldr	r1, [r2, #0]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	6892      	ldr	r2, [r2, #8]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	431a      	orrs	r2, r3
 8005e46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e48:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e4a:	e047      	b.n	8005edc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005e4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e56:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e60:	d004      	beq.n	8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a23      	ldr	r2, [pc, #140]	@ (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d10f      	bne.n	8005e8c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005e6c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005e70:	f7ff ff1e 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005e74:	4604      	mov	r4, r0
 8005e76:	481f      	ldr	r0, [pc, #124]	@ (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e78:	f7ff ff1a 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4323      	orrs	r3, r4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	bf0c      	ite	eq
 8005e84:	2301      	moveq	r3, #1
 8005e86:	2300      	movne	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e012      	b.n	8005eb2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005e8c:	481a      	ldr	r0, [pc, #104]	@ (8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e8e:	f7ff ff0f 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005e92:	4604      	mov	r4, r0
 8005e94:	4819      	ldr	r0, [pc, #100]	@ (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e96:	f7ff ff0b 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	431c      	orrs	r4, r3
 8005e9e:	481a      	ldr	r0, [pc, #104]	@ (8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ea0:	f7ff ff06 	bl	8005cb0 <LL_ADC_IsEnabled>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	4323      	orrs	r3, r4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d012      	beq.n	8005edc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005ebe:	f023 030f 	bic.w	r3, r3, #15
 8005ec2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005ec4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ec6:	e009      	b.n	8005edc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ecc:	f043 0220 	orr.w	r2, r3, #32
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005eda:	e000      	b.n	8005ede <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005edc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ee6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3784      	adds	r7, #132	@ 0x84
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd90      	pop	{r4, r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	50000100 	.word	0x50000100
 8005ef8:	50000400 	.word	0x50000400
 8005efc:	50000500 	.word	0x50000500
 8005f00:	50000300 	.word	0x50000300
 8005f04:	50000700 	.word	0x50000700
 8005f08:	50000600 	.word	0x50000600

08005f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f50 <__NVIC_SetPriorityGrouping+0x44>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f3e:	4a04      	ldr	r2, [pc, #16]	@ (8005f50 <__NVIC_SetPriorityGrouping+0x44>)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	60d3      	str	r3, [r2, #12]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	e000ed00 	.word	0xe000ed00

08005f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f58:	4b04      	ldr	r3, [pc, #16]	@ (8005f6c <__NVIC_GetPriorityGrouping+0x18>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	f003 0307 	and.w	r3, r3, #7
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	db0b      	blt.n	8005f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	f003 021f 	and.w	r2, r3, #31
 8005f88:	4907      	ldr	r1, [pc, #28]	@ (8005fa8 <__NVIC_EnableIRQ+0x38>)
 8005f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	2001      	movs	r0, #1
 8005f92:	fa00 f202 	lsl.w	r2, r0, r2
 8005f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000e100 	.word	0xe000e100

08005fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	6039      	str	r1, [r7, #0]
 8005fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	db0a      	blt.n	8005fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	490c      	ldr	r1, [pc, #48]	@ (8005ff8 <__NVIC_SetPriority+0x4c>)
 8005fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fca:	0112      	lsls	r2, r2, #4
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	440b      	add	r3, r1
 8005fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fd4:	e00a      	b.n	8005fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4908      	ldr	r1, [pc, #32]	@ (8005ffc <__NVIC_SetPriority+0x50>)
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	3b04      	subs	r3, #4
 8005fe4:	0112      	lsls	r2, r2, #4
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	440b      	add	r3, r1
 8005fea:	761a      	strb	r2, [r3, #24]
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	e000e100 	.word	0xe000e100
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006000:	b480      	push	{r7}
 8006002:	b089      	sub	sp, #36	@ 0x24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f1c3 0307 	rsb	r3, r3, #7
 800601a:	2b04      	cmp	r3, #4
 800601c:	bf28      	it	cs
 800601e:	2304      	movcs	r3, #4
 8006020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3304      	adds	r3, #4
 8006026:	2b06      	cmp	r3, #6
 8006028:	d902      	bls.n	8006030 <NVIC_EncodePriority+0x30>
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3b03      	subs	r3, #3
 800602e:	e000      	b.n	8006032 <NVIC_EncodePriority+0x32>
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006034:	f04f 32ff 	mov.w	r2, #4294967295
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	43da      	mvns	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	401a      	ands	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006048:	f04f 31ff 	mov.w	r1, #4294967295
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	fa01 f303 	lsl.w	r3, r1, r3
 8006052:	43d9      	mvns	r1, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006058:	4313      	orrs	r3, r2
         );
}
 800605a:	4618      	mov	r0, r3
 800605c:	3724      	adds	r7, #36	@ 0x24
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3b01      	subs	r3, #1
 8006074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006078:	d301      	bcc.n	800607e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800607a:	2301      	movs	r3, #1
 800607c:	e00f      	b.n	800609e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800607e:	4a0a      	ldr	r2, [pc, #40]	@ (80060a8 <SysTick_Config+0x40>)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3b01      	subs	r3, #1
 8006084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006086:	210f      	movs	r1, #15
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	f7ff ff8e 	bl	8005fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <SysTick_Config+0x40>)
 8006092:	2200      	movs	r2, #0
 8006094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006096:	4b04      	ldr	r3, [pc, #16]	@ (80060a8 <SysTick_Config+0x40>)
 8006098:	2207      	movs	r2, #7
 800609a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	e000e010 	.word	0xe000e010

080060ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff ff29 	bl	8005f0c <__NVIC_SetPriorityGrouping>
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	4603      	mov	r3, r0
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060d0:	f7ff ff40 	bl	8005f54 <__NVIC_GetPriorityGrouping>
 80060d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f7ff ff90 	bl	8006000 <NVIC_EncodePriority>
 80060e0:	4602      	mov	r2, r0
 80060e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e6:	4611      	mov	r1, r2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ff5f 	bl	8005fac <__NVIC_SetPriority>
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	4603      	mov	r3, r0
 80060fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff ff33 	bl	8005f70 <__NVIC_EnableIRQ>
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ffa4 	bl	8006068 <SysTick_Config>
 8006120:	4603      	mov	r3, r0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e08d      	b.n	800625a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	4b47      	ldr	r3, [pc, #284]	@ (8006264 <HAL_DMA_Init+0x138>)
 8006146:	429a      	cmp	r2, r3
 8006148:	d80f      	bhi.n	800616a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	4b45      	ldr	r3, [pc, #276]	@ (8006268 <HAL_DMA_Init+0x13c>)
 8006152:	4413      	add	r3, r2
 8006154:	4a45      	ldr	r2, [pc, #276]	@ (800626c <HAL_DMA_Init+0x140>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	091b      	lsrs	r3, r3, #4
 800615c:	009a      	lsls	r2, r3, #2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a42      	ldr	r2, [pc, #264]	@ (8006270 <HAL_DMA_Init+0x144>)
 8006166:	641a      	str	r2, [r3, #64]	@ 0x40
 8006168:	e00e      	b.n	8006188 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	4b40      	ldr	r3, [pc, #256]	@ (8006274 <HAL_DMA_Init+0x148>)
 8006172:	4413      	add	r3, r2
 8006174:	4a3d      	ldr	r2, [pc, #244]	@ (800626c <HAL_DMA_Init+0x140>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	009a      	lsls	r2, r3, #2
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a3c      	ldr	r2, [pc, #240]	@ (8006278 <HAL_DMA_Init+0x14c>)
 8006186:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800619e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80061ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa82 	bl	80066e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e8:	d102      	bne.n	80061f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006204:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d010      	beq.n	8006230 <HAL_DMA_Init+0x104>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b04      	cmp	r3, #4
 8006214:	d80c      	bhi.n	8006230 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 faa2 	bl	8006760 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	e008      	b.n	8006242 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40020407 	.word	0x40020407
 8006268:	bffdfff8 	.word	0xbffdfff8
 800626c:	cccccccd 	.word	0xcccccccd
 8006270:	40020000 	.word	0x40020000
 8006274:	bffdfbf8 	.word	0xbffdfbf8
 8006278:	40020400 	.word	0x40020400

0800627c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_DMA_Start_IT+0x20>
 8006298:	2302      	movs	r3, #2
 800629a:	e066      	b.n	800636a <HAL_DMA_Start_IT+0xee>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d155      	bne.n	800635c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f9c7 	bl	8006668 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 020e 	orr.w	r2, r2, #14
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e00f      	b.n	8006314 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0204 	bic.w	r2, r2, #4
 8006302:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 020a 	orr.w	r2, r2, #10
 8006312:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800632c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006330:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006344:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006348:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f042 0201 	orr.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	e005      	b.n	8006368 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006364:	2302      	movs	r3, #2
 8006366:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d005      	beq.n	8006396 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2204      	movs	r2, #4
 800638e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	e037      	b.n	8006406 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 020e 	bic.w	r2, r2, #14
 80063a4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063b4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ca:	f003 021f 	and.w	r2, r3, #31
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	2101      	movs	r1, #1
 80063d4:	fa01 f202 	lsl.w	r2, r1, r2
 80063d8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80063e2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063fa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006404:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d00d      	beq.n	8006458 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2204      	movs	r2, #4
 8006440:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
 8006456:	e047      	b.n	80064e8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 020e 	bic.w	r2, r2, #14
 8006466:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006482:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648c:	f003 021f 	and.w	r2, r3, #31
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f202 	lsl.w	r2, r1, r2
 800649a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00c      	beq.n	80064c8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
    }
  }
  return status;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	2204      	movs	r2, #4
 8006514:	409a      	lsls	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d026      	beq.n	800656c <HAL_DMA_IRQHandler+0x7a>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d021      	beq.n	800656c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d107      	bne.n	8006546 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0204 	bic.w	r2, r2, #4
 8006544:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654a:	f003 021f 	and.w	r2, r3, #31
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	2104      	movs	r1, #4
 8006554:	fa01 f202 	lsl.w	r2, r1, r2
 8006558:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	2b00      	cmp	r3, #0
 8006560:	d071      	beq.n	8006646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800656a:	e06c      	b.n	8006646 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	2202      	movs	r2, #2
 8006576:	409a      	lsls	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d02e      	beq.n	80065de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d029      	beq.n	80065de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 020a 	bic.w	r2, r2, #10
 80065a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b4:	f003 021f 	and.w	r2, r3, #31
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065bc:	2102      	movs	r1, #2
 80065be:	fa01 f202 	lsl.w	r2, r1, r2
 80065c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d038      	beq.n	8006646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80065dc:	e033      	b.n	8006646 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2208      	movs	r2, #8
 80065e8:	409a      	lsls	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d02a      	beq.n	8006648 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d025      	beq.n	8006648 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 020e 	bic.w	r2, r2, #14
 800660a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006610:	f003 021f 	and.w	r2, r3, #31
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006618:	2101      	movs	r1, #1
 800661a:	fa01 f202 	lsl.w	r2, r1, r2
 800661e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006646:	bf00      	nop
 8006648:	bf00      	nop
}
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800667e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006690:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006696:	f003 021f 	and.w	r2, r3, #31
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669e:	2101      	movs	r1, #1
 80066a0:	fa01 f202 	lsl.w	r2, r1, r2
 80066a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b10      	cmp	r3, #16
 80066b4:	d108      	bne.n	80066c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80066c6:	e007      	b.n	80066d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]
}
 80066d8:	bf00      	nop
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	4b16      	ldr	r3, [pc, #88]	@ (800674c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d802      	bhi.n	80066fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80066f8:	4b15      	ldr	r3, [pc, #84]	@ (8006750 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e001      	b.n	8006702 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80066fe:	4b15      	ldr	r3, [pc, #84]	@ (8006754 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006700:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	3b08      	subs	r3, #8
 800670e:	4a12      	ldr	r2, [pc, #72]	@ (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	091b      	lsrs	r3, r3, #4
 8006716:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671c:	089b      	lsrs	r3, r3, #2
 800671e:	009a      	lsls	r2, r3, #2
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	461a      	mov	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a0b      	ldr	r2, [pc, #44]	@ (800675c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800672e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	2201      	movs	r2, #1
 8006738:	409a      	lsls	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40020407 	.word	0x40020407
 8006750:	40020800 	.word	0x40020800
 8006754:	40020820 	.word	0x40020820
 8006758:	cccccccd 	.word	0xcccccccd
 800675c:	40020880 	.word	0x40020880

08006760 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	461a      	mov	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a08      	ldr	r2, [pc, #32]	@ (80067a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006782:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b01      	subs	r3, #1
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2201      	movs	r2, #1
 800678e:	409a      	lsls	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	1000823f 	.word	0x1000823f
 80067a4:	40020940 	.word	0x40020940

080067a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067b6:	e15a      	b.n	8006a6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	2101      	movs	r1, #1
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	fa01 f303 	lsl.w	r3, r1, r3
 80067c4:	4013      	ands	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 814c 	beq.w	8006a68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d005      	beq.n	80067e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d130      	bne.n	800684a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	2203      	movs	r2, #3
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	43db      	mvns	r3, r3
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4013      	ands	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800681e:	2201      	movs	r2, #1
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43db      	mvns	r3, r3
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4013      	ands	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	f003 0201 	and.w	r2, r3, #1
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d017      	beq.n	8006886 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	2203      	movs	r2, #3
 8006862:	fa02 f303 	lsl.w	r3, r2, r3
 8006866:	43db      	mvns	r3, r3
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4013      	ands	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	fa02 f303 	lsl.w	r3, r2, r3
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d123      	bne.n	80068da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	08da      	lsrs	r2, r3, #3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3208      	adds	r2, #8
 800689a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	220f      	movs	r2, #15
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	43db      	mvns	r3, r3
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4013      	ands	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	fa02 f303 	lsl.w	r3, r2, r3
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	08da      	lsrs	r2, r3, #3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3208      	adds	r2, #8
 80068d4:	6939      	ldr	r1, [r7, #16]
 80068d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	2203      	movs	r2, #3
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43db      	mvns	r3, r3
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4013      	ands	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f003 0203 	and.w	r2, r3, #3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 80a6 	beq.w	8006a68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800691c:	4b5b      	ldr	r3, [pc, #364]	@ (8006a8c <HAL_GPIO_Init+0x2e4>)
 800691e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006920:	4a5a      	ldr	r2, [pc, #360]	@ (8006a8c <HAL_GPIO_Init+0x2e4>)
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	6613      	str	r3, [r2, #96]	@ 0x60
 8006928:	4b58      	ldr	r3, [pc, #352]	@ (8006a8c <HAL_GPIO_Init+0x2e4>)
 800692a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006934:	4a56      	ldr	r2, [pc, #344]	@ (8006a90 <HAL_GPIO_Init+0x2e8>)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	089b      	lsrs	r3, r3, #2
 800693a:	3302      	adds	r3, #2
 800693c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006940:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	220f      	movs	r2, #15
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	43db      	mvns	r3, r3
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4013      	ands	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800695e:	d01f      	beq.n	80069a0 <HAL_GPIO_Init+0x1f8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a4c      	ldr	r2, [pc, #304]	@ (8006a94 <HAL_GPIO_Init+0x2ec>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d019      	beq.n	800699c <HAL_GPIO_Init+0x1f4>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a4b      	ldr	r2, [pc, #300]	@ (8006a98 <HAL_GPIO_Init+0x2f0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <HAL_GPIO_Init+0x1f0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a4a      	ldr	r2, [pc, #296]	@ (8006a9c <HAL_GPIO_Init+0x2f4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00d      	beq.n	8006994 <HAL_GPIO_Init+0x1ec>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a49      	ldr	r2, [pc, #292]	@ (8006aa0 <HAL_GPIO_Init+0x2f8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d007      	beq.n	8006990 <HAL_GPIO_Init+0x1e8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a48      	ldr	r2, [pc, #288]	@ (8006aa4 <HAL_GPIO_Init+0x2fc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d101      	bne.n	800698c <HAL_GPIO_Init+0x1e4>
 8006988:	2305      	movs	r3, #5
 800698a:	e00a      	b.n	80069a2 <HAL_GPIO_Init+0x1fa>
 800698c:	2306      	movs	r3, #6
 800698e:	e008      	b.n	80069a2 <HAL_GPIO_Init+0x1fa>
 8006990:	2304      	movs	r3, #4
 8006992:	e006      	b.n	80069a2 <HAL_GPIO_Init+0x1fa>
 8006994:	2303      	movs	r3, #3
 8006996:	e004      	b.n	80069a2 <HAL_GPIO_Init+0x1fa>
 8006998:	2302      	movs	r3, #2
 800699a:	e002      	b.n	80069a2 <HAL_GPIO_Init+0x1fa>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <HAL_GPIO_Init+0x1fa>
 80069a0:	2300      	movs	r3, #0
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	f002 0203 	and.w	r2, r2, #3
 80069a8:	0092      	lsls	r2, r2, #2
 80069aa:	4093      	lsls	r3, r2
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069b2:	4937      	ldr	r1, [pc, #220]	@ (8006a90 <HAL_GPIO_Init+0x2e8>)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	089b      	lsrs	r3, r3, #2
 80069b8:	3302      	adds	r3, #2
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069c0:	4b39      	ldr	r3, [pc, #228]	@ (8006aa8 <HAL_GPIO_Init+0x300>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	43db      	mvns	r3, r3
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4013      	ands	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069e4:	4a30      	ldr	r2, [pc, #192]	@ (8006aa8 <HAL_GPIO_Init+0x300>)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069ea:	4b2f      	ldr	r3, [pc, #188]	@ (8006aa8 <HAL_GPIO_Init+0x300>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	43db      	mvns	r3, r3
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4013      	ands	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a0e:	4a26      	ldr	r2, [pc, #152]	@ (8006aa8 <HAL_GPIO_Init+0x300>)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006a14:	4b24      	ldr	r3, [pc, #144]	@ (8006aa8 <HAL_GPIO_Init+0x300>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4013      	ands	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a38:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa8 <HAL_GPIO_Init+0x300>)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa8 <HAL_GPIO_Init+0x300>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	43db      	mvns	r3, r3
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a62:	4a11      	ldr	r2, [pc, #68]	@ (8006aa8 <HAL_GPIO_Init+0x300>)
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f47f ae9d 	bne.w	80067b8 <HAL_GPIO_Init+0x10>
  }
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40021000 	.word	0x40021000
 8006a90:	40010000 	.word	0x40010000
 8006a94:	48000400 	.word	0x48000400
 8006a98:	48000800 	.word	0x48000800
 8006a9c:	48000c00 	.word	0x48000c00
 8006aa0:	48001000 	.word	0x48001000
 8006aa4:	48001400 	.word	0x48001400
 8006aa8:	40010400 	.word	0x40010400

08006aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	807b      	strh	r3, [r7, #2]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006abc:	787b      	ldrb	r3, [r7, #1]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ac2:	887a      	ldrh	r2, [r7, #2]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ac8:	e002      	b.n	8006ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006aca:	887a      	ldrh	r2, [r7, #2]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ae6:	4b08      	ldr	r3, [pc, #32]	@ (8006b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ae8:	695a      	ldr	r2, [r3, #20]
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d006      	beq.n	8006b00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006af2:	4a05      	ldr	r2, [pc, #20]	@ (8006b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fc fd70 	bl	80035e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40010400 	.word	0x40010400

08006b0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d141      	bne.n	8006b9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b26:	d131      	bne.n	8006b8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b28:	4b47      	ldr	r3, [pc, #284]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b2e:	4a46      	ldr	r2, [pc, #280]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b38:	4b43      	ldr	r3, [pc, #268]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b40:	4a41      	ldr	r2, [pc, #260]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b48:	4b40      	ldr	r3, [pc, #256]	@ (8006c4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2232      	movs	r2, #50	@ 0x32
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	4a3f      	ldr	r2, [pc, #252]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b54:	fba2 2303 	umull	r2, r3, r2, r3
 8006b58:	0c9b      	lsrs	r3, r3, #18
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b5e:	e002      	b.n	8006b66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b66:	4b38      	ldr	r3, [pc, #224]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b72:	d102      	bne.n	8006b7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f2      	bne.n	8006b60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b7a:	4b33      	ldr	r3, [pc, #204]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b86:	d158      	bne.n	8006c3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e057      	b.n	8006c3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b92:	4a2d      	ldr	r2, [pc, #180]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006b9c:	e04d      	b.n	8006c3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ba4:	d141      	bne.n	8006c2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ba6:	4b28      	ldr	r3, [pc, #160]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bb2:	d131      	bne.n	8006c18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bb4:	4b24      	ldr	r3, [pc, #144]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bba:	4a23      	ldr	r2, [pc, #140]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bc4:	4b20      	ldr	r3, [pc, #128]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2232      	movs	r2, #50	@ 0x32
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	4a1c      	ldr	r2, [pc, #112]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006be0:	fba2 2303 	umull	r2, r3, r2, r3
 8006be4:	0c9b      	lsrs	r3, r3, #18
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bea:	e002      	b.n	8006bf2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bf2:	4b15      	ldr	r3, [pc, #84]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfe:	d102      	bne.n	8006c06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f2      	bne.n	8006bec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c06:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c12:	d112      	bne.n	8006c3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e011      	b.n	8006c3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c18:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c28:	e007      	b.n	8006c3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c2a:	4b07      	ldr	r3, [pc, #28]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c32:	4a05      	ldr	r2, [pc, #20]	@ (8006c48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40007000 	.word	0x40007000
 8006c4c:	20000258 	.word	0x20000258
 8006c50:	431bde83 	.word	0x431bde83

08006c54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006c58:	4b05      	ldr	r3, [pc, #20]	@ (8006c70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4a04      	ldr	r2, [pc, #16]	@ (8006c70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c62:	6093      	str	r3, [r2, #8]
}
 8006c64:	bf00      	nop
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40007000 	.word	0x40007000

08006c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e2fe      	b.n	8007284 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d075      	beq.n	8006d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c92:	4b97      	ldr	r3, [pc, #604]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 030c 	and.w	r3, r3, #12
 8006c9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c9c:	4b94      	ldr	r3, [pc, #592]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	d102      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x3e>
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d002      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x44>
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d10b      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb8:	4b8d      	ldr	r3, [pc, #564]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d05b      	beq.n	8006d7c <HAL_RCC_OscConfig+0x108>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d157      	bne.n	8006d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e2d9      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd8:	d106      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x74>
 8006cda:	4b85      	ldr	r3, [pc, #532]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a84      	ldr	r2, [pc, #528]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	e01d      	b.n	8006d24 <HAL_RCC_OscConfig+0xb0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf0:	d10c      	bne.n	8006d0c <HAL_RCC_OscConfig+0x98>
 8006cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a7b      	ldr	r2, [pc, #492]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	e00b      	b.n	8006d24 <HAL_RCC_OscConfig+0xb0>
 8006d0c:	4b78      	ldr	r3, [pc, #480]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a77      	ldr	r2, [pc, #476]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	4b75      	ldr	r3, [pc, #468]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a74      	ldr	r2, [pc, #464]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d013      	beq.n	8006d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fd fe24 	bl	8004978 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d34:	f7fd fe20 	bl	8004978 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b64      	cmp	r3, #100	@ 0x64
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e29e      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d46:	4b6a      	ldr	r3, [pc, #424]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCC_OscConfig+0xc0>
 8006d52:	e014      	b.n	8006d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d54:	f7fd fe10 	bl	8004978 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d5c:	f7fd fe0c 	bl	8004978 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b64      	cmp	r3, #100	@ 0x64
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e28a      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d6e:	4b60      	ldr	r3, [pc, #384]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1f0      	bne.n	8006d5c <HAL_RCC_OscConfig+0xe8>
 8006d7a:	e000      	b.n	8006d7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d075      	beq.n	8006e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d8a:	4b59      	ldr	r3, [pc, #356]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 030c 	and.w	r3, r3, #12
 8006d92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d94:	4b56      	ldr	r3, [pc, #344]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b0c      	cmp	r3, #12
 8006da2:	d102      	bne.n	8006daa <HAL_RCC_OscConfig+0x136>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d002      	beq.n	8006db0 <HAL_RCC_OscConfig+0x13c>
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d11f      	bne.n	8006df0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006db0:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x154>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e25d      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc8:	4b49      	ldr	r3, [pc, #292]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	061b      	lsls	r3, r3, #24
 8006dd6:	4946      	ldr	r1, [pc, #280]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ddc:	4b45      	ldr	r3, [pc, #276]	@ (8006ef4 <HAL_RCC_OscConfig+0x280>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fd fd7d 	bl	80048e0 <HAL_InitTick>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d043      	beq.n	8006e74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e249      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d023      	beq.n	8006e40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006df8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e04:	f7fd fdb8 	bl	8004978 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e0c:	f7fd fdb4 	bl	8004978 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e232      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e1e:	4b34      	ldr	r3, [pc, #208]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f0      	beq.n	8006e0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2a:	4b31      	ldr	r3, [pc, #196]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	061b      	lsls	r3, r3, #24
 8006e38:	492d      	ldr	r1, [pc, #180]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	604b      	str	r3, [r1, #4]
 8006e3e:	e01a      	b.n	8006e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e40:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2a      	ldr	r2, [pc, #168]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006e46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fd fd94 	bl	8004978 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e54:	f7fd fd90 	bl	8004978 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e20e      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e66:	4b22      	ldr	r3, [pc, #136]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0x1e0>
 8006e72:	e000      	b.n	8006e76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d041      	beq.n	8006f06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d01c      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e8a:	4b19      	ldr	r3, [pc, #100]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e90:	4a17      	ldr	r2, [pc, #92]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9a:	f7fd fd6d 	bl	8004978 <HAL_GetTick>
 8006e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ea2:	f7fd fd69 	bl	8004978 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e1e7      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0ef      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x22e>
 8006ec2:	e020      	b.n	8006f06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eca:	4a09      	ldr	r2, [pc, #36]	@ (8006ef0 <HAL_RCC_OscConfig+0x27c>)
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed4:	f7fd fd50 	bl	8004978 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006eda:	e00d      	b.n	8006ef8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006edc:	f7fd fd4c 	bl	8004978 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d906      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e1ca      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	2000025c 	.word	0x2000025c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1ea      	bne.n	8006edc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80a6 	beq.w	8007060 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f14:	2300      	movs	r3, #0
 8006f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f18:	4b84      	ldr	r3, [pc, #528]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_RCC_OscConfig+0x2b4>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <HAL_RCC_OscConfig+0x2b6>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00d      	beq.n	8006f4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f32:	4a7e      	ldr	r2, [pc, #504]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f3a:	4b7c      	ldr	r3, [pc, #496]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006f46:	2301      	movs	r3, #1
 8006f48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f4a:	4b79      	ldr	r3, [pc, #484]	@ (8007130 <HAL_RCC_OscConfig+0x4bc>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d118      	bne.n	8006f88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f56:	4b76      	ldr	r3, [pc, #472]	@ (8007130 <HAL_RCC_OscConfig+0x4bc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a75      	ldr	r2, [pc, #468]	@ (8007130 <HAL_RCC_OscConfig+0x4bc>)
 8006f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f62:	f7fd fd09 	bl	8004978 <HAL_GetTick>
 8006f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f6a:	f7fd fd05 	bl	8004978 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e183      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8007130 <HAL_RCC_OscConfig+0x4bc>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d108      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x32e>
 8006f90:	4b66      	ldr	r3, [pc, #408]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f96:	4a65      	ldr	r2, [pc, #404]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006f98:	f043 0301 	orr.w	r3, r3, #1
 8006f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fa0:	e024      	b.n	8006fec <HAL_RCC_OscConfig+0x378>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b05      	cmp	r3, #5
 8006fa8:	d110      	bne.n	8006fcc <HAL_RCC_OscConfig+0x358>
 8006faa:	4b60      	ldr	r3, [pc, #384]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb0:	4a5e      	ldr	r2, [pc, #376]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006fb2:	f043 0304 	orr.w	r3, r3, #4
 8006fb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fba:	4b5c      	ldr	r3, [pc, #368]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006fc2:	f043 0301 	orr.w	r3, r3, #1
 8006fc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fca:	e00f      	b.n	8006fec <HAL_RCC_OscConfig+0x378>
 8006fcc:	4b57      	ldr	r3, [pc, #348]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd2:	4a56      	ldr	r2, [pc, #344]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fdc:	4b53      	ldr	r3, [pc, #332]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe2:	4a52      	ldr	r2, [pc, #328]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8006fe4:	f023 0304 	bic.w	r3, r3, #4
 8006fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d016      	beq.n	8007022 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff4:	f7fd fcc0 	bl	8004978 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ffa:	e00a      	b.n	8007012 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffc:	f7fd fcbc 	bl	8004978 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800700a:	4293      	cmp	r3, r2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e138      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007012:	4b46      	ldr	r3, [pc, #280]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0ed      	beq.n	8006ffc <HAL_RCC_OscConfig+0x388>
 8007020:	e015      	b.n	800704e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007022:	f7fd fca9 	bl	8004978 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007028:	e00a      	b.n	8007040 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800702a:	f7fd fca5 	bl	8004978 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007038:	4293      	cmp	r3, r2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e121      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007040:	4b3a      	ldr	r3, [pc, #232]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8007042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1ed      	bne.n	800702a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800704e:	7ffb      	ldrb	r3, [r7, #31]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d105      	bne.n	8007060 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007054:	4b35      	ldr	r3, [pc, #212]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8007056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007058:	4a34      	ldr	r2, [pc, #208]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 800705a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800705e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b00      	cmp	r3, #0
 800706a:	d03c      	beq.n	80070e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01c      	beq.n	80070ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007074:	4b2d      	ldr	r3, [pc, #180]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8007076:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800707a:	4a2c      	ldr	r2, [pc, #176]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007084:	f7fd fc78 	bl	8004978 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800708c:	f7fd fc74 	bl	8004978 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e0f2      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800709e:	4b23      	ldr	r3, [pc, #140]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 80070a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0ef      	beq.n	800708c <HAL_RCC_OscConfig+0x418>
 80070ac:	e01b      	b.n	80070e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070ae:	4b1f      	ldr	r3, [pc, #124]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 80070b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070b4:	4a1d      	ldr	r2, [pc, #116]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070be:	f7fd fc5b 	bl	8004978 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070c6:	f7fd fc57 	bl	8004978 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e0d5      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070d8:	4b14      	ldr	r3, [pc, #80]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 80070da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1ef      	bne.n	80070c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 80c9 	beq.w	8007282 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070f0:	4b0e      	ldr	r3, [pc, #56]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 030c 	and.w	r3, r3, #12
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	f000 8083 	beq.w	8007204 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d15e      	bne.n	80071c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007106:	4b09      	ldr	r3, [pc, #36]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a08      	ldr	r2, [pc, #32]	@ (800712c <HAL_RCC_OscConfig+0x4b8>)
 800710c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007112:	f7fd fc31 	bl	8004978 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007118:	e00c      	b.n	8007134 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800711a:	f7fd fc2d 	bl	8004978 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d905      	bls.n	8007134 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e0ab      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
 800712c:	40021000 	.word	0x40021000
 8007130:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007134:	4b55      	ldr	r3, [pc, #340]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1ec      	bne.n	800711a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007140:	4b52      	ldr	r3, [pc, #328]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	4b52      	ldr	r3, [pc, #328]	@ (8007290 <HAL_RCC_OscConfig+0x61c>)
 8007146:	4013      	ands	r3, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6a11      	ldr	r1, [r2, #32]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007150:	3a01      	subs	r2, #1
 8007152:	0112      	lsls	r2, r2, #4
 8007154:	4311      	orrs	r1, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800715a:	0212      	lsls	r2, r2, #8
 800715c:	4311      	orrs	r1, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007162:	0852      	lsrs	r2, r2, #1
 8007164:	3a01      	subs	r2, #1
 8007166:	0552      	lsls	r2, r2, #21
 8007168:	4311      	orrs	r1, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800716e:	0852      	lsrs	r2, r2, #1
 8007170:	3a01      	subs	r2, #1
 8007172:	0652      	lsls	r2, r2, #25
 8007174:	4311      	orrs	r1, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800717a:	06d2      	lsls	r2, r2, #27
 800717c:	430a      	orrs	r2, r1
 800717e:	4943      	ldr	r1, [pc, #268]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 8007180:	4313      	orrs	r3, r2
 8007182:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007184:	4b41      	ldr	r3, [pc, #260]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a40      	ldr	r2, [pc, #256]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 800718a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800718e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007190:	4b3e      	ldr	r3, [pc, #248]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	4a3d      	ldr	r2, [pc, #244]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 8007196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800719a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719c:	f7fd fbec 	bl	8004978 <HAL_GetTick>
 80071a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071a2:	e008      	b.n	80071b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a4:	f7fd fbe8 	bl	8004978 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e066      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071b6:	4b35      	ldr	r3, [pc, #212]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f0      	beq.n	80071a4 <HAL_RCC_OscConfig+0x530>
 80071c2:	e05e      	b.n	8007282 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c4:	4b31      	ldr	r3, [pc, #196]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a30      	ldr	r2, [pc, #192]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 80071ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d0:	f7fd fbd2 	bl	8004978 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d8:	f7fd fbce 	bl	8004978 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e04c      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071ea:	4b28      	ldr	r3, [pc, #160]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80071f6:	4b25      	ldr	r3, [pc, #148]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	4924      	ldr	r1, [pc, #144]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 80071fc:	4b25      	ldr	r3, [pc, #148]	@ (8007294 <HAL_RCC_OscConfig+0x620>)
 80071fe:	4013      	ands	r3, r2
 8007200:	60cb      	str	r3, [r1, #12]
 8007202:	e03e      	b.n	8007282 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e039      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007210:	4b1e      	ldr	r3, [pc, #120]	@ (800728c <HAL_RCC_OscConfig+0x618>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f003 0203 	and.w	r2, r3, #3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	429a      	cmp	r2, r3
 8007222:	d12c      	bne.n	800727e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722e:	3b01      	subs	r3, #1
 8007230:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007232:	429a      	cmp	r2, r3
 8007234:	d123      	bne.n	800727e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007240:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007242:	429a      	cmp	r2, r3
 8007244:	d11b      	bne.n	800727e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007250:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d113      	bne.n	800727e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	085b      	lsrs	r3, r3, #1
 8007262:	3b01      	subs	r3, #1
 8007264:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007266:	429a      	cmp	r2, r3
 8007268:	d109      	bne.n	800727e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	3b01      	subs	r3, #1
 8007278:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800727a:	429a      	cmp	r2, r3
 800727c:	d001      	beq.n	8007282 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3720      	adds	r7, #32
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40021000 	.word	0x40021000
 8007290:	019f800c 	.word	0x019f800c
 8007294:	feeefffc 	.word	0xfeeefffc

08007298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e11e      	b.n	80074ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072b0:	4b91      	ldr	r3, [pc, #580]	@ (80074f8 <HAL_RCC_ClockConfig+0x260>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d910      	bls.n	80072e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072be:	4b8e      	ldr	r3, [pc, #568]	@ (80074f8 <HAL_RCC_ClockConfig+0x260>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f023 020f 	bic.w	r2, r3, #15
 80072c6:	498c      	ldr	r1, [pc, #560]	@ (80074f8 <HAL_RCC_ClockConfig+0x260>)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ce:	4b8a      	ldr	r3, [pc, #552]	@ (80074f8 <HAL_RCC_ClockConfig+0x260>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d001      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e106      	b.n	80074ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d073      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d129      	bne.n	8007348 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072f4:	4b81      	ldr	r3, [pc, #516]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e0f4      	b.n	80074ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007304:	f000 f99e 	bl	8007644 <RCC_GetSysClockFreqFromPLLSource>
 8007308:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	4a7c      	ldr	r2, [pc, #496]	@ (8007500 <HAL_RCC_ClockConfig+0x268>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d93f      	bls.n	8007392 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007312:	4b7a      	ldr	r3, [pc, #488]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007326:	2b00      	cmp	r3, #0
 8007328:	d033      	beq.n	8007392 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800732e:	2b00      	cmp	r3, #0
 8007330:	d12f      	bne.n	8007392 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007332:	4b72      	ldr	r3, [pc, #456]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800733a:	4a70      	ldr	r2, [pc, #448]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 800733c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007340:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007342:	2380      	movs	r3, #128	@ 0x80
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	e024      	b.n	8007392 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d107      	bne.n	8007360 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007350:	4b6a      	ldr	r3, [pc, #424]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d109      	bne.n	8007370 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e0c6      	b.n	80074ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007360:	4b66      	ldr	r3, [pc, #408]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e0be      	b.n	80074ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007370:	f000 f8ce 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 8007374:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4a61      	ldr	r2, [pc, #388]	@ (8007500 <HAL_RCC_ClockConfig+0x268>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d909      	bls.n	8007392 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800737e:	4b5f      	ldr	r3, [pc, #380]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007386:	4a5d      	ldr	r2, [pc, #372]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800738e:	2380      	movs	r3, #128	@ 0x80
 8007390:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007392:	4b5a      	ldr	r3, [pc, #360]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f023 0203 	bic.w	r2, r3, #3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4957      	ldr	r1, [pc, #348]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a4:	f7fd fae8 	bl	8004978 <HAL_GetTick>
 80073a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073aa:	e00a      	b.n	80073c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073ac:	f7fd fae4 	bl	8004978 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e095      	b.n	80074ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073c2:	4b4e      	ldr	r3, [pc, #312]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 020c 	and.w	r2, r3, #12
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d1eb      	bne.n	80073ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d023      	beq.n	8007428 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073ec:	4b43      	ldr	r3, [pc, #268]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	4a42      	ldr	r2, [pc, #264]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 80073f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80073f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007404:	4b3d      	ldr	r3, [pc, #244]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800740c:	4a3b      	ldr	r2, [pc, #236]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 800740e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007412:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007414:	4b39      	ldr	r3, [pc, #228]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	4936      	ldr	r1, [pc, #216]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007422:	4313      	orrs	r3, r2
 8007424:	608b      	str	r3, [r1, #8]
 8007426:	e008      	b.n	800743a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b80      	cmp	r3, #128	@ 0x80
 800742c:	d105      	bne.n	800743a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800742e:	4b33      	ldr	r3, [pc, #204]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	4a32      	ldr	r2, [pc, #200]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007438:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800743a:	4b2f      	ldr	r3, [pc, #188]	@ (80074f8 <HAL_RCC_ClockConfig+0x260>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d21d      	bcs.n	8007484 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007448:	4b2b      	ldr	r3, [pc, #172]	@ (80074f8 <HAL_RCC_ClockConfig+0x260>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f023 020f 	bic.w	r2, r3, #15
 8007450:	4929      	ldr	r1, [pc, #164]	@ (80074f8 <HAL_RCC_ClockConfig+0x260>)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	4313      	orrs	r3, r2
 8007456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007458:	f7fd fa8e 	bl	8004978 <HAL_GetTick>
 800745c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800745e:	e00a      	b.n	8007476 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007460:	f7fd fa8a 	bl	8004978 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746e:	4293      	cmp	r3, r2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e03b      	b.n	80074ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007476:	4b20      	ldr	r3, [pc, #128]	@ (80074f8 <HAL_RCC_ClockConfig+0x260>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d1ed      	bne.n	8007460 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007490:	4b1a      	ldr	r3, [pc, #104]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4917      	ldr	r1, [pc, #92]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074ae:	4b13      	ldr	r3, [pc, #76]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	490f      	ldr	r1, [pc, #60]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074c2:	f000 f825 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 80074c6:	4602      	mov	r2, r0
 80074c8:	4b0c      	ldr	r3, [pc, #48]	@ (80074fc <HAL_RCC_ClockConfig+0x264>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	091b      	lsrs	r3, r3, #4
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	490c      	ldr	r1, [pc, #48]	@ (8007504 <HAL_RCC_ClockConfig+0x26c>)
 80074d4:	5ccb      	ldrb	r3, [r1, r3]
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	4a0a      	ldr	r2, [pc, #40]	@ (8007508 <HAL_RCC_ClockConfig+0x270>)
 80074e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80074e2:	4b0a      	ldr	r3, [pc, #40]	@ (800750c <HAL_RCC_ClockConfig+0x274>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fd f9fa 	bl	80048e0 <HAL_InitTick>
 80074ec:	4603      	mov	r3, r0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	40022000 	.word	0x40022000
 80074fc:	40021000 	.word	0x40021000
 8007500:	04c4b400 	.word	0x04c4b400
 8007504:	0800de4c 	.word	0x0800de4c
 8007508:	20000258 	.word	0x20000258
 800750c:	2000025c 	.word	0x2000025c

08007510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007516:	4b2c      	ldr	r3, [pc, #176]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 030c 	and.w	r3, r3, #12
 800751e:	2b04      	cmp	r3, #4
 8007520:	d102      	bne.n	8007528 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007522:	4b2a      	ldr	r3, [pc, #168]	@ (80075cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	e047      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007528:	4b27      	ldr	r3, [pc, #156]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 030c 	and.w	r3, r3, #12
 8007530:	2b08      	cmp	r3, #8
 8007532:	d102      	bne.n	800753a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007534:	4b26      	ldr	r3, [pc, #152]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	e03e      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800753a:	4b23      	ldr	r3, [pc, #140]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 030c 	and.w	r3, r3, #12
 8007542:	2b0c      	cmp	r3, #12
 8007544:	d136      	bne.n	80075b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007546:	4b20      	ldr	r3, [pc, #128]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007550:	4b1d      	ldr	r3, [pc, #116]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	091b      	lsrs	r3, r3, #4
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	3301      	adds	r3, #1
 800755c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d10c      	bne.n	800757e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007564:	4a1a      	ldr	r2, [pc, #104]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	4a16      	ldr	r2, [pc, #88]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800756e:	68d2      	ldr	r2, [r2, #12]
 8007570:	0a12      	lsrs	r2, r2, #8
 8007572:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007576:	fb02 f303 	mul.w	r3, r2, r3
 800757a:	617b      	str	r3, [r7, #20]
      break;
 800757c:	e00c      	b.n	8007598 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800757e:	4a13      	ldr	r2, [pc, #76]	@ (80075cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	4a10      	ldr	r2, [pc, #64]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007588:	68d2      	ldr	r2, [r2, #12]
 800758a:	0a12      	lsrs	r2, r2, #8
 800758c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007590:	fb02 f303 	mul.w	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]
      break;
 8007596:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007598:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	0e5b      	lsrs	r3, r3, #25
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	3301      	adds	r3, #1
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	e001      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80075b8:	693b      	ldr	r3, [r7, #16]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40021000 	.word	0x40021000
 80075cc:	00f42400 	.word	0x00f42400
 80075d0:	016e3600 	.word	0x016e3600

080075d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075d8:	4b03      	ldr	r3, [pc, #12]	@ (80075e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80075da:	681b      	ldr	r3, [r3, #0]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000258 	.word	0x20000258

080075ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80075f0:	f7ff fff0 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 80075f4:	4602      	mov	r2, r0
 80075f6:	4b06      	ldr	r3, [pc, #24]	@ (8007610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	4904      	ldr	r1, [pc, #16]	@ (8007614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007602:	5ccb      	ldrb	r3, [r1, r3]
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800760c:	4618      	mov	r0, r3
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40021000 	.word	0x40021000
 8007614:	0800de5c 	.word	0x0800de5c

08007618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800761c:	f7ff ffda 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 8007620:	4602      	mov	r2, r0
 8007622:	4b06      	ldr	r3, [pc, #24]	@ (800763c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	0adb      	lsrs	r3, r3, #11
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	4904      	ldr	r1, [pc, #16]	@ (8007640 <HAL_RCC_GetPCLK2Freq+0x28>)
 800762e:	5ccb      	ldrb	r3, [r1, r3]
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007638:	4618      	mov	r0, r3
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40021000 	.word	0x40021000
 8007640:	0800de5c 	.word	0x0800de5c

08007644 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800764a:	4b1e      	ldr	r3, [pc, #120]	@ (80076c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007654:	4b1b      	ldr	r3, [pc, #108]	@ (80076c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	091b      	lsrs	r3, r3, #4
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	3301      	adds	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d10c      	bne.n	8007682 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007668:	4a17      	ldr	r2, [pc, #92]	@ (80076c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007670:	4a14      	ldr	r2, [pc, #80]	@ (80076c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007672:	68d2      	ldr	r2, [r2, #12]
 8007674:	0a12      	lsrs	r2, r2, #8
 8007676:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800767a:	fb02 f303 	mul.w	r3, r2, r3
 800767e:	617b      	str	r3, [r7, #20]
    break;
 8007680:	e00c      	b.n	800769c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007682:	4a12      	ldr	r2, [pc, #72]	@ (80076cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	fbb2 f3f3 	udiv	r3, r2, r3
 800768a:	4a0e      	ldr	r2, [pc, #56]	@ (80076c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800768c:	68d2      	ldr	r2, [r2, #12]
 800768e:	0a12      	lsrs	r2, r2, #8
 8007690:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007694:	fb02 f303 	mul.w	r3, r2, r3
 8007698:	617b      	str	r3, [r7, #20]
    break;
 800769a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800769c:	4b09      	ldr	r3, [pc, #36]	@ (80076c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	0e5b      	lsrs	r3, r3, #25
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	3301      	adds	r3, #1
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80076b6:	687b      	ldr	r3, [r7, #4]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40021000 	.word	0x40021000
 80076c8:	016e3600 	.word	0x016e3600
 80076cc:	00f42400 	.word	0x00f42400

080076d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076d8:	2300      	movs	r3, #0
 80076da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076dc:	2300      	movs	r3, #0
 80076de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8098 	beq.w	800781e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ee:	2300      	movs	r3, #0
 80076f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076f2:	4b43      	ldr	r3, [pc, #268]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10d      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076fe:	4b40      	ldr	r3, [pc, #256]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007702:	4a3f      	ldr	r2, [pc, #252]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007708:	6593      	str	r3, [r2, #88]	@ 0x58
 800770a:	4b3d      	ldr	r3, [pc, #244]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800770c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800770e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007716:	2301      	movs	r3, #1
 8007718:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800771a:	4b3a      	ldr	r3, [pc, #232]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a39      	ldr	r2, [pc, #228]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007724:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007726:	f7fd f927 	bl	8004978 <HAL_GetTick>
 800772a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800772c:	e009      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800772e:	f7fd f923 	bl	8004978 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d902      	bls.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	74fb      	strb	r3, [r7, #19]
        break;
 8007740:	e005      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007742:	4b30      	ldr	r3, [pc, #192]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0ef      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800774e:	7cfb      	ldrb	r3, [r7, #19]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d159      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007754:	4b2a      	ldr	r3, [pc, #168]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800775e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01e      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	429a      	cmp	r2, r3
 800776e:	d019      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007770:	4b23      	ldr	r3, [pc, #140]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800777a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800777c:	4b20      	ldr	r3, [pc, #128]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007782:	4a1f      	ldr	r2, [pc, #124]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800778c:	4b1c      	ldr	r3, [pc, #112]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007792:	4a1b      	ldr	r2, [pc, #108]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800779c:	4a18      	ldr	r2, [pc, #96]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d016      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ae:	f7fd f8e3 	bl	8004978 <HAL_GetTick>
 80077b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077b4:	e00b      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b6:	f7fd f8df 	bl	8004978 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d902      	bls.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	74fb      	strb	r3, [r7, #19]
            break;
 80077cc:	e006      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0ec      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80077dc:	7cfb      	ldrb	r3, [r7, #19]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10b      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077e2:	4b07      	ldr	r3, [pc, #28]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f0:	4903      	ldr	r1, [pc, #12]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80077f8:	e008      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077fa:	7cfb      	ldrb	r3, [r7, #19]
 80077fc:	74bb      	strb	r3, [r7, #18]
 80077fe:	e005      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007800:	40021000 	.word	0x40021000
 8007804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007808:	7cfb      	ldrb	r3, [r7, #19]
 800780a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800780c:	7c7b      	ldrb	r3, [r7, #17]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d105      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007812:	4ba7      	ldr	r3, [pc, #668]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007816:	4aa6      	ldr	r2, [pc, #664]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800781c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800782a:	4ba1      	ldr	r3, [pc, #644]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	f023 0203 	bic.w	r2, r3, #3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	499d      	ldr	r1, [pc, #628]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800783a:	4313      	orrs	r3, r2
 800783c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00a      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800784c:	4b98      	ldr	r3, [pc, #608]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800784e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007852:	f023 020c 	bic.w	r2, r3, #12
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	4995      	ldr	r1, [pc, #596]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800785c:	4313      	orrs	r3, r2
 800785e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0304 	and.w	r3, r3, #4
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800786e:	4b90      	ldr	r3, [pc, #576]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007874:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	498c      	ldr	r1, [pc, #560]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800787e:	4313      	orrs	r3, r2
 8007880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007890:	4b87      	ldr	r3, [pc, #540]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007896:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	4984      	ldr	r1, [pc, #528]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078b2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	497b      	ldr	r1, [pc, #492]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078d4:	4b76      	ldr	r3, [pc, #472]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	4973      	ldr	r1, [pc, #460]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078f6:	4b6e      	ldr	r3, [pc, #440]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	496a      	ldr	r1, [pc, #424]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007906:	4313      	orrs	r3, r2
 8007908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007918:	4b65      	ldr	r3, [pc, #404]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	4962      	ldr	r1, [pc, #392]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007928:	4313      	orrs	r3, r2
 800792a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800793a:	4b5d      	ldr	r3, [pc, #372]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800793c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007940:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	4959      	ldr	r1, [pc, #356]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800795c:	4b54      	ldr	r3, [pc, #336]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800795e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007962:	f023 0203 	bic.w	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796a:	4951      	ldr	r1, [pc, #324]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800796c:	4313      	orrs	r3, r2
 800796e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800797e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007984:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798c:	4948      	ldr	r1, [pc, #288]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800798e:	4313      	orrs	r3, r2
 8007990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800799c:	2b00      	cmp	r3, #0
 800799e:	d015      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079a0:	4b43      	ldr	r3, [pc, #268]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ae:	4940      	ldr	r1, [pc, #256]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079be:	d105      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079c0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	4a3a      	ldr	r2, [pc, #232]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d015      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079d8:	4b35      	ldr	r3, [pc, #212]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e6:	4932      	ldr	r1, [pc, #200]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079f6:	d105      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079f8:	4b2d      	ldr	r3, [pc, #180]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	4a2c      	ldr	r2, [pc, #176]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a02:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d015      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a10:	4b27      	ldr	r3, [pc, #156]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1e:	4924      	ldr	r1, [pc, #144]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a2e:	d105      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a30:	4b1f      	ldr	r3, [pc, #124]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d015      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a48:	4b19      	ldr	r3, [pc, #100]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a56:	4916      	ldr	r1, [pc, #88]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a66:	d105      	bne.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a68:	4b11      	ldr	r3, [pc, #68]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	4a10      	ldr	r2, [pc, #64]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d019      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	4908      	ldr	r1, [pc, #32]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a9e:	d109      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aa0:	4b03      	ldr	r3, [pc, #12]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4a02      	ldr	r2, [pc, #8]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aaa:	60d3      	str	r3, [r2, #12]
 8007aac:	e002      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007aae:	bf00      	nop
 8007ab0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d015      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ac0:	4b29      	ldr	r3, [pc, #164]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ace:	4926      	ldr	r1, [pc, #152]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ada:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ade:	d105      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ae0:	4b21      	ldr	r3, [pc, #132]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	4a20      	ldr	r2, [pc, #128]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d015      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007af8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007afe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b06:	4918      	ldr	r1, [pc, #96]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b16:	d105      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b18:	4b13      	ldr	r3, [pc, #76]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	4a12      	ldr	r2, [pc, #72]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d015      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b30:	4b0d      	ldr	r3, [pc, #52]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b3e:	490a      	ldr	r1, [pc, #40]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b4e:	d105      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b50:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	4a04      	ldr	r2, [pc, #16]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007b5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40021000 	.word	0x40021000

08007b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e09d      	b.n	8007cba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d108      	bne.n	8007b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b8e:	d009      	beq.n	8007ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	61da      	str	r2, [r3, #28]
 8007b96:	e005      	b.n	8007ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7fb ffa0 	bl	8003b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007be4:	d902      	bls.n	8007bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e002      	b.n	8007bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007bfa:	d007      	beq.n	8007c0c <HAL_SPI_Init+0xa0>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c04:	d002      	beq.n	8007c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c4e:	ea42 0103 	orr.w	r1, r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	f003 0204 	and.w	r2, r3, #4
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c88:	ea42 0103 	orr.w	r1, r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ca8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e054      	b.n	8007d80 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d111      	bne.n	8007d06 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 ffd4 	bl	8009c98 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a23      	ldr	r2, [pc, #140]	@ (8007d88 <HAL_TIM_Base_Init+0xc4>)
 8007cfc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3304      	adds	r3, #4
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f001 fb1d 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	080043b1 	.word	0x080043b1

08007d8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d001      	beq.n	8007da4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e04c      	b.n	8007e3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a26      	ldr	r2, [pc, #152]	@ (8007e4c <HAL_TIM_Base_Start+0xc0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d022      	beq.n	8007dfc <HAL_TIM_Base_Start+0x70>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dbe:	d01d      	beq.n	8007dfc <HAL_TIM_Base_Start+0x70>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a22      	ldr	r2, [pc, #136]	@ (8007e50 <HAL_TIM_Base_Start+0xc4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d018      	beq.n	8007dfc <HAL_TIM_Base_Start+0x70>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a21      	ldr	r2, [pc, #132]	@ (8007e54 <HAL_TIM_Base_Start+0xc8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d013      	beq.n	8007dfc <HAL_TIM_Base_Start+0x70>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8007e58 <HAL_TIM_Base_Start+0xcc>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00e      	beq.n	8007dfc <HAL_TIM_Base_Start+0x70>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a1e      	ldr	r2, [pc, #120]	@ (8007e5c <HAL_TIM_Base_Start+0xd0>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d009      	beq.n	8007dfc <HAL_TIM_Base_Start+0x70>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a1c      	ldr	r2, [pc, #112]	@ (8007e60 <HAL_TIM_Base_Start+0xd4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d004      	beq.n	8007dfc <HAL_TIM_Base_Start+0x70>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e64 <HAL_TIM_Base_Start+0xd8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d115      	bne.n	8007e28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	4b19      	ldr	r3, [pc, #100]	@ (8007e68 <HAL_TIM_Base_Start+0xdc>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b06      	cmp	r3, #6
 8007e0c:	d015      	beq.n	8007e3a <HAL_TIM_Base_Start+0xae>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e14:	d011      	beq.n	8007e3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0201 	orr.w	r2, r2, #1
 8007e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e26:	e008      	b.n	8007e3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	e000      	b.n	8007e3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	40012c00 	.word	0x40012c00
 8007e50:	40000400 	.word	0x40000400
 8007e54:	40000800 	.word	0x40000800
 8007e58:	40000c00 	.word	0x40000c00
 8007e5c:	40013400 	.word	0x40013400
 8007e60:	40014000 	.word	0x40014000
 8007e64:	40015000 	.word	0x40015000
 8007e68:	00010007 	.word	0x00010007

08007e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d001      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e054      	b.n	8007f2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a26      	ldr	r2, [pc, #152]	@ (8007f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d022      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eae:	d01d      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a22      	ldr	r2, [pc, #136]	@ (8007f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d018      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a21      	ldr	r2, [pc, #132]	@ (8007f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d013      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8007f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00e      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8007f4c <HAL_TIM_Base_Start_IT+0xe0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d009      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1c      	ldr	r2, [pc, #112]	@ (8007f50 <HAL_TIM_Base_Start_IT+0xe4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d004      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8007f54 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d115      	bne.n	8007f18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	4b19      	ldr	r3, [pc, #100]	@ (8007f58 <HAL_TIM_Base_Start_IT+0xec>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b06      	cmp	r3, #6
 8007efc:	d015      	beq.n	8007f2a <HAL_TIM_Base_Start_IT+0xbe>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f04:	d011      	beq.n	8007f2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f16:	e008      	b.n	8007f2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	e000      	b.n	8007f2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40012c00 	.word	0x40012c00
 8007f40:	40000400 	.word	0x40000400
 8007f44:	40000800 	.word	0x40000800
 8007f48:	40000c00 	.word	0x40000c00
 8007f4c:	40013400 	.word	0x40013400
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40015000 	.word	0x40015000
 8007f58:	00010007 	.word	0x00010007

08007f5c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e054      	b.n	8008018 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d111      	bne.n	8007f9e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 fe88 	bl	8009c98 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a23      	ldr	r2, [pc, #140]	@ (8008020 <HAL_TIM_OC_Init+0xc4>)
 8007f94:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3304      	adds	r3, #4
 8007fae:	4619      	mov	r1, r3
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	f001 f9d1 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	08008025 	.word	0x08008025

08008024 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e054      	b.n	80080f4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d111      	bne.n	800807a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 fe1a 	bl	8009c98 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a23      	ldr	r2, [pc, #140]	@ (80080fc <HAL_TIM_PWM_Init+0xc4>)
 8008070:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2202      	movs	r2, #2
 800807e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f001 f963 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	08008101 	.word	0x08008101

08008100 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d109      	bne.n	8008138 <HAL_TIM_PWM_Start+0x24>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b01      	cmp	r3, #1
 800812e:	bf14      	ite	ne
 8008130:	2301      	movne	r3, #1
 8008132:	2300      	moveq	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	e03c      	b.n	80081b2 <HAL_TIM_PWM_Start+0x9e>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b04      	cmp	r3, #4
 800813c:	d109      	bne.n	8008152 <HAL_TIM_PWM_Start+0x3e>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b01      	cmp	r3, #1
 8008148:	bf14      	ite	ne
 800814a:	2301      	movne	r3, #1
 800814c:	2300      	moveq	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	e02f      	b.n	80081b2 <HAL_TIM_PWM_Start+0x9e>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d109      	bne.n	800816c <HAL_TIM_PWM_Start+0x58>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	bf14      	ite	ne
 8008164:	2301      	movne	r3, #1
 8008166:	2300      	moveq	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	e022      	b.n	80081b2 <HAL_TIM_PWM_Start+0x9e>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b0c      	cmp	r3, #12
 8008170:	d109      	bne.n	8008186 <HAL_TIM_PWM_Start+0x72>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b01      	cmp	r3, #1
 800817c:	bf14      	ite	ne
 800817e:	2301      	movne	r3, #1
 8008180:	2300      	moveq	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	e015      	b.n	80081b2 <HAL_TIM_PWM_Start+0x9e>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b10      	cmp	r3, #16
 800818a:	d109      	bne.n	80081a0 <HAL_TIM_PWM_Start+0x8c>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	e008      	b.n	80081b2 <HAL_TIM_PWM_Start+0x9e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	bf14      	ite	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	2300      	moveq	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e0a6      	b.n	8008308 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <HAL_TIM_PWM_Start+0xb6>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081c8:	e023      	b.n	8008212 <HAL_TIM_PWM_Start+0xfe>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d104      	bne.n	80081da <HAL_TIM_PWM_Start+0xc6>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081d8:	e01b      	b.n	8008212 <HAL_TIM_PWM_Start+0xfe>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d104      	bne.n	80081ea <HAL_TIM_PWM_Start+0xd6>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081e8:	e013      	b.n	8008212 <HAL_TIM_PWM_Start+0xfe>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b0c      	cmp	r3, #12
 80081ee:	d104      	bne.n	80081fa <HAL_TIM_PWM_Start+0xe6>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081f8:	e00b      	b.n	8008212 <HAL_TIM_PWM_Start+0xfe>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b10      	cmp	r3, #16
 80081fe:	d104      	bne.n	800820a <HAL_TIM_PWM_Start+0xf6>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008208:	e003      	b.n	8008212 <HAL_TIM_PWM_Start+0xfe>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2202      	movs	r2, #2
 800820e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2201      	movs	r2, #1
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fd16 	bl	8009c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a3a      	ldr	r2, [pc, #232]	@ (8008310 <HAL_TIM_PWM_Start+0x1fc>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d018      	beq.n	800825c <HAL_TIM_PWM_Start+0x148>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a39      	ldr	r2, [pc, #228]	@ (8008314 <HAL_TIM_PWM_Start+0x200>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <HAL_TIM_PWM_Start+0x148>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a37      	ldr	r2, [pc, #220]	@ (8008318 <HAL_TIM_PWM_Start+0x204>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00e      	beq.n	800825c <HAL_TIM_PWM_Start+0x148>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a36      	ldr	r2, [pc, #216]	@ (800831c <HAL_TIM_PWM_Start+0x208>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d009      	beq.n	800825c <HAL_TIM_PWM_Start+0x148>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a34      	ldr	r2, [pc, #208]	@ (8008320 <HAL_TIM_PWM_Start+0x20c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIM_PWM_Start+0x148>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a33      	ldr	r2, [pc, #204]	@ (8008324 <HAL_TIM_PWM_Start+0x210>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d101      	bne.n	8008260 <HAL_TIM_PWM_Start+0x14c>
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <HAL_TIM_PWM_Start+0x14e>
 8008260:	2300      	movs	r3, #0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008274:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a25      	ldr	r2, [pc, #148]	@ (8008310 <HAL_TIM_PWM_Start+0x1fc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d022      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x1b2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008288:	d01d      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x1b2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a26      	ldr	r2, [pc, #152]	@ (8008328 <HAL_TIM_PWM_Start+0x214>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d018      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x1b2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a24      	ldr	r2, [pc, #144]	@ (800832c <HAL_TIM_PWM_Start+0x218>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x1b2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a23      	ldr	r2, [pc, #140]	@ (8008330 <HAL_TIM_PWM_Start+0x21c>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d00e      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x1b2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a19      	ldr	r2, [pc, #100]	@ (8008314 <HAL_TIM_PWM_Start+0x200>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d009      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x1b2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a18      	ldr	r2, [pc, #96]	@ (8008318 <HAL_TIM_PWM_Start+0x204>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d004      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x1b2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a18      	ldr	r2, [pc, #96]	@ (8008324 <HAL_TIM_PWM_Start+0x210>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d115      	bne.n	80082f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	4b19      	ldr	r3, [pc, #100]	@ (8008334 <HAL_TIM_PWM_Start+0x220>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b06      	cmp	r3, #6
 80082d6:	d015      	beq.n	8008304 <HAL_TIM_PWM_Start+0x1f0>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082de:	d011      	beq.n	8008304 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f0:	e008      	b.n	8008304 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f042 0201 	orr.w	r2, r2, #1
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e000      	b.n	8008306 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008304:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	40012c00 	.word	0x40012c00
 8008314:	40013400 	.word	0x40013400
 8008318:	40014000 	.word	0x40014000
 800831c:	40014400 	.word	0x40014400
 8008320:	40014800 	.word	0x40014800
 8008324:	40015000 	.word	0x40015000
 8008328:	40000400 	.word	0x40000400
 800832c:	40000800 	.word	0x40000800
 8008330:	40000c00 	.word	0x40000c00
 8008334:	00010007 	.word	0x00010007

08008338 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e04c      	b.n	80083e6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d111      	bne.n	800837c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 fc99 	bl	8009c98 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d102      	bne.n	8008374 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a1f      	ldr	r2, [pc, #124]	@ (80083f0 <HAL_TIM_OnePulse_Init+0xb8>)
 8008372:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f000 ffe2 	bl	8009358 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0208 	bic.w	r2, r2, #8
 80083a2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6819      	ldr	r1, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	080083f5 	.word	0x080083f5

080083f4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008418:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008420:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008428:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008430:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d108      	bne.n	800844a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d105      	bne.n	800844a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800843e:	7b7b      	ldrb	r3, [r7, #13]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d102      	bne.n	800844a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008444:	7b3b      	ldrb	r3, [r7, #12]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d001      	beq.n	800844e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e059      	b.n	8008502 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2202      	movs	r2, #2
 800845a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2202      	movs	r2, #2
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2202      	movs	r2, #2
 800846a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f042 0202 	orr.w	r2, r2, #2
 800847c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0204 	orr.w	r2, r2, #4
 800848c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2201      	movs	r2, #1
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fbd8 	bl	8009c4c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2201      	movs	r2, #1
 80084a2:	2104      	movs	r1, #4
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 fbd1 	bl	8009c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a17      	ldr	r2, [pc, #92]	@ (800850c <HAL_TIM_OnePulse_Start_IT+0x104>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d018      	beq.n	80084e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a15      	ldr	r2, [pc, #84]	@ (8008510 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d013      	beq.n	80084e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a14      	ldr	r2, [pc, #80]	@ (8008514 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00e      	beq.n	80084e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a12      	ldr	r2, [pc, #72]	@ (8008518 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d009      	beq.n	80084e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a11      	ldr	r2, [pc, #68]	@ (800851c <HAL_TIM_OnePulse_Start_IT+0x114>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d004      	beq.n	80084e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a0f      	ldr	r2, [pc, #60]	@ (8008520 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d101      	bne.n	80084ea <HAL_TIM_OnePulse_Start_IT+0xe2>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <HAL_TIM_OnePulse_Start_IT+0xe4>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d007      	beq.n	8008500 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	40012c00 	.word	0x40012c00
 8008510:	40013400 	.word	0x40013400
 8008514:	40014000 	.word	0x40014000
 8008518:	40014400 	.word	0x40014400
 800851c:	40014800 	.word	0x40014800
 8008520:	40015000 	.word	0x40015000

08008524 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e0a2      	b.n	800867e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d111      	bne.n	8008568 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fba3 	bl	8009c98 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a4a      	ldr	r2, [pc, #296]	@ (8008688 <HAL_TIM_Encoder_Init+0x164>)
 800855e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800857e:	f023 0307 	bic.w	r3, r3, #7
 8008582:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3304      	adds	r3, #4
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f000 fee2 	bl	8009358 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085bc:	f023 0303 	bic.w	r3, r3, #3
 80085c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	4313      	orrs	r3, r2
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80085da:	f023 030c 	bic.w	r3, r3, #12
 80085de:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	4313      	orrs	r3, r2
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	011a      	lsls	r2, r3, #4
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	031b      	lsls	r3, r3, #12
 800860a:	4313      	orrs	r3, r2
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	4313      	orrs	r3, r2
 8008610:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008618:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008620:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	4313      	orrs	r3, r2
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	080044c9 	.word	0x080044c9

0800868c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800869c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80086a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d110      	bne.n	80086de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d102      	bne.n	80086c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80086c2:	7b7b      	ldrb	r3, [r7, #13]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d001      	beq.n	80086cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e069      	b.n	80087a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086dc:	e031      	b.n	8008742 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d110      	bne.n	8008706 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d102      	bne.n	80086f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086ea:	7b3b      	ldrb	r3, [r7, #12]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d001      	beq.n	80086f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e055      	b.n	80087a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008704:	e01d      	b.n	8008742 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d108      	bne.n	800871e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d105      	bne.n	800871e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008712:	7b7b      	ldrb	r3, [r7, #13]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d102      	bne.n	800871e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008718:	7b3b      	ldrb	r3, [r7, #12]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d001      	beq.n	8008722 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e03e      	b.n	80087a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2202      	movs	r2, #2
 800873e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <HAL_TIM_Encoder_Start+0xc4>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b04      	cmp	r3, #4
 800874c:	d008      	beq.n	8008760 <HAL_TIM_Encoder_Start+0xd4>
 800874e:	e00f      	b.n	8008770 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2201      	movs	r2, #1
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f001 fa77 	bl	8009c4c <TIM_CCxChannelCmd>
      break;
 800875e:	e016      	b.n	800878e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2201      	movs	r2, #1
 8008766:	2104      	movs	r1, #4
 8008768:	4618      	mov	r0, r3
 800876a:	f001 fa6f 	bl	8009c4c <TIM_CCxChannelCmd>
      break;
 800876e:	e00e      	b.n	800878e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2201      	movs	r2, #1
 8008776:	2100      	movs	r1, #0
 8008778:	4618      	mov	r0, r3
 800877a:	f001 fa67 	bl	8009c4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2201      	movs	r2, #1
 8008784:	2104      	movs	r1, #4
 8008786:	4618      	mov	r0, r3
 8008788:	f001 fa60 	bl	8009c4c <TIM_CCxChannelCmd>
      break;
 800878c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0201 	orr.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d026      	beq.n	8008818 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d021      	beq.n	8008818 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f06f 0202 	mvn.w	r2, #2
 80087dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d005      	beq.n	80087fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	4798      	blx	r3
 80087fc:	e009      	b.n	8008812 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f003 0304 	and.w	r3, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d026      	beq.n	8008870 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d021      	beq.n	8008870 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f06f 0204 	mvn.w	r2, #4
 8008834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2202      	movs	r2, #2
 800883a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008846:	2b00      	cmp	r3, #0
 8008848:	d005      	beq.n	8008856 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	4798      	blx	r3
 8008854:	e009      	b.n	800886a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d026      	beq.n	80088c8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d021      	beq.n	80088c8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0208 	mvn.w	r2, #8
 800888c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2204      	movs	r2, #4
 8008892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	4798      	blx	r3
 80088ac:	e009      	b.n	80088c2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f003 0310 	and.w	r3, r3, #16
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d026      	beq.n	8008920 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d021      	beq.n	8008920 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0210 	mvn.w	r2, #16
 80088e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2208      	movs	r2, #8
 80088ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
 8008904:	e009      	b.n	800891a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00e      	beq.n	8008948 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f06f 0201 	mvn.w	r2, #1
 800893c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800894e:	2b00      	cmp	r3, #0
 8008950:	d104      	bne.n	800895c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00e      	beq.n	800897a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008962:	2b00      	cmp	r3, #0
 8008964:	d009      	beq.n	800897a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800896e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00e      	beq.n	80089a2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800898a:	2b00      	cmp	r3, #0
 800898c:	d009      	beq.n	80089a2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80089be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00e      	beq.n	80089f2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f06f 0220 	mvn.w	r2, #32
 80089e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00e      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00e      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00e      	beq.n	8008a6a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00e      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d101      	bne.n	8008aba <HAL_TIM_OC_ConfigChannel+0x1e>
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	e066      	b.n	8008b88 <HAL_TIM_OC_ConfigChannel+0xec>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b14      	cmp	r3, #20
 8008ac6:	d857      	bhi.n	8008b78 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ace:	bf00      	nop
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008b79 	.word	0x08008b79
 8008ad8:	08008b79 	.word	0x08008b79
 8008adc:	08008b79 	.word	0x08008b79
 8008ae0:	08008b33 	.word	0x08008b33
 8008ae4:	08008b79 	.word	0x08008b79
 8008ae8:	08008b79 	.word	0x08008b79
 8008aec:	08008b79 	.word	0x08008b79
 8008af0:	08008b41 	.word	0x08008b41
 8008af4:	08008b79 	.word	0x08008b79
 8008af8:	08008b79 	.word	0x08008b79
 8008afc:	08008b79 	.word	0x08008b79
 8008b00:	08008b4f 	.word	0x08008b4f
 8008b04:	08008b79 	.word	0x08008b79
 8008b08:	08008b79 	.word	0x08008b79
 8008b0c:	08008b79 	.word	0x08008b79
 8008b10:	08008b5d 	.word	0x08008b5d
 8008b14:	08008b79 	.word	0x08008b79
 8008b18:	08008b79 	.word	0x08008b79
 8008b1c:	08008b79 	.word	0x08008b79
 8008b20:	08008b6b 	.word	0x08008b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 fcc8 	bl	80094c0 <TIM_OC1_SetConfig>
      break;
 8008b30:	e025      	b.n	8008b7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 fd5b 	bl	80095f4 <TIM_OC2_SetConfig>
      break;
 8008b3e:	e01e      	b.n	8008b7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fde8 	bl	800971c <TIM_OC3_SetConfig>
      break;
 8008b4c:	e017      	b.n	8008b7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fe73 	bl	8009840 <TIM_OC4_SetConfig>
      break;
 8008b5a:	e010      	b.n	8008b7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68b9      	ldr	r1, [r7, #8]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 ff00 	bl	8009968 <TIM_OC5_SetConfig>
      break;
 8008b68:	e009      	b.n	8008b7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 ff63 	bl	8009a3c <TIM_OC6_SetConfig>
      break;
 8008b76:	e002      	b.n	8008b7e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e0ff      	b.n	8008dae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b14      	cmp	r3, #20
 8008bba:	f200 80f0 	bhi.w	8008d9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008c19 	.word	0x08008c19
 8008bc8:	08008d9f 	.word	0x08008d9f
 8008bcc:	08008d9f 	.word	0x08008d9f
 8008bd0:	08008d9f 	.word	0x08008d9f
 8008bd4:	08008c59 	.word	0x08008c59
 8008bd8:	08008d9f 	.word	0x08008d9f
 8008bdc:	08008d9f 	.word	0x08008d9f
 8008be0:	08008d9f 	.word	0x08008d9f
 8008be4:	08008c9b 	.word	0x08008c9b
 8008be8:	08008d9f 	.word	0x08008d9f
 8008bec:	08008d9f 	.word	0x08008d9f
 8008bf0:	08008d9f 	.word	0x08008d9f
 8008bf4:	08008cdb 	.word	0x08008cdb
 8008bf8:	08008d9f 	.word	0x08008d9f
 8008bfc:	08008d9f 	.word	0x08008d9f
 8008c00:	08008d9f 	.word	0x08008d9f
 8008c04:	08008d1d 	.word	0x08008d1d
 8008c08:	08008d9f 	.word	0x08008d9f
 8008c0c:	08008d9f 	.word	0x08008d9f
 8008c10:	08008d9f 	.word	0x08008d9f
 8008c14:	08008d5d 	.word	0x08008d5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fc4e 	bl	80094c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0208 	orr.w	r2, r2, #8
 8008c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0204 	bic.w	r2, r2, #4
 8008c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6999      	ldr	r1, [r3, #24]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	691a      	ldr	r2, [r3, #16]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	619a      	str	r2, [r3, #24]
      break;
 8008c56:	e0a5      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fcc8 	bl	80095f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699a      	ldr	r2, [r3, #24]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	699a      	ldr	r2, [r3, #24]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6999      	ldr	r1, [r3, #24]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	021a      	lsls	r2, r3, #8
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	619a      	str	r2, [r3, #24]
      break;
 8008c98:	e084      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68b9      	ldr	r1, [r7, #8]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fd3b 	bl	800971c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69da      	ldr	r2, [r3, #28]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0208 	orr.w	r2, r2, #8
 8008cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69da      	ldr	r2, [r3, #28]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0204 	bic.w	r2, r2, #4
 8008cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69d9      	ldr	r1, [r3, #28]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	691a      	ldr	r2, [r3, #16]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	61da      	str	r2, [r3, #28]
      break;
 8008cd8:	e064      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68b9      	ldr	r1, [r7, #8]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fdad 	bl	8009840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69da      	ldr	r2, [r3, #28]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	69da      	ldr	r2, [r3, #28]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69d9      	ldr	r1, [r3, #28]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	021a      	lsls	r2, r3, #8
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	61da      	str	r2, [r3, #28]
      break;
 8008d1a:	e043      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fe20 	bl	8009968 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0208 	orr.w	r2, r2, #8
 8008d36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0204 	bic.w	r2, r2, #4
 8008d46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	691a      	ldr	r2, [r3, #16]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d5a:	e023      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fe6a 	bl	8009a3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	021a      	lsls	r2, r3, #8
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d9c:	e002      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
      break;
 8008da2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop

08008db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e0f6      	b.n	8008fc2 <HAL_TIM_ConfigClockSource+0x20a>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008df2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a6f      	ldr	r2, [pc, #444]	@ (8008fcc <HAL_TIM_ConfigClockSource+0x214>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	f000 80c1 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008e14:	4a6d      	ldr	r2, [pc, #436]	@ (8008fcc <HAL_TIM_ConfigClockSource+0x214>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	f200 80c6 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e1c:	4a6c      	ldr	r2, [pc, #432]	@ (8008fd0 <HAL_TIM_ConfigClockSource+0x218>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	f000 80b9 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008e24:	4a6a      	ldr	r2, [pc, #424]	@ (8008fd0 <HAL_TIM_ConfigClockSource+0x218>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	f200 80be 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e2c:	4a69      	ldr	r2, [pc, #420]	@ (8008fd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	f000 80b1 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008e34:	4a67      	ldr	r2, [pc, #412]	@ (8008fd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	f200 80b6 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e3c:	4a66      	ldr	r2, [pc, #408]	@ (8008fd8 <HAL_TIM_ConfigClockSource+0x220>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	f000 80a9 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008e44:	4a64      	ldr	r2, [pc, #400]	@ (8008fd8 <HAL_TIM_ConfigClockSource+0x220>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	f200 80ae 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e4c:	4a63      	ldr	r2, [pc, #396]	@ (8008fdc <HAL_TIM_ConfigClockSource+0x224>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	f000 80a1 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008e54:	4a61      	ldr	r2, [pc, #388]	@ (8008fdc <HAL_TIM_ConfigClockSource+0x224>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	f200 80a6 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e5c:	4a60      	ldr	r2, [pc, #384]	@ (8008fe0 <HAL_TIM_ConfigClockSource+0x228>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	f000 8099 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008e64:	4a5e      	ldr	r2, [pc, #376]	@ (8008fe0 <HAL_TIM_ConfigClockSource+0x228>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	f200 809e 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e70:	f000 8091 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008e74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e78:	f200 8096 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e80:	f000 8089 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008e84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e88:	f200 808e 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e90:	d03e      	beq.n	8008f10 <HAL_TIM_ConfigClockSource+0x158>
 8008e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e96:	f200 8087 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e9e:	f000 8086 	beq.w	8008fae <HAL_TIM_ConfigClockSource+0x1f6>
 8008ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ea6:	d87f      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ea8:	2b70      	cmp	r3, #112	@ 0x70
 8008eaa:	d01a      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0x12a>
 8008eac:	2b70      	cmp	r3, #112	@ 0x70
 8008eae:	d87b      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008eb0:	2b60      	cmp	r3, #96	@ 0x60
 8008eb2:	d050      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x19e>
 8008eb4:	2b60      	cmp	r3, #96	@ 0x60
 8008eb6:	d877      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008eb8:	2b50      	cmp	r3, #80	@ 0x50
 8008eba:	d03c      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x17e>
 8008ebc:	2b50      	cmp	r3, #80	@ 0x50
 8008ebe:	d873      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ec0:	2b40      	cmp	r3, #64	@ 0x40
 8008ec2:	d058      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x1be>
 8008ec4:	2b40      	cmp	r3, #64	@ 0x40
 8008ec6:	d86f      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ec8:	2b30      	cmp	r3, #48	@ 0x30
 8008eca:	d064      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008ecc:	2b30      	cmp	r3, #48	@ 0x30
 8008ece:	d86b      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d060      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	d867      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d05c      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008edc:	2b10      	cmp	r3, #16
 8008ede:	d05a      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x1de>
 8008ee0:	e062      	b.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ef2:	f000 fe8b 	bl	8009c0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	609a      	str	r2, [r3, #8]
      break;
 8008f0e:	e04f      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f20:	f000 fe74 	bl	8009c0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f32:	609a      	str	r2, [r3, #8]
      break;
 8008f34:	e03c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 fde6 	bl	8009b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2150      	movs	r1, #80	@ 0x50
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fe3f 	bl	8009bd2 <TIM_ITRx_SetConfig>
      break;
 8008f54:	e02c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f62:	461a      	mov	r2, r3
 8008f64:	f000 fe05 	bl	8009b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2160      	movs	r1, #96	@ 0x60
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fe2f 	bl	8009bd2 <TIM_ITRx_SetConfig>
      break;
 8008f74:	e01c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f82:	461a      	mov	r2, r3
 8008f84:	f000 fdc6 	bl	8009b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2140      	movs	r1, #64	@ 0x40
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fe1f 	bl	8009bd2 <TIM_ITRx_SetConfig>
      break;
 8008f94:	e00c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f000 fe16 	bl	8009bd2 <TIM_ITRx_SetConfig>
      break;
 8008fa6:	e003      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	73fb      	strb	r3, [r7, #15]
      break;
 8008fac:	e000      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	00100070 	.word	0x00100070
 8008fd0:	00100060 	.word	0x00100060
 8008fd4:	00100050 	.word	0x00100050
 8008fd8:	00100040 	.word	0x00100040
 8008fdc:	00100030 	.word	0x00100030
 8008fe0:	00100020 	.word	0x00100020

08008fe4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	460b      	mov	r3, r1
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e14a      	b.n	800934a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b01      	cmp	r3, #1
 80090be:	f040 80dd 	bne.w	800927c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	2b1f      	cmp	r3, #31
 80090c6:	f200 80d6 	bhi.w	8009276 <HAL_TIM_RegisterCallback+0x1de>
 80090ca:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <HAL_TIM_RegisterCallback+0x38>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	08009151 	.word	0x08009151
 80090d4:	08009159 	.word	0x08009159
 80090d8:	08009161 	.word	0x08009161
 80090dc:	08009169 	.word	0x08009169
 80090e0:	08009171 	.word	0x08009171
 80090e4:	08009179 	.word	0x08009179
 80090e8:	08009181 	.word	0x08009181
 80090ec:	08009189 	.word	0x08009189
 80090f0:	08009191 	.word	0x08009191
 80090f4:	08009199 	.word	0x08009199
 80090f8:	080091a1 	.word	0x080091a1
 80090fc:	080091a9 	.word	0x080091a9
 8009100:	080091b1 	.word	0x080091b1
 8009104:	080091b9 	.word	0x080091b9
 8009108:	080091c3 	.word	0x080091c3
 800910c:	080091cd 	.word	0x080091cd
 8009110:	080091d7 	.word	0x080091d7
 8009114:	080091e1 	.word	0x080091e1
 8009118:	080091eb 	.word	0x080091eb
 800911c:	080091f5 	.word	0x080091f5
 8009120:	080091ff 	.word	0x080091ff
 8009124:	08009209 	.word	0x08009209
 8009128:	08009213 	.word	0x08009213
 800912c:	0800921d 	.word	0x0800921d
 8009130:	08009227 	.word	0x08009227
 8009134:	08009231 	.word	0x08009231
 8009138:	0800923b 	.word	0x0800923b
 800913c:	08009245 	.word	0x08009245
 8009140:	0800924f 	.word	0x0800924f
 8009144:	08009259 	.word	0x08009259
 8009148:	08009263 	.word	0x08009263
 800914c:	0800926d 	.word	0x0800926d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009156:	e0f7      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800915e:	e0f3      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009166:	e0ef      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800916e:	e0eb      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009176:	e0e7      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800917e:	e0e3      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009186:	e0df      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800918e:	e0db      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009196:	e0d7      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800919e:	e0d3      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80091a6:	e0cf      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80091ae:	e0cb      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80091b6:	e0c7      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80091c0:	e0c2      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80091ca:	e0bd      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80091d4:	e0b8      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80091de:	e0b3      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80091e8:	e0ae      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80091f2:	e0a9      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80091fc:	e0a4      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009206:	e09f      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009210:	e09a      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800921a:	e095      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009224:	e090      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800922e:	e08b      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009238:	e086      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009242:	e081      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800924c:	e07c      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009256:	e077      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009260:	e072      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800926a:	e06d      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009274:	e068      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	75fb      	strb	r3, [r7, #23]
        break;
 800927a:	e065      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	d15d      	bne.n	8009344 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009288:	7afb      	ldrb	r3, [r7, #11]
 800928a:	2b0d      	cmp	r3, #13
 800928c:	d857      	bhi.n	800933e <HAL_TIM_RegisterCallback+0x2a6>
 800928e:	a201      	add	r2, pc, #4	@ (adr r2, 8009294 <HAL_TIM_RegisterCallback+0x1fc>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	080092cd 	.word	0x080092cd
 8009298:	080092d5 	.word	0x080092d5
 800929c:	080092dd 	.word	0x080092dd
 80092a0:	080092e5 	.word	0x080092e5
 80092a4:	080092ed 	.word	0x080092ed
 80092a8:	080092f5 	.word	0x080092f5
 80092ac:	080092fd 	.word	0x080092fd
 80092b0:	08009305 	.word	0x08009305
 80092b4:	0800930d 	.word	0x0800930d
 80092b8:	08009315 	.word	0x08009315
 80092bc:	0800931d 	.word	0x0800931d
 80092c0:	08009325 	.word	0x08009325
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	08009335 	.word	0x08009335
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80092d2:	e039      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80092da:	e035      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80092e2:	e031      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80092ea:	e02d      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80092f2:	e029      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80092fa:	e025      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009302:	e021      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800930a:	e01d      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009312:	e019      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800931a:	e015      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009322:	e011      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800932a:	e00d      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009332:	e009      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800933c:	e004      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	75fb      	strb	r3, [r7, #23]
        break;
 8009342:	e001      	b.n	8009348 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009348:	7dfb      	ldrb	r3, [r7, #23]
}
 800934a:	4618      	mov	r0, r3
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop

08009358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a4c      	ldr	r2, [pc, #304]	@ (800949c <TIM_Base_SetConfig+0x144>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d017      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009376:	d013      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a49      	ldr	r2, [pc, #292]	@ (80094a0 <TIM_Base_SetConfig+0x148>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00f      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a48      	ldr	r2, [pc, #288]	@ (80094a4 <TIM_Base_SetConfig+0x14c>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d00b      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a47      	ldr	r2, [pc, #284]	@ (80094a8 <TIM_Base_SetConfig+0x150>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d007      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a46      	ldr	r2, [pc, #280]	@ (80094ac <TIM_Base_SetConfig+0x154>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d003      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a45      	ldr	r2, [pc, #276]	@ (80094b0 <TIM_Base_SetConfig+0x158>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d108      	bne.n	80093b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a39      	ldr	r2, [pc, #228]	@ (800949c <TIM_Base_SetConfig+0x144>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d023      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c0:	d01f      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a36      	ldr	r2, [pc, #216]	@ (80094a0 <TIM_Base_SetConfig+0x148>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d01b      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a35      	ldr	r2, [pc, #212]	@ (80094a4 <TIM_Base_SetConfig+0x14c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d017      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a34      	ldr	r2, [pc, #208]	@ (80094a8 <TIM_Base_SetConfig+0x150>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d013      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a33      	ldr	r2, [pc, #204]	@ (80094ac <TIM_Base_SetConfig+0x154>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d00f      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a33      	ldr	r2, [pc, #204]	@ (80094b4 <TIM_Base_SetConfig+0x15c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00b      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a32      	ldr	r2, [pc, #200]	@ (80094b8 <TIM_Base_SetConfig+0x160>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d007      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a31      	ldr	r2, [pc, #196]	@ (80094bc <TIM_Base_SetConfig+0x164>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d003      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a2c      	ldr	r2, [pc, #176]	@ (80094b0 <TIM_Base_SetConfig+0x158>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d108      	bne.n	8009414 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a18      	ldr	r2, [pc, #96]	@ (800949c <TIM_Base_SetConfig+0x144>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d013      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a1a      	ldr	r2, [pc, #104]	@ (80094ac <TIM_Base_SetConfig+0x154>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00f      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a1a      	ldr	r2, [pc, #104]	@ (80094b4 <TIM_Base_SetConfig+0x15c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00b      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a19      	ldr	r2, [pc, #100]	@ (80094b8 <TIM_Base_SetConfig+0x160>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d007      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a18      	ldr	r2, [pc, #96]	@ (80094bc <TIM_Base_SetConfig+0x164>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d003      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a13      	ldr	r2, [pc, #76]	@ (80094b0 <TIM_Base_SetConfig+0x158>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d103      	bne.n	8009470 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b01      	cmp	r3, #1
 8009480:	d105      	bne.n	800948e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f023 0201 	bic.w	r2, r3, #1
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	611a      	str	r2, [r3, #16]
  }
}
 800948e:	bf00      	nop
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40000400 	.word	0x40000400
 80094a4:	40000800 	.word	0x40000800
 80094a8:	40000c00 	.word	0x40000c00
 80094ac:	40013400 	.word	0x40013400
 80094b0:	40015000 	.word	0x40015000
 80094b4:	40014000 	.word	0x40014000
 80094b8:	40014400 	.word	0x40014400
 80094bc:	40014800 	.word	0x40014800

080094c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	f023 0201 	bic.w	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0303 	bic.w	r3, r3, #3
 80094fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f023 0302 	bic.w	r3, r3, #2
 800950c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4313      	orrs	r3, r2
 8009516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a30      	ldr	r2, [pc, #192]	@ (80095dc <TIM_OC1_SetConfig+0x11c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d013      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a2f      	ldr	r2, [pc, #188]	@ (80095e0 <TIM_OC1_SetConfig+0x120>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00f      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a2e      	ldr	r2, [pc, #184]	@ (80095e4 <TIM_OC1_SetConfig+0x124>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00b      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a2d      	ldr	r2, [pc, #180]	@ (80095e8 <TIM_OC1_SetConfig+0x128>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d007      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a2c      	ldr	r2, [pc, #176]	@ (80095ec <TIM_OC1_SetConfig+0x12c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a2b      	ldr	r2, [pc, #172]	@ (80095f0 <TIM_OC1_SetConfig+0x130>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d10c      	bne.n	8009562 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f023 0308 	bic.w	r3, r3, #8
 800954e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f023 0304 	bic.w	r3, r3, #4
 8009560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1d      	ldr	r2, [pc, #116]	@ (80095dc <TIM_OC1_SetConfig+0x11c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d013      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1c      	ldr	r2, [pc, #112]	@ (80095e0 <TIM_OC1_SetConfig+0x120>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d00f      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a1b      	ldr	r2, [pc, #108]	@ (80095e4 <TIM_OC1_SetConfig+0x124>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00b      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1a      	ldr	r2, [pc, #104]	@ (80095e8 <TIM_OC1_SetConfig+0x128>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d007      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a19      	ldr	r2, [pc, #100]	@ (80095ec <TIM_OC1_SetConfig+0x12c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d003      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a18      	ldr	r2, [pc, #96]	@ (80095f0 <TIM_OC1_SetConfig+0x130>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d111      	bne.n	80095b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	621a      	str	r2, [r3, #32]
}
 80095d0:	bf00      	nop
 80095d2:	371c      	adds	r7, #28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	40012c00 	.word	0x40012c00
 80095e0:	40013400 	.word	0x40013400
 80095e4:	40014000 	.word	0x40014000
 80095e8:	40014400 	.word	0x40014400
 80095ec:	40014800 	.word	0x40014800
 80095f0:	40015000 	.word	0x40015000

080095f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f023 0210 	bic.w	r2, r3, #16
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800962e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0320 	bic.w	r3, r3, #32
 8009642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a2c      	ldr	r2, [pc, #176]	@ (8009704 <TIM_OC2_SetConfig+0x110>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d007      	beq.n	8009668 <TIM_OC2_SetConfig+0x74>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a2b      	ldr	r2, [pc, #172]	@ (8009708 <TIM_OC2_SetConfig+0x114>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d003      	beq.n	8009668 <TIM_OC2_SetConfig+0x74>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a2a      	ldr	r2, [pc, #168]	@ (800970c <TIM_OC2_SetConfig+0x118>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d10d      	bne.n	8009684 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800966e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	011b      	lsls	r3, r3, #4
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	4313      	orrs	r3, r2
 800967a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009682:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a1f      	ldr	r2, [pc, #124]	@ (8009704 <TIM_OC2_SetConfig+0x110>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d013      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a1e      	ldr	r2, [pc, #120]	@ (8009708 <TIM_OC2_SetConfig+0x114>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00f      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a1e      	ldr	r2, [pc, #120]	@ (8009710 <TIM_OC2_SetConfig+0x11c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00b      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a1d      	ldr	r2, [pc, #116]	@ (8009714 <TIM_OC2_SetConfig+0x120>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d007      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009718 <TIM_OC2_SetConfig+0x124>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d003      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a17      	ldr	r2, [pc, #92]	@ (800970c <TIM_OC2_SetConfig+0x118>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d113      	bne.n	80096dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40012c00 	.word	0x40012c00
 8009708:	40013400 	.word	0x40013400
 800970c:	40015000 	.word	0x40015000
 8009710:	40014000 	.word	0x40014000
 8009714:	40014400 	.word	0x40014400
 8009718:	40014800 	.word	0x40014800

0800971c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800974a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800974e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0303 	bic.w	r3, r3, #3
 8009756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a2b      	ldr	r2, [pc, #172]	@ (8009828 <TIM_OC3_SetConfig+0x10c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_OC3_SetConfig+0x72>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a2a      	ldr	r2, [pc, #168]	@ (800982c <TIM_OC3_SetConfig+0x110>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_OC3_SetConfig+0x72>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a29      	ldr	r2, [pc, #164]	@ (8009830 <TIM_OC3_SetConfig+0x114>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d10d      	bne.n	80097aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a1e      	ldr	r2, [pc, #120]	@ (8009828 <TIM_OC3_SetConfig+0x10c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d013      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a1d      	ldr	r2, [pc, #116]	@ (800982c <TIM_OC3_SetConfig+0x110>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d00f      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009834 <TIM_OC3_SetConfig+0x118>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d00b      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009838 <TIM_OC3_SetConfig+0x11c>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d007      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a1b      	ldr	r2, [pc, #108]	@ (800983c <TIM_OC3_SetConfig+0x120>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d003      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a16      	ldr	r2, [pc, #88]	@ (8009830 <TIM_OC3_SetConfig+0x114>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d113      	bne.n	8009802 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	011b      	lsls	r3, r3, #4
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	011b      	lsls	r3, r3, #4
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	4313      	orrs	r3, r2
 8009800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	621a      	str	r2, [r3, #32]
}
 800981c:	bf00      	nop
 800981e:	371c      	adds	r7, #28
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	40012c00 	.word	0x40012c00
 800982c:	40013400 	.word	0x40013400
 8009830:	40015000 	.word	0x40015000
 8009834:	40014000 	.word	0x40014000
 8009838:	40014400 	.word	0x40014400
 800983c:	40014800 	.word	0x40014800

08009840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800986e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800987a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800988e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a2c      	ldr	r2, [pc, #176]	@ (8009950 <TIM_OC4_SetConfig+0x110>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d007      	beq.n	80098b4 <TIM_OC4_SetConfig+0x74>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a2b      	ldr	r2, [pc, #172]	@ (8009954 <TIM_OC4_SetConfig+0x114>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d003      	beq.n	80098b4 <TIM_OC4_SetConfig+0x74>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009958 <TIM_OC4_SetConfig+0x118>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d10d      	bne.n	80098d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	031b      	lsls	r3, r3, #12
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009950 <TIM_OC4_SetConfig+0x110>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d013      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a1e      	ldr	r2, [pc, #120]	@ (8009954 <TIM_OC4_SetConfig+0x114>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00f      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a1e      	ldr	r2, [pc, #120]	@ (800995c <TIM_OC4_SetConfig+0x11c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d00b      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a1d      	ldr	r2, [pc, #116]	@ (8009960 <TIM_OC4_SetConfig+0x120>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d007      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009964 <TIM_OC4_SetConfig+0x124>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a17      	ldr	r2, [pc, #92]	@ (8009958 <TIM_OC4_SetConfig+0x118>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d113      	bne.n	8009928 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009906:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800990e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	019b      	lsls	r3, r3, #6
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	019b      	lsls	r3, r3, #6
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	621a      	str	r2, [r3, #32]
}
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	40012c00 	.word	0x40012c00
 8009954:	40013400 	.word	0x40013400
 8009958:	40015000 	.word	0x40015000
 800995c:	40014000 	.word	0x40014000
 8009960:	40014400 	.word	0x40014400
 8009964:	40014800 	.word	0x40014800

08009968 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800998e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80099ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a19      	ldr	r2, [pc, #100]	@ (8009a24 <TIM_OC5_SetConfig+0xbc>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d013      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a18      	ldr	r2, [pc, #96]	@ (8009a28 <TIM_OC5_SetConfig+0xc0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d00f      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a17      	ldr	r2, [pc, #92]	@ (8009a2c <TIM_OC5_SetConfig+0xc4>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d00b      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a16      	ldr	r2, [pc, #88]	@ (8009a30 <TIM_OC5_SetConfig+0xc8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d007      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a15      	ldr	r2, [pc, #84]	@ (8009a34 <TIM_OC5_SetConfig+0xcc>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d003      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a14      	ldr	r2, [pc, #80]	@ (8009a38 <TIM_OC5_SetConfig+0xd0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d109      	bne.n	80099fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	021b      	lsls	r3, r3, #8
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	621a      	str	r2, [r3, #32]
}
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40012c00 	.word	0x40012c00
 8009a28:	40013400 	.word	0x40013400
 8009a2c:	40014000 	.word	0x40014000
 8009a30:	40014400 	.word	0x40014400
 8009a34:	40014800 	.word	0x40014800
 8009a38:	40015000 	.word	0x40015000

08009a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	021b      	lsls	r3, r3, #8
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	051b      	lsls	r3, r3, #20
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1a      	ldr	r2, [pc, #104]	@ (8009afc <TIM_OC6_SetConfig+0xc0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d013      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a19      	ldr	r2, [pc, #100]	@ (8009b00 <TIM_OC6_SetConfig+0xc4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00f      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a18      	ldr	r2, [pc, #96]	@ (8009b04 <TIM_OC6_SetConfig+0xc8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d00b      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a17      	ldr	r2, [pc, #92]	@ (8009b08 <TIM_OC6_SetConfig+0xcc>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d007      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <TIM_OC6_SetConfig+0xd0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d003      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a15      	ldr	r2, [pc, #84]	@ (8009b10 <TIM_OC6_SetConfig+0xd4>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d109      	bne.n	8009ad4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	029b      	lsls	r3, r3, #10
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	621a      	str	r2, [r3, #32]
}
 8009aee:	bf00      	nop
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40012c00 	.word	0x40012c00
 8009b00:	40013400 	.word	0x40013400
 8009b04:	40014000 	.word	0x40014000
 8009b08:	40014400 	.word	0x40014400
 8009b0c:	40014800 	.word	0x40014800
 8009b10:	40015000 	.word	0x40015000

08009b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	f023 0201 	bic.w	r2, r3, #1
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f023 030a 	bic.w	r3, r3, #10
 8009b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	621a      	str	r2, [r3, #32]
}
 8009b66:	bf00      	nop
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b087      	sub	sp, #28
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	f023 0210 	bic.w	r2, r3, #16
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	031b      	lsls	r3, r3, #12
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	621a      	str	r2, [r3, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	f043 0307 	orr.w	r3, r3, #7
 8009bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	609a      	str	r2, [r3, #8]
}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	021a      	lsls	r2, r3, #8
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	609a      	str	r2, [r3, #8]
}
 8009c40:	bf00      	nop
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 031f 	and.w	r3, r3, #31
 8009c5e:	2201      	movs	r2, #1
 8009c60:	fa02 f303 	lsl.w	r3, r2, r3
 8009c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a1a      	ldr	r2, [r3, #32]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	43db      	mvns	r3, r3
 8009c6e:	401a      	ands	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6a1a      	ldr	r2, [r3, #32]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f003 031f 	and.w	r3, r3, #31
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	fa01 f303 	lsl.w	r3, r1, r3
 8009c84:	431a      	orrs	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	621a      	str	r2, [r3, #32]
}
 8009c8a:	bf00      	nop
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
	...

08009c98 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a26      	ldr	r2, [pc, #152]	@ (8009d3c <TIM_ResetCallback+0xa4>)
 8009ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a25      	ldr	r2, [pc, #148]	@ (8009d40 <TIM_ResetCallback+0xa8>)
 8009cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a24      	ldr	r2, [pc, #144]	@ (8009d44 <TIM_ResetCallback+0xac>)
 8009cb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a23      	ldr	r2, [pc, #140]	@ (8009d48 <TIM_ResetCallback+0xb0>)
 8009cbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a22      	ldr	r2, [pc, #136]	@ (8009d4c <TIM_ResetCallback+0xb4>)
 8009cc4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a21      	ldr	r2, [pc, #132]	@ (8009d50 <TIM_ResetCallback+0xb8>)
 8009ccc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a20      	ldr	r2, [pc, #128]	@ (8009d54 <TIM_ResetCallback+0xbc>)
 8009cd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a1f      	ldr	r2, [pc, #124]	@ (8009d58 <TIM_ResetCallback+0xc0>)
 8009cdc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d5c <TIM_ResetCallback+0xc4>)
 8009ce4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a1d      	ldr	r2, [pc, #116]	@ (8009d60 <TIM_ResetCallback+0xc8>)
 8009cec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8009d64 <TIM_ResetCallback+0xcc>)
 8009cf4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8009d68 <TIM_ResetCallback+0xd0>)
 8009cfc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a1a      	ldr	r2, [pc, #104]	@ (8009d6c <TIM_ResetCallback+0xd4>)
 8009d04:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a19      	ldr	r2, [pc, #100]	@ (8009d70 <TIM_ResetCallback+0xd8>)
 8009d0c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a18      	ldr	r2, [pc, #96]	@ (8009d74 <TIM_ResetCallback+0xdc>)
 8009d14:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a17      	ldr	r2, [pc, #92]	@ (8009d78 <TIM_ResetCallback+0xe0>)
 8009d1c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a16      	ldr	r2, [pc, #88]	@ (8009d7c <TIM_ResetCallback+0xe4>)
 8009d24:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a15      	ldr	r2, [pc, #84]	@ (8009d80 <TIM_ResetCallback+0xe8>)
 8009d2c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	08003669 	.word	0x08003669
 8009d40:	08008fe5 	.word	0x08008fe5
 8009d44:	0800905d 	.word	0x0800905d
 8009d48:	08009071 	.word	0x08009071
 8009d4c:	0800900d 	.word	0x0800900d
 8009d50:	08009021 	.word	0x08009021
 8009d54:	08008ff9 	.word	0x08008ff9
 8009d58:	08009035 	.word	0x08009035
 8009d5c:	08009049 	.word	0x08009049
 8009d60:	08009085 	.word	0x08009085
 8009d64:	08009fd9 	.word	0x08009fd9
 8009d68:	08009fed 	.word	0x08009fed
 8009d6c:	0800a001 	.word	0x0800a001
 8009d70:	0800a015 	.word	0x0800a015
 8009d74:	0800a029 	.word	0x0800a029
 8009d78:	0800a03d 	.word	0x0800a03d
 8009d7c:	0800a051 	.word	0x0800a051
 8009d80:	0800a065 	.word	0x0800a065

08009d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e074      	b.n	8009e86 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a34      	ldr	r2, [pc, #208]	@ (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d009      	beq.n	8009dda <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a33      	ldr	r2, [pc, #204]	@ (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d004      	beq.n	8009dda <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a31      	ldr	r2, [pc, #196]	@ (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d108      	bne.n	8009dec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009de0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a21      	ldr	r2, [pc, #132]	@ (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d022      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e1c:	d01d      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a1f      	ldr	r2, [pc, #124]	@ (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d018      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d013      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d00e      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a15      	ldr	r2, [pc, #84]	@ (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d009      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a18      	ldr	r2, [pc, #96]	@ (8009eac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d004      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a11      	ldr	r2, [pc, #68]	@ (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d10c      	bne.n	8009e74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	40012c00 	.word	0x40012c00
 8009e98:	40013400 	.word	0x40013400
 8009e9c:	40015000 	.word	0x40015000
 8009ea0:	40000400 	.word	0x40000400
 8009ea4:	40000800 	.word	0x40000800
 8009ea8:	40000c00 	.word	0x40000c00
 8009eac:	40014000 	.word	0x40014000

08009eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e078      	b.n	8009fbe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	041b      	lsls	r3, r3, #16
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a1c      	ldr	r2, [pc, #112]	@ (8009fcc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d009      	beq.n	8009f72 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a1b      	ldr	r2, [pc, #108]	@ (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d004      	beq.n	8009f72 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a19      	ldr	r2, [pc, #100]	@ (8009fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d11c      	bne.n	8009fac <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f7c:	051b      	lsls	r3, r3, #20
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	40012c00 	.word	0x40012c00
 8009fd0:	40013400 	.word	0x40013400
 8009fd4:	40015000 	.word	0x40015000

08009fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e050      	b.n	800a12c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a090:	2b00      	cmp	r3, #0
 800a092:	d114      	bne.n	800a0be <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fe37 	bl	800ad10 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d103      	bne.n	800a0b4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a21      	ldr	r2, [pc, #132]	@ (800a134 <HAL_UART_Init+0xbc>)
 800a0b0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2224      	movs	r2, #36	@ 0x24
 800a0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0201 	bic.w	r2, r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d002      	beq.n	800a0e4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 f964 	bl	800b3ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fe65 	bl	800adb4 <UART_SetConfig>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d101      	bne.n	800a0f4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e01b      	b.n	800a12c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 f9e3 	bl	800b4f0 <UART_CheckIdleState>
 800a12a:	4603      	mov	r3, r0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	08004745 	.word	0x08004745

0800a138 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	460b      	mov	r3, r1
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d109      	bne.n	800a164 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a156:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e09c      	b.n	800a29e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d16c      	bne.n	800a248 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a16e:	7afb      	ldrb	r3, [r7, #11]
 800a170:	2b0c      	cmp	r3, #12
 800a172:	d85e      	bhi.n	800a232 <HAL_UART_RegisterCallback+0xfa>
 800a174:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <HAL_UART_RegisterCallback+0x44>)
 800a176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17a:	bf00      	nop
 800a17c:	0800a1b1 	.word	0x0800a1b1
 800a180:	0800a1bb 	.word	0x0800a1bb
 800a184:	0800a1c5 	.word	0x0800a1c5
 800a188:	0800a1cf 	.word	0x0800a1cf
 800a18c:	0800a1d9 	.word	0x0800a1d9
 800a190:	0800a1e3 	.word	0x0800a1e3
 800a194:	0800a1ed 	.word	0x0800a1ed
 800a198:	0800a1f7 	.word	0x0800a1f7
 800a19c:	0800a201 	.word	0x0800a201
 800a1a0:	0800a20b 	.word	0x0800a20b
 800a1a4:	0800a215 	.word	0x0800a215
 800a1a8:	0800a21f 	.word	0x0800a21f
 800a1ac:	0800a229 	.word	0x0800a229
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a1b8:	e070      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a1c2:	e06b      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a1cc:	e066      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a1d6:	e061      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a1e0:	e05c      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a1ea:	e057      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a1f4:	e052      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a1fe:	e04d      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a208:	e048      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a212:	e043      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a21c:	e03e      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a226:	e039      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a230:	e034      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a238:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	75fb      	strb	r3, [r7, #23]
        break;
 800a246:	e029      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d11a      	bne.n	800a288 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a252:	7afb      	ldrb	r3, [r7, #11]
 800a254:	2b0b      	cmp	r3, #11
 800a256:	d002      	beq.n	800a25e <HAL_UART_RegisterCallback+0x126>
 800a258:	2b0c      	cmp	r3, #12
 800a25a:	d005      	beq.n	800a268 <HAL_UART_RegisterCallback+0x130>
 800a25c:	e009      	b.n	800a272 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a266:	e019      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a270:	e014      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a278:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
        break;
 800a286:	e009      	b.n	800a29c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a28e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	371c      	adds	r7, #28
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop

0800a2ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	@ 0x28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2c0:	2b20      	cmp	r3, #32
 800a2c2:	d137      	bne.n	800a334 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <HAL_UART_Receive_IT+0x24>
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e030      	b.n	800a336 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a18      	ldr	r2, [pc, #96]	@ (800a340 <HAL_UART_Receive_IT+0x94>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d01f      	beq.n	800a324 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d018      	beq.n	800a324 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	e853 3f00 	ldrex	r3, [r3]
 800a2fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a310:	623b      	str	r3, [r7, #32]
 800a312:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a314:	69f9      	ldr	r1, [r7, #28]
 800a316:	6a3a      	ldr	r2, [r7, #32]
 800a318:	e841 2300 	strex	r3, r2, [r1]
 800a31c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1e6      	bne.n	800a2f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a324:	88fb      	ldrh	r3, [r7, #6]
 800a326:	461a      	mov	r2, r3
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f001 f9f8 	bl	800b720 <UART_Start_Receive_IT>
 800a330:	4603      	mov	r3, r0
 800a332:	e000      	b.n	800a336 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a334:	2302      	movs	r3, #2
  }
}
 800a336:	4618      	mov	r0, r3
 800a338:	3728      	adds	r7, #40	@ 0x28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	40008000 	.word	0x40008000

0800a344 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08a      	sub	sp, #40	@ 0x28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	4613      	mov	r3, r2
 800a350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a358:	2b20      	cmp	r3, #32
 800a35a:	d167      	bne.n	800a42c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <HAL_UART_Transmit_DMA+0x24>
 800a362:	88fb      	ldrh	r3, [r7, #6]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e060      	b.n	800a42e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	88fa      	ldrh	r2, [r7, #6]
 800a376:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	88fa      	ldrh	r2, [r7, #6]
 800a37e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2221      	movs	r2, #33	@ 0x21
 800a38e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a396:	2b00      	cmp	r3, #0
 800a398:	d028      	beq.n	800a3ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a39e:	4a26      	ldr	r2, [pc, #152]	@ (800a438 <HAL_UART_Transmit_DMA+0xf4>)
 800a3a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3a6:	4a25      	ldr	r2, [pc, #148]	@ (800a43c <HAL_UART_Transmit_DMA+0xf8>)
 800a3a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3ae:	4a24      	ldr	r2, [pc, #144]	@ (800a440 <HAL_UART_Transmit_DMA+0xfc>)
 800a3b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3328      	adds	r3, #40	@ 0x28
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	88fb      	ldrh	r3, [r7, #6]
 800a3ce:	f7fb ff55 	bl	800627c <HAL_DMA_Start_IT>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d009      	beq.n	800a3ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2210      	movs	r2, #16
 800a3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e020      	b.n	800a42e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2240      	movs	r2, #64	@ 0x40
 800a3f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	e853 3f00 	ldrex	r3, [r3]
 800a402:	613b      	str	r3, [r7, #16]
   return(result);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a40a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3308      	adds	r3, #8
 800a412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a414:	623a      	str	r2, [r7, #32]
 800a416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a418:	69f9      	ldr	r1, [r7, #28]
 800a41a:	6a3a      	ldr	r2, [r7, #32]
 800a41c:	e841 2300 	strex	r3, r2, [r1]
 800a420:	61bb      	str	r3, [r7, #24]
   return(result);
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1e5      	bne.n	800a3f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	e000      	b.n	800a42e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a42c:	2302      	movs	r3, #2
  }
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3728      	adds	r7, #40	@ 0x28
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	0800bab3 	.word	0x0800bab3
 800a43c:	0800bb51 	.word	0x0800bb51
 800a440:	0800bb71 	.word	0x0800bb71

0800a444 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b09a      	sub	sp, #104	@ 0x68
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a454:	e853 3f00 	ldrex	r3, [r3]
 800a458:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a45a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a45c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a460:	667b      	str	r3, [r7, #100]	@ 0x64
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a46a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a46c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a470:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e6      	bne.n	800a44c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3308      	adds	r3, #8
 800a484:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a488:	e853 3f00 	ldrex	r3, [r3]
 800a48c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a494:	f023 0301 	bic.w	r3, r3, #1
 800a498:	663b      	str	r3, [r7, #96]	@ 0x60
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4a2:	643a      	str	r2, [r7, #64]	@ 0x40
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e3      	bne.n	800a47e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d118      	bne.n	800a4f0 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	f023 0310 	bic.w	r3, r3, #16
 800a4d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4fa:	2b40      	cmp	r3, #64	@ 0x40
 800a4fc:	d13b      	bne.n	800a576 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3308      	adds	r3, #8
 800a504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a514:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3308      	adds	r3, #8
 800a51c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a51e:	61ba      	str	r2, [r7, #24]
 800a520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	6979      	ldr	r1, [r7, #20]
 800a524:	69ba      	ldr	r2, [r7, #24]
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	613b      	str	r3, [r7, #16]
   return(result);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e5      	bne.n	800a4fe <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d01c      	beq.n	800a576 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a542:	2200      	movs	r2, #0
 800a544:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fb ff10 	bl	8006372 <HAL_DMA_Abort>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00e      	beq.n	800a576 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fc f876 	bl	8006650 <HAL_DMA_GetError>
 800a564:	4603      	mov	r3, r0
 800a566:	2b20      	cmp	r3, #32
 800a568:	d105      	bne.n	800a576 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2210      	movs	r2, #16
 800a56e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e017      	b.n	800a5a6 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	220f      	movs	r2, #15
 800a584:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	699a      	ldr	r2, [r3, #24]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f042 0208 	orr.w	r2, r2, #8
 800a594:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2220      	movs	r2, #32
 800a59a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3768      	adds	r7, #104	@ 0x68
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
	...

0800a5b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b0ba      	sub	sp, #232	@ 0xe8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a5da:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a5de:	4013      	ands	r3, r2
 800a5e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a5e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d11b      	bne.n	800a624 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f0:	f003 0320 	and.w	r3, r3, #32
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d015      	beq.n	800a624 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5fc:	f003 0320 	and.w	r3, r3, #32
 800a600:	2b00      	cmp	r3, #0
 800a602:	d105      	bne.n	800a610 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d009      	beq.n	800a624 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 8312 	beq.w	800ac3e <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	4798      	blx	r3
      }
      return;
 800a622:	e30c      	b.n	800ac3e <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 8129 	beq.w	800a880 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a62e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a632:	4b90      	ldr	r3, [pc, #576]	@ (800a874 <HAL_UART_IRQHandler+0x2c4>)
 800a634:	4013      	ands	r3, r2
 800a636:	2b00      	cmp	r3, #0
 800a638:	d106      	bne.n	800a648 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a63a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a63e:	4b8e      	ldr	r3, [pc, #568]	@ (800a878 <HAL_UART_IRQHandler+0x2c8>)
 800a640:	4013      	ands	r3, r2
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 811c 	beq.w	800a880 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d011      	beq.n	800a678 <HAL_UART_IRQHandler+0xc8>
 800a654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00b      	beq.n	800a678 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2201      	movs	r2, #1
 800a666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a66e:	f043 0201 	orr.w	r2, r3, #1
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d011      	beq.n	800a6a8 <HAL_UART_IRQHandler+0xf8>
 800a684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00b      	beq.n	800a6a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2202      	movs	r2, #2
 800a696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a69e:	f043 0204 	orr.w	r2, r3, #4
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d011      	beq.n	800a6d8 <HAL_UART_IRQHandler+0x128>
 800a6b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6b8:	f003 0301 	and.w	r3, r3, #1
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00b      	beq.n	800a6d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2204      	movs	r2, #4
 800a6c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ce:	f043 0202 	orr.w	r2, r3, #2
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6dc:	f003 0308 	and.w	r3, r3, #8
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d017      	beq.n	800a714 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d105      	bne.n	800a6fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a6f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a6f4:	4b5f      	ldr	r3, [pc, #380]	@ (800a874 <HAL_UART_IRQHandler+0x2c4>)
 800a6f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2208      	movs	r2, #8
 800a702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a70a:	f043 0208 	orr.w	r2, r3, #8
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d012      	beq.n	800a746 <HAL_UART_IRQHandler+0x196>
 800a720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00c      	beq.n	800a746 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a73c:	f043 0220 	orr.w	r2, r3, #32
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 8278 	beq.w	800ac42 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d013      	beq.n	800a786 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a75e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a762:	f003 0320 	and.w	r3, r3, #32
 800a766:	2b00      	cmp	r3, #0
 800a768:	d105      	bne.n	800a776 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a76a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a76e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d007      	beq.n	800a786 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a78c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a79a:	2b40      	cmp	r3, #64	@ 0x40
 800a79c:	d005      	beq.n	800a7aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a79e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d058      	beq.n	800a85c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 f91b 	bl	800b9e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ba:	2b40      	cmp	r3, #64	@ 0x40
 800a7bc:	d148      	bne.n	800a850 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3308      	adds	r3, #8
 800a7c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a7d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a7d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a7ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a7ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a7f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1d9      	bne.n	800a7be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a810:	2b00      	cmp	r3, #0
 800a812:	d017      	beq.n	800a844 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a81a:	4a18      	ldr	r2, [pc, #96]	@ (800a87c <HAL_UART_IRQHandler+0x2cc>)
 800a81c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a824:	4618      	mov	r0, r3
 800a826:	f7fb fdfd 	bl	8006424 <HAL_DMA_Abort_IT>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d01f      	beq.n	800a870 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a83e:	4610      	mov	r0, r2
 800a840:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a842:	e015      	b.n	800a870 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a84e:	e00f      	b.n	800a870 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85a:	e009      	b.n	800a870 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a86e:	e1e8      	b.n	800ac42 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a870:	bf00      	nop
    return;
 800a872:	e1e6      	b.n	800ac42 <HAL_UART_IRQHandler+0x692>
 800a874:	10000001 	.word	0x10000001
 800a878:	04000120 	.word	0x04000120
 800a87c:	0800bbf5 	.word	0x0800bbf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a884:	2b01      	cmp	r3, #1
 800a886:	f040 8176 	bne.w	800ab76 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a88e:	f003 0310 	and.w	r3, r3, #16
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 816f 	beq.w	800ab76 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a89c:	f003 0310 	and.w	r3, r3, #16
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 8168 	beq.w	800ab76 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2210      	movs	r2, #16
 800a8ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8b8:	2b40      	cmp	r3, #64	@ 0x40
 800a8ba:	f040 80dc 	bne.w	800aa76 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 80b1 	beq.w	800aa38 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	f080 80a9 	bcs.w	800aa38 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f040 8087 	bne.w	800aa12 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a91c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a92e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a932:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a93a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1da      	bne.n	800a904 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3308      	adds	r3, #8
 800a954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a958:	e853 3f00 	ldrex	r3, [r3]
 800a95c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a95e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a960:	f023 0301 	bic.w	r3, r3, #1
 800a964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a972:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a976:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a978:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a97a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e1      	bne.n	800a94e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3308      	adds	r3, #8
 800a990:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a99a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a99c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a9ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a9b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a9b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a9b6:	e841 2300 	strex	r3, r2, [r1]
 800a9ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a9bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1e3      	bne.n	800a98a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2220      	movs	r2, #32
 800a9c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9d8:	e853 3f00 	ldrex	r3, [r3]
 800a9dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9e0:	f023 0310 	bic.w	r3, r3, #16
 800a9e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9fa:	e841 2300 	strex	r3, r2, [r1]
 800a9fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1e4      	bne.n	800a9d0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fb fcb0 	bl	8006372 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2202      	movs	r2, #2
 800aa16:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800aa2a:	b292      	uxth	r2, r2
 800aa2c:	1a8a      	subs	r2, r1, r2
 800aa2e:	b292      	uxth	r2, r2
 800aa30:	4611      	mov	r1, r2
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aa36:	e106      	b.n	800ac46 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa42:	429a      	cmp	r2, r3
 800aa44:	f040 80ff 	bne.w	800ac46 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b20      	cmp	r3, #32
 800aa58:	f040 80f5 	bne.w	800ac46 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aa6e:	4611      	mov	r1, r2
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	4798      	blx	r3
      return;
 800aa74:	e0e7      	b.n	800ac46 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80d9 	beq.w	800ac4a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800aa98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 80d4 	beq.w	800ac4a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aab6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aac4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aac6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aacc:	e841 2300 	strex	r3, r2, [r1]
 800aad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1e4      	bne.n	800aaa2 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3308      	adds	r3, #8
 800aade:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae2:	e853 3f00 	ldrex	r3, [r3]
 800aae6:	623b      	str	r3, [r7, #32]
   return(result);
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaee:	f023 0301 	bic.w	r3, r3, #1
 800aaf2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3308      	adds	r3, #8
 800aafc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab00:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab08:	e841 2300 	strex	r3, r2, [r1]
 800ab0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e1      	bne.n	800aad8 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2220      	movs	r2, #32
 800ab18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f023 0310 	bic.w	r3, r3, #16
 800ab3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	461a      	mov	r2, r3
 800ab46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab4a:	61fb      	str	r3, [r7, #28]
 800ab4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4e:	69b9      	ldr	r1, [r7, #24]
 800ab50:	69fa      	ldr	r2, [r7, #28]
 800ab52:	e841 2300 	strex	r3, r2, [r1]
 800ab56:	617b      	str	r3, [r7, #20]
   return(result);
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1e4      	bne.n	800ab28 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2202      	movs	r2, #2
 800ab62:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab6a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ab6e:	4611      	mov	r1, r2
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab74:	e069      	b.n	800ac4a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d010      	beq.n	800aba4 <HAL_UART_IRQHandler+0x5f4>
 800ab82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ab96:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aba2:	e055      	b.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abac:	2b00      	cmp	r3, #0
 800abae:	d014      	beq.n	800abda <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800abb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d105      	bne.n	800abc8 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800abbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d008      	beq.n	800abda <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d03e      	beq.n	800ac4e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	4798      	blx	r3
    }
    return;
 800abd8:	e039      	b.n	800ac4e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800abda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d009      	beq.n	800abfa <HAL_UART_IRQHandler+0x64a>
 800abe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f001 f812 	bl	800bc1c <UART_EndTransmit_IT>
    return;
 800abf8:	e02a      	b.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800abfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00b      	beq.n	800ac1e <HAL_UART_IRQHandler+0x66e>
 800ac06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d005      	beq.n	800ac1e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac1c:	e018      	b.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d012      	beq.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
 800ac2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	da0e      	bge.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac3c:	e008      	b.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ac3e:	bf00      	nop
 800ac40:	e006      	b.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ac42:	bf00      	nop
 800ac44:	e004      	b.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ac46:	bf00      	nop
 800ac48:	e002      	b.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ac4a:	bf00      	nop
 800ac4c:	e000      	b.n	800ac50 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ac4e:	bf00      	nop
  }
}
 800ac50:	37e8      	adds	r7, #232	@ 0xe8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop

0800ac58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a1a      	ldr	r2, [pc, #104]	@ (800ad84 <UART_InitCallbacksToDefault+0x74>)
 800ad1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a19      	ldr	r2, [pc, #100]	@ (800ad88 <UART_InitCallbacksToDefault+0x78>)
 800ad24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a18      	ldr	r2, [pc, #96]	@ (800ad8c <UART_InitCallbacksToDefault+0x7c>)
 800ad2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a17      	ldr	r2, [pc, #92]	@ (800ad90 <UART_InitCallbacksToDefault+0x80>)
 800ad34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a16      	ldr	r2, [pc, #88]	@ (800ad94 <UART_InitCallbacksToDefault+0x84>)
 800ad3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a15      	ldr	r2, [pc, #84]	@ (800ad98 <UART_InitCallbacksToDefault+0x88>)
 800ad44:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a14      	ldr	r2, [pc, #80]	@ (800ad9c <UART_InitCallbacksToDefault+0x8c>)
 800ad4c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a13      	ldr	r2, [pc, #76]	@ (800ada0 <UART_InitCallbacksToDefault+0x90>)
 800ad54:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a12      	ldr	r2, [pc, #72]	@ (800ada4 <UART_InitCallbacksToDefault+0x94>)
 800ad5c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a11      	ldr	r2, [pc, #68]	@ (800ada8 <UART_InitCallbacksToDefault+0x98>)
 800ad64:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a10      	ldr	r2, [pc, #64]	@ (800adac <UART_InitCallbacksToDefault+0x9c>)
 800ad6c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a0f      	ldr	r2, [pc, #60]	@ (800adb0 <UART_InitCallbacksToDefault+0xa0>)
 800ad74:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	0800ac6d 	.word	0x0800ac6d
 800ad88:	0800ac59 	.word	0x0800ac59
 800ad8c:	0800ac95 	.word	0x0800ac95
 800ad90:	0800ac81 	.word	0x0800ac81
 800ad94:	0800aca9 	.word	0x0800aca9
 800ad98:	0800acbd 	.word	0x0800acbd
 800ad9c:	0800acd1 	.word	0x0800acd1
 800ada0:	0800ace5 	.word	0x0800ace5
 800ada4:	0800c6e1 	.word	0x0800c6e1
 800ada8:	0800c6f5 	.word	0x0800c6f5
 800adac:	0800c709 	.word	0x0800c709
 800adb0:	0800acf9 	.word	0x0800acf9

0800adb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adb8:	b08c      	sub	sp, #48	@ 0x30
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	689a      	ldr	r2, [r3, #8]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	431a      	orrs	r2, r3
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	431a      	orrs	r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	4313      	orrs	r3, r2
 800adda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	4baa      	ldr	r3, [pc, #680]	@ (800b08c <UART_SetConfig+0x2d8>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	6812      	ldr	r2, [r2, #0]
 800adea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adec:	430b      	orrs	r3, r1
 800adee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	68da      	ldr	r2, [r3, #12]
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	430a      	orrs	r2, r1
 800ae04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a9f      	ldr	r2, [pc, #636]	@ (800b090 <UART_SetConfig+0x2dc>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d004      	beq.n	800ae20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ae2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	6812      	ldr	r2, [r2, #0]
 800ae32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae34:	430b      	orrs	r3, r1
 800ae36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae3e:	f023 010f 	bic.w	r1, r3, #15
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a90      	ldr	r2, [pc, #576]	@ (800b094 <UART_SetConfig+0x2e0>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d125      	bne.n	800aea4 <UART_SetConfig+0xf0>
 800ae58:	4b8f      	ldr	r3, [pc, #572]	@ (800b098 <UART_SetConfig+0x2e4>)
 800ae5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae5e:	f003 0303 	and.w	r3, r3, #3
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d81a      	bhi.n	800ae9c <UART_SetConfig+0xe8>
 800ae66:	a201      	add	r2, pc, #4	@ (adr r2, 800ae6c <UART_SetConfig+0xb8>)
 800ae68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6c:	0800ae7d 	.word	0x0800ae7d
 800ae70:	0800ae8d 	.word	0x0800ae8d
 800ae74:	0800ae85 	.word	0x0800ae85
 800ae78:	0800ae95 	.word	0x0800ae95
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae82:	e116      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800ae84:	2302      	movs	r3, #2
 800ae86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae8a:	e112      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae92:	e10e      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800ae94:	2308      	movs	r3, #8
 800ae96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae9a:	e10a      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800ae9c:	2310      	movs	r3, #16
 800ae9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea2:	e106      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a7c      	ldr	r2, [pc, #496]	@ (800b09c <UART_SetConfig+0x2e8>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d138      	bne.n	800af20 <UART_SetConfig+0x16c>
 800aeae:	4b7a      	ldr	r3, [pc, #488]	@ (800b098 <UART_SetConfig+0x2e4>)
 800aeb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb4:	f003 030c 	and.w	r3, r3, #12
 800aeb8:	2b0c      	cmp	r3, #12
 800aeba:	d82d      	bhi.n	800af18 <UART_SetConfig+0x164>
 800aebc:	a201      	add	r2, pc, #4	@ (adr r2, 800aec4 <UART_SetConfig+0x110>)
 800aebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec2:	bf00      	nop
 800aec4:	0800aef9 	.word	0x0800aef9
 800aec8:	0800af19 	.word	0x0800af19
 800aecc:	0800af19 	.word	0x0800af19
 800aed0:	0800af19 	.word	0x0800af19
 800aed4:	0800af09 	.word	0x0800af09
 800aed8:	0800af19 	.word	0x0800af19
 800aedc:	0800af19 	.word	0x0800af19
 800aee0:	0800af19 	.word	0x0800af19
 800aee4:	0800af01 	.word	0x0800af01
 800aee8:	0800af19 	.word	0x0800af19
 800aeec:	0800af19 	.word	0x0800af19
 800aef0:	0800af19 	.word	0x0800af19
 800aef4:	0800af11 	.word	0x0800af11
 800aef8:	2300      	movs	r3, #0
 800aefa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aefe:	e0d8      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af00:	2302      	movs	r3, #2
 800af02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af06:	e0d4      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af08:	2304      	movs	r3, #4
 800af0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af0e:	e0d0      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af10:	2308      	movs	r3, #8
 800af12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af16:	e0cc      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af18:	2310      	movs	r3, #16
 800af1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af1e:	e0c8      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a5e      	ldr	r2, [pc, #376]	@ (800b0a0 <UART_SetConfig+0x2ec>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d125      	bne.n	800af76 <UART_SetConfig+0x1c2>
 800af2a:	4b5b      	ldr	r3, [pc, #364]	@ (800b098 <UART_SetConfig+0x2e4>)
 800af2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800af34:	2b30      	cmp	r3, #48	@ 0x30
 800af36:	d016      	beq.n	800af66 <UART_SetConfig+0x1b2>
 800af38:	2b30      	cmp	r3, #48	@ 0x30
 800af3a:	d818      	bhi.n	800af6e <UART_SetConfig+0x1ba>
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	d00a      	beq.n	800af56 <UART_SetConfig+0x1a2>
 800af40:	2b20      	cmp	r3, #32
 800af42:	d814      	bhi.n	800af6e <UART_SetConfig+0x1ba>
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <UART_SetConfig+0x19a>
 800af48:	2b10      	cmp	r3, #16
 800af4a:	d008      	beq.n	800af5e <UART_SetConfig+0x1aa>
 800af4c:	e00f      	b.n	800af6e <UART_SetConfig+0x1ba>
 800af4e:	2300      	movs	r3, #0
 800af50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af54:	e0ad      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af56:	2302      	movs	r3, #2
 800af58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af5c:	e0a9      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af5e:	2304      	movs	r3, #4
 800af60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af64:	e0a5      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af66:	2308      	movs	r3, #8
 800af68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af6c:	e0a1      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af6e:	2310      	movs	r3, #16
 800af70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af74:	e09d      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a4a      	ldr	r2, [pc, #296]	@ (800b0a4 <UART_SetConfig+0x2f0>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d125      	bne.n	800afcc <UART_SetConfig+0x218>
 800af80:	4b45      	ldr	r3, [pc, #276]	@ (800b098 <UART_SetConfig+0x2e4>)
 800af82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800af8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800af8c:	d016      	beq.n	800afbc <UART_SetConfig+0x208>
 800af8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800af90:	d818      	bhi.n	800afc4 <UART_SetConfig+0x210>
 800af92:	2b80      	cmp	r3, #128	@ 0x80
 800af94:	d00a      	beq.n	800afac <UART_SetConfig+0x1f8>
 800af96:	2b80      	cmp	r3, #128	@ 0x80
 800af98:	d814      	bhi.n	800afc4 <UART_SetConfig+0x210>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <UART_SetConfig+0x1f0>
 800af9e:	2b40      	cmp	r3, #64	@ 0x40
 800afa0:	d008      	beq.n	800afb4 <UART_SetConfig+0x200>
 800afa2:	e00f      	b.n	800afc4 <UART_SetConfig+0x210>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afaa:	e082      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800afac:	2302      	movs	r3, #2
 800afae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afb2:	e07e      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800afb4:	2304      	movs	r3, #4
 800afb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afba:	e07a      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800afbc:	2308      	movs	r3, #8
 800afbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc2:	e076      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800afc4:	2310      	movs	r3, #16
 800afc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afca:	e072      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a35      	ldr	r2, [pc, #212]	@ (800b0a8 <UART_SetConfig+0x2f4>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d12a      	bne.n	800b02c <UART_SetConfig+0x278>
 800afd6:	4b30      	ldr	r3, [pc, #192]	@ (800b098 <UART_SetConfig+0x2e4>)
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afe4:	d01a      	beq.n	800b01c <UART_SetConfig+0x268>
 800afe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afea:	d81b      	bhi.n	800b024 <UART_SetConfig+0x270>
 800afec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aff0:	d00c      	beq.n	800b00c <UART_SetConfig+0x258>
 800aff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aff6:	d815      	bhi.n	800b024 <UART_SetConfig+0x270>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <UART_SetConfig+0x250>
 800affc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b000:	d008      	beq.n	800b014 <UART_SetConfig+0x260>
 800b002:	e00f      	b.n	800b024 <UART_SetConfig+0x270>
 800b004:	2300      	movs	r3, #0
 800b006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b00a:	e052      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b00c:	2302      	movs	r3, #2
 800b00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b012:	e04e      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b014:	2304      	movs	r3, #4
 800b016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b01a:	e04a      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b01c:	2308      	movs	r3, #8
 800b01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b022:	e046      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b024:	2310      	movs	r3, #16
 800b026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b02a:	e042      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a17      	ldr	r2, [pc, #92]	@ (800b090 <UART_SetConfig+0x2dc>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d13a      	bne.n	800b0ac <UART_SetConfig+0x2f8>
 800b036:	4b18      	ldr	r3, [pc, #96]	@ (800b098 <UART_SetConfig+0x2e4>)
 800b038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b03c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b040:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b044:	d01a      	beq.n	800b07c <UART_SetConfig+0x2c8>
 800b046:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b04a:	d81b      	bhi.n	800b084 <UART_SetConfig+0x2d0>
 800b04c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b050:	d00c      	beq.n	800b06c <UART_SetConfig+0x2b8>
 800b052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b056:	d815      	bhi.n	800b084 <UART_SetConfig+0x2d0>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d003      	beq.n	800b064 <UART_SetConfig+0x2b0>
 800b05c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b060:	d008      	beq.n	800b074 <UART_SetConfig+0x2c0>
 800b062:	e00f      	b.n	800b084 <UART_SetConfig+0x2d0>
 800b064:	2300      	movs	r3, #0
 800b066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b06a:	e022      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b06c:	2302      	movs	r3, #2
 800b06e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b072:	e01e      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b074:	2304      	movs	r3, #4
 800b076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b07a:	e01a      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b07c:	2308      	movs	r3, #8
 800b07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b082:	e016      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b084:	2310      	movs	r3, #16
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08a:	e012      	b.n	800b0b2 <UART_SetConfig+0x2fe>
 800b08c:	cfff69f3 	.word	0xcfff69f3
 800b090:	40008000 	.word	0x40008000
 800b094:	40013800 	.word	0x40013800
 800b098:	40021000 	.word	0x40021000
 800b09c:	40004400 	.word	0x40004400
 800b0a0:	40004800 	.word	0x40004800
 800b0a4:	40004c00 	.word	0x40004c00
 800b0a8:	40005000 	.word	0x40005000
 800b0ac:	2310      	movs	r3, #16
 800b0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4aae      	ldr	r2, [pc, #696]	@ (800b370 <UART_SetConfig+0x5bc>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	f040 8097 	bne.w	800b1ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0c2:	2b08      	cmp	r3, #8
 800b0c4:	d823      	bhi.n	800b10e <UART_SetConfig+0x35a>
 800b0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0cc <UART_SetConfig+0x318>)
 800b0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0cc:	0800b0f1 	.word	0x0800b0f1
 800b0d0:	0800b10f 	.word	0x0800b10f
 800b0d4:	0800b0f9 	.word	0x0800b0f9
 800b0d8:	0800b10f 	.word	0x0800b10f
 800b0dc:	0800b0ff 	.word	0x0800b0ff
 800b0e0:	0800b10f 	.word	0x0800b10f
 800b0e4:	0800b10f 	.word	0x0800b10f
 800b0e8:	0800b10f 	.word	0x0800b10f
 800b0ec:	0800b107 	.word	0x0800b107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0f0:	f7fc fa7c 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 800b0f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0f6:	e010      	b.n	800b11a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0f8:	4b9e      	ldr	r3, [pc, #632]	@ (800b374 <UART_SetConfig+0x5c0>)
 800b0fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0fc:	e00d      	b.n	800b11a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0fe:	f7fc fa07 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 800b102:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b104:	e009      	b.n	800b11a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b10a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b10c:	e005      	b.n	800b11a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b118:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f000 8130 	beq.w	800b382 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b126:	4a94      	ldr	r2, [pc, #592]	@ (800b378 <UART_SetConfig+0x5c4>)
 800b128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b12c:	461a      	mov	r2, r3
 800b12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b130:	fbb3 f3f2 	udiv	r3, r3, r2
 800b134:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	4613      	mov	r3, r2
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	4413      	add	r3, r2
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	429a      	cmp	r2, r3
 800b144:	d305      	bcc.n	800b152 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d903      	bls.n	800b15a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b158:	e113      	b.n	800b382 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15c:	2200      	movs	r2, #0
 800b15e:	60bb      	str	r3, [r7, #8]
 800b160:	60fa      	str	r2, [r7, #12]
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b166:	4a84      	ldr	r2, [pc, #528]	@ (800b378 <UART_SetConfig+0x5c4>)
 800b168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	2200      	movs	r2, #0
 800b170:	603b      	str	r3, [r7, #0]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b178:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b17c:	f7f5 fcf2 	bl	8000b64 <__aeabi_uldivmod>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4610      	mov	r0, r2
 800b186:	4619      	mov	r1, r3
 800b188:	f04f 0200 	mov.w	r2, #0
 800b18c:	f04f 0300 	mov.w	r3, #0
 800b190:	020b      	lsls	r3, r1, #8
 800b192:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b196:	0202      	lsls	r2, r0, #8
 800b198:	6979      	ldr	r1, [r7, #20]
 800b19a:	6849      	ldr	r1, [r1, #4]
 800b19c:	0849      	lsrs	r1, r1, #1
 800b19e:	2000      	movs	r0, #0
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	eb12 0804 	adds.w	r8, r2, r4
 800b1a8:	eb43 0905 	adc.w	r9, r3, r5
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	469a      	mov	sl, r3
 800b1b4:	4693      	mov	fp, r2
 800b1b6:	4652      	mov	r2, sl
 800b1b8:	465b      	mov	r3, fp
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	4649      	mov	r1, r9
 800b1be:	f7f5 fcd1 	bl	8000b64 <__aeabi_uldivmod>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1d0:	d308      	bcc.n	800b1e4 <UART_SetConfig+0x430>
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1d8:	d204      	bcs.n	800b1e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6a3a      	ldr	r2, [r7, #32]
 800b1e0:	60da      	str	r2, [r3, #12]
 800b1e2:	e0ce      	b.n	800b382 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1ea:	e0ca      	b.n	800b382 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1f4:	d166      	bne.n	800b2c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b1f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1fa:	2b08      	cmp	r3, #8
 800b1fc:	d827      	bhi.n	800b24e <UART_SetConfig+0x49a>
 800b1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b204 <UART_SetConfig+0x450>)
 800b200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b204:	0800b229 	.word	0x0800b229
 800b208:	0800b231 	.word	0x0800b231
 800b20c:	0800b239 	.word	0x0800b239
 800b210:	0800b24f 	.word	0x0800b24f
 800b214:	0800b23f 	.word	0x0800b23f
 800b218:	0800b24f 	.word	0x0800b24f
 800b21c:	0800b24f 	.word	0x0800b24f
 800b220:	0800b24f 	.word	0x0800b24f
 800b224:	0800b247 	.word	0x0800b247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b228:	f7fc f9e0 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 800b22c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b22e:	e014      	b.n	800b25a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b230:	f7fc f9f2 	bl	8007618 <HAL_RCC_GetPCLK2Freq>
 800b234:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b236:	e010      	b.n	800b25a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b238:	4b4e      	ldr	r3, [pc, #312]	@ (800b374 <UART_SetConfig+0x5c0>)
 800b23a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b23c:	e00d      	b.n	800b25a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b23e:	f7fc f967 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 800b242:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b244:	e009      	b.n	800b25a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b24a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b24c:	e005      	b.n	800b25a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 8090 	beq.w	800b382 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b266:	4a44      	ldr	r2, [pc, #272]	@ (800b378 <UART_SetConfig+0x5c4>)
 800b268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b270:	fbb3 f3f2 	udiv	r3, r3, r2
 800b274:	005a      	lsls	r2, r3, #1
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	085b      	lsrs	r3, r3, #1
 800b27c:	441a      	add	r2, r3
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	fbb2 f3f3 	udiv	r3, r2, r3
 800b286:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	2b0f      	cmp	r3, #15
 800b28c:	d916      	bls.n	800b2bc <UART_SetConfig+0x508>
 800b28e:	6a3b      	ldr	r3, [r7, #32]
 800b290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b294:	d212      	bcs.n	800b2bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	f023 030f 	bic.w	r3, r3, #15
 800b29e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	085b      	lsrs	r3, r3, #1
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	8bfb      	ldrh	r3, [r7, #30]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	8bfa      	ldrh	r2, [r7, #30]
 800b2b8:	60da      	str	r2, [r3, #12]
 800b2ba:	e062      	b.n	800b382 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b2c2:	e05e      	b.n	800b382 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2c8:	2b08      	cmp	r3, #8
 800b2ca:	d828      	bhi.n	800b31e <UART_SetConfig+0x56a>
 800b2cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b2d4 <UART_SetConfig+0x520>)
 800b2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d2:	bf00      	nop
 800b2d4:	0800b2f9 	.word	0x0800b2f9
 800b2d8:	0800b301 	.word	0x0800b301
 800b2dc:	0800b309 	.word	0x0800b309
 800b2e0:	0800b31f 	.word	0x0800b31f
 800b2e4:	0800b30f 	.word	0x0800b30f
 800b2e8:	0800b31f 	.word	0x0800b31f
 800b2ec:	0800b31f 	.word	0x0800b31f
 800b2f0:	0800b31f 	.word	0x0800b31f
 800b2f4:	0800b317 	.word	0x0800b317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2f8:	f7fc f978 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 800b2fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2fe:	e014      	b.n	800b32a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b300:	f7fc f98a 	bl	8007618 <HAL_RCC_GetPCLK2Freq>
 800b304:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b306:	e010      	b.n	800b32a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b308:	4b1a      	ldr	r3, [pc, #104]	@ (800b374 <UART_SetConfig+0x5c0>)
 800b30a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b30c:	e00d      	b.n	800b32a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b30e:	f7fc f8ff 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 800b312:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b314:	e009      	b.n	800b32a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b31a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b31c:	e005      	b.n	800b32a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b328:	bf00      	nop
    }

    if (pclk != 0U)
 800b32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d028      	beq.n	800b382 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b334:	4a10      	ldr	r2, [pc, #64]	@ (800b378 <UART_SetConfig+0x5c4>)
 800b336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b33a:	461a      	mov	r2, r3
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	085b      	lsrs	r3, r3, #1
 800b348:	441a      	add	r2, r3
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b352:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	2b0f      	cmp	r3, #15
 800b358:	d910      	bls.n	800b37c <UART_SetConfig+0x5c8>
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b360:	d20c      	bcs.n	800b37c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	b29a      	uxth	r2, r3
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60da      	str	r2, [r3, #12]
 800b36c:	e009      	b.n	800b382 <UART_SetConfig+0x5ce>
 800b36e:	bf00      	nop
 800b370:	40008000 	.word	0x40008000
 800b374:	00f42400 	.word	0x00f42400
 800b378:	0800de64 	.word	0x0800de64
      }
      else
      {
        ret = HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	2201      	movs	r2, #1
 800b386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	2200      	movs	r2, #0
 800b396:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	2200      	movs	r2, #0
 800b39c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b39e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3730      	adds	r7, #48	@ 0x30
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b3ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b8:	f003 0308 	and.w	r3, r3, #8
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fc:	f003 0302 	and.w	r3, r3, #2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00a      	beq.n	800b41a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41e:	f003 0304 	and.w	r3, r3, #4
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00a      	beq.n	800b45e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b462:	f003 0320 	and.w	r3, r3, #32
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d01a      	beq.n	800b4c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4aa:	d10a      	bne.n	800b4c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	605a      	str	r2, [r3, #4]
  }
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b098      	sub	sp, #96	@ 0x60
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b500:	f7f9 fa3a 	bl	8004978 <HAL_GetTick>
 800b504:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b08      	cmp	r3, #8
 800b512:	d12f      	bne.n	800b574 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b51c:	2200      	movs	r2, #0
 800b51e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f88e 	bl	800b644 <UART_WaitOnFlagUntilTimeout>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d022      	beq.n	800b574 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b542:	653b      	str	r3, [r7, #80]	@ 0x50
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	461a      	mov	r2, r3
 800b54a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b54c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b54e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e6      	bne.n	800b52e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2220      	movs	r2, #32
 800b564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e063      	b.n	800b63c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 0304 	and.w	r3, r3, #4
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d149      	bne.n	800b616 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b582:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b58a:	2200      	movs	r2, #0
 800b58c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f857 	bl	800b644 <UART_WaitOnFlagUntilTimeout>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d03c      	beq.n	800b616 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a4:	e853 3f00 	ldrex	r3, [r3]
 800b5a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b5aa:	6a3b      	ldr	r3, [r7, #32]
 800b5ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5c2:	e841 2300 	strex	r3, r2, [r1]
 800b5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1e6      	bne.n	800b59c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	e853 3f00 	ldrex	r3, [r3]
 800b5dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f023 0301 	bic.w	r3, r3, #1
 800b5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5ee:	61fa      	str	r2, [r7, #28]
 800b5f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f2:	69b9      	ldr	r1, [r7, #24]
 800b5f4:	69fa      	ldr	r2, [r7, #28]
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	617b      	str	r3, [r7, #20]
   return(result);
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e5      	bne.n	800b5ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2220      	movs	r2, #32
 800b606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e012      	b.n	800b63c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2220      	movs	r2, #32
 800b61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2220      	movs	r2, #32
 800b622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3758      	adds	r7, #88	@ 0x58
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	4613      	mov	r3, r2
 800b652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b654:	e04f      	b.n	800b6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b65c:	d04b      	beq.n	800b6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b65e:	f7f9 f98b 	bl	8004978 <HAL_GetTick>
 800b662:	4602      	mov	r2, r0
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d302      	bcc.n	800b674 <UART_WaitOnFlagUntilTimeout+0x30>
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	e04e      	b.n	800b716 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0304 	and.w	r3, r3, #4
 800b682:	2b00      	cmp	r3, #0
 800b684:	d037      	beq.n	800b6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b80      	cmp	r3, #128	@ 0x80
 800b68a:	d034      	beq.n	800b6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2b40      	cmp	r3, #64	@ 0x40
 800b690:	d031      	beq.n	800b6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	f003 0308 	and.w	r3, r3, #8
 800b69c:	2b08      	cmp	r3, #8
 800b69e:	d110      	bne.n	800b6c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2208      	movs	r2, #8
 800b6a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 f99c 	bl	800b9e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e029      	b.n	800b716 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6d0:	d111      	bne.n	800b6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 f982 	bl	800b9e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e00f      	b.n	800b716 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	69da      	ldr	r2, [r3, #28]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	4013      	ands	r3, r2
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	429a      	cmp	r2, r3
 800b704:	bf0c      	ite	eq
 800b706:	2301      	moveq	r3, #1
 800b708:	2300      	movne	r3, #0
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	461a      	mov	r2, r3
 800b70e:	79fb      	ldrb	r3, [r7, #7]
 800b710:	429a      	cmp	r2, r3
 800b712:	d0a0      	beq.n	800b656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b720:	b480      	push	{r7}
 800b722:	b0a3      	sub	sp, #140	@ 0x8c
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	88fa      	ldrh	r2, [r7, #6]
 800b738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	88fa      	ldrh	r2, [r7, #6]
 800b740:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b752:	d10e      	bne.n	800b772 <UART_Start_Receive_IT+0x52>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d105      	bne.n	800b768 <UART_Start_Receive_IT+0x48>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b762:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b766:	e02d      	b.n	800b7c4 <UART_Start_Receive_IT+0xa4>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	22ff      	movs	r2, #255	@ 0xff
 800b76c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b770:	e028      	b.n	800b7c4 <UART_Start_Receive_IT+0xa4>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10d      	bne.n	800b796 <UART_Start_Receive_IT+0x76>
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d104      	bne.n	800b78c <UART_Start_Receive_IT+0x6c>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	22ff      	movs	r2, #255	@ 0xff
 800b786:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b78a:	e01b      	b.n	800b7c4 <UART_Start_Receive_IT+0xa4>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	227f      	movs	r2, #127	@ 0x7f
 800b790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b794:	e016      	b.n	800b7c4 <UART_Start_Receive_IT+0xa4>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b79e:	d10d      	bne.n	800b7bc <UART_Start_Receive_IT+0x9c>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d104      	bne.n	800b7b2 <UART_Start_Receive_IT+0x92>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	227f      	movs	r2, #127	@ 0x7f
 800b7ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b7b0:	e008      	b.n	800b7c4 <UART_Start_Receive_IT+0xa4>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	223f      	movs	r2, #63	@ 0x3f
 800b7b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b7ba:	e003      	b.n	800b7c4 <UART_Start_Receive_IT+0xa4>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2222      	movs	r2, #34	@ 0x22
 800b7d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3308      	adds	r3, #8
 800b7da:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b7e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7e6:	f043 0301 	orr.w	r3, r3, #1
 800b7ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b7f8:	673a      	str	r2, [r7, #112]	@ 0x70
 800b7fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b7fe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e3      	bne.n	800b7d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b814:	d14f      	bne.n	800b8b6 <UART_Start_Receive_IT+0x196>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b81c:	88fa      	ldrh	r2, [r7, #6]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d349      	bcc.n	800b8b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b82a:	d107      	bne.n	800b83c <UART_Start_Receive_IT+0x11c>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d103      	bne.n	800b83c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4a47      	ldr	r2, [pc, #284]	@ (800b954 <UART_Start_Receive_IT+0x234>)
 800b838:	675a      	str	r2, [r3, #116]	@ 0x74
 800b83a:	e002      	b.n	800b842 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4a46      	ldr	r2, [pc, #280]	@ (800b958 <UART_Start_Receive_IT+0x238>)
 800b840:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d01a      	beq.n	800b880 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b85a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b85e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b86c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b86e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b870:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b872:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b874:	e841 2300 	strex	r3, r2, [r1]
 800b878:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b87a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1e4      	bne.n	800b84a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3308      	adds	r3, #8
 800b886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b88a:	e853 3f00 	ldrex	r3, [r3]
 800b88e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b896:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3308      	adds	r3, #8
 800b89e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b8a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b8a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b8a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8a8:	e841 2300 	strex	r3, r2, [r1]
 800b8ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b8ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1e5      	bne.n	800b880 <UART_Start_Receive_IT+0x160>
 800b8b4:	e046      	b.n	800b944 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8be:	d107      	bne.n	800b8d0 <UART_Start_Receive_IT+0x1b0>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d103      	bne.n	800b8d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4a24      	ldr	r2, [pc, #144]	@ (800b95c <UART_Start_Receive_IT+0x23c>)
 800b8cc:	675a      	str	r2, [r3, #116]	@ 0x74
 800b8ce:	e002      	b.n	800b8d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4a23      	ldr	r2, [pc, #140]	@ (800b960 <UART_Start_Receive_IT+0x240>)
 800b8d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d019      	beq.n	800b912 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b8f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8fe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e6      	bne.n	800b8de <UART_Start_Receive_IT+0x1be>
 800b910:	e018      	b.n	800b944 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	e853 3f00 	ldrex	r3, [r3]
 800b91e:	613b      	str	r3, [r7, #16]
   return(result);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f043 0320 	orr.w	r3, r3, #32
 800b926:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
 800b92e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b930:	623b      	str	r3, [r7, #32]
 800b932:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b934:	69f9      	ldr	r1, [r7, #28]
 800b936:	6a3a      	ldr	r2, [r7, #32]
 800b938:	e841 2300 	strex	r3, r2, [r1]
 800b93c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e6      	bne.n	800b912 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	378c      	adds	r7, #140	@ 0x8c
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	0800c369 	.word	0x0800c369
 800b958:	0800bff9 	.word	0x0800bff9
 800b95c:	0800be39 	.word	0x0800be39
 800b960:	0800bc79 	.word	0x0800bc79

0800b964 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b964:	b480      	push	{r7}
 800b966:	b08f      	sub	sp, #60	@ 0x3c
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	e853 3f00 	ldrex	r3, [r3]
 800b978:	61fb      	str	r3, [r7, #28]
   return(result);
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b980:	637b      	str	r3, [r7, #52]	@ 0x34
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	461a      	mov	r2, r3
 800b988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b98c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b992:	e841 2300 	strex	r3, r2, [r1]
 800b996:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1e6      	bne.n	800b96c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b9b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9be:	61ba      	str	r2, [r7, #24]
 800b9c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6979      	ldr	r1, [r7, #20]
 800b9c4:	69ba      	ldr	r2, [r7, #24]
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e5      	bne.n	800b99e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b9da:	bf00      	nop
 800b9dc:	373c      	adds	r7, #60	@ 0x3c
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr

0800b9e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	b095      	sub	sp, #84	@ 0x54
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9f6:	e853 3f00 	ldrex	r3, [r3]
 800b9fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba14:	e841 2300 	strex	r3, r2, [r1]
 800ba18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1e6      	bne.n	800b9ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3308      	adds	r3, #8
 800ba26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	6a3b      	ldr	r3, [r7, #32]
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba36:	f023 0301 	bic.w	r3, r3, #1
 800ba3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3308      	adds	r3, #8
 800ba42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba4c:	e841 2300 	strex	r3, r2, [r1]
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e3      	bne.n	800ba20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d118      	bne.n	800ba92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	e853 3f00 	ldrex	r3, [r3]
 800ba6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	f023 0310 	bic.w	r3, r3, #16
 800ba74:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba7e:	61bb      	str	r3, [r7, #24]
 800ba80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba82:	6979      	ldr	r1, [r7, #20]
 800ba84:	69ba      	ldr	r2, [r7, #24]
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e6      	bne.n	800ba60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800baa6:	bf00      	nop
 800baa8:	3754      	adds	r7, #84	@ 0x54
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b090      	sub	sp, #64	@ 0x40
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800babe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0320 	and.w	r3, r3, #32
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d137      	bne.n	800bb3e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3308      	adds	r3, #8
 800badc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae0:	e853 3f00 	ldrex	r3, [r3]
 800bae4:	623b      	str	r3, [r7, #32]
   return(result);
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800baee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3308      	adds	r3, #8
 800baf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800baf6:	633a      	str	r2, [r7, #48]	@ 0x30
 800baf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bafe:	e841 2300 	strex	r3, r2, [r1]
 800bb02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1e5      	bne.n	800bad6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	e853 3f00 	ldrex	r3, [r3]
 800bb16:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	461a      	mov	r2, r3
 800bb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	69b9      	ldr	r1, [r7, #24]
 800bb2e:	69fa      	ldr	r2, [r7, #28]
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	617b      	str	r3, [r7, #20]
   return(result);
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e6      	bne.n	800bb0a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb3c:	e004      	b.n	800bb48 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800bb3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bb44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb46:	4798      	blx	r3
}
 800bb48:	bf00      	nop
 800bb4a:	3740      	adds	r7, #64	@ 0x40
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb68:	bf00      	nop
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb98:	2b80      	cmp	r3, #128	@ 0x80
 800bb9a:	d109      	bne.n	800bbb0 <UART_DMAError+0x40>
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2b21      	cmp	r3, #33	@ 0x21
 800bba0:	d106      	bne.n	800bbb0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bbaa:	6978      	ldr	r0, [r7, #20]
 800bbac:	f7ff feda 	bl	800b964 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbba:	2b40      	cmp	r3, #64	@ 0x40
 800bbbc:	d109      	bne.n	800bbd2 <UART_DMAError+0x62>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b22      	cmp	r3, #34	@ 0x22
 800bbc2:	d106      	bne.n	800bbd2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bbcc:	6978      	ldr	r0, [r7, #20]
 800bbce:	f7ff ff0a 	bl	800b9e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbd8:	f043 0210 	orr.w	r2, r3, #16
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bbe8:	6978      	ldr	r0, [r7, #20]
 800bbea:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbec:	bf00      	nop
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	e853 3f00 	ldrex	r3, [r3]
 800bc30:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc38:	61fb      	str	r3, [r7, #28]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	61bb      	str	r3, [r7, #24]
 800bc44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc46:	6979      	ldr	r1, [r7, #20]
 800bc48:	69ba      	ldr	r2, [r7, #24]
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e6      	bne.n	800bc24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2220      	movs	r2, #32
 800bc5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc6e:	bf00      	nop
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b09c      	sub	sp, #112	@ 0x70
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc86:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc90:	2b22      	cmp	r3, #34	@ 0x22
 800bc92:	f040 80c2 	bne.w	800be1a <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc9c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bca0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bca4:	b2d9      	uxtb	r1, r3
 800bca6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcb0:	400a      	ands	r2, r1
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f040 80a5 	bne.w	800be2a <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bce8:	e853 3f00 	ldrex	r3, [r3]
 800bcec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bcee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bcf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bcfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e6      	bne.n	800bce0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3308      	adds	r3, #8
 800bd18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1c:	e853 3f00 	ldrex	r3, [r3]
 800bd20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd24:	f023 0301 	bic.w	r3, r3, #1
 800bd28:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3308      	adds	r3, #8
 800bd30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bd32:	647a      	str	r2, [r7, #68]	@ 0x44
 800bd34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd3a:	e841 2300 	strex	r3, r2, [r1]
 800bd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1e5      	bne.n	800bd12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2220      	movs	r2, #32
 800bd4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a35      	ldr	r2, [pc, #212]	@ (800be34 <UART_RxISR_8BIT+0x1bc>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d01f      	beq.n	800bda4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d018      	beq.n	800bda4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7a:	e853 3f00 	ldrex	r3, [r3]
 800bd7e:	623b      	str	r3, [r7, #32]
   return(result);
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd86:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd90:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd98:	e841 2300 	strex	r3, r2, [r1]
 800bd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e6      	bne.n	800bd72 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d130      	bne.n	800be0e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f023 0310 	bic.w	r3, r3, #16
 800bdc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdd0:	61fb      	str	r3, [r7, #28]
 800bdd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	69b9      	ldr	r1, [r7, #24]
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	617b      	str	r3, [r7, #20]
   return(result);
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e6      	bne.n	800bdb2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	f003 0310 	and.w	r3, r3, #16
 800bdee:	2b10      	cmp	r3, #16
 800bdf0:	d103      	bne.n	800bdfa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2210      	movs	r2, #16
 800bdf8:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800be06:	4611      	mov	r1, r2
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be0c:	e00d      	b.n	800be2a <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
}
 800be18:	e007      	b.n	800be2a <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	699a      	ldr	r2, [r3, #24]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f042 0208 	orr.w	r2, r2, #8
 800be28:	619a      	str	r2, [r3, #24]
}
 800be2a:	bf00      	nop
 800be2c:	3770      	adds	r7, #112	@ 0x70
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	40008000 	.word	0x40008000

0800be38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b09c      	sub	sp, #112	@ 0x70
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800be46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be50:	2b22      	cmp	r3, #34	@ 0x22
 800be52:	f040 80c2 	bne.w	800bfda <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be64:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800be66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800be6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800be6e:	4013      	ands	r3, r2
 800be70:	b29a      	uxth	r2, r3
 800be72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be7a:	1c9a      	adds	r2, r3, #2
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be86:	b29b      	uxth	r3, r3
 800be88:	3b01      	subs	r3, #1
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be98:	b29b      	uxth	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f040 80a5 	bne.w	800bfea <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bea8:	e853 3f00 	ldrex	r3, [r3]
 800beac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800beae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800beb4:	667b      	str	r3, [r7, #100]	@ 0x64
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bebe:	657b      	str	r3, [r7, #84]	@ 0x54
 800bec0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bec4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bec6:	e841 2300 	strex	r3, r2, [r1]
 800beca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800becc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e6      	bne.n	800bea0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	3308      	adds	r3, #8
 800bed8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee4:	f023 0301 	bic.w	r3, r3, #1
 800bee8:	663b      	str	r3, [r7, #96]	@ 0x60
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3308      	adds	r3, #8
 800bef0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bef2:	643a      	str	r2, [r7, #64]	@ 0x40
 800bef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bef8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e5      	bne.n	800bed2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2220      	movs	r2, #32
 800bf0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a35      	ldr	r2, [pc, #212]	@ (800bff4 <UART_RxISR_16BIT+0x1bc>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d01f      	beq.n	800bf64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d018      	beq.n	800bf64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf38:	6a3b      	ldr	r3, [r7, #32]
 800bf3a:	e853 3f00 	ldrex	r3, [r3]
 800bf3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf52:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf58:	e841 2300 	strex	r3, r2, [r1]
 800bf5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1e6      	bne.n	800bf32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d130      	bne.n	800bfce <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	f023 0310 	bic.w	r3, r3, #16
 800bf86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf90:	61bb      	str	r3, [r7, #24]
 800bf92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6979      	ldr	r1, [r7, #20]
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e6      	bne.n	800bf72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	f003 0310 	and.w	r3, r3, #16
 800bfae:	2b10      	cmp	r3, #16
 800bfb0:	d103      	bne.n	800bfba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2210      	movs	r2, #16
 800bfb8:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bfcc:	e00d      	b.n	800bfea <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	4798      	blx	r3
}
 800bfd8:	e007      	b.n	800bfea <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	699a      	ldr	r2, [r3, #24]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f042 0208 	orr.w	r2, r2, #8
 800bfe8:	619a      	str	r2, [r3, #24]
}
 800bfea:	bf00      	nop
 800bfec:	3770      	adds	r7, #112	@ 0x70
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	40008000 	.word	0x40008000

0800bff8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b0ac      	sub	sp, #176	@ 0xb0
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c006:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	69db      	ldr	r3, [r3, #28]
 800c010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c02e:	2b22      	cmp	r3, #34	@ 0x22
 800c030:	f040 8189 	bne.w	800c346 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c03a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c03e:	e12c      	b.n	800c29a <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c046:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c04a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c04e:	b2d9      	uxtb	r1, r3
 800c050:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c054:	b2da      	uxtb	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c05a:	400a      	ands	r2, r1
 800c05c:	b2d2      	uxtb	r2, r2
 800c05e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c070:	b29b      	uxth	r3, r3
 800c072:	3b01      	subs	r3, #1
 800c074:	b29a      	uxth	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c08a:	f003 0307 	and.w	r3, r3, #7
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d055      	beq.n	800c13e <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c096:	f003 0301 	and.w	r3, r3, #1
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d011      	beq.n	800c0c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c09e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c0a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00b      	beq.n	800c0c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0b8:	f043 0201 	orr.w	r2, r3, #1
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d011      	beq.n	800c0f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c0ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00b      	beq.n	800c0f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0e8:	f043 0204 	orr.w	r2, r3, #4
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0f6:	f003 0304 	and.w	r3, r3, #4
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d011      	beq.n	800c122 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c0fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00b      	beq.n	800c122 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2204      	movs	r2, #4
 800c110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c118:	f043 0202 	orr.w	r2, r3, #2
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d008      	beq.n	800c13e <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c144:	b29b      	uxth	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	f040 80a7 	bne.w	800c29a <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c154:	e853 3f00 	ldrex	r3, [r3]
 800c158:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c15a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c15c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	461a      	mov	r2, r3
 800c16a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c16e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c170:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c172:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c174:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c176:	e841 2300 	strex	r3, r2, [r1]
 800c17a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c17c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1e4      	bne.n	800c14c <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3308      	adds	r3, #8
 800c188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c18c:	e853 3f00 	ldrex	r3, [r3]
 800c190:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c198:	f023 0301 	bic.w	r3, r3, #1
 800c19c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c1aa:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c1ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c1b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c1b2:	e841 2300 	strex	r3, r2, [r1]
 800c1b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c1b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1e1      	bne.n	800c182 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2220      	movs	r2, #32
 800c1c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a62      	ldr	r2, [pc, #392]	@ (800c360 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d021      	beq.n	800c220 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d01a      	beq.n	800c220 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1f2:	e853 3f00 	ldrex	r3, [r3]
 800c1f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c1f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c1fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c20c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c20e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c210:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c212:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c214:	e841 2300 	strex	r3, r2, [r1]
 800c218:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c21a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e4      	bne.n	800c1ea <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c224:	2b01      	cmp	r3, #1
 800c226:	d132      	bne.n	800c28e <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c236:	e853 3f00 	ldrex	r3, [r3]
 800c23a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23e:	f023 0310 	bic.w	r3, r3, #16
 800c242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c250:	643b      	str	r3, [r7, #64]	@ 0x40
 800c252:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c258:	e841 2300 	strex	r3, r2, [r1]
 800c25c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1e4      	bne.n	800c22e <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	69db      	ldr	r3, [r3, #28]
 800c26a:	f003 0310 	and.w	r3, r3, #16
 800c26e:	2b10      	cmp	r3, #16
 800c270:	d103      	bne.n	800c27a <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2210      	movs	r2, #16
 800c278:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c286:	4611      	mov	r1, r2
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c28c:	e010      	b.n	800c2b0 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	4798      	blx	r3
        break;
 800c298:	e00a      	b.n	800c2b0 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c29a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d006      	beq.n	800c2b0 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800c2a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2a6:	f003 0320 	and.w	r3, r3, #32
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f47f aec8 	bne.w	800c040 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2b6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c2ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d049      	beq.n	800c356 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c2c8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d242      	bcs.n	800c356 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	e853 3f00 	ldrex	r3, [r3]
 800c2de:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3308      	adds	r3, #8
 800c2f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c2f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2fc:	e841 2300 	strex	r3, r2, [r1]
 800c300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e3      	bne.n	800c2d0 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a16      	ldr	r2, [pc, #88]	@ (800c364 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800c30c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	e853 3f00 	ldrex	r3, [r3]
 800c31a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	f043 0320 	orr.w	r3, r3, #32
 800c322:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	461a      	mov	r2, r3
 800c32c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c330:	61bb      	str	r3, [r7, #24]
 800c332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c334:	6979      	ldr	r1, [r7, #20]
 800c336:	69ba      	ldr	r2, [r7, #24]
 800c338:	e841 2300 	strex	r3, r2, [r1]
 800c33c:	613b      	str	r3, [r7, #16]
   return(result);
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1e4      	bne.n	800c30e <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c344:	e007      	b.n	800c356 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	699a      	ldr	r2, [r3, #24]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f042 0208 	orr.w	r2, r2, #8
 800c354:	619a      	str	r2, [r3, #24]
}
 800c356:	bf00      	nop
 800c358:	37b0      	adds	r7, #176	@ 0xb0
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	40008000 	.word	0x40008000
 800c364:	0800bc79 	.word	0x0800bc79

0800c368 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b0ae      	sub	sp, #184	@ 0xb8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c376:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	69db      	ldr	r3, [r3, #28]
 800c380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c39e:	2b22      	cmp	r3, #34	@ 0x22
 800c3a0:	f040 818d 	bne.w	800c6be <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c3aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3ae:	e130      	b.n	800c612 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c3c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c3c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c3d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3d8:	1c9a      	adds	r2, r3, #2
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	69db      	ldr	r3, [r3, #28]
 800c3f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c3fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c3fe:	f003 0307 	and.w	r3, r3, #7
 800c402:	2b00      	cmp	r3, #0
 800c404:	d055      	beq.n	800c4b2 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d011      	beq.n	800c436 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00b      	beq.n	800c436 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2201      	movs	r2, #1
 800c424:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c42c:	f043 0201 	orr.w	r2, r3, #1
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d011      	beq.n	800c466 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2202      	movs	r2, #2
 800c454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c45c:	f043 0204 	orr.w	r2, r3, #4
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c46a:	f003 0304 	and.w	r3, r3, #4
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d011      	beq.n	800c496 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2204      	movs	r2, #4
 800c484:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c48c:	f043 0202 	orr.w	r2, r3, #2
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d008      	beq.n	800c4b2 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f040 80a9 	bne.w	800c612 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4c8:	e853 3f00 	ldrex	r3, [r3]
 800c4cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c4ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c4e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c4ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c4ee:	e841 2300 	strex	r3, r2, [r1]
 800c4f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c4f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1e2      	bne.n	800c4c0 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	3308      	adds	r3, #8
 800c500:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c50a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c50c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c510:	f023 0301 	bic.w	r3, r3, #1
 800c514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3308      	adds	r3, #8
 800c51e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c524:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c526:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c528:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c52a:	e841 2300 	strex	r3, r2, [r1]
 800c52e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1e1      	bne.n	800c4fa <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2220      	movs	r2, #32
 800c53a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a62      	ldr	r2, [pc, #392]	@ (800c6d8 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d021      	beq.n	800c598 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d01a      	beq.n	800c598 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c56a:	e853 3f00 	ldrex	r3, [r3]
 800c56e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c572:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	461a      	mov	r2, r3
 800c580:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c584:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c586:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c588:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c58a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c58c:	e841 2300 	strex	r3, r2, [r1]
 800c590:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1e4      	bne.n	800c562 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d132      	bne.n	800c606 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ae:	e853 3f00 	ldrex	r3, [r3]
 800c5b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5b6:	f023 0310 	bic.w	r3, r3, #16
 800c5ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c5c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5d0:	e841 2300 	strex	r3, r2, [r1]
 800c5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1e4      	bne.n	800c5a6 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	69db      	ldr	r3, [r3, #28]
 800c5e2:	f003 0310 	and.w	r3, r3, #16
 800c5e6:	2b10      	cmp	r3, #16
 800c5e8:	d103      	bne.n	800c5f2 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2210      	movs	r2, #16
 800c5f0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c5fe:	4611      	mov	r1, r2
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c604:	e010      	b.n	800c628 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	4798      	blx	r3
        break;
 800c610:	e00a      	b.n	800c628 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c612:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c616:	2b00      	cmp	r3, #0
 800c618:	d006      	beq.n	800c628 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800c61a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c61e:	f003 0320 	and.w	r3, r3, #32
 800c622:	2b00      	cmp	r3, #0
 800c624:	f47f aec4 	bne.w	800c3b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c62e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c632:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c636:	2b00      	cmp	r3, #0
 800c638:	d049      	beq.n	800c6ce <UART_RxISR_16BIT_FIFOEN+0x366>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c640:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c644:	429a      	cmp	r2, r3
 800c646:	d242      	bcs.n	800c6ce <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3308      	adds	r3, #8
 800c64e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c652:	e853 3f00 	ldrex	r3, [r3]
 800c656:	623b      	str	r3, [r7, #32]
   return(result);
 800c658:	6a3b      	ldr	r3, [r7, #32]
 800c65a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c65e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3308      	adds	r3, #8
 800c668:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c66c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c670:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c674:	e841 2300 	strex	r3, r2, [r1]
 800c678:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e3      	bne.n	800c648 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a16      	ldr	r2, [pc, #88]	@ (800c6dc <UART_RxISR_16BIT_FIFOEN+0x374>)
 800c684:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	e853 3f00 	ldrex	r3, [r3]
 800c692:	60fb      	str	r3, [r7, #12]
   return(result);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f043 0320 	orr.w	r3, r3, #32
 800c69a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c6a8:	61fb      	str	r3, [r7, #28]
 800c6aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ac:	69b9      	ldr	r1, [r7, #24]
 800c6ae:	69fa      	ldr	r2, [r7, #28]
 800c6b0:	e841 2300 	strex	r3, r2, [r1]
 800c6b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1e4      	bne.n	800c686 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6bc:	e007      	b.n	800c6ce <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	699a      	ldr	r2, [r3, #24]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f042 0208 	orr.w	r2, r2, #8
 800c6cc:	619a      	str	r2, [r3, #24]
}
 800c6ce:	bf00      	nop
 800c6d0:	37b8      	adds	r7, #184	@ 0xb8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	40008000 	.word	0x40008000
 800c6dc:	0800be39 	.word	0x0800be39

0800c6e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d101      	bne.n	800c732 <HAL_UARTEx_DisableFifoMode+0x16>
 800c72e:	2302      	movs	r3, #2
 800c730:	e027      	b.n	800c782 <HAL_UARTEx_DisableFifoMode+0x66>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2224      	movs	r2, #36	@ 0x24
 800c73e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f022 0201 	bic.w	r2, r2, #1
 800c758:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c760:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2220      	movs	r2, #32
 800c774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d101      	bne.n	800c7a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e02d      	b.n	800c802 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2224      	movs	r2, #36	@ 0x24
 800c7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 0201 	bic.w	r2, r2, #1
 800c7cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f850 	bl	800c888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2220      	movs	r2, #32
 800c7f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d101      	bne.n	800c822 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c81e:	2302      	movs	r3, #2
 800c820:	e02d      	b.n	800c87e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2224      	movs	r2, #36	@ 0x24
 800c82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f022 0201 	bic.w	r2, r2, #1
 800c848:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	430a      	orrs	r2, r1
 800c85c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f812 	bl	800c888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2220      	movs	r2, #32
 800c870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
	...

0800c888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c894:	2b00      	cmp	r3, #0
 800c896:	d108      	bne.n	800c8aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8a8:	e031      	b.n	800c90e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8aa:	2308      	movs	r3, #8
 800c8ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8ae:	2308      	movs	r3, #8
 800c8b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	0e5b      	lsrs	r3, r3, #25
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	f003 0307 	and.w	r3, r3, #7
 800c8c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	0f5b      	lsrs	r3, r3, #29
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 0307 	and.w	r3, r3, #7
 800c8d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
 800c8d4:	7b3a      	ldrb	r2, [r7, #12]
 800c8d6:	4911      	ldr	r1, [pc, #68]	@ (800c91c <UARTEx_SetNbDataToProcess+0x94>)
 800c8d8:	5c8a      	ldrb	r2, [r1, r2]
 800c8da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8de:	7b3a      	ldrb	r2, [r7, #12]
 800c8e0:	490f      	ldr	r1, [pc, #60]	@ (800c920 <UARTEx_SetNbDataToProcess+0x98>)
 800c8e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	7b7a      	ldrb	r2, [r7, #13]
 800c8f4:	4909      	ldr	r1, [pc, #36]	@ (800c91c <UARTEx_SetNbDataToProcess+0x94>)
 800c8f6:	5c8a      	ldrb	r2, [r1, r2]
 800c8f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8fc:	7b7a      	ldrb	r2, [r7, #13]
 800c8fe:	4908      	ldr	r1, [pc, #32]	@ (800c920 <UARTEx_SetNbDataToProcess+0x98>)
 800c900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c902:	fb93 f3f2 	sdiv	r3, r3, r2
 800c906:	b29a      	uxth	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c90e:	bf00      	nop
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	0800de7c 	.word	0x0800de7c
 800c920:	0800de84 	.word	0x0800de84

0800c924 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	ed93 7a06 	vldr	s14, [r3, #24]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	edd3 7a07 	vldr	s15, [r3, #28]
 800c93a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	edd3 7a08 	vldr	s15, [r3, #32]
 800c944:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	edd3 7a06 	vldr	s15, [r3, #24]
 800c954:	eeb1 7a67 	vneg.f32	s14, s15
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c95e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c962:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a1a      	ldr	r2, [r3, #32]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d006      	beq.n	800c988 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	330c      	adds	r3, #12
 800c97e:	220c      	movs	r2, #12
 800c980:	2100      	movs	r1, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f000 fcc4 	bl	800d310 <memset>
  }

}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c990:	b480      	push	{r7}
 800c992:	b08b      	sub	sp, #44	@ 0x2c
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	881b      	ldrh	r3, [r3, #0]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	885b      	ldrh	r3, [r3, #2]
 800c9b8:	fb02 f303 	mul.w	r3, r2, r3
 800c9bc:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c9c2:	e013      	b.n	800c9ec <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c6:	1d1a      	adds	r2, r3, #4
 800c9c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9ca:	ed93 7a00 	vldr	s14, [r3]
 800c9ce:	6a3b      	ldr	r3, [r7, #32]
 800c9d0:	1d1a      	adds	r2, r3, #4
 800c9d2:	623a      	str	r2, [r7, #32]
 800c9d4:	edd3 7a00 	vldr	s15, [r3]
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	1d1a      	adds	r2, r3, #4
 800c9dc:	61fa      	str	r2, [r7, #28]
 800c9de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9e2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1e8      	bne.n	800c9c4 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c9f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	372c      	adds	r7, #44	@ 0x2c
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b085      	sub	sp, #20
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	60f8      	str	r0, [r7, #12]
 800ca0e:	607b      	str	r3, [r7, #4]
 800ca10:	460b      	mov	r3, r1
 800ca12:	817b      	strh	r3, [r7, #10]
 800ca14:	4613      	mov	r3, r2
 800ca16:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	897a      	ldrh	r2, [r7, #10]
 800ca1c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	893a      	ldrh	r2, [r7, #8]
 800ca22:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	605a      	str	r2, [r3, #4]
}
 800ca2a:	bf00      	nop
 800ca2c:	3714      	adds	r7, #20
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b0bb      	sub	sp, #236	@ 0xec
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	885b      	ldrh	r3, [r3, #2]
 800ca56:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ca58:	f04f 0300 	mov.w	r3, #0
 800ca5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca60:	f04f 0300 	mov.w	r3, #0
 800ca64:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ca66:	2300      	movs	r3, #0
 800ca68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ca6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ca72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ca78:	e03b      	b.n	800caf2 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ca7a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ca7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ca86:	e00c      	b.n	800caa2 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ca88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca8c:	1d1a      	adds	r2, r3, #4
 800ca8e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ca92:	f04f 0200 	mov.w	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]
        j--;
 800ca98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800caa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1ee      	bne.n	800ca88 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800caaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caae:	1d1a      	adds	r2, r3, #4
 800cab0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800cab4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800cab8:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800caba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cabe:	3b01      	subs	r3, #1
 800cac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800cac4:	e00c      	b.n	800cae0 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800cac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caca:	1d1a      	adds	r2, r3, #4
 800cacc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800cad0:	f04f 0200 	mov.w	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
        j--;
 800cad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cada:	3b01      	subs	r3, #1
 800cadc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800cae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1ee      	bne.n	800cac6 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800cae8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800caec:	3b01      	subs	r3, #1
 800caee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800caf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1bf      	bne.n	800ca7a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800cafa:	2300      	movs	r3, #0
 800cafc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb00:	e2c7      	b.n	800d092 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800cb02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb06:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	885b      	ldrh	r3, [r3, #2]
 800cb10:	3301      	adds	r3, #1
 800cb12:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800cb16:	fb01 f303 	mul.w	r3, r1, r3
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800cb22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800cb2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cb34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cb3e:	e02c      	b.n	800cb9a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	885b      	ldrh	r3, [r3, #2]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cb4e:	fb03 f101 	mul.w	r1, r3, r1
 800cb52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb56:	440b      	add	r3, r1
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800cb60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800cb68:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800cb6c:	eeb0 7ae7 	vabs.f32	s14, s15
 800cb70:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cb74:	eef0 7ae7 	vabs.f32	s15, s15
 800cb78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb80:	dd06      	ble.n	800cb90 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800cb82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cb86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800cb8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cb90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cb94:	3301      	adds	r3, #1
 800cb96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cb9a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cb9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d3cd      	bcc.n	800cb40 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800cba4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cba8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb0:	f000 809b 	beq.w	800ccea <arm_mat_inverse_f32+0x2b4>
 800cbb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cbb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	f000 8094 	beq.w	800ccea <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	885b      	ldrh	r3, [r3, #2]
 800cbd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbe4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbe6:	fb03 f202 	mul.w	r2, r3, r2
 800cbea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cbfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc02:	fb03 f202 	mul.w	r2, r3, r2
 800cc06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc0a:	4413      	add	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc12:	4413      	add	r3, r2
 800cc14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cc1e:	e018      	b.n	800cc52 <arm_mat_inverse_f32+0x21c>
 800cc20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc2c:	1d1a      	adds	r2, r3, #4
 800cc2e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800cc32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc36:	6812      	ldr	r2, [r2, #0]
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc3e:	1d1a      	adds	r2, r3, #4
 800cc40:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800cc44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc46:	601a      	str	r2, [r3, #0]
 800cc48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cc52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800cc56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	dbe1      	blt.n	800cc20 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	885b      	ldrh	r3, [r3, #2]
 800cc70:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc74:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc7a:	fb02 f303 	mul.w	r3, r2, r3
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cc84:	4413      	add	r3, r2
 800cc86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc90:	fb02 f303 	mul.w	r3, r2, r3
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cca0:	2300      	movs	r3, #0
 800cca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cca6:	e018      	b.n	800ccda <arm_mat_inverse_f32+0x2a4>
 800cca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccb4:	1d1a      	adds	r2, r3, #4
 800ccb6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ccba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ccbe:	6812      	ldr	r2, [r2, #0]
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ccc6:	1d1a      	adds	r2, r3, #4
 800ccc8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ccda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ccde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce0:	429a      	cmp	r2, r3
 800cce2:	dbe1      	blt.n	800cca8 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800cce4:	2301      	movs	r3, #1
 800cce6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800ccea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d009      	beq.n	800cd06 <arm_mat_inverse_f32+0x2d0>
 800ccf2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ccf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ccfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccfe:	d102      	bne.n	800cd06 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800cd00:	f06f 0304 	mvn.w	r3, #4
 800cd04:	e208      	b.n	800d118 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800cd06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd0a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800cd0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd12:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	885b      	ldrh	r3, [r3, #2]
 800cd22:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd32:	fb03 f202 	mul.w	r2, r3, r2
 800cd36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd3a:	4413      	add	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cd42:	4413      	add	r3, r2
 800cd44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd4e:	e011      	b.n	800cd74 <arm_mat_inverse_f32+0x33e>
 800cd50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd54:	1d1a      	adds	r2, r3, #4
 800cd56:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800cd5a:	ed93 7a00 	vldr	s14, [r3]
 800cd5e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd66:	edc3 7a00 	vstr	s15, [r3]
 800cd6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cd6e:	3301      	adds	r3, #1
 800cd70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800cd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	dbe8      	blt.n	800cd50 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	885b      	ldrh	r3, [r3, #2]
 800cd8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd94:	fb02 f303 	mul.w	r3, r2, r3
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cd9e:	4413      	add	r3, r2
 800cda0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cda4:	2300      	movs	r3, #0
 800cda6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cdaa:	e011      	b.n	800cdd0 <arm_mat_inverse_f32+0x39a>
 800cdac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cdb0:	1d1a      	adds	r2, r3, #4
 800cdb2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800cdb6:	ed93 7a00 	vldr	s14, [r3]
 800cdba:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cdbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc2:	edc3 7a00 	vstr	s15, [r3]
 800cdc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cdca:	3301      	adds	r3, #1
 800cdcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cdd0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800cdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	dbe8      	blt.n	800cdac <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800cde0:	e0ae      	b.n	800cf40 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685a      	ldr	r2, [r3, #4]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	885b      	ldrh	r3, [r3, #2]
 800cdea:	4619      	mov	r1, r3
 800cdec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdf0:	fb03 f101 	mul.w	r1, r3, r1
 800cdf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cdf8:	440b      	add	r3, r1
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	4413      	add	r3, r2
 800cdfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ce02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	885b      	ldrh	r3, [r3, #2]
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	613b      	str	r3, [r7, #16]
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ce32:	fb03 f202 	mul.w	r2, r3, r2
 800ce36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce3a:	4413      	add	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ce42:	4413      	add	r3, r2
 800ce44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce4c:	fb03 f202 	mul.w	r2, r3, r2
 800ce50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce54:	4413      	add	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ce62:	2300      	movs	r3, #0
 800ce64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce68:	e01a      	b.n	800cea0 <arm_mat_inverse_f32+0x46a>
 800ce6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce6e:	1d1a      	adds	r2, r3, #4
 800ce70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ce74:	ed93 7a00 	vldr	s14, [r3]
 800ce78:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ce7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ce84:	1d1a      	adds	r2, r3, #4
 800ce86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ce8a:	ed93 7a00 	vldr	s14, [r3]
 800ce8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce92:	edc3 7a00 	vstr	s15, [r3]
 800ce96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cea0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	dbdf      	blt.n	800ce6a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	885b      	ldrh	r3, [r3, #2]
 800cebe:	60fb      	str	r3, [r7, #12]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	60bb      	str	r3, [r7, #8]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ceca:	fb02 f303 	mul.w	r3, r2, r3
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ced4:	4413      	add	r3, r2
 800ced6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cede:	fb02 f303 	mul.w	r3, r2, r3
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cee8:	4413      	add	r3, r2
 800ceea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ceee:	2300      	movs	r3, #0
 800cef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cef4:	e01a      	b.n	800cf2c <arm_mat_inverse_f32+0x4f6>
 800cef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cefa:	1d1a      	adds	r2, r3, #4
 800cefc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf00:	ed93 7a00 	vldr	s14, [r3]
 800cf04:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cf08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cf10:	1d1a      	adds	r2, r3, #4
 800cf12:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800cf16:	ed93 7a00 	vldr	s14, [r3]
 800cf1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf1e:	edc3 7a00 	vstr	s15, [r3]
 800cf22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf26:	3301      	adds	r3, #1
 800cf28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cf2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	dbdf      	blt.n	800cef6 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800cf36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cf40:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cf44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf46:	429a      	cmp	r2, r3
 800cf48:	f4ff af4b 	bcc.w	800cde2 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800cf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4e:	3301      	adds	r3, #1
 800cf50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cf54:	e092      	b.n	800d07c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	685a      	ldr	r2, [r3, #4]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	885b      	ldrh	r3, [r3, #2]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf64:	fb03 f101 	mul.w	r1, r3, r1
 800cf68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf6c:	440b      	add	r3, r1
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	4413      	add	r3, r2
 800cf72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cf76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	677b      	str	r3, [r7, #116]	@ 0x74
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	885b      	ldrh	r3, [r3, #2]
 800cf90:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	623b      	str	r3, [r7, #32]
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cfa2:	fb03 f202 	mul.w	r2, r3, r2
 800cfa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cfaa:	4413      	add	r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cfb0:	4413      	add	r3, r2
 800cfb2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfb8:	fb03 f202 	mul.w	r2, r3, r2
 800cfbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cfc0:	4413      	add	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cfc6:	4413      	add	r3, r2
 800cfc8:	677b      	str	r3, [r7, #116]	@ 0x74
 800cfca:	2300      	movs	r3, #0
 800cfcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cfce:	e014      	b.n	800cffa <arm_mat_inverse_f32+0x5c4>
 800cfd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cfd2:	1d1a      	adds	r2, r3, #4
 800cfd4:	677a      	str	r2, [r7, #116]	@ 0x74
 800cfd6:	ed93 7a00 	vldr	s14, [r3]
 800cfda:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfe2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cfe4:	1d1a      	adds	r2, r3, #4
 800cfe6:	67ba      	str	r2, [r7, #120]	@ 0x78
 800cfe8:	ed93 7a00 	vldr	s14, [r3]
 800cfec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cff0:	edc3 7a00 	vstr	s15, [r3]
 800cff4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cff6:	3301      	adds	r3, #1
 800cff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cffa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cffc:	6a3b      	ldr	r3, [r7, #32]
 800cffe:	429a      	cmp	r2, r3
 800d000:	dbe6      	blt.n	800cfd0 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	885b      	ldrh	r3, [r3, #2]
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	61bb      	str	r3, [r7, #24]
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d01e:	fb02 f303 	mul.w	r3, r2, r3
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d026:	4413      	add	r3, r2
 800d028:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d02e:	fb02 f303 	mul.w	r3, r2, r3
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d036:	4413      	add	r3, r2
 800d038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d03a:	2300      	movs	r3, #0
 800d03c:	673b      	str	r3, [r7, #112]	@ 0x70
 800d03e:	e014      	b.n	800d06a <arm_mat_inverse_f32+0x634>
 800d040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d042:	1d1a      	adds	r2, r3, #4
 800d044:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d046:	ed93 7a00 	vldr	s14, [r3]
 800d04a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d054:	1d1a      	adds	r2, r3, #4
 800d056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d058:	ed93 7a00 	vldr	s14, [r3]
 800d05c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d060:	edc3 7a00 	vstr	s15, [r3]
 800d064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d066:	3301      	adds	r3, #1
 800d068:	673b      	str	r3, [r7, #112]	@ 0x70
 800d06a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	429a      	cmp	r2, r3
 800d070:	dbe6      	blt.n	800d040 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800d072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d076:	3301      	adds	r3, #1
 800d078:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d07c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d082:	429a      	cmp	r2, r3
 800d084:	f4ff af67 	bcc.w	800cf56 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800d088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d08c:	3301      	adds	r3, #1
 800d08e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d098:	429a      	cmp	r2, r3
 800d09a:	f4ff ad32 	bcc.w	800cb02 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800d0a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d033      	beq.n	800d114 <arm_mat_inverse_f32+0x6de>
 800d0ac:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d0b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b8:	d12c      	bne.n	800d114 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d0c6:	e010      	b.n	800d0ea <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800d0c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d0d0:	4413      	add	r3, r2
 800d0d2:	edd3 7a00 	vldr	s15, [r3]
 800d0d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0de:	d10d      	bne.n	800d0fc <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800d0e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0ee:	fb02 f303 	mul.w	r3, r2, r3
 800d0f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d3e6      	bcc.n	800d0c8 <arm_mat_inverse_f32+0x692>
 800d0fa:	e000      	b.n	800d0fe <arm_mat_inverse_f32+0x6c8>
            break;
 800d0fc:	bf00      	nop
      }

      if (i == numRows * numCols)
 800d0fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d102:	fb02 f303 	mul.w	r3, r2, r3
 800d106:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d102      	bne.n	800d114 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800d10e:	23fb      	movs	r3, #251	@ 0xfb
 800d110:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800d114:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800d118:	4618      	mov	r0, r3
 800d11a:	37ec      	adds	r7, #236	@ 0xec
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d124:	b480      	push	{r7}
 800d126:	b093      	sub	sp, #76	@ 0x4c
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	885b      	ldrh	r3, [r3, #2]
 800d158:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	885b      	ldrh	r3, [r3, #2]
 800d15e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d160:	2300      	movs	r3, #0
 800d162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d164:	8b7b      	ldrh	r3, [r7, #26]
 800d166:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	69fa      	ldr	r2, [r7, #28]
 800d16e:	4413      	add	r3, r2
 800d170:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d172:	8b3b      	ldrh	r3, [r7, #24]
 800d174:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d17c:	f04f 0300 	mov.w	r3, #0
 800d180:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d184:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d186:	8afb      	ldrh	r3, [r7, #22]
 800d188:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d18a:	e017      	b.n	800d1bc <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d18c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d18e:	1d1a      	adds	r2, r3, #4
 800d190:	647a      	str	r2, [r7, #68]	@ 0x44
 800d192:	ed93 7a00 	vldr	s14, [r3]
 800d196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d198:	edd3 7a00 	vldr	s15, [r3]
 800d19c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1a0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d1a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1a8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d1ac:	8b3b      	ldrh	r3, [r7, #24]
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1b2:	4413      	add	r3, r2
 800d1b4:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e4      	bne.n	800d18c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c4:	1d1a      	adds	r2, r3, #4
 800d1c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d1c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1ca:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d1d2:	8b3a      	ldrh	r2, [r7, #24]
 800d1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	6a3a      	ldr	r2, [r7, #32]
 800d1dc:	4413      	add	r3, r2
 800d1de:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1ca      	bne.n	800d17c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d1e6:	8b3b      	ldrh	r3, [r7, #24]
 800d1e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1ea:	4413      	add	r3, r2
 800d1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d1ee:	8afb      	ldrh	r3, [r7, #22]
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d1f4:	4413      	add	r3, r2
 800d1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1b1      	bne.n	800d168 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d204:	2300      	movs	r3, #0
 800d206:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d208:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	374c      	adds	r7, #76	@ 0x4c
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d218:	b480      	push	{r7}
 800d21a:	b08b      	sub	sp, #44	@ 0x2c
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	885b      	ldrh	r3, [r3, #2]
 800d240:	fb02 f303 	mul.w	r3, r2, r3
 800d244:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d24a:	e013      	b.n	800d274 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800d24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24e:	1d1a      	adds	r2, r3, #4
 800d250:	627a      	str	r2, [r7, #36]	@ 0x24
 800d252:	ed93 7a00 	vldr	s14, [r3]
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	1d1a      	adds	r2, r3, #4
 800d25a:	623a      	str	r2, [r7, #32]
 800d25c:	edd3 7a00 	vldr	s15, [r3]
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	1d1a      	adds	r2, r3, #4
 800d264:	61fa      	str	r2, [r7, #28]
 800d266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d26a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	3b01      	subs	r3, #1
 800d272:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1e8      	bne.n	800d24c <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d27a:	2300      	movs	r3, #0
 800d27c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d27e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d282:	4618      	mov	r0, r3
 800d284:	372c      	adds	r7, #44	@ 0x2c
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d28e:	b480      	push	{r7}
 800d290:	b08b      	sub	sp, #44	@ 0x2c
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	881b      	ldrh	r3, [r3, #0]
 800d2a8:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	885b      	ldrh	r3, [r3, #2]
 800d2ae:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800d2b0:	89fb      	ldrh	r3, [r7, #14]
 800d2b2:	61bb      	str	r3, [r7, #24]
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	693a      	ldr	r2, [r7, #16]
 800d2be:	4413      	add	r3, r2
 800d2c0:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800d2c2:	89bb      	ldrh	r3, [r7, #12]
 800d2c4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800d2c6:	e00d      	b.n	800d2e4 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ca:	1d1a      	adds	r2, r3, #4
 800d2cc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800d2d4:	89fb      	ldrh	r3, [r7, #14]
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	6a3a      	ldr	r2, [r7, #32]
 800d2da:	4413      	add	r3, r2
 800d2dc:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1ee      	bne.n	800d2c8 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1dd      	bne.n	800d2b8 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800d300:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d304:	4618      	mov	r0, r3
 800d306:	372c      	adds	r7, #44	@ 0x2c
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <memset>:
 800d310:	4402      	add	r2, r0
 800d312:	4603      	mov	r3, r0
 800d314:	4293      	cmp	r3, r2
 800d316:	d100      	bne.n	800d31a <memset+0xa>
 800d318:	4770      	bx	lr
 800d31a:	f803 1b01 	strb.w	r1, [r3], #1
 800d31e:	e7f9      	b.n	800d314 <memset+0x4>

0800d320 <__errno>:
 800d320:	4b01      	ldr	r3, [pc, #4]	@ (800d328 <__errno+0x8>)
 800d322:	6818      	ldr	r0, [r3, #0]
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	20000264 	.word	0x20000264

0800d32c <__libc_init_array>:
 800d32c:	b570      	push	{r4, r5, r6, lr}
 800d32e:	4d0d      	ldr	r5, [pc, #52]	@ (800d364 <__libc_init_array+0x38>)
 800d330:	4c0d      	ldr	r4, [pc, #52]	@ (800d368 <__libc_init_array+0x3c>)
 800d332:	1b64      	subs	r4, r4, r5
 800d334:	10a4      	asrs	r4, r4, #2
 800d336:	2600      	movs	r6, #0
 800d338:	42a6      	cmp	r6, r4
 800d33a:	d109      	bne.n	800d350 <__libc_init_array+0x24>
 800d33c:	4d0b      	ldr	r5, [pc, #44]	@ (800d36c <__libc_init_array+0x40>)
 800d33e:	4c0c      	ldr	r4, [pc, #48]	@ (800d370 <__libc_init_array+0x44>)
 800d340:	f000 fd78 	bl	800de34 <_init>
 800d344:	1b64      	subs	r4, r4, r5
 800d346:	10a4      	asrs	r4, r4, #2
 800d348:	2600      	movs	r6, #0
 800d34a:	42a6      	cmp	r6, r4
 800d34c:	d105      	bne.n	800d35a <__libc_init_array+0x2e>
 800d34e:	bd70      	pop	{r4, r5, r6, pc}
 800d350:	f855 3b04 	ldr.w	r3, [r5], #4
 800d354:	4798      	blx	r3
 800d356:	3601      	adds	r6, #1
 800d358:	e7ee      	b.n	800d338 <__libc_init_array+0xc>
 800d35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d35e:	4798      	blx	r3
 800d360:	3601      	adds	r6, #1
 800d362:	e7f2      	b.n	800d34a <__libc_init_array+0x1e>
 800d364:	0800e264 	.word	0x0800e264
 800d368:	0800e264 	.word	0x0800e264
 800d36c:	0800e264 	.word	0x0800e264
 800d370:	0800e268 	.word	0x0800e268

0800d374 <memcpy>:
 800d374:	440a      	add	r2, r1
 800d376:	4291      	cmp	r1, r2
 800d378:	f100 33ff 	add.w	r3, r0, #4294967295
 800d37c:	d100      	bne.n	800d380 <memcpy+0xc>
 800d37e:	4770      	bx	lr
 800d380:	b510      	push	{r4, lr}
 800d382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d38a:	4291      	cmp	r1, r2
 800d38c:	d1f9      	bne.n	800d382 <memcpy+0xe>
 800d38e:	bd10      	pop	{r4, pc}

0800d390 <sqrtf>:
 800d390:	b508      	push	{r3, lr}
 800d392:	ed2d 8b02 	vpush	{d8}
 800d396:	eeb0 8a40 	vmov.f32	s16, s0
 800d39a:	f000 f85d 	bl	800d458 <__ieee754_sqrtf>
 800d39e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a6:	d60c      	bvs.n	800d3c2 <sqrtf+0x32>
 800d3a8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d3c8 <sqrtf+0x38>
 800d3ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b4:	d505      	bpl.n	800d3c2 <sqrtf+0x32>
 800d3b6:	f7ff ffb3 	bl	800d320 <__errno>
 800d3ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d3be:	2321      	movs	r3, #33	@ 0x21
 800d3c0:	6003      	str	r3, [r0, #0]
 800d3c2:	ecbd 8b02 	vpop	{d8}
 800d3c6:	bd08      	pop	{r3, pc}
 800d3c8:	00000000 	.word	0x00000000

0800d3cc <sinf>:
 800d3cc:	ee10 3a10 	vmov	r3, s0
 800d3d0:	b507      	push	{r0, r1, r2, lr}
 800d3d2:	4a1f      	ldr	r2, [pc, #124]	@ (800d450 <sinf+0x84>)
 800d3d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d807      	bhi.n	800d3ec <sinf+0x20>
 800d3dc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d454 <sinf+0x88>
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	b003      	add	sp, #12
 800d3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3e8:	f000 b892 	b.w	800d510 <__kernel_sinf>
 800d3ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d3f0:	d304      	bcc.n	800d3fc <sinf+0x30>
 800d3f2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d3f6:	b003      	add	sp, #12
 800d3f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3fc:	4668      	mov	r0, sp
 800d3fe:	f000 f8cf 	bl	800d5a0 <__ieee754_rem_pio2f>
 800d402:	f000 0003 	and.w	r0, r0, #3
 800d406:	2801      	cmp	r0, #1
 800d408:	d00a      	beq.n	800d420 <sinf+0x54>
 800d40a:	2802      	cmp	r0, #2
 800d40c:	d00f      	beq.n	800d42e <sinf+0x62>
 800d40e:	b9c0      	cbnz	r0, 800d442 <sinf+0x76>
 800d410:	eddd 0a01 	vldr	s1, [sp, #4]
 800d414:	ed9d 0a00 	vldr	s0, [sp]
 800d418:	2001      	movs	r0, #1
 800d41a:	f000 f879 	bl	800d510 <__kernel_sinf>
 800d41e:	e7ea      	b.n	800d3f6 <sinf+0x2a>
 800d420:	eddd 0a01 	vldr	s1, [sp, #4]
 800d424:	ed9d 0a00 	vldr	s0, [sp]
 800d428:	f000 f81a 	bl	800d460 <__kernel_cosf>
 800d42c:	e7e3      	b.n	800d3f6 <sinf+0x2a>
 800d42e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d432:	ed9d 0a00 	vldr	s0, [sp]
 800d436:	2001      	movs	r0, #1
 800d438:	f000 f86a 	bl	800d510 <__kernel_sinf>
 800d43c:	eeb1 0a40 	vneg.f32	s0, s0
 800d440:	e7d9      	b.n	800d3f6 <sinf+0x2a>
 800d442:	eddd 0a01 	vldr	s1, [sp, #4]
 800d446:	ed9d 0a00 	vldr	s0, [sp]
 800d44a:	f000 f809 	bl	800d460 <__kernel_cosf>
 800d44e:	e7f5      	b.n	800d43c <sinf+0x70>
 800d450:	3f490fd8 	.word	0x3f490fd8
 800d454:	00000000 	.word	0x00000000

0800d458 <__ieee754_sqrtf>:
 800d458:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d45c:	4770      	bx	lr
	...

0800d460 <__kernel_cosf>:
 800d460:	ee10 3a10 	vmov	r3, s0
 800d464:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d468:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d46c:	eef0 6a40 	vmov.f32	s13, s0
 800d470:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d474:	d204      	bcs.n	800d480 <__kernel_cosf+0x20>
 800d476:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d47a:	ee17 2a90 	vmov	r2, s15
 800d47e:	b342      	cbz	r2, 800d4d2 <__kernel_cosf+0x72>
 800d480:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d484:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d4f0 <__kernel_cosf+0x90>
 800d488:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d4f4 <__kernel_cosf+0x94>
 800d48c:	4a1a      	ldr	r2, [pc, #104]	@ (800d4f8 <__kernel_cosf+0x98>)
 800d48e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d492:	4293      	cmp	r3, r2
 800d494:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d4fc <__kernel_cosf+0x9c>
 800d498:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d49c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d500 <__kernel_cosf+0xa0>
 800d4a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d4a4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d504 <__kernel_cosf+0xa4>
 800d4a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d4ac:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d508 <__kernel_cosf+0xa8>
 800d4b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d4b4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d4b8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d4bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d4c0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4c8:	d804      	bhi.n	800d4d4 <__kernel_cosf+0x74>
 800d4ca:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d4ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d4d2:	4770      	bx	lr
 800d4d4:	4a0d      	ldr	r2, [pc, #52]	@ (800d50c <__kernel_cosf+0xac>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	bf9a      	itte	ls
 800d4da:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d4de:	ee07 3a10 	vmovls	s14, r3
 800d4e2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d4e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d4ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4ee:	e7ec      	b.n	800d4ca <__kernel_cosf+0x6a>
 800d4f0:	ad47d74e 	.word	0xad47d74e
 800d4f4:	310f74f6 	.word	0x310f74f6
 800d4f8:	3e999999 	.word	0x3e999999
 800d4fc:	b493f27c 	.word	0xb493f27c
 800d500:	37d00d01 	.word	0x37d00d01
 800d504:	bab60b61 	.word	0xbab60b61
 800d508:	3d2aaaab 	.word	0x3d2aaaab
 800d50c:	3f480000 	.word	0x3f480000

0800d510 <__kernel_sinf>:
 800d510:	ee10 3a10 	vmov	r3, s0
 800d514:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d518:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d51c:	d204      	bcs.n	800d528 <__kernel_sinf+0x18>
 800d51e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d522:	ee17 3a90 	vmov	r3, s15
 800d526:	b35b      	cbz	r3, 800d580 <__kernel_sinf+0x70>
 800d528:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d52c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d584 <__kernel_sinf+0x74>
 800d530:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d588 <__kernel_sinf+0x78>
 800d534:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d538:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d58c <__kernel_sinf+0x7c>
 800d53c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d540:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d590 <__kernel_sinf+0x80>
 800d544:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d548:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d594 <__kernel_sinf+0x84>
 800d54c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d550:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d554:	b930      	cbnz	r0, 800d564 <__kernel_sinf+0x54>
 800d556:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d598 <__kernel_sinf+0x88>
 800d55a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d55e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d562:	4770      	bx	lr
 800d564:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d568:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d56c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d570:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d574:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d59c <__kernel_sinf+0x8c>
 800d578:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d57c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	2f2ec9d3 	.word	0x2f2ec9d3
 800d588:	b2d72f34 	.word	0xb2d72f34
 800d58c:	3638ef1b 	.word	0x3638ef1b
 800d590:	b9500d01 	.word	0xb9500d01
 800d594:	3c088889 	.word	0x3c088889
 800d598:	be2aaaab 	.word	0xbe2aaaab
 800d59c:	3e2aaaab 	.word	0x3e2aaaab

0800d5a0 <__ieee754_rem_pio2f>:
 800d5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5a2:	ee10 6a10 	vmov	r6, s0
 800d5a6:	4b88      	ldr	r3, [pc, #544]	@ (800d7c8 <__ieee754_rem_pio2f+0x228>)
 800d5a8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d5ac:	429d      	cmp	r5, r3
 800d5ae:	b087      	sub	sp, #28
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	d805      	bhi.n	800d5c0 <__ieee754_rem_pio2f+0x20>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	ed80 0a00 	vstr	s0, [r0]
 800d5ba:	6043      	str	r3, [r0, #4]
 800d5bc:	2000      	movs	r0, #0
 800d5be:	e022      	b.n	800d606 <__ieee754_rem_pio2f+0x66>
 800d5c0:	4b82      	ldr	r3, [pc, #520]	@ (800d7cc <__ieee754_rem_pio2f+0x22c>)
 800d5c2:	429d      	cmp	r5, r3
 800d5c4:	d83a      	bhi.n	800d63c <__ieee754_rem_pio2f+0x9c>
 800d5c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d5ca:	2e00      	cmp	r6, #0
 800d5cc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d7d0 <__ieee754_rem_pio2f+0x230>
 800d5d0:	4a80      	ldr	r2, [pc, #512]	@ (800d7d4 <__ieee754_rem_pio2f+0x234>)
 800d5d2:	f023 030f 	bic.w	r3, r3, #15
 800d5d6:	dd18      	ble.n	800d60a <__ieee754_rem_pio2f+0x6a>
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d5de:	bf09      	itett	eq
 800d5e0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d7d8 <__ieee754_rem_pio2f+0x238>
 800d5e4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d7dc <__ieee754_rem_pio2f+0x23c>
 800d5e8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d7e0 <__ieee754_rem_pio2f+0x240>
 800d5ec:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d5f0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d5f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5f8:	ed80 7a00 	vstr	s14, [r0]
 800d5fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d600:	edc0 7a01 	vstr	s15, [r0, #4]
 800d604:	2001      	movs	r0, #1
 800d606:	b007      	add	sp, #28
 800d608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d60a:	4293      	cmp	r3, r2
 800d60c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d610:	bf09      	itett	eq
 800d612:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d7d8 <__ieee754_rem_pio2f+0x238>
 800d616:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d7dc <__ieee754_rem_pio2f+0x23c>
 800d61a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d7e0 <__ieee754_rem_pio2f+0x240>
 800d61e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d622:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d62a:	ed80 7a00 	vstr	s14, [r0]
 800d62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d632:	edc0 7a01 	vstr	s15, [r0, #4]
 800d636:	f04f 30ff 	mov.w	r0, #4294967295
 800d63a:	e7e4      	b.n	800d606 <__ieee754_rem_pio2f+0x66>
 800d63c:	4b69      	ldr	r3, [pc, #420]	@ (800d7e4 <__ieee754_rem_pio2f+0x244>)
 800d63e:	429d      	cmp	r5, r3
 800d640:	d873      	bhi.n	800d72a <__ieee754_rem_pio2f+0x18a>
 800d642:	f000 f8dd 	bl	800d800 <fabsf>
 800d646:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d7e8 <__ieee754_rem_pio2f+0x248>
 800d64a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d64e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d65a:	ee17 0a90 	vmov	r0, s15
 800d65e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d7d0 <__ieee754_rem_pio2f+0x230>
 800d662:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d666:	281f      	cmp	r0, #31
 800d668:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d7dc <__ieee754_rem_pio2f+0x23c>
 800d66c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d670:	eeb1 6a47 	vneg.f32	s12, s14
 800d674:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d678:	ee16 1a90 	vmov	r1, s13
 800d67c:	dc09      	bgt.n	800d692 <__ieee754_rem_pio2f+0xf2>
 800d67e:	4a5b      	ldr	r2, [pc, #364]	@ (800d7ec <__ieee754_rem_pio2f+0x24c>)
 800d680:	1e47      	subs	r7, r0, #1
 800d682:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d686:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d68a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d68e:	4293      	cmp	r3, r2
 800d690:	d107      	bne.n	800d6a2 <__ieee754_rem_pio2f+0x102>
 800d692:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d696:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d69a:	2a08      	cmp	r2, #8
 800d69c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d6a0:	dc14      	bgt.n	800d6cc <__ieee754_rem_pio2f+0x12c>
 800d6a2:	6021      	str	r1, [r4, #0]
 800d6a4:	ed94 7a00 	vldr	s14, [r4]
 800d6a8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d6ac:	2e00      	cmp	r6, #0
 800d6ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d6b2:	ed84 0a01 	vstr	s0, [r4, #4]
 800d6b6:	daa6      	bge.n	800d606 <__ieee754_rem_pio2f+0x66>
 800d6b8:	eeb1 7a47 	vneg.f32	s14, s14
 800d6bc:	eeb1 0a40 	vneg.f32	s0, s0
 800d6c0:	ed84 7a00 	vstr	s14, [r4]
 800d6c4:	ed84 0a01 	vstr	s0, [r4, #4]
 800d6c8:	4240      	negs	r0, r0
 800d6ca:	e79c      	b.n	800d606 <__ieee754_rem_pio2f+0x66>
 800d6cc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d7d8 <__ieee754_rem_pio2f+0x238>
 800d6d0:	eef0 6a40 	vmov.f32	s13, s0
 800d6d4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d6d8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d6dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d6e0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d7e0 <__ieee754_rem_pio2f+0x240>
 800d6e4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d6e8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d6ec:	ee15 2a90 	vmov	r2, s11
 800d6f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d6f4:	1a5b      	subs	r3, r3, r1
 800d6f6:	2b19      	cmp	r3, #25
 800d6f8:	dc04      	bgt.n	800d704 <__ieee754_rem_pio2f+0x164>
 800d6fa:	edc4 5a00 	vstr	s11, [r4]
 800d6fe:	eeb0 0a66 	vmov.f32	s0, s13
 800d702:	e7cf      	b.n	800d6a4 <__ieee754_rem_pio2f+0x104>
 800d704:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d7f0 <__ieee754_rem_pio2f+0x250>
 800d708:	eeb0 0a66 	vmov.f32	s0, s13
 800d70c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d710:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d714:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d7f4 <__ieee754_rem_pio2f+0x254>
 800d718:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d71c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d720:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d724:	ed84 7a00 	vstr	s14, [r4]
 800d728:	e7bc      	b.n	800d6a4 <__ieee754_rem_pio2f+0x104>
 800d72a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d72e:	d306      	bcc.n	800d73e <__ieee754_rem_pio2f+0x19e>
 800d730:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d734:	edc0 7a01 	vstr	s15, [r0, #4]
 800d738:	edc0 7a00 	vstr	s15, [r0]
 800d73c:	e73e      	b.n	800d5bc <__ieee754_rem_pio2f+0x1c>
 800d73e:	15ea      	asrs	r2, r5, #23
 800d740:	3a86      	subs	r2, #134	@ 0x86
 800d742:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d746:	ee07 3a90 	vmov	s15, r3
 800d74a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d74e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d7f8 <__ieee754_rem_pio2f+0x258>
 800d752:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d756:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d75a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d75e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d762:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d766:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d76a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d76e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d772:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d776:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77e:	edcd 7a05 	vstr	s15, [sp, #20]
 800d782:	d11e      	bne.n	800d7c2 <__ieee754_rem_pio2f+0x222>
 800d784:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d78c:	bf0c      	ite	eq
 800d78e:	2301      	moveq	r3, #1
 800d790:	2302      	movne	r3, #2
 800d792:	491a      	ldr	r1, [pc, #104]	@ (800d7fc <__ieee754_rem_pio2f+0x25c>)
 800d794:	9101      	str	r1, [sp, #4]
 800d796:	2102      	movs	r1, #2
 800d798:	9100      	str	r1, [sp, #0]
 800d79a:	a803      	add	r0, sp, #12
 800d79c:	4621      	mov	r1, r4
 800d79e:	f000 f89d 	bl	800d8dc <__kernel_rem_pio2f>
 800d7a2:	2e00      	cmp	r6, #0
 800d7a4:	f6bf af2f 	bge.w	800d606 <__ieee754_rem_pio2f+0x66>
 800d7a8:	edd4 7a00 	vldr	s15, [r4]
 800d7ac:	eef1 7a67 	vneg.f32	s15, s15
 800d7b0:	edc4 7a00 	vstr	s15, [r4]
 800d7b4:	edd4 7a01 	vldr	s15, [r4, #4]
 800d7b8:	eef1 7a67 	vneg.f32	s15, s15
 800d7bc:	edc4 7a01 	vstr	s15, [r4, #4]
 800d7c0:	e782      	b.n	800d6c8 <__ieee754_rem_pio2f+0x128>
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	e7e5      	b.n	800d792 <__ieee754_rem_pio2f+0x1f2>
 800d7c6:	bf00      	nop
 800d7c8:	3f490fd8 	.word	0x3f490fd8
 800d7cc:	4016cbe3 	.word	0x4016cbe3
 800d7d0:	3fc90f80 	.word	0x3fc90f80
 800d7d4:	3fc90fd0 	.word	0x3fc90fd0
 800d7d8:	37354400 	.word	0x37354400
 800d7dc:	37354443 	.word	0x37354443
 800d7e0:	2e85a308 	.word	0x2e85a308
 800d7e4:	43490f80 	.word	0x43490f80
 800d7e8:	3f22f984 	.word	0x3f22f984
 800d7ec:	0800de8c 	.word	0x0800de8c
 800d7f0:	2e85a300 	.word	0x2e85a300
 800d7f4:	248d3132 	.word	0x248d3132
 800d7f8:	43800000 	.word	0x43800000
 800d7fc:	0800df0c 	.word	0x0800df0c

0800d800 <fabsf>:
 800d800:	ee10 3a10 	vmov	r3, s0
 800d804:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d808:	ee00 3a10 	vmov	s0, r3
 800d80c:	4770      	bx	lr
	...

0800d810 <scalbnf>:
 800d810:	ee10 3a10 	vmov	r3, s0
 800d814:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d818:	d02b      	beq.n	800d872 <scalbnf+0x62>
 800d81a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d81e:	d302      	bcc.n	800d826 <scalbnf+0x16>
 800d820:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d824:	4770      	bx	lr
 800d826:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d82a:	d123      	bne.n	800d874 <scalbnf+0x64>
 800d82c:	4b24      	ldr	r3, [pc, #144]	@ (800d8c0 <scalbnf+0xb0>)
 800d82e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d8c4 <scalbnf+0xb4>
 800d832:	4298      	cmp	r0, r3
 800d834:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d838:	db17      	blt.n	800d86a <scalbnf+0x5a>
 800d83a:	ee10 3a10 	vmov	r3, s0
 800d83e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d842:	3a19      	subs	r2, #25
 800d844:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d848:	4288      	cmp	r0, r1
 800d84a:	dd15      	ble.n	800d878 <scalbnf+0x68>
 800d84c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d8c8 <scalbnf+0xb8>
 800d850:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d8cc <scalbnf+0xbc>
 800d854:	ee10 3a10 	vmov	r3, s0
 800d858:	eeb0 7a67 	vmov.f32	s14, s15
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	bfb8      	it	lt
 800d860:	eef0 7a66 	vmovlt.f32	s15, s13
 800d864:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d868:	4770      	bx	lr
 800d86a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d8d0 <scalbnf+0xc0>
 800d86e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d872:	4770      	bx	lr
 800d874:	0dd2      	lsrs	r2, r2, #23
 800d876:	e7e5      	b.n	800d844 <scalbnf+0x34>
 800d878:	4410      	add	r0, r2
 800d87a:	28fe      	cmp	r0, #254	@ 0xfe
 800d87c:	dce6      	bgt.n	800d84c <scalbnf+0x3c>
 800d87e:	2800      	cmp	r0, #0
 800d880:	dd06      	ble.n	800d890 <scalbnf+0x80>
 800d882:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d886:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d88a:	ee00 3a10 	vmov	s0, r3
 800d88e:	4770      	bx	lr
 800d890:	f110 0f16 	cmn.w	r0, #22
 800d894:	da09      	bge.n	800d8aa <scalbnf+0x9a>
 800d896:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d8d0 <scalbnf+0xc0>
 800d89a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d8d4 <scalbnf+0xc4>
 800d89e:	ee10 3a10 	vmov	r3, s0
 800d8a2:	eeb0 7a67 	vmov.f32	s14, s15
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	e7d9      	b.n	800d85e <scalbnf+0x4e>
 800d8aa:	3019      	adds	r0, #25
 800d8ac:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d8b0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d8b4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d8d8 <scalbnf+0xc8>
 800d8b8:	ee07 3a90 	vmov	s15, r3
 800d8bc:	e7d7      	b.n	800d86e <scalbnf+0x5e>
 800d8be:	bf00      	nop
 800d8c0:	ffff3cb0 	.word	0xffff3cb0
 800d8c4:	4c000000 	.word	0x4c000000
 800d8c8:	7149f2ca 	.word	0x7149f2ca
 800d8cc:	f149f2ca 	.word	0xf149f2ca
 800d8d0:	0da24260 	.word	0x0da24260
 800d8d4:	8da24260 	.word	0x8da24260
 800d8d8:	33000000 	.word	0x33000000

0800d8dc <__kernel_rem_pio2f>:
 800d8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e0:	ed2d 8b04 	vpush	{d8-d9}
 800d8e4:	b0d9      	sub	sp, #356	@ 0x164
 800d8e6:	4690      	mov	r8, r2
 800d8e8:	9001      	str	r0, [sp, #4]
 800d8ea:	4ab6      	ldr	r2, [pc, #728]	@ (800dbc4 <__kernel_rem_pio2f+0x2e8>)
 800d8ec:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d8ee:	f118 0f04 	cmn.w	r8, #4
 800d8f2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d8f6:	460f      	mov	r7, r1
 800d8f8:	f103 3bff 	add.w	fp, r3, #4294967295
 800d8fc:	db26      	blt.n	800d94c <__kernel_rem_pio2f+0x70>
 800d8fe:	f1b8 0203 	subs.w	r2, r8, #3
 800d902:	bf48      	it	mi
 800d904:	f108 0204 	addmi.w	r2, r8, #4
 800d908:	10d2      	asrs	r2, r2, #3
 800d90a:	1c55      	adds	r5, r2, #1
 800d90c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d90e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800dbd4 <__kernel_rem_pio2f+0x2f8>
 800d912:	00e8      	lsls	r0, r5, #3
 800d914:	eba2 060b 	sub.w	r6, r2, fp
 800d918:	9002      	str	r0, [sp, #8]
 800d91a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d91e:	eb0a 0c0b 	add.w	ip, sl, fp
 800d922:	ac1c      	add	r4, sp, #112	@ 0x70
 800d924:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d928:	2000      	movs	r0, #0
 800d92a:	4560      	cmp	r0, ip
 800d92c:	dd10      	ble.n	800d950 <__kernel_rem_pio2f+0x74>
 800d92e:	a91c      	add	r1, sp, #112	@ 0x70
 800d930:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d934:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d938:	2600      	movs	r6, #0
 800d93a:	4556      	cmp	r6, sl
 800d93c:	dc24      	bgt.n	800d988 <__kernel_rem_pio2f+0xac>
 800d93e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d942:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800dbd4 <__kernel_rem_pio2f+0x2f8>
 800d946:	4684      	mov	ip, r0
 800d948:	2400      	movs	r4, #0
 800d94a:	e016      	b.n	800d97a <__kernel_rem_pio2f+0x9e>
 800d94c:	2200      	movs	r2, #0
 800d94e:	e7dc      	b.n	800d90a <__kernel_rem_pio2f+0x2e>
 800d950:	42c6      	cmn	r6, r0
 800d952:	bf5d      	ittte	pl
 800d954:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d958:	ee07 1a90 	vmovpl	s15, r1
 800d95c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d960:	eef0 7a47 	vmovmi.f32	s15, s14
 800d964:	ece4 7a01 	vstmia	r4!, {s15}
 800d968:	3001      	adds	r0, #1
 800d96a:	e7de      	b.n	800d92a <__kernel_rem_pio2f+0x4e>
 800d96c:	ecfe 6a01 	vldmia	lr!, {s13}
 800d970:	ed3c 7a01 	vldmdb	ip!, {s14}
 800d974:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d978:	3401      	adds	r4, #1
 800d97a:	455c      	cmp	r4, fp
 800d97c:	ddf6      	ble.n	800d96c <__kernel_rem_pio2f+0x90>
 800d97e:	ece9 7a01 	vstmia	r9!, {s15}
 800d982:	3601      	adds	r6, #1
 800d984:	3004      	adds	r0, #4
 800d986:	e7d8      	b.n	800d93a <__kernel_rem_pio2f+0x5e>
 800d988:	a908      	add	r1, sp, #32
 800d98a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d98e:	9104      	str	r1, [sp, #16]
 800d990:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d992:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800dbd0 <__kernel_rem_pio2f+0x2f4>
 800d996:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800dbcc <__kernel_rem_pio2f+0x2f0>
 800d99a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d99e:	9203      	str	r2, [sp, #12]
 800d9a0:	4654      	mov	r4, sl
 800d9a2:	00a2      	lsls	r2, r4, #2
 800d9a4:	9205      	str	r2, [sp, #20]
 800d9a6:	aa58      	add	r2, sp, #352	@ 0x160
 800d9a8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d9ac:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d9b0:	a944      	add	r1, sp, #272	@ 0x110
 800d9b2:	aa08      	add	r2, sp, #32
 800d9b4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d9b8:	4694      	mov	ip, r2
 800d9ba:	4626      	mov	r6, r4
 800d9bc:	2e00      	cmp	r6, #0
 800d9be:	dc4c      	bgt.n	800da5a <__kernel_rem_pio2f+0x17e>
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d9c6:	f7ff ff23 	bl	800d810 <scalbnf>
 800d9ca:	eeb0 8a40 	vmov.f32	s16, s0
 800d9ce:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d9d2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d9d6:	f000 f9e9 	bl	800ddac <floorf>
 800d9da:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d9de:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d9e2:	2d00      	cmp	r5, #0
 800d9e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9e8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d9ec:	ee17 9a90 	vmov	r9, s15
 800d9f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9f4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d9f8:	dd41      	ble.n	800da7e <__kernel_rem_pio2f+0x1a2>
 800d9fa:	f104 3cff 	add.w	ip, r4, #4294967295
 800d9fe:	a908      	add	r1, sp, #32
 800da00:	f1c5 0e08 	rsb	lr, r5, #8
 800da04:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800da08:	fa46 f00e 	asr.w	r0, r6, lr
 800da0c:	4481      	add	r9, r0
 800da0e:	fa00 f00e 	lsl.w	r0, r0, lr
 800da12:	1a36      	subs	r6, r6, r0
 800da14:	f1c5 0007 	rsb	r0, r5, #7
 800da18:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800da1c:	4106      	asrs	r6, r0
 800da1e:	2e00      	cmp	r6, #0
 800da20:	dd3c      	ble.n	800da9c <__kernel_rem_pio2f+0x1c0>
 800da22:	f04f 0e00 	mov.w	lr, #0
 800da26:	f109 0901 	add.w	r9, r9, #1
 800da2a:	4670      	mov	r0, lr
 800da2c:	4574      	cmp	r4, lr
 800da2e:	dc68      	bgt.n	800db02 <__kernel_rem_pio2f+0x226>
 800da30:	2d00      	cmp	r5, #0
 800da32:	dd03      	ble.n	800da3c <__kernel_rem_pio2f+0x160>
 800da34:	2d01      	cmp	r5, #1
 800da36:	d074      	beq.n	800db22 <__kernel_rem_pio2f+0x246>
 800da38:	2d02      	cmp	r5, #2
 800da3a:	d07d      	beq.n	800db38 <__kernel_rem_pio2f+0x25c>
 800da3c:	2e02      	cmp	r6, #2
 800da3e:	d12d      	bne.n	800da9c <__kernel_rem_pio2f+0x1c0>
 800da40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800da44:	ee30 8a48 	vsub.f32	s16, s0, s16
 800da48:	b340      	cbz	r0, 800da9c <__kernel_rem_pio2f+0x1c0>
 800da4a:	4628      	mov	r0, r5
 800da4c:	9306      	str	r3, [sp, #24]
 800da4e:	f7ff fedf 	bl	800d810 <scalbnf>
 800da52:	9b06      	ldr	r3, [sp, #24]
 800da54:	ee38 8a40 	vsub.f32	s16, s16, s0
 800da58:	e020      	b.n	800da9c <__kernel_rem_pio2f+0x1c0>
 800da5a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800da5e:	3e01      	subs	r6, #1
 800da60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da68:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800da6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800da70:	ecac 0a01 	vstmia	ip!, {s0}
 800da74:	ed30 0a01 	vldmdb	r0!, {s0}
 800da78:	ee37 0a80 	vadd.f32	s0, s15, s0
 800da7c:	e79e      	b.n	800d9bc <__kernel_rem_pio2f+0xe0>
 800da7e:	d105      	bne.n	800da8c <__kernel_rem_pio2f+0x1b0>
 800da80:	1e60      	subs	r0, r4, #1
 800da82:	a908      	add	r1, sp, #32
 800da84:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800da88:	11f6      	asrs	r6, r6, #7
 800da8a:	e7c8      	b.n	800da1e <__kernel_rem_pio2f+0x142>
 800da8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800da90:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800da94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da98:	da31      	bge.n	800dafe <__kernel_rem_pio2f+0x222>
 800da9a:	2600      	movs	r6, #0
 800da9c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800daa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa4:	f040 8098 	bne.w	800dbd8 <__kernel_rem_pio2f+0x2fc>
 800daa8:	1e60      	subs	r0, r4, #1
 800daaa:	2200      	movs	r2, #0
 800daac:	4550      	cmp	r0, sl
 800daae:	da4b      	bge.n	800db48 <__kernel_rem_pio2f+0x26c>
 800dab0:	2a00      	cmp	r2, #0
 800dab2:	d065      	beq.n	800db80 <__kernel_rem_pio2f+0x2a4>
 800dab4:	3c01      	subs	r4, #1
 800dab6:	ab08      	add	r3, sp, #32
 800dab8:	3d08      	subs	r5, #8
 800daba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d0f8      	beq.n	800dab4 <__kernel_rem_pio2f+0x1d8>
 800dac2:	4628      	mov	r0, r5
 800dac4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dac8:	f7ff fea2 	bl	800d810 <scalbnf>
 800dacc:	1c63      	adds	r3, r4, #1
 800dace:	aa44      	add	r2, sp, #272	@ 0x110
 800dad0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800dbd0 <__kernel_rem_pio2f+0x2f4>
 800dad4:	0099      	lsls	r1, r3, #2
 800dad6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dada:	4623      	mov	r3, r4
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f280 80a9 	bge.w	800dc34 <__kernel_rem_pio2f+0x358>
 800dae2:	4623      	mov	r3, r4
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f2c0 80c7 	blt.w	800dc78 <__kernel_rem_pio2f+0x39c>
 800daea:	aa44      	add	r2, sp, #272	@ 0x110
 800daec:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800daf0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800dbc8 <__kernel_rem_pio2f+0x2ec>
 800daf4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800dbd4 <__kernel_rem_pio2f+0x2f8>
 800daf8:	2000      	movs	r0, #0
 800dafa:	1ae2      	subs	r2, r4, r3
 800dafc:	e0b1      	b.n	800dc62 <__kernel_rem_pio2f+0x386>
 800dafe:	2602      	movs	r6, #2
 800db00:	e78f      	b.n	800da22 <__kernel_rem_pio2f+0x146>
 800db02:	f852 1b04 	ldr.w	r1, [r2], #4
 800db06:	b948      	cbnz	r0, 800db1c <__kernel_rem_pio2f+0x240>
 800db08:	b121      	cbz	r1, 800db14 <__kernel_rem_pio2f+0x238>
 800db0a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800db0e:	f842 1c04 	str.w	r1, [r2, #-4]
 800db12:	2101      	movs	r1, #1
 800db14:	f10e 0e01 	add.w	lr, lr, #1
 800db18:	4608      	mov	r0, r1
 800db1a:	e787      	b.n	800da2c <__kernel_rem_pio2f+0x150>
 800db1c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800db20:	e7f5      	b.n	800db0e <__kernel_rem_pio2f+0x232>
 800db22:	f104 3cff 	add.w	ip, r4, #4294967295
 800db26:	aa08      	add	r2, sp, #32
 800db28:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800db2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800db30:	a908      	add	r1, sp, #32
 800db32:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800db36:	e781      	b.n	800da3c <__kernel_rem_pio2f+0x160>
 800db38:	f104 3cff 	add.w	ip, r4, #4294967295
 800db3c:	aa08      	add	r2, sp, #32
 800db3e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800db42:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800db46:	e7f3      	b.n	800db30 <__kernel_rem_pio2f+0x254>
 800db48:	a908      	add	r1, sp, #32
 800db4a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800db4e:	3801      	subs	r0, #1
 800db50:	430a      	orrs	r2, r1
 800db52:	e7ab      	b.n	800daac <__kernel_rem_pio2f+0x1d0>
 800db54:	3201      	adds	r2, #1
 800db56:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800db5a:	2e00      	cmp	r6, #0
 800db5c:	d0fa      	beq.n	800db54 <__kernel_rem_pio2f+0x278>
 800db5e:	9905      	ldr	r1, [sp, #20]
 800db60:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800db64:	eb0d 0001 	add.w	r0, sp, r1
 800db68:	18e6      	adds	r6, r4, r3
 800db6a:	a91c      	add	r1, sp, #112	@ 0x70
 800db6c:	f104 0c01 	add.w	ip, r4, #1
 800db70:	384c      	subs	r0, #76	@ 0x4c
 800db72:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800db76:	4422      	add	r2, r4
 800db78:	4562      	cmp	r2, ip
 800db7a:	da04      	bge.n	800db86 <__kernel_rem_pio2f+0x2aa>
 800db7c:	4614      	mov	r4, r2
 800db7e:	e710      	b.n	800d9a2 <__kernel_rem_pio2f+0xc6>
 800db80:	9804      	ldr	r0, [sp, #16]
 800db82:	2201      	movs	r2, #1
 800db84:	e7e7      	b.n	800db56 <__kernel_rem_pio2f+0x27a>
 800db86:	9903      	ldr	r1, [sp, #12]
 800db88:	f8dd e004 	ldr.w	lr, [sp, #4]
 800db8c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800db90:	9105      	str	r1, [sp, #20]
 800db92:	ee07 1a90 	vmov	s15, r1
 800db96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db9a:	2400      	movs	r4, #0
 800db9c:	ece6 7a01 	vstmia	r6!, {s15}
 800dba0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800dbd4 <__kernel_rem_pio2f+0x2f8>
 800dba4:	46b1      	mov	r9, r6
 800dba6:	455c      	cmp	r4, fp
 800dba8:	dd04      	ble.n	800dbb4 <__kernel_rem_pio2f+0x2d8>
 800dbaa:	ece0 7a01 	vstmia	r0!, {s15}
 800dbae:	f10c 0c01 	add.w	ip, ip, #1
 800dbb2:	e7e1      	b.n	800db78 <__kernel_rem_pio2f+0x29c>
 800dbb4:	ecfe 6a01 	vldmia	lr!, {s13}
 800dbb8:	ed39 7a01 	vldmdb	r9!, {s14}
 800dbbc:	3401      	adds	r4, #1
 800dbbe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dbc2:	e7f0      	b.n	800dba6 <__kernel_rem_pio2f+0x2ca>
 800dbc4:	0800e250 	.word	0x0800e250
 800dbc8:	0800e224 	.word	0x0800e224
 800dbcc:	43800000 	.word	0x43800000
 800dbd0:	3b800000 	.word	0x3b800000
 800dbd4:	00000000 	.word	0x00000000
 800dbd8:	9b02      	ldr	r3, [sp, #8]
 800dbda:	eeb0 0a48 	vmov.f32	s0, s16
 800dbde:	eba3 0008 	sub.w	r0, r3, r8
 800dbe2:	f7ff fe15 	bl	800d810 <scalbnf>
 800dbe6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800dbcc <__kernel_rem_pio2f+0x2f0>
 800dbea:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800dbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf2:	db19      	blt.n	800dc28 <__kernel_rem_pio2f+0x34c>
 800dbf4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800dbd0 <__kernel_rem_pio2f+0x2f4>
 800dbf8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dbfc:	aa08      	add	r2, sp, #32
 800dbfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc02:	3508      	adds	r5, #8
 800dc04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc08:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800dc0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dc14:	ee10 3a10 	vmov	r3, s0
 800dc18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dc1c:	ee17 3a90 	vmov	r3, s15
 800dc20:	3401      	adds	r4, #1
 800dc22:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dc26:	e74c      	b.n	800dac2 <__kernel_rem_pio2f+0x1e6>
 800dc28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dc2c:	aa08      	add	r2, sp, #32
 800dc2e:	ee10 3a10 	vmov	r3, s0
 800dc32:	e7f6      	b.n	800dc22 <__kernel_rem_pio2f+0x346>
 800dc34:	a808      	add	r0, sp, #32
 800dc36:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800dc3a:	9001      	str	r0, [sp, #4]
 800dc3c:	ee07 0a90 	vmov	s15, r0
 800dc40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc44:	3b01      	subs	r3, #1
 800dc46:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dc4a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dc4e:	ed62 7a01 	vstmdb	r2!, {s15}
 800dc52:	e743      	b.n	800dadc <__kernel_rem_pio2f+0x200>
 800dc54:	ecfc 6a01 	vldmia	ip!, {s13}
 800dc58:	ecb5 7a01 	vldmia	r5!, {s14}
 800dc5c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dc60:	3001      	adds	r0, #1
 800dc62:	4550      	cmp	r0, sl
 800dc64:	dc01      	bgt.n	800dc6a <__kernel_rem_pio2f+0x38e>
 800dc66:	4290      	cmp	r0, r2
 800dc68:	ddf4      	ble.n	800dc54 <__kernel_rem_pio2f+0x378>
 800dc6a:	a858      	add	r0, sp, #352	@ 0x160
 800dc6c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800dc70:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800dc74:	3b01      	subs	r3, #1
 800dc76:	e735      	b.n	800dae4 <__kernel_rem_pio2f+0x208>
 800dc78:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	dc09      	bgt.n	800dc92 <__kernel_rem_pio2f+0x3b6>
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	dc27      	bgt.n	800dcd2 <__kernel_rem_pio2f+0x3f6>
 800dc82:	d040      	beq.n	800dd06 <__kernel_rem_pio2f+0x42a>
 800dc84:	f009 0007 	and.w	r0, r9, #7
 800dc88:	b059      	add	sp, #356	@ 0x164
 800dc8a:	ecbd 8b04 	vpop	{d8-d9}
 800dc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc92:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	d1f5      	bne.n	800dc84 <__kernel_rem_pio2f+0x3a8>
 800dc98:	aa30      	add	r2, sp, #192	@ 0xc0
 800dc9a:	1f0b      	subs	r3, r1, #4
 800dc9c:	4413      	add	r3, r2
 800dc9e:	461a      	mov	r2, r3
 800dca0:	4620      	mov	r0, r4
 800dca2:	2800      	cmp	r0, #0
 800dca4:	dc50      	bgt.n	800dd48 <__kernel_rem_pio2f+0x46c>
 800dca6:	4622      	mov	r2, r4
 800dca8:	2a01      	cmp	r2, #1
 800dcaa:	dc5d      	bgt.n	800dd68 <__kernel_rem_pio2f+0x48c>
 800dcac:	ab30      	add	r3, sp, #192	@ 0xc0
 800dcae:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800dbd4 <__kernel_rem_pio2f+0x2f8>
 800dcb2:	440b      	add	r3, r1
 800dcb4:	2c01      	cmp	r4, #1
 800dcb6:	dc67      	bgt.n	800dd88 <__kernel_rem_pio2f+0x4ac>
 800dcb8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800dcbc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800dcc0:	2e00      	cmp	r6, #0
 800dcc2:	d167      	bne.n	800dd94 <__kernel_rem_pio2f+0x4b8>
 800dcc4:	edc7 6a00 	vstr	s13, [r7]
 800dcc8:	ed87 7a01 	vstr	s14, [r7, #4]
 800dccc:	edc7 7a02 	vstr	s15, [r7, #8]
 800dcd0:	e7d8      	b.n	800dc84 <__kernel_rem_pio2f+0x3a8>
 800dcd2:	ab30      	add	r3, sp, #192	@ 0xc0
 800dcd4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800dbd4 <__kernel_rem_pio2f+0x2f8>
 800dcd8:	440b      	add	r3, r1
 800dcda:	4622      	mov	r2, r4
 800dcdc:	2a00      	cmp	r2, #0
 800dcde:	da24      	bge.n	800dd2a <__kernel_rem_pio2f+0x44e>
 800dce0:	b34e      	cbz	r6, 800dd36 <__kernel_rem_pio2f+0x45a>
 800dce2:	eef1 7a47 	vneg.f32	s15, s14
 800dce6:	edc7 7a00 	vstr	s15, [r7]
 800dcea:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800dcee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dcf2:	aa31      	add	r2, sp, #196	@ 0xc4
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	429c      	cmp	r4, r3
 800dcf8:	da20      	bge.n	800dd3c <__kernel_rem_pio2f+0x460>
 800dcfa:	b10e      	cbz	r6, 800dd00 <__kernel_rem_pio2f+0x424>
 800dcfc:	eef1 7a67 	vneg.f32	s15, s15
 800dd00:	edc7 7a01 	vstr	s15, [r7, #4]
 800dd04:	e7be      	b.n	800dc84 <__kernel_rem_pio2f+0x3a8>
 800dd06:	ab30      	add	r3, sp, #192	@ 0xc0
 800dd08:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800dbd4 <__kernel_rem_pio2f+0x2f8>
 800dd0c:	440b      	add	r3, r1
 800dd0e:	2c00      	cmp	r4, #0
 800dd10:	da05      	bge.n	800dd1e <__kernel_rem_pio2f+0x442>
 800dd12:	b10e      	cbz	r6, 800dd18 <__kernel_rem_pio2f+0x43c>
 800dd14:	eef1 7a67 	vneg.f32	s15, s15
 800dd18:	edc7 7a00 	vstr	s15, [r7]
 800dd1c:	e7b2      	b.n	800dc84 <__kernel_rem_pio2f+0x3a8>
 800dd1e:	ed33 7a01 	vldmdb	r3!, {s14}
 800dd22:	3c01      	subs	r4, #1
 800dd24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd28:	e7f1      	b.n	800dd0e <__kernel_rem_pio2f+0x432>
 800dd2a:	ed73 7a01 	vldmdb	r3!, {s15}
 800dd2e:	3a01      	subs	r2, #1
 800dd30:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd34:	e7d2      	b.n	800dcdc <__kernel_rem_pio2f+0x400>
 800dd36:	eef0 7a47 	vmov.f32	s15, s14
 800dd3a:	e7d4      	b.n	800dce6 <__kernel_rem_pio2f+0x40a>
 800dd3c:	ecb2 7a01 	vldmia	r2!, {s14}
 800dd40:	3301      	adds	r3, #1
 800dd42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd46:	e7d6      	b.n	800dcf6 <__kernel_rem_pio2f+0x41a>
 800dd48:	ed72 7a01 	vldmdb	r2!, {s15}
 800dd4c:	edd2 6a01 	vldr	s13, [r2, #4]
 800dd50:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dd54:	3801      	subs	r0, #1
 800dd56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd5a:	ed82 7a00 	vstr	s14, [r2]
 800dd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd62:	edc2 7a01 	vstr	s15, [r2, #4]
 800dd66:	e79c      	b.n	800dca2 <__kernel_rem_pio2f+0x3c6>
 800dd68:	ed73 7a01 	vldmdb	r3!, {s15}
 800dd6c:	edd3 6a01 	vldr	s13, [r3, #4]
 800dd70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dd74:	3a01      	subs	r2, #1
 800dd76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd7a:	ed83 7a00 	vstr	s14, [r3]
 800dd7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd82:	edc3 7a01 	vstr	s15, [r3, #4]
 800dd86:	e78f      	b.n	800dca8 <__kernel_rem_pio2f+0x3cc>
 800dd88:	ed33 7a01 	vldmdb	r3!, {s14}
 800dd8c:	3c01      	subs	r4, #1
 800dd8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd92:	e78f      	b.n	800dcb4 <__kernel_rem_pio2f+0x3d8>
 800dd94:	eef1 6a66 	vneg.f32	s13, s13
 800dd98:	eeb1 7a47 	vneg.f32	s14, s14
 800dd9c:	edc7 6a00 	vstr	s13, [r7]
 800dda0:	ed87 7a01 	vstr	s14, [r7, #4]
 800dda4:	eef1 7a67 	vneg.f32	s15, s15
 800dda8:	e790      	b.n	800dccc <__kernel_rem_pio2f+0x3f0>
 800ddaa:	bf00      	nop

0800ddac <floorf>:
 800ddac:	ee10 3a10 	vmov	r3, s0
 800ddb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ddb4:	3a7f      	subs	r2, #127	@ 0x7f
 800ddb6:	2a16      	cmp	r2, #22
 800ddb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ddbc:	dc2b      	bgt.n	800de16 <floorf+0x6a>
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	da12      	bge.n	800dde8 <floorf+0x3c>
 800ddc2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800de28 <floorf+0x7c>
 800ddc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ddca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ddce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd2:	dd06      	ble.n	800dde2 <floorf+0x36>
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	da24      	bge.n	800de22 <floorf+0x76>
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	4b14      	ldr	r3, [pc, #80]	@ (800de2c <floorf+0x80>)
 800dddc:	bf08      	it	eq
 800ddde:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800dde2:	ee00 3a10 	vmov	s0, r3
 800dde6:	4770      	bx	lr
 800dde8:	4911      	ldr	r1, [pc, #68]	@ (800de30 <floorf+0x84>)
 800ddea:	4111      	asrs	r1, r2
 800ddec:	420b      	tst	r3, r1
 800ddee:	d0fa      	beq.n	800dde6 <floorf+0x3a>
 800ddf0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800de28 <floorf+0x7c>
 800ddf4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ddf8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ddfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de00:	ddef      	ble.n	800dde2 <floorf+0x36>
 800de02:	2b00      	cmp	r3, #0
 800de04:	bfbe      	ittt	lt
 800de06:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800de0a:	fa40 f202 	asrlt.w	r2, r0, r2
 800de0e:	189b      	addlt	r3, r3, r2
 800de10:	ea23 0301 	bic.w	r3, r3, r1
 800de14:	e7e5      	b.n	800dde2 <floorf+0x36>
 800de16:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800de1a:	d3e4      	bcc.n	800dde6 <floorf+0x3a>
 800de1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800de20:	4770      	bx	lr
 800de22:	2300      	movs	r3, #0
 800de24:	e7dd      	b.n	800dde2 <floorf+0x36>
 800de26:	bf00      	nop
 800de28:	7149f2ca 	.word	0x7149f2ca
 800de2c:	bf800000 	.word	0xbf800000
 800de30:	007fffff 	.word	0x007fffff

0800de34 <_init>:
 800de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de36:	bf00      	nop
 800de38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de3a:	bc08      	pop	{r3}
 800de3c:	469e      	mov	lr, r3
 800de3e:	4770      	bx	lr

0800de40 <_fini>:
 800de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de42:	bf00      	nop
 800de44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de46:	bc08      	pop	{r3}
 800de48:	469e      	mov	lr, r3
 800de4a:	4770      	bx	lr
