
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c598  0800c598  0000d598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d8  0800c5d8  0000e25c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c5d8  0800c5d8  0000d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5e0  0800c5e0  0000e25c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5e0  0800c5e0  0000d5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5e4  0800c5e4  0000d5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800c5e8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018fc  20000260  0800c844  0000e260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001b5c  0800c844  0000eb5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e25c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fec  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004323  00000000  00000000  00033278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e2  00000000  00000000  00038f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e59  00000000  00000000  0003a30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002327d  00000000  00000000  0003f163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118110  00000000  00000000  000623e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a4f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000708c  00000000  00000000  0017a534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001815c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000260 	.word	0x20000260
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c580 	.word	0x0800c580

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000264 	.word	0x20000264
 8000214:	0800c580 	.word	0x0800c580

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__gedf2>:
 8000590:	f04f 3cff 	mov.w	ip, #4294967295
 8000594:	e006      	b.n	80005a4 <__cmpdf2+0x4>
 8000596:	bf00      	nop

08000598 <__ledf2>:
 8000598:	f04f 0c01 	mov.w	ip, #1
 800059c:	e002      	b.n	80005a4 <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__cmpdf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	bf18      	it	ne
 80005b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ba:	d01b      	beq.n	80005f4 <__cmpdf2+0x54>
 80005bc:	b001      	add	sp, #4
 80005be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005c2:	bf0c      	ite	eq
 80005c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005c8:	ea91 0f03 	teqne	r1, r3
 80005cc:	bf02      	ittt	eq
 80005ce:	ea90 0f02 	teqeq	r0, r2
 80005d2:	2000      	moveq	r0, #0
 80005d4:	4770      	bxeq	lr
 80005d6:	f110 0f00 	cmn.w	r0, #0
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf58      	it	pl
 80005e0:	4299      	cmppl	r1, r3
 80005e2:	bf08      	it	eq
 80005e4:	4290      	cmpeq	r0, r2
 80005e6:	bf2c      	ite	cs
 80005e8:	17d8      	asrcs	r0, r3, #31
 80005ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ee:	f040 0001 	orr.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d102      	bne.n	8000604 <__cmpdf2+0x64>
 80005fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000602:	d107      	bne.n	8000614 <__cmpdf2+0x74>
 8000604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d1d6      	bne.n	80005bc <__cmpdf2+0x1c>
 800060e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000612:	d0d3      	beq.n	80005bc <__cmpdf2+0x1c>
 8000614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_cdrcmple>:
 800061c:	4684      	mov	ip, r0
 800061e:	4610      	mov	r0, r2
 8000620:	4662      	mov	r2, ip
 8000622:	468c      	mov	ip, r1
 8000624:	4619      	mov	r1, r3
 8000626:	4663      	mov	r3, ip
 8000628:	e000      	b.n	800062c <__aeabi_cdcmpeq>
 800062a:	bf00      	nop

0800062c <__aeabi_cdcmpeq>:
 800062c:	b501      	push	{r0, lr}
 800062e:	f7ff ffb7 	bl	80005a0 <__cmpdf2>
 8000632:	2800      	cmp	r0, #0
 8000634:	bf48      	it	mi
 8000636:	f110 0f00 	cmnmi.w	r0, #0
 800063a:	bd01      	pop	{r0, pc}

0800063c <__aeabi_dcmpeq>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff fff4 	bl	800062c <__aeabi_cdcmpeq>
 8000644:	bf0c      	ite	eq
 8000646:	2001      	moveq	r0, #1
 8000648:	2000      	movne	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmplt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffea 	bl	800062c <__aeabi_cdcmpeq>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmple>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffe0 	bl	800062c <__aeabi_cdcmpeq>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpge>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffce 	bl	800061c <__aeabi_cdrcmple>
 8000680:	bf94      	ite	ls
 8000682:	2001      	movls	r0, #1
 8000684:	2000      	movhi	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_dcmpgt>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffc4 	bl	800061c <__aeabi_cdrcmple>
 8000694:	bf34      	ite	cc
 8000696:	2001      	movcc	r0, #1
 8000698:	2000      	movcs	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <__aeabi_uldivmod>:
 80006a0:	b953      	cbnz	r3, 80006b8 <__aeabi_uldivmod+0x18>
 80006a2:	b94a      	cbnz	r2, 80006b8 <__aeabi_uldivmod+0x18>
 80006a4:	2900      	cmp	r1, #0
 80006a6:	bf08      	it	eq
 80006a8:	2800      	cmpeq	r0, #0
 80006aa:	bf1c      	itt	ne
 80006ac:	f04f 31ff 	movne.w	r1, #4294967295
 80006b0:	f04f 30ff 	movne.w	r0, #4294967295
 80006b4:	f000 b988 	b.w	80009c8 <__aeabi_idiv0>
 80006b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c0:	f000 f806 	bl	80006d0 <__udivmoddi4>
 80006c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006cc:	b004      	add	sp, #16
 80006ce:	4770      	bx	lr

080006d0 <__udivmoddi4>:
 80006d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006d4:	9d08      	ldr	r5, [sp, #32]
 80006d6:	468e      	mov	lr, r1
 80006d8:	4604      	mov	r4, r0
 80006da:	4688      	mov	r8, r1
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d14a      	bne.n	8000776 <__udivmoddi4+0xa6>
 80006e0:	428a      	cmp	r2, r1
 80006e2:	4617      	mov	r7, r2
 80006e4:	d962      	bls.n	80007ac <__udivmoddi4+0xdc>
 80006e6:	fab2 f682 	clz	r6, r2
 80006ea:	b14e      	cbz	r6, 8000700 <__udivmoddi4+0x30>
 80006ec:	f1c6 0320 	rsb	r3, r6, #32
 80006f0:	fa01 f806 	lsl.w	r8, r1, r6
 80006f4:	fa20 f303 	lsr.w	r3, r0, r3
 80006f8:	40b7      	lsls	r7, r6
 80006fa:	ea43 0808 	orr.w	r8, r3, r8
 80006fe:	40b4      	lsls	r4, r6
 8000700:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000704:	fa1f fc87 	uxth.w	ip, r7
 8000708:	fbb8 f1fe 	udiv	r1, r8, lr
 800070c:	0c23      	lsrs	r3, r4, #16
 800070e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000712:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000716:	fb01 f20c 	mul.w	r2, r1, ip
 800071a:	429a      	cmp	r2, r3
 800071c:	d909      	bls.n	8000732 <__udivmoddi4+0x62>
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	f101 30ff 	add.w	r0, r1, #4294967295
 8000724:	f080 80ea 	bcs.w	80008fc <__udivmoddi4+0x22c>
 8000728:	429a      	cmp	r2, r3
 800072a:	f240 80e7 	bls.w	80008fc <__udivmoddi4+0x22c>
 800072e:	3902      	subs	r1, #2
 8000730:	443b      	add	r3, r7
 8000732:	1a9a      	subs	r2, r3, r2
 8000734:	b2a3      	uxth	r3, r4
 8000736:	fbb2 f0fe 	udiv	r0, r2, lr
 800073a:	fb0e 2210 	mls	r2, lr, r0, r2
 800073e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000742:	fb00 fc0c 	mul.w	ip, r0, ip
 8000746:	459c      	cmp	ip, r3
 8000748:	d909      	bls.n	800075e <__udivmoddi4+0x8e>
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000750:	f080 80d6 	bcs.w	8000900 <__udivmoddi4+0x230>
 8000754:	459c      	cmp	ip, r3
 8000756:	f240 80d3 	bls.w	8000900 <__udivmoddi4+0x230>
 800075a:	443b      	add	r3, r7
 800075c:	3802      	subs	r0, #2
 800075e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000762:	eba3 030c 	sub.w	r3, r3, ip
 8000766:	2100      	movs	r1, #0
 8000768:	b11d      	cbz	r5, 8000772 <__udivmoddi4+0xa2>
 800076a:	40f3      	lsrs	r3, r6
 800076c:	2200      	movs	r2, #0
 800076e:	e9c5 3200 	strd	r3, r2, [r5]
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	428b      	cmp	r3, r1
 8000778:	d905      	bls.n	8000786 <__udivmoddi4+0xb6>
 800077a:	b10d      	cbz	r5, 8000780 <__udivmoddi4+0xb0>
 800077c:	e9c5 0100 	strd	r0, r1, [r5]
 8000780:	2100      	movs	r1, #0
 8000782:	4608      	mov	r0, r1
 8000784:	e7f5      	b.n	8000772 <__udivmoddi4+0xa2>
 8000786:	fab3 f183 	clz	r1, r3
 800078a:	2900      	cmp	r1, #0
 800078c:	d146      	bne.n	800081c <__udivmoddi4+0x14c>
 800078e:	4573      	cmp	r3, lr
 8000790:	d302      	bcc.n	8000798 <__udivmoddi4+0xc8>
 8000792:	4282      	cmp	r2, r0
 8000794:	f200 8105 	bhi.w	80009a2 <__udivmoddi4+0x2d2>
 8000798:	1a84      	subs	r4, r0, r2
 800079a:	eb6e 0203 	sbc.w	r2, lr, r3
 800079e:	2001      	movs	r0, #1
 80007a0:	4690      	mov	r8, r2
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d0e5      	beq.n	8000772 <__udivmoddi4+0xa2>
 80007a6:	e9c5 4800 	strd	r4, r8, [r5]
 80007aa:	e7e2      	b.n	8000772 <__udivmoddi4+0xa2>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	f000 8090 	beq.w	80008d2 <__udivmoddi4+0x202>
 80007b2:	fab2 f682 	clz	r6, r2
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	f040 80a4 	bne.w	8000904 <__udivmoddi4+0x234>
 80007bc:	1a8a      	subs	r2, r1, r2
 80007be:	0c03      	lsrs	r3, r0, #16
 80007c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c4:	b280      	uxth	r0, r0
 80007c6:	b2bc      	uxth	r4, r7
 80007c8:	2101      	movs	r1, #1
 80007ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80007ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80007d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007d6:	fb04 f20c 	mul.w	r2, r4, ip
 80007da:	429a      	cmp	r2, r3
 80007dc:	d907      	bls.n	80007ee <__udivmoddi4+0x11e>
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x11c>
 80007e6:	429a      	cmp	r2, r3
 80007e8:	f200 80e0 	bhi.w	80009ac <__udivmoddi4+0x2dc>
 80007ec:	46c4      	mov	ip, r8
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80007f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80007f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007fc:	fb02 f404 	mul.w	r4, r2, r4
 8000800:	429c      	cmp	r4, r3
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x144>
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	f102 30ff 	add.w	r0, r2, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x142>
 800080c:	429c      	cmp	r4, r3
 800080e:	f200 80ca 	bhi.w	80009a6 <__udivmoddi4+0x2d6>
 8000812:	4602      	mov	r2, r0
 8000814:	1b1b      	subs	r3, r3, r4
 8000816:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800081a:	e7a5      	b.n	8000768 <__udivmoddi4+0x98>
 800081c:	f1c1 0620 	rsb	r6, r1, #32
 8000820:	408b      	lsls	r3, r1
 8000822:	fa22 f706 	lsr.w	r7, r2, r6
 8000826:	431f      	orrs	r7, r3
 8000828:	fa0e f401 	lsl.w	r4, lr, r1
 800082c:	fa20 f306 	lsr.w	r3, r0, r6
 8000830:	fa2e fe06 	lsr.w	lr, lr, r6
 8000834:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000838:	4323      	orrs	r3, r4
 800083a:	fa00 f801 	lsl.w	r8, r0, r1
 800083e:	fa1f fc87 	uxth.w	ip, r7
 8000842:	fbbe f0f9 	udiv	r0, lr, r9
 8000846:	0c1c      	lsrs	r4, r3, #16
 8000848:	fb09 ee10 	mls	lr, r9, r0, lr
 800084c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000850:	fb00 fe0c 	mul.w	lr, r0, ip
 8000854:	45a6      	cmp	lr, r4
 8000856:	fa02 f201 	lsl.w	r2, r2, r1
 800085a:	d909      	bls.n	8000870 <__udivmoddi4+0x1a0>
 800085c:	193c      	adds	r4, r7, r4
 800085e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000862:	f080 809c 	bcs.w	800099e <__udivmoddi4+0x2ce>
 8000866:	45a6      	cmp	lr, r4
 8000868:	f240 8099 	bls.w	800099e <__udivmoddi4+0x2ce>
 800086c:	3802      	subs	r0, #2
 800086e:	443c      	add	r4, r7
 8000870:	eba4 040e 	sub.w	r4, r4, lr
 8000874:	fa1f fe83 	uxth.w	lr, r3
 8000878:	fbb4 f3f9 	udiv	r3, r4, r9
 800087c:	fb09 4413 	mls	r4, r9, r3, r4
 8000880:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000884:	fb03 fc0c 	mul.w	ip, r3, ip
 8000888:	45a4      	cmp	ip, r4
 800088a:	d908      	bls.n	800089e <__udivmoddi4+0x1ce>
 800088c:	193c      	adds	r4, r7, r4
 800088e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000892:	f080 8082 	bcs.w	800099a <__udivmoddi4+0x2ca>
 8000896:	45a4      	cmp	ip, r4
 8000898:	d97f      	bls.n	800099a <__udivmoddi4+0x2ca>
 800089a:	3b02      	subs	r3, #2
 800089c:	443c      	add	r4, r7
 800089e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008a2:	eba4 040c 	sub.w	r4, r4, ip
 80008a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80008aa:	4564      	cmp	r4, ip
 80008ac:	4673      	mov	r3, lr
 80008ae:	46e1      	mov	r9, ip
 80008b0:	d362      	bcc.n	8000978 <__udivmoddi4+0x2a8>
 80008b2:	d05f      	beq.n	8000974 <__udivmoddi4+0x2a4>
 80008b4:	b15d      	cbz	r5, 80008ce <__udivmoddi4+0x1fe>
 80008b6:	ebb8 0203 	subs.w	r2, r8, r3
 80008ba:	eb64 0409 	sbc.w	r4, r4, r9
 80008be:	fa04 f606 	lsl.w	r6, r4, r6
 80008c2:	fa22 f301 	lsr.w	r3, r2, r1
 80008c6:	431e      	orrs	r6, r3
 80008c8:	40cc      	lsrs	r4, r1
 80008ca:	e9c5 6400 	strd	r6, r4, [r5]
 80008ce:	2100      	movs	r1, #0
 80008d0:	e74f      	b.n	8000772 <__udivmoddi4+0xa2>
 80008d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80008d6:	0c01      	lsrs	r1, r0, #16
 80008d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008dc:	b280      	uxth	r0, r0
 80008de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008e2:	463b      	mov	r3, r7
 80008e4:	4638      	mov	r0, r7
 80008e6:	463c      	mov	r4, r7
 80008e8:	46b8      	mov	r8, r7
 80008ea:	46be      	mov	lr, r7
 80008ec:	2620      	movs	r6, #32
 80008ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80008f2:	eba2 0208 	sub.w	r2, r2, r8
 80008f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008fa:	e766      	b.n	80007ca <__udivmoddi4+0xfa>
 80008fc:	4601      	mov	r1, r0
 80008fe:	e718      	b.n	8000732 <__udivmoddi4+0x62>
 8000900:	4610      	mov	r0, r2
 8000902:	e72c      	b.n	800075e <__udivmoddi4+0x8e>
 8000904:	f1c6 0220 	rsb	r2, r6, #32
 8000908:	fa2e f302 	lsr.w	r3, lr, r2
 800090c:	40b7      	lsls	r7, r6
 800090e:	40b1      	lsls	r1, r6
 8000910:	fa20 f202 	lsr.w	r2, r0, r2
 8000914:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000918:	430a      	orrs	r2, r1
 800091a:	fbb3 f8fe 	udiv	r8, r3, lr
 800091e:	b2bc      	uxth	r4, r7
 8000920:	fb0e 3318 	mls	r3, lr, r8, r3
 8000924:	0c11      	lsrs	r1, r2, #16
 8000926:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800092a:	fb08 f904 	mul.w	r9, r8, r4
 800092e:	40b0      	lsls	r0, r6
 8000930:	4589      	cmp	r9, r1
 8000932:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000936:	b280      	uxth	r0, r0
 8000938:	d93e      	bls.n	80009b8 <__udivmoddi4+0x2e8>
 800093a:	1879      	adds	r1, r7, r1
 800093c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000940:	d201      	bcs.n	8000946 <__udivmoddi4+0x276>
 8000942:	4589      	cmp	r9, r1
 8000944:	d81f      	bhi.n	8000986 <__udivmoddi4+0x2b6>
 8000946:	eba1 0109 	sub.w	r1, r1, r9
 800094a:	fbb1 f9fe 	udiv	r9, r1, lr
 800094e:	fb09 f804 	mul.w	r8, r9, r4
 8000952:	fb0e 1119 	mls	r1, lr, r9, r1
 8000956:	b292      	uxth	r2, r2
 8000958:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800095c:	4542      	cmp	r2, r8
 800095e:	d229      	bcs.n	80009b4 <__udivmoddi4+0x2e4>
 8000960:	18ba      	adds	r2, r7, r2
 8000962:	f109 31ff 	add.w	r1, r9, #4294967295
 8000966:	d2c4      	bcs.n	80008f2 <__udivmoddi4+0x222>
 8000968:	4542      	cmp	r2, r8
 800096a:	d2c2      	bcs.n	80008f2 <__udivmoddi4+0x222>
 800096c:	f1a9 0102 	sub.w	r1, r9, #2
 8000970:	443a      	add	r2, r7
 8000972:	e7be      	b.n	80008f2 <__udivmoddi4+0x222>
 8000974:	45f0      	cmp	r8, lr
 8000976:	d29d      	bcs.n	80008b4 <__udivmoddi4+0x1e4>
 8000978:	ebbe 0302 	subs.w	r3, lr, r2
 800097c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000980:	3801      	subs	r0, #1
 8000982:	46e1      	mov	r9, ip
 8000984:	e796      	b.n	80008b4 <__udivmoddi4+0x1e4>
 8000986:	eba7 0909 	sub.w	r9, r7, r9
 800098a:	4449      	add	r1, r9
 800098c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000990:	fbb1 f9fe 	udiv	r9, r1, lr
 8000994:	fb09 f804 	mul.w	r8, r9, r4
 8000998:	e7db      	b.n	8000952 <__udivmoddi4+0x282>
 800099a:	4673      	mov	r3, lr
 800099c:	e77f      	b.n	800089e <__udivmoddi4+0x1ce>
 800099e:	4650      	mov	r0, sl
 80009a0:	e766      	b.n	8000870 <__udivmoddi4+0x1a0>
 80009a2:	4608      	mov	r0, r1
 80009a4:	e6fd      	b.n	80007a2 <__udivmoddi4+0xd2>
 80009a6:	443b      	add	r3, r7
 80009a8:	3a02      	subs	r2, #2
 80009aa:	e733      	b.n	8000814 <__udivmoddi4+0x144>
 80009ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b0:	443b      	add	r3, r7
 80009b2:	e71c      	b.n	80007ee <__udivmoddi4+0x11e>
 80009b4:	4649      	mov	r1, r9
 80009b6:	e79c      	b.n	80008f2 <__udivmoddi4+0x222>
 80009b8:	eba1 0109 	sub.w	r1, r1, r9
 80009bc:	46c4      	mov	ip, r8
 80009be:	fbb1 f9fe 	udiv	r9, r1, lr
 80009c2:	fb09 f804 	mul.w	r8, r9, r4
 80009c6:	e7c4      	b.n	8000952 <__udivmoddi4+0x282>

080009c8 <__aeabi_idiv0>:
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80009dc:	213c      	movs	r1, #60	@ 0x3c
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f006 ff2a 	bl	8007838 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f04f 0200 	mov.w	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f04f 0200 	mov.w	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a34:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000a46:	4293      	cmp	r3, r2
 8000a48:	dd05      	ble.n	8000a56 <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8000a50:	3b60      	subs	r3, #96	@ 0x60
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	e008      	b.n	8000a68 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4a48      	ldr	r2, [pc, #288]	@ (8000b7c <Encoder_Update+0x15c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	da04      	bge.n	8000a68 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8000a64:	3360      	adds	r3, #96	@ 0x60
 8000a66:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a78:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8000b80 <Encoder_Update+0x160>
 8000a7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000a80:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8000b84 <Encoder_Update+0x164>
 8000a84:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000aa2:	ed97 7a00 	vldr	s14, [r7]
 8000aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000abc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ac0:	ed97 7a00 	vldr	s14, [r7]
 8000ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ad4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000b88 <Encoder_Update+0x168>
 8000ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	ed93 7a08 	vldr	s14, [r3, #32]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b08:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8000b84 <Encoder_Update+0x164>
 8000b0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000b10:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8000b14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	ed93 7a08 	vldr	s14, [r3, #32]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000b2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b32:	ed97 7a00 	vldr	s14, [r7]
 8000b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8000b4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b50:	ed97 7a00 	vldr	s14, [r7]
 8000b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a1a      	ldr	r2, [r3, #32]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	ffff8ad0 	.word	0xffff8ad0
 8000b80:	40c90fda 	.word	0x40c90fda
 8000b84:	463b8000 	.word	0x463b8000
 8000b88:	42651738 	.word	0x42651738

08000b8c <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    return enc->position;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	ee07 3a90 	vmov	s15, r3
}
 8000b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	ee07 3a90 	vmov	s15, r3
}
 8000bba:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	ee07 3a90 	vmov	s15, r3
}
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <Encoder_GetPosition_mm>:

float Encoder_GetDegree(Encoder *enc) {
	return enc->position_degree;
}

float Encoder_GetPosition_mm(Encoder *enc) {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	ee07 3a90 	vmov	s15, r3
}
 8000bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c10:	ee07 3a90 	vmov	s15, r3
}
 8000c14:	eeb0 0a67 	vmov.f32	s0, s15
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b084      	sub	sp, #16
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3370      	adds	r3, #112	@ 0x70
 8000c30:	2204      	movs	r2, #4
 8000c32:	2104      	movs	r1, #4
 8000c34:	f00a ffbd 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f103 0008 	add.w	r0, r3, #8
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	33b0      	adds	r3, #176	@ 0xb0
 8000c42:	2204      	movs	r2, #4
 8000c44:	2104      	movs	r1, #4
 8000c46:	f00a ffb4 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f103 0010 	add.w	r0, r3, #16
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	33f0      	adds	r3, #240	@ 0xf0
 8000c54:	2204      	movs	r2, #4
 8000c56:	2104      	movs	r1, #4
 8000c58:	f00a ffab 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0018 	add.w	r0, r3, #24
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8000c68:	2204      	movs	r2, #4
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	f00a ffa1 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f103 0020 	add.w	r0, r3, #32
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	2104      	movs	r1, #4
 8000c80:	f00a ff97 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8000c90:	2204      	movs	r2, #4
 8000c92:	2104      	movs	r1, #4
 8000c94:	f00a ff8d 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	f00a ff83 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2104      	movs	r1, #4
 8000cbc:	f00a ff79 	bl	800bbb2 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2104      	movs	r1, #4
 8000cd0:	f00a ff6f 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	f00a ff65 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	f00a ff5b 	bl	800bbb2 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000d08:	2204      	movs	r2, #4
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	f00a ff51 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	2104      	movs	r1, #4
 8000d20:	f00a ff47 	bl	800bbb2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8000d30:	2204      	movs	r2, #4
 8000d32:	2104      	movs	r1, #4
 8000d34:	f00a ff3d 	bl	800bbb2 <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	e00b      	b.n	8000d56 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	338c      	adds	r3, #140	@ 0x8c
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	3304      	adds	r3, #4
 8000d4a:	f04f 0200 	mov.w	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3301      	adds	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	ddf0      	ble.n	8000d3e <Kalman_Init+0x11c>
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8000d66:	b480      	push	{r7}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e01c      	b.n	8000db2 <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	e013      	b.n	8000da6 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d101      	bne.n	8000d8a <Kalman_SetProcessNoise+0x24>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	e001      	b.n	8000d8e <Kalman_SetProcessNoise+0x28>
 8000d8a:	f04f 0300 	mov.w	r3, #0
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	0091      	lsls	r1, r2, #2
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	440a      	add	r2, r1
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	324c      	adds	r2, #76	@ 0x4c
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	440a      	add	r2, r1
 8000d9e:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	dde8      	ble.n	8000d7e <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	dddf      	ble.n	8000d78 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e01c      	b.n	8000e12 <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	e013      	b.n	8000e06 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d101      	bne.n	8000dea <Kalman_SetMeasurementNoise+0x24>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	e001      	b.n	8000dee <Kalman_SetMeasurementNoise+0x28>
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	0091      	lsls	r1, r2, #2
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	440a      	add	r2, r1
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	325c      	adds	r2, #92	@ 0x5c
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	440a      	add	r2, r1
 8000dfe:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	dde8      	ble.n	8000dde <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	dddf      	ble.n	8000dd8 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3358      	adds	r3, #88	@ 0x58
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f00b fa38 	bl	800c2d0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f103 0008 	add.w	r0, r3, #8
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3360      	adds	r3, #96	@ 0x60
 8000e70:	461a      	mov	r2, r3
 8000e72:	f00b fa2d 	bl	800c2d0 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3340      	adds	r3, #64	@ 0x40
 8000e86:	461a      	mov	r2, r3
 8000e88:	f00a fe58 	bl	800bb3c <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3358      	adds	r3, #88	@ 0x58
 8000e98:	461a      	mov	r2, r3
 8000e9a:	f00b fa19 	bl	800c2d0 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3360      	adds	r3, #96	@ 0x60
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	f00b fac7 	bl	800c43a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3328      	adds	r3, #40	@ 0x28
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f00b fa07 	bl	800c2d0 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f103 0118 	add.w	r1, r3, #24
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3328      	adds	r3, #40	@ 0x28
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f00a fe32 	bl	800bb3c <arm_mat_add_f32>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e00e      	b.n	8000f0e <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	3394      	adds	r3, #148	@ 0x94
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	3304      	adds	r3, #4
 8000f06:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	dded      	ble.n	8000ef0 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f103 0210 	add.w	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3360      	adds	r3, #96	@ 0x60
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f00b fa8a 	bl	800c43a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3358      	adds	r3, #88	@ 0x58
 8000f36:	461a      	mov	r2, r3
 8000f38:	f00b f9ca 	bl	800c2d0 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f103 0010 	add.w	r0, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3368      	adds	r3, #104	@ 0x68
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f00b f9bf 	bl	800c2d0 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f103 0120 	add.w	r1, r3, #32
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3368      	adds	r3, #104	@ 0x68
 8000f62:	461a      	mov	r2, r3
 8000f64:	f00a fdea 	bl	800bb3c <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3368      	adds	r3, #104	@ 0x68
 8000f72:	4619      	mov	r1, r3
 8000f74:	4610      	mov	r0, r2
 8000f76:	f00a fe34 	bl	800bbe2 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3330      	adds	r3, #48	@ 0x30
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f00b f9a0 	bl	800c2d0 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f103 0010 	add.w	r0, r3, #16
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3348      	adds	r3, #72	@ 0x48
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f00b f995 	bl	800c2d0 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	e01c      	b.n	8000fe6 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	3394      	adds	r3, #148	@ 0x94
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	3390      	adds	r3, #144	@ 0x90
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	3390      	adds	r3, #144	@ 0x90
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	3304      	adds	r3, #4
 8000fdc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	dddf      	ble.n	8000fac <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3348      	adds	r3, #72	@ 0x48
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f00b f967 	bl	800c2d0 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e01c      	b.n	8001042 <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	338c      	adds	r3, #140	@ 0x8c
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	3304      	adds	r3, #4
 8001014:	ed93 7a00 	vldr	s14, [r3]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3390      	adds	r3, #144	@ 0x90
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	3304      	adds	r3, #4
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	338c      	adds	r3, #140	@ 0x8c
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3304      	adds	r3, #4
 8001038:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dddf      	ble.n	8001008 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	e00b      	b.n	8001066 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3398      	adds	r3, #152	@ 0x98
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	3304      	adds	r3, #4
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	3301      	adds	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	ddf0      	ble.n	800104e <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e00e      	b.n	8001090 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	3398      	adds	r3, #152	@ 0x98
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3304      	adds	r3, #4
 8001084:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001088:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b03      	cmp	r3, #3
 8001094:	dded      	ble.n	8001072 <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f103 0110 	add.w	r1, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3360      	adds	r3, #96	@ 0x60
 80010a6:	461a      	mov	r2, r3
 80010a8:	f00b f912 	bl	800c2d0 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3358      	adds	r3, #88	@ 0x58
 80010bc:	461a      	mov	r2, r3
 80010be:	f00b f981 	bl	800c3c4 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3328      	adds	r3, #40	@ 0x28
 80010d2:	461a      	mov	r2, r3
 80010d4:	f00b f8fc 	bl	800c2d0 <arm_mat_mult_f32>
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <modbus_1t5_Timeout+0x1c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2201      	movs	r2, #1
 80010ee:	751a      	strb	r2, [r3, #20]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	2000027c 	.word	0x2000027c

08001100 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <modbus_3t5_Timeout+0x1c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2201      	movs	r2, #1
 800110e:	755a      	strb	r2, [r3, #21]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	2000027c 	.word	0x2000027c

08001120 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <modbus_UART_Recived+0x60>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2201      	movs	r2, #1
 8001130:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <modbus_UART_Recived+0x60>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	b289      	uxth	r1, r1
 800113e:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8001142:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001146:	d210      	bcs.n	800116a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <modbus_UART_Recived+0x60>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68d8      	ldr	r0, [r3, #12]
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <modbus_UART_Recived+0x60>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <modbus_UART_Recived+0x60>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800115a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800115e:	4413      	add	r3, r2
 8001160:	3302      	adds	r3, #2
 8001162:	2201      	movs	r2, #1
 8001164:	4619      	mov	r1, r3
 8001166:	f008 f977 	bl	8009458 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800116a:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <modbus_UART_Recived+0x60>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000027c 	.word	0x2000027c

08001184 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800118e:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <Modbus_init+0x9c>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001194:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <Modbus_init+0x9c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 800119c:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <Modbus_init+0x9c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	4a20      	ldr	r2, [pc, #128]	@ (8001224 <Modbus_init+0xa0>)
 80011a4:	2114      	movs	r1, #20
 80011a6:	4618      	mov	r0, r3
 80011a8:	f007 f84c 	bl	8008244 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80011ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <Modbus_init+0x9c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001228 <Modbus_init+0xa4>)
 80011b4:	210e      	movs	r1, #14
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 f844 	bl	8008244 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <Modbus_init+0x9c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4a1a      	ldr	r2, [pc, #104]	@ (800122c <Modbus_init+0xa8>)
 80011c4:	2103      	movs	r1, #3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 f88c 	bl	80092e4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <Modbus_init+0x9c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68d8      	ldr	r0, [r3, #12]
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <Modbus_init+0x9c>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <Modbus_init+0x9c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011de:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011e2:	4413      	add	r3, r2
 80011e4:	3302      	adds	r3, #2
 80011e6:	2201      	movs	r2, #1
 80011e8:	4619      	mov	r1, r3
 80011ea:	f008 f935 	bl	8009458 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <Modbus_init+0x9c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d10c      	bne.n	8001218 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <Modbus_init+0x9c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	4618      	mov	r0, r3
 8001206:	f005 ff07 	bl	8007018 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <Modbus_init+0x9c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f006 f9ce 	bl	80075b4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000027c 	.word	0x2000027c
 8001224:	080010e1 	.word	0x080010e1
 8001228:	08001101 	.word	0x08001101
 800122c:	08001121 	.word	0x08001121

08001230 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800123c:	23ff      	movs	r3, #255	@ 0xff
 800123e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001240:	23ff      	movs	r3, #255	@ 0xff
 8001242:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001244:	e013      	b.n	800126e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	4053      	eors	r3, r2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <CRC16+0x68>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	4053      	eors	r3, r2
 8001262:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <CRC16+0x6c>)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800126e:	883b      	ldrh	r3, [r7, #0]
 8001270:	1e5a      	subs	r2, r3, #1
 8001272:	803a      	strh	r2, [r7, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e6      	bne.n	8001246 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	b21b      	sxth	r3, r3
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
 8001288:	b29b      	uxth	r3, r3
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000100 	.word	0x20000100
 800129c:	20000000 	.word	0x20000000

080012a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80012a6:	4b80      	ldr	r3, [pc, #512]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d80a      	bhi.n	80012c8 <Modbus_Protocal_Worker+0x28>
 80012b2:	a201      	add	r2, pc, #4	@ (adr r2, 80012b8 <Modbus_Protocal_Worker+0x18>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	080012d3 	.word	0x080012d3
 80012bc:	08001471 	.word	0x08001471
 80012c0:	0800135d 	.word	0x0800135d
 80012c4:	08001383 	.word	0x08001383
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80012c8:	4b77      	ldr	r3, [pc, #476]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]
		break;
 80012d0:	e0e6      	b.n	80014a0 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012d2:	4b75      	ldr	r3, [pc, #468]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80012de:	f000 f9d5 	bl	800168c <Modbus_Emission>
 80012e2:	e01c      	b.n	800131e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80012e4:	4b70      	ldr	r3, [pc, #448]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	7d9b      	ldrb	r3, [r3, #22]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d017      	beq.n	800131e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012ee:	4b6e      	ldr	r3, [pc, #440]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80012f6:	4b6c      	ldr	r3, [pc, #432]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2200      	movs	r2, #0
 80012fc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80012fe:	4b6a      	ldr	r3, [pc, #424]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b67      	ldr	r3, [pc, #412]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0201 	orr.w	r2, r2, #1
 8001314:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001316:	4b64      	ldr	r3, [pc, #400]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2203      	movs	r2, #3
 800131c:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800131e:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001328:	2b20      	cmp	r3, #32
 800132a:	f040 80b2 	bne.w	8001492 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800132e:	4b5e      	ldr	r3, [pc, #376]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2200      	movs	r2, #0
 8001334:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001338:	4b5b      	ldr	r3, [pc, #364]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68d8      	ldr	r0, [r3, #12]
 800133e:	4b5a      	ldr	r3, [pc, #360]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b59      	ldr	r3, [pc, #356]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800134a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800134e:	4413      	add	r3, r2
 8001350:	3302      	adds	r3, #2
 8001352:	2201      	movs	r2, #1
 8001354:	4619      	mov	r1, r3
 8001356:	f008 f87f 	bl	8009458 <HAL_UART_Receive_IT>
		}
		break;
 800135a:	e09a      	b.n	8001492 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800135c:	4b52      	ldr	r3, [pc, #328]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	7d1b      	ldrb	r3, [r3, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8097 	beq.w	8001496 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001368:	4b4f      	ldr	r3, [pc, #316]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2200      	movs	r2, #0
 800136e:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001370:	4b4d      	ldr	r3, [pc, #308]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	22fe      	movs	r2, #254	@ 0xfe
 8001376:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001378:	4b4b      	ldr	r3, [pc, #300]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2204      	movs	r2, #4
 800137e:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001380:	e089      	b.n	8001496 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001382:	4b49      	ldr	r3, [pc, #292]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	7d9b      	ldrb	r3, [r3, #22]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d009      	beq.n	80013a0 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 800138c:	4b46      	ldr	r3, [pc, #280]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001398:	4b43      	ldr	r3, [pc, #268]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	22ff      	movs	r2, #255	@ 0xff
 800139e:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80013a0:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80013a8:	f113 0f02 	cmn.w	r3, #2
 80013ac:	d150      	bne.n	8001450 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80013ae:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80013b6:	4b3c      	ldr	r3, [pc, #240]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80013be:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013c6:	3b02      	subs	r3, #2
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f7ff ff30 	bl	8001230 <CRC16>
 80013d0:	4603      	mov	r3, r0
 80013d2:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013d4:	793a      	ldrb	r2, [r7, #4]
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	4b33      	ldr	r3, [pc, #204]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013e2:	3b02      	subs	r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d10c      	bne.n	8001408 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013ee:	797a      	ldrb	r2, [r7, #5]
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013fc:	3b01      	subs	r3, #1
 80013fe:	440b      	add	r3, r1
 8001400:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001404:	429a      	cmp	r2, r3
 8001406:	d004      	beq.n	8001412 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	22ff      	movs	r2, #255	@ 0xff
 800140e:	75da      	strb	r2, [r3, #23]
				break;
 8001410:	e046      	b.n	80014a0 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d113      	bne.n	800144c <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001424:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800142c:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001434:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800143e:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001440:	461a      	mov	r2, r3
 8001442:	f00b f86d 	bl	800c520 <memcpy>

			//execute command
			Modbus_frame_response();
 8001446:	f000 f909 	bl	800165c <Modbus_frame_response>
 800144a:	e001      	b.n	8001450 <Modbus_Protocal_Worker+0x1b0>
				break;
 800144c:	bf00      	nop
					}
		break;


	}
}
 800144e:	e027      	b.n	80014a0 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	7d5b      	ldrb	r3, [r3, #21]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d01f      	beq.n	800149a <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4618      	mov	r0, r3
 800146a:	f008 f8c1 	bl	80095f0 <HAL_UART_AbortReceive>
		break;
 800146e:	e014      	b.n	800149a <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147a:	2b20      	cmp	r3, #32
 800147c:	d10f      	bne.n	800149e <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <Modbus_Protocal_Worker+0x208>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	761a      	strb	r2, [r3, #24]
		break;
 8001490:	e005      	b.n	800149e <Modbus_Protocal_Worker+0x1fe>
		break;
 8001492:	bf00      	nop
 8001494:	e004      	b.n	80014a0 <Modbus_Protocal_Worker+0x200>
		break;
 8001496:	bf00      	nop
 8001498:	e002      	b.n	80014a0 <Modbus_Protocal_Worker+0x200>
		break;
 800149a:	bf00      	nop
 800149c:	e000      	b.n	80014a0 <Modbus_Protocal_Worker+0x200>
		break;
 800149e:	bf00      	nop
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000027c 	.word	0x2000027c

080014ac <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	7e9b      	ldrb	r3, [r3, #26]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	7ed2      	ldrb	r2, [r2, #27]
 80014c2:	4413      	add	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d903      	bls.n	80014da <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014d2:	2002      	movs	r0, #2
 80014d4:	f000 f8a0 	bl	8001618 <ModbusErrorReply>
			 return;
 80014d8:	e023      	b.n	8001522 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	440b      	add	r3, r1
 80014ea:	7f12      	ldrb	r2, [r2, #28]
 80014ec:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <modbusWrite1Register+0x7c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	440b      	add	r3, r1
 80014fe:	7f52      	ldrb	r2, [r2, #29]
 8001500:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <modbusWrite1Register+0x7c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <modbusWrite1Register+0x7c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001510:	2208      	movs	r2, #8
 8001512:	4619      	mov	r1, r3
 8001514:	f00b f804 	bl	800c520 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <modbusWrite1Register+0x7c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2205      	movs	r2, #5
 800151e:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000027c 	.word	0x2000027c

0800152c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001532:	4b38      	ldr	r3, [pc, #224]	@ (8001614 <modbusRead1Register+0xe8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	7f1b      	ldrb	r3, [r3, #28]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	4a35      	ldr	r2, [pc, #212]	@ (8001614 <modbusRead1Register+0xe8>)
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	7f52      	ldrb	r2, [r2, #29]
 8001542:	4413      	add	r3, r2
 8001544:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <modbusRead1Register+0xe8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	7e9b      	ldrb	r3, [r3, #26]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b29b      	uxth	r3, r3
 8001550:	4a30      	ldr	r2, [pc, #192]	@ (8001614 <modbusRead1Register+0xe8>)
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	7ed2      	ldrb	r2, [r2, #27]
 8001556:	4413      	add	r3, r2
 8001558:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <modbusRead1Register+0x3a>
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	2b7d      	cmp	r3, #125	@ 0x7d
 8001564:	d903      	bls.n	800156e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001566:	2003      	movs	r0, #3
 8001568:	f000 f856 	bl	8001618 <ModbusErrorReply>
		 return;
 800156c:	e04e      	b.n	800160c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800156e:	88ba      	ldrh	r2, [r7, #4]
 8001570:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <modbusRead1Register+0xe8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	429a      	cmp	r2, r3
 8001578:	d808      	bhi.n	800158c <modbusRead1Register+0x60>
 800157a:	88ba      	ldrh	r2, [r7, #4]
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	4413      	add	r3, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <modbusRead1Register+0xe8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	429a      	cmp	r2, r3
 800158a:	d903      	bls.n	8001594 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800158c:	2002      	movs	r0, #2
 800158e:	f000 f843 	bl	8001618 <ModbusErrorReply>
		 return;
 8001592:	e03b      	b.n	800160c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001594:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <modbusRead1Register+0xe8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <modbusRead1Register+0xe8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0052      	lsls	r2, r2, #1
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80015ae:	2400      	movs	r4, #0
 80015b0:	e020      	b.n	80015f4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <modbusRead1Register+0xe8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	4423      	add	r3, r4
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <modbusRead1Register+0xe8>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	1c63      	adds	r3, r4, #1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	7849      	ldrb	r1, [r1, #1]
 80015ca:	4413      	add	r3, r2
 80015cc:	460a      	mov	r2, r1
 80015ce:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <modbusRead1Register+0xe8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	4423      	add	r3, r4
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	18d1      	adds	r1, r2, r3
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <modbusRead1Register+0xe8>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	0063      	lsls	r3, r4, #1
 80015e6:	3303      	adds	r3, #3
 80015e8:	7809      	ldrb	r1, [r1, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	460a      	mov	r2, r1
 80015ee:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80015f2:	3401      	adds	r4, #1
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	429c      	cmp	r4, r3
 80015f8:	dbdb      	blt.n	80015b2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	3301      	adds	r3, #1
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <modbusRead1Register+0xe8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0052      	lsls	r2, r2, #1
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	2000027c 	.word	0x2000027c

08001618 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <ModbusErrorReply+0x40>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7e5a      	ldrb	r2, [r3, #25]
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <ModbusErrorReply+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <ModbusErrorReply+0x40>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <ModbusErrorReply+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2202      	movs	r2, #2
 8001646:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000027c 	.word	0x2000027c

0800165c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <Modbus_frame_response+0x2c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	7e5b      	ldrb	r3, [r3, #25]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d004      	beq.n	8001674 <Modbus_frame_response+0x18>
 800166a:	2b06      	cmp	r3, #6
 800166c:	d105      	bne.n	800167a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800166e:	f7ff ff1d 	bl	80014ac <modbusWrite1Register>
		break;
 8001672:	e006      	b.n	8001682 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001674:	f7ff ff5a 	bl	800152c <modbusRead1Register>
		break;
 8001678:	e003      	b.n	8001682 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff ffcc 	bl	8001618 <ModbusErrorReply>
		break;
 8001680:	bf00      	nop

	}
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000027c 	.word	0x2000027c

0800168c <Modbus_Emission>:

void Modbus_Emission()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001692:	4b3c      	ldr	r3, [pc, #240]	@ (8001784 <Modbus_Emission+0xf8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169c:	2b20      	cmp	r3, #32
 800169e:	d15d      	bne.n	800175c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80016a0:	4b38      	ldr	r3, [pc, #224]	@ (8001784 <Modbus_Emission+0xf8>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <Modbus_Emission+0xf8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80016ae:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <Modbus_Emission+0xf8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80016b6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <Modbus_Emission+0xf8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 80016c0:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <Modbus_Emission+0xf8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 80016c8:	461a      	mov	r2, r3
 80016ca:	f00a ff29 	bl	800c520 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80016ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <Modbus_Emission+0xf8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <Modbus_Emission+0xf8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3203      	adds	r2, #3
 80016de:	b292      	uxth	r2, r2
 80016e0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016e4:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <Modbus_Emission+0xf8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016ec:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <Modbus_Emission+0xf8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016f4:	3b02      	subs	r3, #2
 80016f6:	4619      	mov	r1, r3
 80016f8:	4610      	mov	r0, r2
 80016fa:	f7ff fd99 	bl	8001230 <CRC16>
 80016fe:	4603      	mov	r3, r0
 8001700:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001702:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <Modbus_Emission+0xf8>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <Modbus_Emission+0xf8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800170e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001710:	7939      	ldrb	r1, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	460a      	mov	r2, r1
 8001716:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <Modbus_Emission+0xf8>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <Modbus_Emission+0xf8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001726:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001728:	7979      	ldrb	r1, [r7, #5]
 800172a:	4413      	add	r3, r2
 800172c:	460a      	mov	r2, r1
 800172e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <Modbus_Emission+0xf8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173c:	2b20      	cmp	r3, #32
 800173e:	d10d      	bne.n	800175c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <Modbus_Emission+0xf8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <Modbus_Emission+0xf8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800174e:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <Modbus_Emission+0xf8>)
 8001750:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001752:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001756:	461a      	mov	r2, r3
 8001758:	f007 feca 	bl	80094f0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <Modbus_Emission+0xf8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <Modbus_Emission+0xf8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <Modbus_Emission+0xf8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <Modbus_Emission+0xf8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2202      	movs	r2, #2
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000027c 	.word	0x2000027c

08001788 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8001788:	b4b0      	push	{r4, r5, r7}
 800178a:	b09f      	sub	sp, #124	@ 0x7c
 800178c:	af00      	add	r7, sp, #0
 800178e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001790:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001794:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001798:	ed87 2b08 	vstr	d2, [r7, #32]
 800179c:	ed87 3b06 	vstr	d3, [r7, #24]
 80017a0:	ed87 4b04 	vstr	d4, [r7, #16]
 80017a4:	ed87 5b02 	vstr	d5, [r7, #8]
 80017a8:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 80017ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80017b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017b8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80017bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80017c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80017cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80017d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d8:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 80017dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017e0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 80017e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017e6:	461d      	mov	r5, r3
 80017e8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80017ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017fc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001800:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001802:	377c      	adds	r7, #124	@ 0x7c
 8001804:	46bd      	mov	sp, r7
 8001806:	bcb0      	pop	{r4, r5, r7}
 8001808:	4770      	bx	lr

0800180a <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 800180a:	b4b0      	push	{r4, r5, r7}
 800180c:	b09f      	sub	sp, #124	@ 0x7c
 800180e:	af00      	add	r7, sp, #0
 8001810:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001812:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001816:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 800181a:	ed87 2b08 	vstr	d2, [r7, #32]
 800181e:	ed87 3b06 	vstr	d3, [r7, #24]
 8001822:	ed87 4b04 	vstr	d4, [r7, #16]
 8001826:	ed87 5b02 	vstr	d5, [r7, #8]
 800182a:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 800182e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001832:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800183a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800183e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001842:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800184a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 800184e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001852:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800185a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 800185e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001862:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8001866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001868:	461d      	mov	r5, r3
 800186a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800186e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800187e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001882:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001884:	377c      	adds	r7, #124	@ 0x7c
 8001886:	46bd      	mov	sp, r7
 8001888:	bcb0      	pop	{r4, r5, r7}
 800188a:	4770      	bx	lr

0800188c <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	@ 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6178      	str	r0, [r7, #20]
 8001894:	ed87 0a04 	vstr	s0, [r7, #16]
 8001898:	edc7 0a03 	vstr	s1, [r7, #12]
 800189c:	ed87 1a02 	vstr	s2, [r7, #8]
 80018a0:	edc7 1a01 	vstr	s3, [r7, #4]
 80018a4:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 80018a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80018ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 80018b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	db02      	blt.n	80018cc <InitTrajectorySegment+0x40>
 80018c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018ca:	e000      	b.n	80018ce <InitTrajectorySegment+0x42>
 80018cc:	4b49      	ldr	r3, [pc, #292]	@ (80019f4 <InitTrajectorySegment+0x168>)
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 80018d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018d4:	eef0 7ae7 	vabs.f32	s15, s15
 80018d8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 80018dc:	edd7 6a02 	vldr	s13, [r7, #8]
 80018e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80018e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 80018ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001900:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001908:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 800190c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001910:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001914:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d524      	bpl.n	800196c <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8001922:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001926:	edd7 7a01 	vldr	s15, [r7, #4]
 800192a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800192e:	eeb0 0a66 	vmov.f32	s0, s13
 8001932:	f00a fe03 	bl	800c53c <sqrtf>
 8001936:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8001942:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001946:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8001950:	ed97 7a01 	vldr	s14, [r7, #4]
 8001954:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	edc3 7a02 	vstr	s15, [r3, #8]
 800196a:	e027      	b.n	80019bc <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 800196c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001974:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8001980:	edd7 6a07 	vldr	s13, [r7, #28]
 8001984:	ed97 7a02 	vldr	s14, [r7, #8]
 8001988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8001992:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001996:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	edd3 7a05 	vldr	s15, [r3, #20]
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 80019aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 80019c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80019cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019de:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019e4:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	621a      	str	r2, [r3, #32]
}
 80019ec:	bf00      	nop
 80019ee:	3730      	adds	r7, #48	@ 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	bf800000 	.word	0xbf800000

080019f8 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 80019f8:	b480      	push	{r7}
 80019fa:	b08f      	sub	sp, #60	@ 0x3c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a0a:	ed97 7a00 	vldr	s14, [r7]
 8001a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a12:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8001a16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d503      	bpl.n	8001a2c <GetTrajectoryPosition+0x34>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	e0b4      	b.n	8001b96 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a32:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	db03      	blt.n	8001a48 <GetTrajectoryPosition+0x50>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a46:	e0a6      	b.n	8001b96 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a60:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	d512      	bpl.n	8001a94 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 8001a6e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a72:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a7a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a82:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a92:	e080      	b.n	8001b96 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	d525      	bpl.n	8001afe <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001ab8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001abc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ac0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001acc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8001ae0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afc:	e04b      	b.n	8001b96 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001b0a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b26:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 8001b32:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b36:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8001b4a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b4e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5e:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 8001b62:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b76:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b7a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001b7e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	373c      	adds	r7, #60	@ 0x3c
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bb6:	ed97 7a00 	vldr	s14, [r7]
 8001bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbe:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8001bc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	d502      	bpl.n	8001bd6 <GetTrajectoryVelocity+0x32>
 8001bd0:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8001c80 <GetTrajectoryVelocity+0xdc>
 8001bd4:	e04d      	b.n	8001c72 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bdc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	db02      	blt.n	8001bf0 <GetTrajectoryVelocity+0x4c>
 8001bea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8001c80 <GetTrajectoryVelocity+0xdc>
 8001bee:	e040      	b.n	8001c72 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c02:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d506      	bpl.n	8001c1e <GetTrajectoryVelocity+0x7a>
        return a * t;
 8001c10:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1c:	e029      	b.n	8001c72 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d502      	bpl.n	8001c42 <GetTrajectoryVelocity+0x9e>
        return v;
 8001c3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c40:	e017      	b.n	8001c72 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c48:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5a:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 8001c5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8001c72:	eeb0 0a67 	vmov.f32	s0, s15
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	00000000 	.word	0x00000000

08001c84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	@ 0x30
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2220      	movs	r2, #32
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00a fc0d 	bl	800c4bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ca2:	4b32      	ldr	r3, [pc, #200]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001ca4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ca8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001caa:	4b30      	ldr	r3, [pc, #192]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cc4:	4b29      	ldr	r3, [pc, #164]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cca:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001ccc:	2204      	movs	r2, #4
 8001cce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cd0:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cd6:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001cdc:	4b23      	ldr	r3, [pc, #140]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ce2:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d0c:	4817      	ldr	r0, [pc, #92]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001d0e:	f002 f9cd 	bl	80040ac <HAL_ADC_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001d18:	f001 f8d0 	bl	8002ebc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d24:	4619      	mov	r1, r3
 8001d26:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001d28:	f003 f96a 	bl	8005000 <HAL_ADCEx_MultiModeConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001d32:	f001 f8c3 	bl	8002ebc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_ADC1_Init+0xec>)
 8001d38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d42:	237f      	movs	r3, #127	@ 0x7f
 8001d44:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d46:	2304      	movs	r3, #4
 8001d48:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4806      	ldr	r0, [pc, #24]	@ (8001d6c <MX_ADC1_Init+0xe8>)
 8001d54:	f002 fc58 	bl	8004608 <HAL_ADC_ConfigChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001d5e:	f001 f8ad 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	3730      	adds	r7, #48	@ 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000280 	.word	0x20000280
 8001d70:	04300002 	.word	0x04300002

08001d74 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00a fb9b 	bl	800c4bc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001d86:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001d88:	4a2b      	ldr	r2, [pc, #172]	@ (8001e38 <MX_ADC2_Init+0xc4>)
 8001d8a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d8c:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001d8e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d92:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d94:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d9a:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001da0:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001da6:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dac:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001dae:	2204      	movs	r2, #4
 8001db0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001dee:	4811      	ldr	r0, [pc, #68]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001df0:	f002 f95c 	bl	80040ac <HAL_ADC_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001dfa:	f001 f85f 	bl	8002ebc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <MX_ADC2_Init+0xc8>)
 8001e00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e02:	2306      	movs	r3, #6
 8001e04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e0a:	237f      	movs	r3, #127	@ 0x7f
 8001e0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e16:	463b      	mov	r3, r7
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4806      	ldr	r0, [pc, #24]	@ (8001e34 <MX_ADC2_Init+0xc0>)
 8001e1c:	f002 fbf4 	bl	8004608 <HAL_ADC_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001e26:	f001 f849 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002ec 	.word	0x200002ec
 8001e38:	50000100 	.word	0x50000100
 8001e3c:	08600004 	.word	0x08600004

08001e40 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0a0      	sub	sp, #128	@ 0x80
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	2254      	movs	r2, #84	@ 0x54
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00a fb2b 	bl	800c4bc <memset>
  if(adcHandle->Instance==ADC1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e6e:	d13e      	bne.n	8001eee <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e76:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 fda7 	bl	80069d4 <HAL_RCCEx_PeriphCLKConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e8c:	f001 f816 	bl	8002ebc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e90:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <HAL_ADC_MspInit+0x13c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	4a39      	ldr	r2, [pc, #228]	@ (8001f7c <HAL_ADC_MspInit+0x13c>)
 8001e98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <HAL_ADC_MspInit+0x13c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d10b      	bne.n	8001eba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ea2:	4b37      	ldr	r3, [pc, #220]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea6:	4a36      	ldr	r2, [pc, #216]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001ea8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eae:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebe:	4a30      	ldr	r2, [pc, #192]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee8:	f003 fde0 	bl	8005aac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001eec:	e042      	b.n	8001f74 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a24      	ldr	r2, [pc, #144]	@ (8001f84 <HAL_ADC_MspInit+0x144>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d13d      	bne.n	8001f74 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ef8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001efc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001efe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 fd63 	bl	80069d4 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001f14:	f000 ffd2 	bl	8002ebc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f18:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_ADC_MspInit+0x13c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <HAL_ADC_MspInit+0x13c>)
 8001f20:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_ADC_MspInit+0x13c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10b      	bne.n	8001f42 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	4a14      	ldr	r2, [pc, #80]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001f30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	4a0e      	ldr	r2, [pc, #56]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <HAL_ADC_MspInit+0x140>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f70:	f003 fd9c 	bl	8005aac <HAL_GPIO_Init>
}
 8001f74:	bf00      	nop
 8001f76:	3780      	adds	r7, #128	@ 0x80
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000358 	.word	0x20000358
 8001f80:	40021000 	.word	0x40021000
 8001f84:	50000100 	.word	0x50000100

08001f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <MX_DMA_Init+0x50>)
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	4a11      	ldr	r2, [pc, #68]	@ (8001fd8 <MX_DMA_Init+0x50>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <MX_DMA_Init+0x50>)
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <MX_DMA_Init+0x50>)
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001faa:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd8 <MX_DMA_Init+0x50>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <MX_DMA_Init+0x50>)
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	200b      	movs	r0, #11
 8001fc4:	f003 f9ff 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fc8:	200b      	movs	r0, #11
 8001fca:	f003 fa16 	bl	80053fa <HAL_NVIC_EnableIRQ>

}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000

08001fdc <MX_GPIO_Init>:
     PA5   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	@ 0x28
 8001fe0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	4b61      	ldr	r3, [pc, #388]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	4a60      	ldr	r2, [pc, #384]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffe:	4b5e      	ldr	r3, [pc, #376]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800200a:	4b5b      	ldr	r3, [pc, #364]	@ (8002178 <MX_GPIO_Init+0x19c>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	4a5a      	ldr	r2, [pc, #360]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8002010:	f043 0320 	orr.w	r3, r3, #32
 8002014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002016:	4b58      	ldr	r3, [pc, #352]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b55      	ldr	r3, [pc, #340]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a54      	ldr	r2, [pc, #336]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b52      	ldr	r3, [pc, #328]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	4b4f      	ldr	r3, [pc, #316]	@ (8002178 <MX_GPIO_Init+0x19c>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	4a4e      	ldr	r2, [pc, #312]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002046:	4b4c      	ldr	r3, [pc, #304]	@ (8002178 <MX_GPIO_Init+0x19c>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2102      	movs	r1, #2
 8002056:	4849      	ldr	r0, [pc, #292]	@ (800217c <MX_GPIO_Init+0x1a0>)
 8002058:	f003 feaa 	bl	8005db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 800205c:	2200      	movs	r2, #0
 800205e:	2140      	movs	r1, #64	@ 0x40
 8002060:	4847      	ldr	r0, [pc, #284]	@ (8002180 <MX_GPIO_Init+0x1a4>)
 8002062:	f003 fea5 	bl	8005db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002066:	2320      	movs	r3, #32
 8002068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002084:	f003 fd12 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8002088:	2302      	movs	r3, #2
 800208a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	4837      	ldr	r0, [pc, #220]	@ (800217c <MX_GPIO_Init+0x1a0>)
 80020a0:	f003 fd04 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin|Limit_Switch_pen_1_Pin;
 80020a4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4830      	ldr	r0, [pc, #192]	@ (800217c <MX_GPIO_Init+0x1a0>)
 80020bc:	f003 fcf6 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 80020c0:	2340      	movs	r3, #64	@ 0x40
 80020c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	482a      	ldr	r0, [pc, #168]	@ (8002180 <MX_GPIO_Init+0x1a4>)
 80020d8:	f003 fce8 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 80020dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	4823      	ldr	r0, [pc, #140]	@ (8002180 <MX_GPIO_Init+0x1a4>)
 80020f2:	f003 fcdb 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80020f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	481c      	ldr	r0, [pc, #112]	@ (8002180 <MX_GPIO_Init+0x1a4>)
 800210e:	f003 fccd 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8002112:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002118:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800211c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4815      	ldr	r0, [pc, #84]	@ (8002180 <MX_GPIO_Init+0x1a4>)
 800212a:	f003 fcbf 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800212e:	2330      	movs	r3, #48	@ 0x30
 8002130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800213e:	2305      	movs	r3, #5
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	480c      	ldr	r0, [pc, #48]	@ (800217c <MX_GPIO_Init+0x1a0>)
 800214a:	f003 fcaf 	bl	8005aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2017      	movs	r0, #23
 8002154:	f003 f937 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002158:	2017      	movs	r0, #23
 800215a:	f003 f94e 	bl	80053fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	2028      	movs	r0, #40	@ 0x28
 8002164:	f003 f92f 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002168:	2028      	movs	r0, #40	@ 0x28
 800216a:	f003 f946 	bl	80053fa <HAL_NVIC_EnableIRQ>

}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	@ 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	48000400 	.word	0x48000400
 8002180:	48000800 	.word	0x48000800
 8002184:	00000000 	.word	0x00000000

08002188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b096      	sub	sp, #88	@ 0x58
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800218e:	f001 fd10 	bl	8003bb2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002192:	f000 fcb5 	bl	8002b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002196:	f7ff ff21 	bl	8001fdc <MX_GPIO_Init>
  MX_DMA_Init();
 800219a:	f7ff fef5 	bl	8001f88 <MX_DMA_Init>
  MX_TIM3_Init();
 800219e:	f000 fff1 	bl	8003184 <MX_TIM3_Init>
  MX_ADC1_Init();
 80021a2:	f7ff fd6f 	bl	8001c84 <MX_ADC1_Init>
  MX_TIM1_Init();
 80021a6:	f000 ff4b 	bl	8003040 <MX_TIM1_Init>
  MX_TIM2_Init();
 80021aa:	f000 ff9d 	bl	80030e8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80021ae:	f001 f83f 	bl	8003230 <MX_TIM4_Init>
  MX_TIM20_Init();
 80021b2:	f001 f9c3 	bl	800353c <MX_TIM20_Init>
  MX_TIM8_Init();
 80021b6:	f001 f891 	bl	80032dc <MX_TIM8_Init>
  MX_TIM16_Init();
 80021ba:	f001 f93f 	bl	800343c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80021be:	f001 fbf5 	bl	80039ac <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80021c2:	f7ff fdd7 	bl	8001d74 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 80021c6:	48a0      	ldr	r0, [pc, #640]	@ (8002448 <main+0x2c0>)
 80021c8:	f004 feb6 	bl	8006f38 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80021cc:	489f      	ldr	r0, [pc, #636]	@ (800244c <main+0x2c4>)
 80021ce:	f004 feb3 	bl	8006f38 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80021d2:	210c      	movs	r1, #12
 80021d4:	489d      	ldr	r0, [pc, #628]	@ (800244c <main+0x2c4>)
 80021d6:	f005 f873 	bl	80072c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 80021da:	2100      	movs	r1, #0
 80021dc:	489a      	ldr	r0, [pc, #616]	@ (8002448 <main+0x2c0>)
 80021de:	f005 f86f 	bl	80072c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 80021e2:	2108      	movs	r1, #8
 80021e4:	4898      	ldr	r0, [pc, #608]	@ (8002448 <main+0x2c0>)
 80021e6:	f005 f86b 	bl	80072c0 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 80021ea:	4999      	ldr	r1, [pc, #612]	@ (8002450 <main+0x2c8>)
 80021ec:	4899      	ldr	r0, [pc, #612]	@ (8002454 <main+0x2cc>)
 80021ee:	f7fe fbed 	bl	80009cc <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80021f2:	4999      	ldr	r1, [pc, #612]	@ (8002458 <main+0x2d0>)
 80021f4:	4899      	ldr	r0, [pc, #612]	@ (800245c <main+0x2d4>)
 80021f6:	f7fe fbe9 	bl	80009cc <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 80021fa:	4899      	ldr	r0, [pc, #612]	@ (8002460 <main+0x2d8>)
 80021fc:	f002 f912 	bl	8004424 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8002200:	4898      	ldr	r0, [pc, #608]	@ (8002464 <main+0x2dc>)
 8002202:	f004 ff09 	bl	8007018 <HAL_TIM_Base_Start_IT>

	int lastTick = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	657b      	str	r3, [r7, #84]	@ 0x54

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800220a:	213c      	movs	r1, #60	@ 0x3c
 800220c:	4892      	ldr	r0, [pc, #584]	@ (8002458 <main+0x2d0>)
 800220e:	f005 fb13 	bl	8007838 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002212:	213c      	movs	r1, #60	@ 0x3c
 8002214:	488e      	ldr	r0, [pc, #568]	@ (8002450 <main+0x2c8>)
 8002216:	f005 fb0f 	bl	8007838 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 800221a:	4b93      	ldr	r3, [pc, #588]	@ (8002468 <main+0x2e0>)
 800221c:	4a93      	ldr	r2, [pc, #588]	@ (800246c <main+0x2e4>)
 800221e:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8002220:	4b91      	ldr	r3, [pc, #580]	@ (8002468 <main+0x2e0>)
 8002222:	4a93      	ldr	r2, [pc, #588]	@ (8002470 <main+0x2e8>)
 8002224:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002226:	4b90      	ldr	r3, [pc, #576]	@ (8002468 <main+0x2e0>)
 8002228:	2215      	movs	r2, #21
 800222a:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 800222c:	4b8e      	ldr	r3, [pc, #568]	@ (8002468 <main+0x2e0>)
 800222e:	22c8      	movs	r2, #200	@ 0xc8
 8002230:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8002232:	4990      	ldr	r1, [pc, #576]	@ (8002474 <main+0x2ec>)
 8002234:	488c      	ldr	r0, [pc, #560]	@ (8002468 <main+0x2e0>)
 8002236:	f7fe ffa5 	bl	8001184 <Modbus_init>

	Kalman_Init(&kf_pris);
 800223a:	488f      	ldr	r0, [pc, #572]	@ (8002478 <main+0x2f0>)
 800223c:	f7fe fcf1 	bl	8000c22 <Kalman_Init>

	kf_pris.A_data[0] = 1;
 8002240:	4b8d      	ldr	r3, [pc, #564]	@ (8002478 <main+0x2f0>)
 8002242:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002246:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 8002248:	4b8b      	ldr	r3, [pc, #556]	@ (8002478 <main+0x2f0>)
 800224a:	4a8c      	ldr	r2, [pc, #560]	@ (800247c <main+0x2f4>)
 800224c:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 800224e:	4b8a      	ldr	r3, [pc, #552]	@ (8002478 <main+0x2f0>)
 8002250:	4a8b      	ldr	r2, [pc, #556]	@ (8002480 <main+0x2f8>)
 8002252:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 8002254:	4b88      	ldr	r3, [pc, #544]	@ (8002478 <main+0x2f0>)
 8002256:	4a8b      	ldr	r2, [pc, #556]	@ (8002484 <main+0x2fc>)
 8002258:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 800225a:	4b87      	ldr	r3, [pc, #540]	@ (8002478 <main+0x2f0>)
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 8002264:	4b84      	ldr	r3, [pc, #528]	@ (8002478 <main+0x2f0>)
 8002266:	4a88      	ldr	r2, [pc, #544]	@ (8002488 <main+0x300>)
 8002268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 800226c:	4b82      	ldr	r3, [pc, #520]	@ (8002478 <main+0x2f0>)
 800226e:	4a87      	ldr	r2, [pc, #540]	@ (800248c <main+0x304>)
 8002270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 8002274:	4b80      	ldr	r3, [pc, #512]	@ (8002478 <main+0x2f0>)
 8002276:	4a86      	ldr	r2, [pc, #536]	@ (8002490 <main+0x308>)
 8002278:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 800227c:	4b7e      	ldr	r3, [pc, #504]	@ (8002478 <main+0x2f0>)
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 8002286:	4b7c      	ldr	r3, [pc, #496]	@ (8002478 <main+0x2f0>)
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 8002290:	4b79      	ldr	r3, [pc, #484]	@ (8002478 <main+0x2f0>)
 8002292:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002296:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 800229a:	4b77      	ldr	r3, [pc, #476]	@ (8002478 <main+0x2f0>)
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 80022a4:	4b74      	ldr	r3, [pc, #464]	@ (8002478 <main+0x2f0>)
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 80022ae:	4b72      	ldr	r3, [pc, #456]	@ (8002478 <main+0x2f0>)
 80022b0:	4a78      	ldr	r2, [pc, #480]	@ (8002494 <main+0x30c>)
 80022b2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 80022b6:	4b70      	ldr	r3, [pc, #448]	@ (8002478 <main+0x2f0>)
 80022b8:	4a77      	ldr	r2, [pc, #476]	@ (8002498 <main+0x310>)
 80022ba:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 80022be:	4b6e      	ldr	r3, [pc, #440]	@ (8002478 <main+0x2f0>)
 80022c0:	4a76      	ldr	r2, [pc, #472]	@ (800249c <main+0x314>)
 80022c2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 80022c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002478 <main+0x2f0>)
 80022c8:	4a75      	ldr	r2, [pc, #468]	@ (80024a0 <main+0x318>)
 80022ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 80022ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002478 <main+0x2f0>)
 80022d0:	4a74      	ldr	r2, [pc, #464]	@ (80024a4 <main+0x31c>)
 80022d2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 80022d6:	4b68      	ldr	r3, [pc, #416]	@ (8002478 <main+0x2f0>)
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 80022e0:	4b65      	ldr	r3, [pc, #404]	@ (8002478 <main+0x2f0>)
 80022e2:	4a71      	ldr	r2, [pc, #452]	@ (80024a8 <main+0x320>)
 80022e4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ec:	e01d      	b.n	800232a <main+0x1a2>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80022ee:	2300      	movs	r3, #0
 80022f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f2:	e014      	b.n	800231e <main+0x196>
	        kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 80022f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d102      	bne.n	8002302 <main+0x17a>
 80022fc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002300:	e001      	b.n	8002306 <main+0x17e>
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002308:	0099      	lsls	r1, r3, #2
 800230a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800230c:	440b      	add	r3, r1
 800230e:	495a      	ldr	r1, [pc, #360]	@ (8002478 <main+0x2f0>)
 8002310:	333c      	adds	r3, #60	@ 0x3c
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800231a:	3301      	adds	r3, #1
 800231c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800231e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002320:	2b03      	cmp	r3, #3
 8002322:	dde7      	ble.n	80022f4 <main+0x16c>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002326:	3301      	adds	r3, #1
 8002328:	653b      	str	r3, [r7, #80]	@ 0x50
 800232a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800232c:	2b03      	cmp	r3, #3
 800232e:	ddde      	ble.n	80022ee <main+0x166>
	    }
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 8002330:	4b51      	ldr	r3, [pc, #324]	@ (8002478 <main+0x2f0>)
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 800233a:	4b4f      	ldr	r3, [pc, #316]	@ (8002478 <main+0x2f0>)
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8002344:	4b4c      	ldr	r3, [pc, #304]	@ (8002478 <main+0x2f0>)
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 800234e:	4b4a      	ldr	r3, [pc, #296]	@ (8002478 <main+0x2f0>)
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 8002358:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 80024ac <main+0x324>
 800235c:	4846      	ldr	r0, [pc, #280]	@ (8002478 <main+0x2f0>)
 800235e:	f7fe fd32 	bl	8000dc6 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 8002362:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 80024b0 <main+0x328>
 8002366:	4844      	ldr	r0, [pc, #272]	@ (8002478 <main+0x2f0>)
 8002368:	f7fe fcfd 	bl	8000d66 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 800236c:	4851      	ldr	r0, [pc, #324]	@ (80024b4 <main+0x32c>)
 800236e:	f7fe fc58 	bl	8000c22 <Kalman_Init>

	kf_rev.A_data[0] = 1;
 8002372:	4b50      	ldr	r3, [pc, #320]	@ (80024b4 <main+0x32c>)
 8002374:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002378:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 800237a:	4b4e      	ldr	r3, [pc, #312]	@ (80024b4 <main+0x32c>)
 800237c:	4a4e      	ldr	r2, [pc, #312]	@ (80024b8 <main+0x330>)
 800237e:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 8002380:	4b4c      	ldr	r3, [pc, #304]	@ (80024b4 <main+0x32c>)
 8002382:	4a4e      	ldr	r2, [pc, #312]	@ (80024bc <main+0x334>)
 8002384:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 8002386:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <main+0x32c>)
 8002388:	4a4d      	ldr	r2, [pc, #308]	@ (80024c0 <main+0x338>)
 800238a:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 800238c:	4b49      	ldr	r3, [pc, #292]	@ (80024b4 <main+0x32c>)
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <main+0x32c>)
 8002398:	4a4a      	ldr	r2, [pc, #296]	@ (80024c4 <main+0x33c>)
 800239a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 800239e:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <main+0x32c>)
 80023a0:	4a49      	ldr	r2, [pc, #292]	@ (80024c8 <main+0x340>)
 80023a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 80023a6:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <main+0x32c>)
 80023a8:	4a48      	ldr	r2, [pc, #288]	@ (80024cc <main+0x344>)
 80023aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 80023ae:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <main+0x32c>)
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 80023b8:	4b3e      	ldr	r3, [pc, #248]	@ (80024b4 <main+0x32c>)
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 80023c2:	4b3c      	ldr	r3, [pc, #240]	@ (80024b4 <main+0x32c>)
 80023c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023c8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 80023cc:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <main+0x32c>)
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 80023d6:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <main+0x32c>)
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 80023e0:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <main+0x32c>)
 80023e2:	4a3b      	ldr	r2, [pc, #236]	@ (80024d0 <main+0x348>)
 80023e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 80023e8:	4b32      	ldr	r3, [pc, #200]	@ (80024b4 <main+0x32c>)
 80023ea:	4a3a      	ldr	r2, [pc, #232]	@ (80024d4 <main+0x34c>)
 80023ec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 80023f0:	4b30      	ldr	r3, [pc, #192]	@ (80024b4 <main+0x32c>)
 80023f2:	4a39      	ldr	r2, [pc, #228]	@ (80024d8 <main+0x350>)
 80023f4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 80023f8:	4b2e      	ldr	r3, [pc, #184]	@ (80024b4 <main+0x32c>)
 80023fa:	4a38      	ldr	r2, [pc, #224]	@ (80024dc <main+0x354>)
 80023fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8002400:	4b2c      	ldr	r3, [pc, #176]	@ (80024b4 <main+0x32c>)
 8002402:	4a37      	ldr	r2, [pc, #220]	@ (80024e0 <main+0x358>)
 8002404:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8002408:	4b2a      	ldr	r3, [pc, #168]	@ (80024b4 <main+0x32c>)
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8002412:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <main+0x32c>)
 8002414:	4a33      	ldr	r2, [pc, #204]	@ (80024e4 <main+0x35c>)
 8002416:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 800241a:	2300      	movs	r3, #0
 800241c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800241e:	e077      	b.n	8002510 <main+0x388>
	    for (int j = 0; j < 4; j++) {
 8002420:	2300      	movs	r3, #0
 8002422:	647b      	str	r3, [r7, #68]	@ 0x44
 8002424:	e06e      	b.n	8002504 <main+0x37c>
	        if (i == j) {
 8002426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800242a:	429a      	cmp	r2, r3
 800242c:	d15c      	bne.n	80024e8 <main+0x360>
	            kf_rev.H_data[i * 4 + j] = 1.0f;
 800242e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002430:	009a      	lsls	r2, r3, #2
 8002432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002434:	4413      	add	r3, r2
 8002436:	4a1f      	ldr	r2, [pc, #124]	@ (80024b4 <main+0x32c>)
 8002438:	333c      	adds	r3, #60	@ 0x3c
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e05b      	b.n	80024fe <main+0x376>
 8002446:	bf00      	nop
 8002448:	20001828 	.word	0x20001828
 800244c:	20001690 	.word	0x20001690
 8002450:	200015c4 	.word	0x200015c4
 8002454:	2000035c 	.word	0x2000035c
 8002458:	200014f8 	.word	0x200014f8
 800245c:	20000390 	.word	0x20000390
 8002460:	20000280 	.word	0x20000280
 8002464:	2000142c 	.word	0x2000142c
 8002468:	20000560 	.word	0x20000560
 800246c:	200018f4 	.word	0x200018f4
 8002470:	2000175c 	.word	0x2000175c
 8002474:	20000a38 	.word	0x20000a38
 8002478:	20000c98 	.word	0x20000c98
 800247c:	3a5c11e4 	.word	0x3a5c11e4
 8002480:	b4e160df 	.word	0xb4e160df
 8002484:	3757157b 	.word	0x3757157b
 8002488:	3f2dd97f 	.word	0x3f2dd97f
 800248c:	ba5c11e4 	.word	0xba5c11e4
 8002490:	3cd20afa 	.word	0x3cd20afa
 8002494:	bd2c27a6 	.word	0xbd2c27a6
 8002498:	37b03ea2 	.word	0x37b03ea2
 800249c:	bdc3e426 	.word	0xbdc3e426
 80024a0:	36866b47 	.word	0x36866b47
 80024a4:	3c034092 	.word	0x3c034092
 80024a8:	3e90b0f2 	.word	0x3e90b0f2
 80024ac:	3c23d70a 	.word	0x3c23d70a
 80024b0:	3f666666 	.word	0x3f666666
 80024b4:	20000fbc 	.word	0x20000fbc
 80024b8:	3a830bb9 	.word	0x3a830bb9
 80024bc:	b6327146 	.word	0xb6327146
 80024c0:	33ae1e34 	.word	0x33ae1e34
 80024c4:	3f7fe5c9 	.word	0x3f7fe5c9
 80024c8:	bbae429e 	.word	0xbbae429e
 80024cc:	392a143b 	.word	0x392a143b
 80024d0:	c02fbe77 	.word	0xc02fbe77
 80024d4:	3bef4e01 	.word	0x3bef4e01
 80024d8:	3e0aa64c 	.word	0x3e0aa64c
 80024dc:	34012bd0 	.word	0x34012bd0
 80024e0:	397c4992 	.word	0x397c4992
 80024e4:	3fd7ae14 	.word	0x3fd7ae14
	        } else {
	            kf_rev.H_data[i * 4 + j] = 0.0f;
 80024e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ea:	009a      	lsls	r2, r3, #2
 80024ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ee:	4413      	add	r3, r2
 80024f0:	4ac1      	ldr	r2, [pc, #772]	@ (80027f8 <main+0x670>)
 80024f2:	333c      	adds	r3, #60	@ 0x3c
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < 4; j++) {
 80024fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002500:	3301      	adds	r3, #1
 8002502:	647b      	str	r3, [r7, #68]	@ 0x44
 8002504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002506:	2b03      	cmp	r3, #3
 8002508:	dd8d      	ble.n	8002426 <main+0x29e>
	for (int i = 0; i < 2; i++) {
 800250a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800250c:	3301      	adds	r3, #1
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002512:	2b01      	cmp	r3, #1
 8002514:	dd84      	ble.n	8002420 <main+0x298>
	        }
	    }
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8002516:	4bb8      	ldr	r3, [pc, #736]	@ (80027f8 <main+0x670>)
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8002520:	4bb5      	ldr	r3, [pc, #724]	@ (80027f8 <main+0x670>)
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 800252a:	4bb3      	ldr	r3, [pc, #716]	@ (80027f8 <main+0x670>)
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8002534:	4bb0      	ldr	r3, [pc, #704]	@ (80027f8 <main+0x670>)
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 800253e:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 80027fc <main+0x674>
 8002542:	48ad      	ldr	r0, [pc, #692]	@ (80027f8 <main+0x670>)
 8002544:	f7fe fc3f 	bl	8000dc6 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8002548:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8002800 <main+0x678>
 800254c:	48aa      	ldr	r0, [pc, #680]	@ (80027f8 <main+0x670>)
 800254e:	f7fe fc0a 	bl	8000d66 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01, 1.77e-01, 3.8719, 0.0016);
 8002552:	4cac      	ldr	r4, [pc, #688]	@ (8002804 <main+0x67c>)
 8002554:	463b      	mov	r3, r7
 8002556:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 8002790 <main+0x608>
 800255a:	ed9f 5b8f 	vldr	d5, [pc, #572]	@ 8002798 <main+0x610>
 800255e:	ed9f 4b90 	vldr	d4, [pc, #576]	@ 80027a0 <main+0x618>
 8002562:	ed9f 3b8f 	vldr	d3, [pc, #572]	@ 80027a0 <main+0x618>
 8002566:	ed9f 2b90 	vldr	d2, [pc, #576]	@ 80027a8 <main+0x620>
 800256a:	ed9f 1b91 	vldr	d1, [pc, #580]	@ 80027b0 <main+0x628>
 800256e:	ed9f 0b92 	vldr	d0, [pc, #584]	@ 80027b8 <main+0x630>
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f908 	bl	8001788 <create_prismatic_motor>
 8002578:	4625      	mov	r5, r4
 800257a:	463c      	mov	r4, r7
 800257c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002588:	e894 0003 	ldmia.w	r4, {r0, r1}
 800258c:	e885 0003 	stmia.w	r5, {r0, r1}
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00, 1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);
 8002590:	4c9d      	ldr	r4, [pc, #628]	@ (8002808 <main+0x680>)
 8002592:	463b      	mov	r3, r7
 8002594:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 80027c0 <main+0x638>
 8002598:	ed9f 5b8b 	vldr	d5, [pc, #556]	@ 80027c8 <main+0x640>
 800259c:	ed9f 4b8c 	vldr	d4, [pc, #560]	@ 80027d0 <main+0x648>
 80025a0:	ed9f 3b8d 	vldr	d3, [pc, #564]	@ 80027d8 <main+0x650>
 80025a4:	ed9f 2b8e 	vldr	d2, [pc, #568]	@ 80027e0 <main+0x658>
 80025a8:	ed9f 1b8f 	vldr	d1, [pc, #572]	@ 80027e8 <main+0x660>
 80025ac:	ed9f 0b90 	vldr	d0, [pc, #576]	@ 80027f0 <main+0x668>
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff f92a 	bl	800180a <create_motor>
 80025b6:	4625      	mov	r5, r4
 80025b8:	463c      	mov	r4, r7
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ca:	e885 0003 	stmia.w	r5, {r0, r1}

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 80025ce:	4b8f      	ldr	r3, [pc, #572]	@ (800280c <main+0x684>)
 80025d0:	4a8f      	ldr	r2, [pc, #572]	@ (8002810 <main+0x688>)
 80025d2:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 80025d4:	4b8d      	ldr	r3, [pc, #564]	@ (800280c <main+0x684>)
 80025d6:	4a8f      	ldr	r2, [pc, #572]	@ (8002814 <main+0x68c>)
 80025d8:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 80025da:	4b8c      	ldr	r3, [pc, #560]	@ (800280c <main+0x684>)
 80025dc:	4a8c      	ldr	r2, [pc, #560]	@ (8002810 <main+0x688>)
 80025de:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 80025e0:	2100      	movs	r1, #0
 80025e2:	488a      	ldr	r0, [pc, #552]	@ (800280c <main+0x684>)
 80025e4:	f009 fa74 	bl	800bad0 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 80025e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002818 <main+0x690>)
 80025ea:	4a8c      	ldr	r2, [pc, #560]	@ (800281c <main+0x694>)
 80025ec:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 80025ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002818 <main+0x690>)
 80025f0:	4a88      	ldr	r2, [pc, #544]	@ (8002814 <main+0x68c>)
 80025f2:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 80025f4:	4b88      	ldr	r3, [pc, #544]	@ (8002818 <main+0x690>)
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 80025fc:	2100      	movs	r1, #0
 80025fe:	4886      	ldr	r0, [pc, #536]	@ (8002818 <main+0x690>)
 8002600:	f009 fa66 	bl	800bad0 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 100.0;
 8002604:	4b86      	ldr	r3, [pc, #536]	@ (8002820 <main+0x698>)
 8002606:	4a87      	ldr	r2, [pc, #540]	@ (8002824 <main+0x69c>)
 8002608:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 40.0;
 800260a:	4b85      	ldr	r3, [pc, #532]	@ (8002820 <main+0x698>)
 800260c:	4a86      	ldr	r2, [pc, #536]	@ (8002828 <main+0x6a0>)
 800260e:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 4.0;
 8002610:	4b83      	ldr	r3, [pc, #524]	@ (8002820 <main+0x698>)
 8002612:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002616:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8002618:	2100      	movs	r1, #0
 800261a:	4881      	ldr	r0, [pc, #516]	@ (8002820 <main+0x698>)
 800261c:	f009 fa58 	bl	800bad0 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8002620:	4b82      	ldr	r3, [pc, #520]	@ (800282c <main+0x6a4>)
 8002622:	4a83      	ldr	r2, [pc, #524]	@ (8002830 <main+0x6a8>)
 8002624:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8002626:	4b81      	ldr	r3, [pc, #516]	@ (800282c <main+0x6a4>)
 8002628:	4a82      	ldr	r2, [pc, #520]	@ (8002834 <main+0x6ac>)
 800262a:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 800262c:	4b7f      	ldr	r3, [pc, #508]	@ (800282c <main+0x6a4>)
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8002634:	2100      	movs	r1, #0
 8002636:	487d      	ldr	r0, [pc, #500]	@ (800282c <main+0x6a4>)
 8002638:	f009 fa4a 	bl	800bad0 <arm_pid_init_f32>

//	encoder2.position = 1.57;

	InitTrajectorySegment(&segments[0], 0.0f, 200.0f, 500.0f, 250.0f, 0.0f);
 800263c:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 8002838 <main+0x6b0>
 8002640:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 800283c <main+0x6b4>
 8002644:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8002840 <main+0x6b8>
 8002648:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8002844 <main+0x6bc>
 800264c:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8002838 <main+0x6b0>
 8002650:	487d      	ldr	r0, [pc, #500]	@ (8002848 <main+0x6c0>)
 8002652:	f7ff f91b 	bl	800188c <InitTrajectorySegment>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
		HAL_ADC_Start(&hadc1);
 8002656:	487d      	ldr	r0, [pc, #500]	@ (800284c <main+0x6c4>)
 8002658:	f001 fee4 	bl	8004424 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 800265c:	487c      	ldr	r0, [pc, #496]	@ (8002850 <main+0x6c8>)
 800265e:	f001 fee1 	bl	8004424 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 8002662:	487a      	ldr	r0, [pc, #488]	@ (800284c <main+0x6c4>)
 8002664:	f001 ffc2 	bl	80045ec <HAL_ADC_GetValue>
 8002668:	4603      	mov	r3, r0
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b79      	ldr	r3, [pc, #484]	@ (8002854 <main+0x6cc>)
 800266e:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 8002670:	4877      	ldr	r0, [pc, #476]	@ (8002850 <main+0x6c8>)
 8002672:	f001 ffbb 	bl	80045ec <HAL_ADC_GetValue>
 8002676:	4603      	mov	r3, r0
 8002678:	b29a      	uxth	r2, r3
 800267a:	4b77      	ldr	r3, [pc, #476]	@ (8002858 <main+0x6d0>)
 800267c:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 800267e:	4b77      	ldr	r3, [pc, #476]	@ (800285c <main+0x6d4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	4a76      	ldr	r2, [pc, #472]	@ (8002860 <main+0x6d8>)
 8002686:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8002688:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <main+0x6dc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	4a76      	ldr	r2, [pc, #472]	@ (8002868 <main+0x6e0>)
 8002690:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8002692:	f7fe fe05 	bl	80012a0 <Modbus_Protocal_Worker>
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 8002696:	f001 faf1 	bl	8003c7c <HAL_GetTick>
 800269a:	6438      	str	r0, [r7, #64]	@ 0x40
		float dt = (currentTick - lastTick) / 1000.0f;
 800269c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026aa:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800286c <main+0x6e4>
 80026ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.001f) {
 80026b6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80026ba:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002870 <main+0x6e8>
 80026be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	f2c0 817b 	blt.w	80029c0 <main+0x838>
			Encoder_Update(&encoder1, dt);
 80026ca:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80026ce:	4869      	ldr	r0, [pc, #420]	@ (8002874 <main+0x6ec>)
 80026d0:	f7fe f9a6 	bl	8000a20 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 80026d4:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80026d8:	4867      	ldr	r0, [pc, #412]	@ (8002878 <main+0x6f0>)
 80026da:	f7fe f9a1 	bl	8000a20 <Encoder_Update>
			lastTick = currentTick;
 80026de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e0:	657b      	str	r3, [r7, #84]	@ 0x54

			p1 = Encoder_GetPosition(&encoder1);
 80026e2:	4864      	ldr	r0, [pc, #400]	@ (8002874 <main+0x6ec>)
 80026e4:	f7fe fa52 	bl	8000b8c <Encoder_GetPosition>
 80026e8:	eef0 7a40 	vmov.f32	s15, s0
 80026ec:	4b63      	ldr	r3, [pc, #396]	@ (800287c <main+0x6f4>)
 80026ee:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 80026f2:	4860      	ldr	r0, [pc, #384]	@ (8002874 <main+0x6ec>)
 80026f4:	f7fe fa59 	bl	8000baa <Encoder_GetVelocity>
 80026f8:	eef0 7a40 	vmov.f32	s15, s0
 80026fc:	4b60      	ldr	r3, [pc, #384]	@ (8002880 <main+0x6f8>)
 80026fe:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8002702:	485c      	ldr	r0, [pc, #368]	@ (8002874 <main+0x6ec>)
 8002704:	f7fe fa60 	bl	8000bc8 <Encoder_GetAcceleration>
 8002708:	eef0 7a40 	vmov.f32	s15, s0
 800270c:	4b5d      	ldr	r3, [pc, #372]	@ (8002884 <main+0x6fc>)
 800270e:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8002712:	4859      	ldr	r0, [pc, #356]	@ (8002878 <main+0x6f0>)
 8002714:	f7fe fa3a 	bl	8000b8c <Encoder_GetPosition>
 8002718:	eef0 7a40 	vmov.f32	s15, s0
 800271c:	4b5a      	ldr	r3, [pc, #360]	@ (8002888 <main+0x700>)
 800271e:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8002722:	4855      	ldr	r0, [pc, #340]	@ (8002878 <main+0x6f0>)
 8002724:	f7fe fa41 	bl	8000baa <Encoder_GetVelocity>
 8002728:	eef0 7a40 	vmov.f32	s15, s0
 800272c:	4b57      	ldr	r3, [pc, #348]	@ (800288c <main+0x704>)
 800272e:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8002732:	4851      	ldr	r0, [pc, #324]	@ (8002878 <main+0x6f0>)
 8002734:	f7fe fa48 	bl	8000bc8 <Encoder_GetAcceleration>
 8002738:	eef0 7a40 	vmov.f32	s15, s0
 800273c:	4b54      	ldr	r3, [pc, #336]	@ (8002890 <main+0x708>)
 800273e:	edc3 7a00 	vstr	s15, [r3]

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8002742:	484c      	ldr	r0, [pc, #304]	@ (8002874 <main+0x6ec>)
 8002744:	f7fe fa4f 	bl	8000be6 <Encoder_GetPosition_mm>
 8002748:	eef0 7a40 	vmov.f32	s15, s0
 800274c:	4b51      	ldr	r3, [pc, #324]	@ (8002894 <main+0x70c>)
 800274e:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8002752:	4848      	ldr	r0, [pc, #288]	@ (8002874 <main+0x6ec>)
 8002754:	f7fe fa56 	bl	8000c04 <Encoder_GetVelocity_mm>
 8002758:	eef0 7a40 	vmov.f32	s15, s0
 800275c:	4b4d      	ldr	r3, [pc, #308]	@ (8002894 <main+0x70c>)
 800275e:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 8002762:	4b4c      	ldr	r3, [pc, #304]	@ (8002894 <main+0x70c>)
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 800276a:	4b4a      	ldr	r3, [pc, #296]	@ (8002894 <main+0x70c>)
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 8002772:	4b49      	ldr	r3, [pc, #292]	@ (8002898 <main+0x710>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	eeb0 0a67 	vmov.f32	s0, s15
 800277c:	4847      	ldr	r0, [pc, #284]	@ (800289c <main+0x714>)
 800277e:	f7fe fb52 	bl	8000e26 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 8002782:	4846      	ldr	r0, [pc, #280]	@ (800289c <main+0x714>)
 8002784:	f7fe fb5f 	bl	8000e46 <Kalman_Predict>
 8002788:	e08a      	b.n	80028a0 <main+0x718>
 800278a:	bf00      	nop
 800278c:	f3af 8000 	nop.w
 8002790:	eb1c432d 	.word	0xeb1c432d
 8002794:	3f5a36e2 	.word	0x3f5a36e2
 8002798:	b50b0f28 	.word	0xb50b0f28
 800279c:	400ef9a6 	.word	0x400ef9a6
 80027a0:	9db22d0e 	.word	0x9db22d0e
 80027a4:	3fc6a7ef 	.word	0x3fc6a7ef
 80027a8:	00000000 	.word	0x00000000
 80027ac:	3fec0000 	.word	0x3fec0000
 80027b0:	3c968944 	.word	0x3c968944
 80027b4:	3f3f969e 	.word	0x3f3f969e
 80027b8:	05857aff 	.word	0x05857aff
 80027bc:	3f2e03f7 	.word	0x3f2e03f7
 80027c0:	fa8f7db7 	.word	0xfa8f7db7
 80027c4:	3f3615eb 	.word	0x3f3615eb
 80027c8:	f9db22d1 	.word	0xf9db22d1
 80027cc:	3fe06a7e 	.word	0x3fe06a7e
 80027d0:	a7daa4fc 	.word	0xa7daa4fc
 80027d4:	3ff331e3 	.word	0x3ff331e3
 80027d8:	e147ae14 	.word	0xe147ae14
 80027dc:	3ffa147a 	.word	0x3ffa147a
 80027e0:	df3b645a 	.word	0xdf3b645a
 80027e4:	3fe78d4f 	.word	0x3fe78d4f
 80027e8:	003eea21 	.word	0x003eea21
 80027ec:	3f7c4da9 	.word	0x3f7c4da9
 80027f0:	4dd2f1aa 	.word	0x4dd2f1aa
 80027f4:	3fc81062 	.word	0x3fc81062
 80027f8:	20000fbc 	.word	0x20000fbc
 80027fc:	3da3d70a 	.word	0x3da3d70a
 8002800:	3df5c28f 	.word	0x3df5c28f
 8002804:	200012e0 	.word	0x200012e0
 8002808:	20001318 	.word	0x20001318
 800280c:	20000bd0 	.word	0x20000bd0
 8002810:	3e99999a 	.word	0x3e99999a
 8002814:	3c23d70a 	.word	0x3c23d70a
 8002818:	20000c10 	.word	0x20000c10
 800281c:	3da3d70a 	.word	0x3da3d70a
 8002820:	20000c50 	.word	0x20000c50
 8002824:	42c80000 	.word	0x42c80000
 8002828:	42200000 	.word	0x42200000
 800282c:	20000c74 	.word	0x20000c74
 8002830:	40400000 	.word	0x40400000
 8002834:	3dcccccd 	.word	0x3dcccccd
 8002838:	00000000 	.word	0x00000000
 800283c:	437a0000 	.word	0x437a0000
 8002840:	43fa0000 	.word	0x43fa0000
 8002844:	43480000 	.word	0x43480000
 8002848:	200003d4 	.word	0x200003d4
 800284c:	20000280 	.word	0x20000280
 8002850:	200002ec 	.word	0x200002ec
 8002854:	2000055c 	.word	0x2000055c
 8002858:	2000055e 	.word	0x2000055e
 800285c:	200014f8 	.word	0x200014f8
 8002860:	200003c4 	.word	0x200003c4
 8002864:	200015c4 	.word	0x200015c4
 8002868:	200003c8 	.word	0x200003c8
 800286c:	447a0000 	.word	0x447a0000
 8002870:	3a83126f 	.word	0x3a83126f
 8002874:	2000035c 	.word	0x2000035c
 8002878:	20000390 	.word	0x20000390
 800287c:	20000540 	.word	0x20000540
 8002880:	20000544 	.word	0x20000544
 8002884:	20000548 	.word	0x20000548
 8002888:	2000054c 	.word	0x2000054c
 800288c:	20000550 	.word	0x20000550
 8002890:	20000554 	.word	0x20000554
 8002894:	20001350 	.word	0x20001350
 8002898:	20000c3c 	.word	0x20000c3c
 800289c:	20000c98 	.word	0x20000c98
			Kalman_Update(&kf_pris,Measurement_Pris);
 80028a0:	4981      	ldr	r1, [pc, #516]	@ (8002aa8 <main+0x920>)
 80028a2:	4882      	ldr	r0, [pc, #520]	@ (8002aac <main+0x924>)
 80028a4:	f7fe fb1c 	bl	8000ee0 <Kalman_Update>
//			Measurement_Rev[3] = 0;
//			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
//			Kalman_Predict(&kf_rev);
//			Kalman_Update(&kf_rev, Measurement_Rev);

			count_Tim2 += 1;
 80028a8:	4b81      	ldr	r3, [pc, #516]	@ (8002ab0 <main+0x928>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	4a80      	ldr	r2, [pc, #512]	@ (8002ab0 <main+0x928>)
 80028b0:	6013      	str	r3, [r2, #0]
			// Velocity Control
			velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 80028b2:	4880      	ldr	r0, [pc, #512]	@ (8002ab4 <main+0x92c>)
 80028b4:	f7fe f9a6 	bl	8000c04 <Encoder_GetVelocity_mm>
 80028b8:	eef0 7a40 	vmov.f32	s15, s0
 80028bc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab8 <main+0x930>)
 80028be:	edc3 7a00 	vstr	s15, [r3]
			setvelocity_pris = GetTrajectoryVelocity(&segments[0], t_global) + V_pris_posi_PID;
 80028c2:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <main+0x934>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	eeb0 0a67 	vmov.f32	s0, s15
 80028cc:	487c      	ldr	r0, [pc, #496]	@ (8002ac0 <main+0x938>)
 80028ce:	f7ff f969 	bl	8001ba4 <GetTrajectoryVelocity>
 80028d2:	eeb0 7a40 	vmov.f32	s14, s0
 80028d6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ac4 <main+0x93c>)
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e0:	4b79      	ldr	r3, [pc, #484]	@ (8002ac8 <main+0x940>)
 80028e2:	edc3 7a00 	vstr	s15, [r3]
			delta_velo_pris = setvelocity_pris - velocity_pris;
 80028e6:	4b78      	ldr	r3, [pc, #480]	@ (8002ac8 <main+0x940>)
 80028e8:	ed93 7a00 	vldr	s14, [r3]
 80028ec:	4b72      	ldr	r3, [pc, #456]	@ (8002ab8 <main+0x930>)
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f6:	4b75      	ldr	r3, [pc, #468]	@ (8002acc <main+0x944>)
 80028f8:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
			V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 80028fc:	4b73      	ldr	r3, [pc, #460]	@ (8002acc <main+0x944>)
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	eeb0 0a67 	vmov.f32	s0, s15
 8002906:	f000 fa0d 	bl	8002d24 <Prismatic_velocity_control>
 800290a:	eef0 7a40 	vmov.f32	s15, s0
 800290e:	4b70      	ldr	r3, [pc, #448]	@ (8002ad0 <main+0x948>)
 8002910:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 8002914:	4b66      	ldr	r3, [pc, #408]	@ (8002ab0 <main+0x928>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b09      	cmp	r3, #9
 800291a:	dd51      	ble.n	80029c0 <main+0x838>
				// Position Control
				position_pris = Encoder_GetPosition_mm(&encoder1);
 800291c:	4865      	ldr	r0, [pc, #404]	@ (8002ab4 <main+0x92c>)
 800291e:	f7fe f962 	bl	8000be6 <Encoder_GetPosition_mm>
 8002922:	eef0 7a40 	vmov.f32	s15, s0
 8002926:	4b6b      	ldr	r3, [pc, #428]	@ (8002ad4 <main+0x94c>)
 8002928:	edc3 7a00 	vstr	s15, [r3]
				setposition_pris = GetTrajectoryPosition(&segments[0], t_global);
 800292c:	4b63      	ldr	r3, [pc, #396]	@ (8002abc <main+0x934>)
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	eeb0 0a67 	vmov.f32	s0, s15
 8002936:	4862      	ldr	r0, [pc, #392]	@ (8002ac0 <main+0x938>)
 8002938:	f7ff f85e 	bl	80019f8 <GetTrajectoryPosition>
 800293c:	eef0 7a40 	vmov.f32	s15, s0
 8002940:	4b65      	ldr	r3, [pc, #404]	@ (8002ad8 <main+0x950>)
 8002942:	edc3 7a00 	vstr	s15, [r3]
				delta_posi_pris = setposition_pris - position_pris;
 8002946:	4b64      	ldr	r3, [pc, #400]	@ (8002ad8 <main+0x950>)
 8002948:	ed93 7a00 	vldr	s14, [r3]
 800294c:	4b61      	ldr	r3, [pc, #388]	@ (8002ad4 <main+0x94c>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	4b61      	ldr	r3, [pc, #388]	@ (8002adc <main+0x954>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 800295c:	4b5f      	ldr	r3, [pc, #380]	@ (8002adc <main+0x954>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fdbd 	bl	80004e0 <__aeabi_f2d>
 8002966:	a34c      	add	r3, pc, #304	@ (adr r3, 8002a98 <main+0x910>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fe7a 	bl	8000664 <__aeabi_dcmple>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d015      	beq.n	80029a2 <main+0x81a>
 8002976:	4b59      	ldr	r3, [pc, #356]	@ (8002adc <main+0x954>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fdb0 	bl	80004e0 <__aeabi_f2d>
 8002980:	a347      	add	r3, pc, #284	@ (adr r3, 8002aa0 <main+0x918>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd fe77 	bl	8000678 <__aeabi_dcmpge>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <main+0x81a>
					V_pris_posi_PID = 0;
 8002990:	4b4c      	ldr	r3, [pc, #304]	@ (8002ac4 <main+0x93c>)
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
					V_pris_velo_PID = 0;
 8002998:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad0 <main+0x948>)
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e00b      	b.n	80029ba <main+0x832>
				} else {
					V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
 80029a2:	4b4e      	ldr	r3, [pc, #312]	@ (8002adc <main+0x954>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eeb0 0a67 	vmov.f32	s0, s15
 80029ac:	f000 f942 	bl	8002c34 <Prismatic_position_control>
 80029b0:	eef0 7a40 	vmov.f32	s15, s0
 80029b4:	4b43      	ldr	r3, [pc, #268]	@ (8002ac4 <main+0x93c>)
 80029b6:	edc3 7a00 	vstr	s15, [r3]
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
				count_Tim2 = 0;
 80029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <main+0x928>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
////				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
//				count_Tim2 = 0;
//			}
		}

		t_global = HAL_GetTick() / 1000.0f;
 80029c0:	f001 f95c 	bl	8003c7c <HAL_GetTick>
 80029c4:	ee07 0a90 	vmov	s15, r0
 80029c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029cc:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002ae0 <main+0x958>
 80029d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d4:	4b39      	ldr	r3, [pc, #228]	@ (8002abc <main+0x934>)
 80029d6:	edc3 7a00 	vstr	s15, [r3]
		pos = GetTrajectoryPosition(&segments[0], t_global);
 80029da:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <main+0x934>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	eeb0 0a67 	vmov.f32	s0, s15
 80029e4:	4836      	ldr	r0, [pc, #216]	@ (8002ac0 <main+0x938>)
 80029e6:	f7ff f807 	bl	80019f8 <GetTrajectoryPosition>
 80029ea:	eef0 7a40 	vmov.f32	s15, s0
 80029ee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <main+0x95c>)
 80029f0:	edc3 7a00 	vstr	s15, [r3]
		vel = GetTrajectoryVelocity(&segments[0], t_global);
 80029f4:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <main+0x934>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	eeb0 0a67 	vmov.f32	s0, s15
 80029fe:	4830      	ldr	r0, [pc, #192]	@ (8002ac0 <main+0x938>)
 8002a00:	f7ff f8d0 	bl	8001ba4 <GetTrajectoryVelocity>
 8002a04:	eef0 7a40 	vmov.f32	s15, s0
 8002a08:	4b37      	ldr	r3, [pc, #220]	@ (8002ae8 <main+0x960>)
 8002a0a:	edc3 7a00 	vstr	s15, [r3]

		if (V_pris_velo_PID < 0) {
 8002a0e:	4b30      	ldr	r3, [pc, #192]	@ (8002ad0 <main+0x948>)
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	d50b      	bpl.n	8002a36 <main+0x8ae>
			DIR_24V = 0;
 8002a1e:	4b33      	ldr	r3, [pc, #204]	@ (8002aec <main+0x964>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = fabsf(V_pris_velo_PID);
 8002a24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <main+0x948>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a2e:	4b30      	ldr	r3, [pc, #192]	@ (8002af0 <main+0x968>)
 8002a30:	edc3 7a00 	vstr	s15, [r3]
 8002a34:	e00e      	b.n	8002a54 <main+0x8cc>
		} else if (V_pris_velo_PID > 0) {
 8002a36:	4b26      	ldr	r3, [pc, #152]	@ (8002ad0 <main+0x948>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	dd06      	ble.n	8002a54 <main+0x8cc>
			DIR_24V = 1;
 8002a46:	4b29      	ldr	r3, [pc, #164]	@ (8002aec <main+0x964>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = V_pris_velo_PID;
 8002a4c:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <main+0x948>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a27      	ldr	r2, [pc, #156]	@ (8002af0 <main+0x968>)
 8002a52:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 8002a54:	4b26      	ldr	r3, [pc, #152]	@ (8002af0 <main+0x968>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5e:	f000 fa0f 	bl	8002e80 <voltage_to_pwm>
 8002a62:	eef0 7a40 	vmov.f32	s15, s0
 8002a66:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <main+0x96c>)
 8002a68:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aec <main+0x964>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	2102      	movs	r1, #2
 8002a76:	4820      	ldr	r0, [pc, #128]	@ (8002af8 <main+0x970>)
 8002a78:	f003 f99a 	bl	8005db0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,pwm_pris_velo);
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002af4 <main+0x96c>)
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <main+0x974>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a8a:	ee17 2a90 	vmov	r2, s15
 8002a8e:	635a      	str	r2, [r3, #52]	@ 0x34
	while (1) {
 8002a90:	e5e1      	b.n	8002656 <main+0x4ce>
 8002a92:	bf00      	nop
 8002a94:	f3af 8000 	nop.w
 8002a98:	9999999a 	.word	0x9999999a
 8002a9c:	3fb99999 	.word	0x3fb99999
 8002aa0:	9999999a 	.word	0x9999999a
 8002aa4:	bfb99999 	.word	0xbfb99999
 8002aa8:	20001350 	.word	0x20001350
 8002aac:	20000c98 	.word	0x20000c98
 8002ab0:	20000bcc 	.word	0x20000bcc
 8002ab4:	2000035c 	.word	0x2000035c
 8002ab8:	20000c34 	.word	0x20000c34
 8002abc:	2000053c 	.word	0x2000053c
 8002ac0:	200003d4 	.word	0x200003d4
 8002ac4:	20000bfc 	.word	0x20000bfc
 8002ac8:	20000c38 	.word	0x20000c38
 8002acc:	20000c4c 	.word	0x20000c4c
 8002ad0:	20000c3c 	.word	0x20000c3c
 8002ad4:	20000bf4 	.word	0x20000bf4
 8002ad8:	20000bf8 	.word	0x20000bf8
 8002adc:	20000c0c 	.word	0x20000c0c
 8002ae0:	447a0000 	.word	0x447a0000
 8002ae4:	200003cc 	.word	0x200003cc
 8002ae8:	200003d0 	.word	0x200003d0
 8002aec:	20000bc8 	.word	0x20000bc8
 8002af0:	20000c00 	.word	0x20000c00
 8002af4:	20000c40 	.word	0x20000c40
 8002af8:	48000400 	.word	0x48000400
 8002afc:	20001828 	.word	0x20001828

08002b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b094      	sub	sp, #80	@ 0x50
 8002b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b06:	f107 0318 	add.w	r3, r7, #24
 8002b0a:	2238      	movs	r2, #56	@ 0x38
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f009 fcd4 	bl	800c4bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f003 f974 	bl	8005e10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b32:	2340      	movs	r3, #64	@ 0x40
 8002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b36:	2302      	movs	r3, #2
 8002b38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002b42:	2355      	movs	r3, #85	@ 0x55
 8002b44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b46:	2302      	movs	r3, #2
 8002b48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b52:	f107 0318 	add.w	r3, r7, #24
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fa0e 	bl	8005f78 <HAL_RCC_OscConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002b62:	f000 f9ab 	bl	8002ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b66:	230f      	movs	r3, #15
 8002b68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fd0c 	bl	800659c <HAL_RCC_ClockConfig>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002b8a:	f000 f997 	bl	8002ebc <Error_Handler>
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3750      	adds	r7, #80	@ 0x50
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ba8:	d103      	bne.n	8002bb2 <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x84>)
 8002bac:	2209      	movs	r2, #9
 8002bae:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 8002bb0:	e02e      	b.n	8002c10 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb8:	d103      	bne.n	8002bc2 <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8002bba:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x84>)
 8002bbc:	220a      	movs	r2, #10
 8002bbe:	601a      	str	r2, [r3, #0]
}
 8002bc0:	e026      	b.n	8002c10 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bc8:	d103      	bne.n	8002bd2 <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8002bca:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x84>)
 8002bcc:	220b      	movs	r2, #11
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	e01e      	b.n	8002c10 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd8:	d103      	bne.n	8002be2 <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8002bda:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x84>)
 8002bdc:	220c      	movs	r2, #12
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	e016      	b.n	8002c10 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be8:	d103      	bne.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8002bea:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x84>)
 8002bec:	220d      	movs	r2, #13
 8002bee:	601a      	str	r2, [r3, #0]
}
 8002bf0:	e00e      	b.n	8002c10 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bf8:	d103      	bne.n	8002c02 <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x84>)
 8002bfc:	220e      	movs	r2, #14
 8002bfe:	601a      	str	r2, [r3, #0]
}
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c08:	d102      	bne.n	8002c10 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8002c0a:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x84>)
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	20000558 	.word	0x20000558

08002c20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
//			}
////			V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
//			count_Tim2 = 0;
//		}
//	}
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 8002c3e:	4a36      	ldr	r2, [pc, #216]	@ (8002d18 <Prismatic_position_control+0xe4>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8002c44:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <Prismatic_position_control+0xe4>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d50a      	bpl.n	8002c6a <Prismatic_position_control+0x36>
 8002c54:	4b30      	ldr	r3, [pc, #192]	@ (8002d18 <Prismatic_position_control+0xe4>)
 8002c56:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	dd02      	ble.n	8002c6a <Prismatic_position_control+0x36>
		anti_windup = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e014      	b.n	8002c94 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <Prismatic_position_control+0xe4>)
 8002c6c:	edd3 7a00 	vldr	s15, [r3]
 8002c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	dd0a      	ble.n	8002c90 <Prismatic_position_control+0x5c>
 8002c7a:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <Prismatic_position_control+0xe4>)
 8002c7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	d502      	bpl.n	8002c90 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e001      	b.n	8002c94 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <Prismatic_position_control+0xe8>)
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	ed93 7a00 	vldr	s14, [r3]
 8002ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	edd3 6a01 	vldr	s13, [r3, #4]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002cba:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	edd3 6a02 	vldr	s13, [r3, #8]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cdc:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <Prismatic_position_control+0xec>)
 8002cf8:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <Prismatic_position_control+0xe4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a06      	ldr	r2, [pc, #24]	@ (8002d18 <Prismatic_position_control+0xe4>)
 8002d00:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8002d02:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <Prismatic_position_control+0xec>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	ee07 3a90 	vmov	s15, r3
}
 8002d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20000c04 	.word	0x20000c04
 8002d1c:	20000bd0 	.word	0x20000bd0
 8002d20:	20000bfc 	.word	0x20000bfc

08002d24 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] =  delta_velo;
 8002d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8002e68 <Prismatic_velocity_control+0x144>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 8002d34:	4b4c      	ldr	r3, [pc, #304]	@ (8002e68 <Prismatic_velocity_control+0x144>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	d50a      	bpl.n	8002d5a <Prismatic_velocity_control+0x36>
 8002d44:	4b48      	ldr	r3, [pc, #288]	@ (8002e68 <Prismatic_velocity_control+0x144>)
 8002d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d52:	dd02      	ble.n	8002d5a <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e014      	b.n	8002d84 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 8002d5a:	4b43      	ldr	r3, [pc, #268]	@ (8002e68 <Prismatic_velocity_control+0x144>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	dd0a      	ble.n	8002d80 <Prismatic_velocity_control+0x5c>
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <Prismatic_velocity_control+0x144>)
 8002d6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d78:	d502      	bpl.n	8002d80 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e001      	b.n	8002d84 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8002d80:	2301      	movs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8002d84:	4b39      	ldr	r3, [pc, #228]	@ (8002e6c <Prismatic_velocity_control+0x148>)
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	db07      	blt.n	8002da8 <Prismatic_velocity_control+0x84>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 8002d9e:	4b34      	ldr	r3, [pc, #208]	@ (8002e70 <Prismatic_velocity_control+0x14c>)
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
 8002da6:	e002      	b.n	8002dae <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 8002da8:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <Prismatic_velocity_control+0x14c>)
 8002daa:	4a32      	ldr	r2, [pc, #200]	@ (8002e74 <Prismatic_velocity_control+0x150>)
 8002dac:	61da      	str	r2, [r3, #28]
 8002dae:	4b30      	ldr	r3, [pc, #192]	@ (8002e70 <Prismatic_velocity_control+0x14c>)
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	edd3 6a02 	vldr	s13, [r3, #8]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df6:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	615a      	str	r2, [r3, #20]
    return (out);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8002e10:	4a16      	ldr	r2, [pc, #88]	@ (8002e6c <Prismatic_velocity_control+0x148>)
 8002e12:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8002e14:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <Prismatic_velocity_control+0x148>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	dd03      	ble.n	8002e30 <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 8002e28:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <Prismatic_velocity_control+0x148>)
 8002e2a:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <Prismatic_velocity_control+0x154>)
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e00c      	b.n	8002e4a <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8002e30:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <Prismatic_velocity_control+0x148>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d502      	bpl.n	8002e4a <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <Prismatic_velocity_control+0x148>)
 8002e46:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <Prismatic_velocity_control+0x158>)
 8002e48:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <Prismatic_velocity_control+0x144>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a06      	ldr	r2, [pc, #24]	@ (8002e68 <Prismatic_velocity_control+0x144>)
 8002e50:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <Prismatic_velocity_control+0x148>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	ee07 3a90 	vmov	s15, r3
}
 8002e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	20000c44 	.word	0x20000c44
 8002e6c:	20000c3c 	.word	0x20000c3c
 8002e70:	20000c10 	.word	0x20000c10
 8002e74:	3a83126f 	.word	0x3a83126f
 8002e78:	41c00000 	.word	0x41c00000
 8002e7c:	c1c00000 	.word	0xc1c00000

08002e80 <voltage_to_pwm>:
	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
	error_velo_rev[1] = error_velo_rev[0];
	return V_rev_velo_PID;
}

float voltage_to_pwm(float voltage) {
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 8002e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e8e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002eb8 <voltage_to_pwm+0x38>
 8002e92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e96:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e9e:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	ee07 3a90 	vmov	s15, r3
}
 8002ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	477fff00 	.word	0x477fff00

08002ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec0:	b672      	cpsid	i
}
 8002ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <Error_Handler+0x8>

08002ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	4b0f      	ldr	r3, [pc, #60]	@ (8002f0c <HAL_MspInit+0x44>)
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8002f0c <HAL_MspInit+0x44>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eda:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <HAL_MspInit+0x44>)
 8002edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <HAL_MspInit+0x44>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	4a08      	ldr	r2, [pc, #32]	@ (8002f0c <HAL_MspInit+0x44>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef2:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_MspInit+0x44>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002efe:	f003 f82b 	bl	8005f58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000

08002f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <NMI_Handler+0x4>

08002f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <HardFault_Handler+0x4>

08002f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <MemManage_Handler+0x4>

08002f28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <BusFault_Handler+0x4>

08002f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <UsageFault_Handler+0x4>

08002f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f66:	f000 fe77 	bl	8003c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f74:	4802      	ldr	r0, [pc, #8]	@ (8002f80 <DMA1_Channel1_IRQHandler+0x10>)
 8002f76:	f002 fc3e 	bl	80057f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200019c0 	.word	0x200019c0

08002f84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8002f88:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002f8c:	f002 ff28 	bl	8005de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002f9a:	f004 fcdb 	bl	8007954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20001360 	.word	0x20001360

08002fa8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fac:	4803      	ldr	r0, [pc, #12]	@ (8002fbc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002fae:	f004 fcd1 	bl	8007954 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002fb2:	4803      	ldr	r0, [pc, #12]	@ (8002fc0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002fb4:	f004 fcce 	bl	8007954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20001360 	.word	0x20001360
 8002fc0:	2000175c 	.word	0x2000175c

08002fc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fc8:	4802      	ldr	r0, [pc, #8]	@ (8002fd4 <TIM2_IRQHandler+0x10>)
 8002fca:	f004 fcc3 	bl	8007954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000142c 	.word	0x2000142c

08002fd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fdc:	4802      	ldr	r0, [pc, #8]	@ (8002fe8 <USART2_IRQHandler+0x10>)
 8002fde:	f006 fbbd 	bl	800975c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200018f4 	.word	0x200018f4

08002fec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8002ff0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002ff4:	f002 fef4 	bl	8005de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8002ff8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002ffc:	f002 fef0 	bl	8005de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8003000:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003004:	f002 feec 	bl	8005de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8003008:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800300c:	f002 fee8 	bl	8005de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8003010:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003014:	f002 fee4 	bl	8005de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <SystemInit+0x20>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003026:	4a05      	ldr	r2, [pc, #20]	@ (800303c <SystemInit+0x20>)
 8003028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800302c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003046:	f107 0310 	add.w	r3, r7, #16
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 8003060:	4a20      	ldr	r2, [pc, #128]	@ (80030e4 <MX_TIM1_Init+0xa4>)
 8003062:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003064:	4b1e      	ldr	r3, [pc, #120]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 8003066:	2200      	movs	r2, #0
 8003068:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306a:	4b1d      	ldr	r3, [pc, #116]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8003070:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 8003072:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003076:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003078:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800307e:	4b18      	ldr	r3, [pc, #96]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 8003080:	2200      	movs	r2, #0
 8003082:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003084:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800308a:	4815      	ldr	r0, [pc, #84]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 800308c:	f003 fef0 	bl	8006e70 <HAL_TIM_Base_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003096:	f7ff ff11 	bl	8002ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800309a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800309e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4619      	mov	r1, r3
 80030a6:	480e      	ldr	r0, [pc, #56]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 80030a8:	f004 ff5c 	bl	8007f64 <HAL_TIM_ConfigClockSource>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80030b2:	f7ff ff03 	bl	8002ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	4806      	ldr	r0, [pc, #24]	@ (80030e0 <MX_TIM1_Init+0xa0>)
 80030c8:	f005 ff32 	bl	8008f30 <HAL_TIMEx_MasterConfigSynchronization>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80030d2:	f7ff fef3 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030d6:	bf00      	nop
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20001360 	.word	0x20001360
 80030e4:	40012c00 	.word	0x40012c00

080030e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ee:	f107 0310 	add.w	r3, r7, #16
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <MX_TIM2_Init+0x98>)
 8003108:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800310c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800310e:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <MX_TIM2_Init+0x98>)
 8003110:	22a9      	movs	r2, #169	@ 0xa9
 8003112:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003114:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <MX_TIM2_Init+0x98>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800311a:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <MX_TIM2_Init+0x98>)
 800311c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003120:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003122:	4b17      	ldr	r3, [pc, #92]	@ (8003180 <MX_TIM2_Init+0x98>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003128:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <MX_TIM2_Init+0x98>)
 800312a:	2200      	movs	r2, #0
 800312c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800312e:	4814      	ldr	r0, [pc, #80]	@ (8003180 <MX_TIM2_Init+0x98>)
 8003130:	f003 fe9e 	bl	8006e70 <HAL_TIM_Base_Init>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800313a:	f7ff febf 	bl	8002ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003142:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003144:	f107 0310 	add.w	r3, r7, #16
 8003148:	4619      	mov	r1, r3
 800314a:	480d      	ldr	r0, [pc, #52]	@ (8003180 <MX_TIM2_Init+0x98>)
 800314c:	f004 ff0a 	bl	8007f64 <HAL_TIM_ConfigClockSource>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003156:	f7ff feb1 	bl	8002ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4806      	ldr	r0, [pc, #24]	@ (8003180 <MX_TIM2_Init+0x98>)
 8003168:	f005 fee2 	bl	8008f30 <HAL_TIMEx_MasterConfigSynchronization>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003172:	f7ff fea3 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003176:	bf00      	nop
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	2000142c 	.word	0x2000142c

08003184 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08c      	sub	sp, #48	@ 0x30
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	2224      	movs	r2, #36	@ 0x24
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f009 f992 	bl	800c4bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003198:	463b      	mov	r3, r7
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031a2:	4b21      	ldr	r3, [pc, #132]	@ (8003228 <MX_TIM3_Init+0xa4>)
 80031a4:	4a21      	ldr	r2, [pc, #132]	@ (800322c <MX_TIM3_Init+0xa8>)
 80031a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003228 <MX_TIM3_Init+0xa4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003228 <MX_TIM3_Init+0xa4>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80031b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003228 <MX_TIM3_Init+0xa4>)
 80031b6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80031ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <MX_TIM3_Init+0xa4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c2:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <MX_TIM3_Init+0xa4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031c8:	2303      	movs	r3, #3
 80031ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031d0:	2301      	movs	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031dc:	2300      	movs	r3, #0
 80031de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031e0:	2301      	movs	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	4619      	mov	r1, r3
 80031f2:	480d      	ldr	r0, [pc, #52]	@ (8003228 <MX_TIM3_Init+0xa4>)
 80031f4:	f004 fa6c 	bl	80076d0 <HAL_TIM_Encoder_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80031fe:	f7ff fe5d 	bl	8002ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800320a:	463b      	mov	r3, r7
 800320c:	4619      	mov	r1, r3
 800320e:	4806      	ldr	r0, [pc, #24]	@ (8003228 <MX_TIM3_Init+0xa4>)
 8003210:	f005 fe8e 	bl	8008f30 <HAL_TIMEx_MasterConfigSynchronization>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800321a:	f7ff fe4f 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	3730      	adds	r7, #48	@ 0x30
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200014f8 	.word	0x200014f8
 800322c:	40000400 	.word	0x40000400

08003230 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	@ 0x30
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003236:	f107 030c 	add.w	r3, r7, #12
 800323a:	2224      	movs	r2, #36	@ 0x24
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f009 f93c 	bl	800c4bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003244:	463b      	mov	r3, r7
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800324e:	4b21      	ldr	r3, [pc, #132]	@ (80032d4 <MX_TIM4_Init+0xa4>)
 8003250:	4a21      	ldr	r2, [pc, #132]	@ (80032d8 <MX_TIM4_Init+0xa8>)
 8003252:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003254:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <MX_TIM4_Init+0xa4>)
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325a:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <MX_TIM4_Init+0xa4>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8003260:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <MX_TIM4_Init+0xa4>)
 8003262:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003266:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003268:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <MX_TIM4_Init+0xa4>)
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800326e:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <MX_TIM4_Init+0xa4>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003274:	2303      	movs	r3, #3
 8003276:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800327c:	2301      	movs	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003288:	2300      	movs	r3, #0
 800328a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800328c:	2301      	movs	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003290:	2300      	movs	r3, #0
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003298:	f107 030c 	add.w	r3, r7, #12
 800329c:	4619      	mov	r1, r3
 800329e:	480d      	ldr	r0, [pc, #52]	@ (80032d4 <MX_TIM4_Init+0xa4>)
 80032a0:	f004 fa16 	bl	80076d0 <HAL_TIM_Encoder_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80032aa:	f7ff fe07 	bl	8002ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032b6:	463b      	mov	r3, r7
 80032b8:	4619      	mov	r1, r3
 80032ba:	4806      	ldr	r0, [pc, #24]	@ (80032d4 <MX_TIM4_Init+0xa4>)
 80032bc:	f005 fe38 	bl	8008f30 <HAL_TIMEx_MasterConfigSynchronization>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80032c6:	f7ff fdf9 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032ca:	bf00      	nop
 80032cc:	3730      	adds	r7, #48	@ 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200015c4 	.word	0x200015c4
 80032d8:	40000800 	.word	0x40000800

080032dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b09c      	sub	sp, #112	@ 0x70
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
 800330c:	615a      	str	r2, [r3, #20]
 800330e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	2234      	movs	r2, #52	@ 0x34
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f009 f8d0 	bl	800c4bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800331c:	4b45      	ldr	r3, [pc, #276]	@ (8003434 <MX_TIM8_Init+0x158>)
 800331e:	4a46      	ldr	r2, [pc, #280]	@ (8003438 <MX_TIM8_Init+0x15c>)
 8003320:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003322:	4b44      	ldr	r3, [pc, #272]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003324:	2200      	movs	r2, #0
 8003326:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003328:	4b42      	ldr	r3, [pc, #264]	@ (8003434 <MX_TIM8_Init+0x158>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800332e:	4b41      	ldr	r3, [pc, #260]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003334:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003336:	4b3f      	ldr	r3, [pc, #252]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800333c:	4b3d      	ldr	r3, [pc, #244]	@ (8003434 <MX_TIM8_Init+0x158>)
 800333e:	2200      	movs	r2, #0
 8003340:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003342:	4b3c      	ldr	r3, [pc, #240]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003348:	483a      	ldr	r0, [pc, #232]	@ (8003434 <MX_TIM8_Init+0x158>)
 800334a:	f003 fd91 	bl	8006e70 <HAL_TIM_Base_Init>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003354:	f7ff fdb2 	bl	8002ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800335c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800335e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003362:	4619      	mov	r1, r3
 8003364:	4833      	ldr	r0, [pc, #204]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003366:	f004 fdfd 	bl	8007f64 <HAL_TIM_ConfigClockSource>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003370:	f7ff fda4 	bl	8002ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003374:	482f      	ldr	r0, [pc, #188]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003376:	f003 ff35 	bl	80071e4 <HAL_TIM_PWM_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003380:	f7ff fd9c 	bl	8002ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003390:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003394:	4619      	mov	r1, r3
 8003396:	4827      	ldr	r0, [pc, #156]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003398:	f005 fdca 	bl	8008f30 <HAL_TIMEx_MasterConfigSynchronization>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80033a2:	f7ff fd8b 	bl	8002ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033a6:	2360      	movs	r3, #96	@ 0x60
 80033a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ae:	2300      	movs	r3, #0
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033b2:	2300      	movs	r3, #0
 80033b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033c6:	220c      	movs	r2, #12
 80033c8:	4619      	mov	r1, r3
 80033ca:	481a      	ldr	r0, [pc, #104]	@ (8003434 <MX_TIM8_Init+0x158>)
 80033cc:	f004 fcb6 	bl	8007d3c <HAL_TIM_PWM_ConfigChannel>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80033d6:	f7ff fd71 	bl	8002ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80033f8:	2300      	movs	r3, #0
 80033fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003404:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800340a:	2300      	movs	r3, #0
 800340c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4807      	ldr	r0, [pc, #28]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003418:	f005 fe20 	bl	800905c <HAL_TIMEx_ConfigBreakDeadTime>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8003422:	f7ff fd4b 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003426:	4803      	ldr	r0, [pc, #12]	@ (8003434 <MX_TIM8_Init+0x158>)
 8003428:	f000 fa44 	bl	80038b4 <HAL_TIM_MspPostInit>

}
 800342c:	bf00      	nop
 800342e:	3770      	adds	r7, #112	@ 0x70
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20001690 	.word	0x20001690
 8003438:	40013400 	.word	0x40013400

0800343c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b094      	sub	sp, #80	@ 0x50
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003442:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	615a      	str	r2, [r3, #20]
 8003454:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003456:	463b      	mov	r3, r7
 8003458:	2234      	movs	r2, #52	@ 0x34
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f009 f82d 	bl	800c4bc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003462:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <MX_TIM16_Init+0xf8>)
 8003464:	4a34      	ldr	r2, [pc, #208]	@ (8003538 <MX_TIM16_Init+0xfc>)
 8003466:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003468:	4b32      	ldr	r3, [pc, #200]	@ (8003534 <MX_TIM16_Init+0xf8>)
 800346a:	22a9      	movs	r2, #169	@ 0xa9
 800346c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346e:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <MX_TIM16_Init+0xf8>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8003474:	4b2f      	ldr	r3, [pc, #188]	@ (8003534 <MX_TIM16_Init+0xf8>)
 8003476:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 800347a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347c:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <MX_TIM16_Init+0xf8>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003482:	4b2c      	ldr	r3, [pc, #176]	@ (8003534 <MX_TIM16_Init+0xf8>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003488:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <MX_TIM16_Init+0xf8>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800348e:	4829      	ldr	r0, [pc, #164]	@ (8003534 <MX_TIM16_Init+0xf8>)
 8003490:	f003 fcee 	bl	8006e70 <HAL_TIM_Base_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800349a:	f7ff fd0f 	bl	8002ebc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800349e:	4825      	ldr	r0, [pc, #148]	@ (8003534 <MX_TIM16_Init+0xf8>)
 80034a0:	f003 fe32 	bl	8007108 <HAL_TIM_OC_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80034aa:	f7ff fd07 	bl	8002ebc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80034ae:	2108      	movs	r1, #8
 80034b0:	4820      	ldr	r0, [pc, #128]	@ (8003534 <MX_TIM16_Init+0xf8>)
 80034b2:	f004 f817 	bl	80074e4 <HAL_TIM_OnePulse_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80034bc:	f7ff fcfe 	bl	8002ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80034c0:	2310      	movs	r3, #16
 80034c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 80034c4:	f240 5399 	movw	r3, #1433	@ 0x599
 80034c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ca:	2300      	movs	r3, #0
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034ce:	2300      	movs	r3, #0
 80034d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80034e2:	2200      	movs	r2, #0
 80034e4:	4619      	mov	r1, r3
 80034e6:	4813      	ldr	r0, [pc, #76]	@ (8003534 <MX_TIM16_Init+0xf8>)
 80034e8:	f004 fbae 	bl	8007c48 <HAL_TIM_OC_ConfigChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 80034f2:	f7ff fce3 	bl	8002ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800350a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800350e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003514:	2300      	movs	r3, #0
 8003516:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003518:	463b      	mov	r3, r7
 800351a:	4619      	mov	r1, r3
 800351c:	4805      	ldr	r0, [pc, #20]	@ (8003534 <MX_TIM16_Init+0xf8>)
 800351e:	f005 fd9d 	bl	800905c <HAL_TIMEx_ConfigBreakDeadTime>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8003528:	f7ff fcc8 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800352c:	bf00      	nop
 800352e:	3750      	adds	r7, #80	@ 0x50
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	2000175c 	.word	0x2000175c
 8003538:	40014400 	.word	0x40014400

0800353c <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b09c      	sub	sp, #112	@ 0x70
 8003540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003542:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003550:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800355c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
 800356c:	615a      	str	r2, [r3, #20]
 800356e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	2234      	movs	r2, #52	@ 0x34
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f008 ffa0 	bl	800c4bc <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800357c:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <MX_TIM20_Init+0x170>)
 800357e:	4a4c      	ldr	r2, [pc, #304]	@ (80036b0 <MX_TIM20_Init+0x174>)
 8003580:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8003582:	4b4a      	ldr	r3, [pc, #296]	@ (80036ac <MX_TIM20_Init+0x170>)
 8003584:	2200      	movs	r2, #0
 8003586:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003588:	4b48      	ldr	r3, [pc, #288]	@ (80036ac <MX_TIM20_Init+0x170>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800358e:	4b47      	ldr	r3, [pc, #284]	@ (80036ac <MX_TIM20_Init+0x170>)
 8003590:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003594:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003596:	4b45      	ldr	r3, [pc, #276]	@ (80036ac <MX_TIM20_Init+0x170>)
 8003598:	2200      	movs	r2, #0
 800359a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800359c:	4b43      	ldr	r3, [pc, #268]	@ (80036ac <MX_TIM20_Init+0x170>)
 800359e:	2200      	movs	r2, #0
 80035a0:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a2:	4b42      	ldr	r3, [pc, #264]	@ (80036ac <MX_TIM20_Init+0x170>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80035a8:	4840      	ldr	r0, [pc, #256]	@ (80036ac <MX_TIM20_Init+0x170>)
 80035aa:	f003 fc61 	bl	8006e70 <HAL_TIM_Base_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 80035b4:	f7ff fc82 	bl	8002ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80035be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80035c2:	4619      	mov	r1, r3
 80035c4:	4839      	ldr	r0, [pc, #228]	@ (80036ac <MX_TIM20_Init+0x170>)
 80035c6:	f004 fccd 	bl	8007f64 <HAL_TIM_ConfigClockSource>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80035d0:	f7ff fc74 	bl	8002ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80035d4:	4835      	ldr	r0, [pc, #212]	@ (80036ac <MX_TIM20_Init+0x170>)
 80035d6:	f003 fe05 	bl	80071e4 <HAL_TIM_PWM_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80035e0:	f7ff fc6c 	bl	8002ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e4:	2300      	movs	r3, #0
 80035e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80035f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035f4:	4619      	mov	r1, r3
 80035f6:	482d      	ldr	r0, [pc, #180]	@ (80036ac <MX_TIM20_Init+0x170>)
 80035f8:	f005 fc9a 	bl	8008f30 <HAL_TIMEx_MasterConfigSynchronization>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8003602:	f7ff fc5b 	bl	8002ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003606:	2360      	movs	r3, #96	@ 0x60
 8003608:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800360e:	2300      	movs	r3, #0
 8003610:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003612:	2300      	movs	r3, #0
 8003614:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003622:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003626:	2200      	movs	r2, #0
 8003628:	4619      	mov	r1, r3
 800362a:	4820      	ldr	r0, [pc, #128]	@ (80036ac <MX_TIM20_Init+0x170>)
 800362c:	f004 fb86 	bl	8007d3c <HAL_TIM_PWM_ConfigChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8003636:	f7ff fc41 	bl	8002ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800363a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800363e:	2208      	movs	r2, #8
 8003640:	4619      	mov	r1, r3
 8003642:	481a      	ldr	r0, [pc, #104]	@ (80036ac <MX_TIM20_Init+0x170>)
 8003644:	f004 fb7a 	bl	8007d3c <HAL_TIM_PWM_ConfigChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 800364e:	f7ff fc35 	bl	8002ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003666:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800366a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003670:	2300      	movs	r3, #0
 8003672:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003682:	2300      	movs	r3, #0
 8003684:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4807      	ldr	r0, [pc, #28]	@ (80036ac <MX_TIM20_Init+0x170>)
 8003690:	f005 fce4 	bl	800905c <HAL_TIMEx_ConfigBreakDeadTime>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 800369a:	f7ff fc0f 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800369e:	4803      	ldr	r0, [pc, #12]	@ (80036ac <MX_TIM20_Init+0x170>)
 80036a0:	f000 f908 	bl	80038b4 <HAL_TIM_MspPostInit>

}
 80036a4:	bf00      	nop
 80036a6:	3770      	adds	r7, #112	@ 0x70
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20001828 	.word	0x20001828
 80036b0:	40015000 	.word	0x40015000

080036b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a3d      	ldr	r2, [pc, #244]	@ (80037b8 <HAL_TIM_Base_MspInit+0x104>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d11c      	bne.n	8003700 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036c6:	4b3d      	ldr	r3, [pc, #244]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 80036c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ca:	4a3c      	ldr	r2, [pc, #240]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 80036cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80036d2:	4b3a      	ldr	r3, [pc, #232]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	2100      	movs	r1, #0
 80036e2:	2018      	movs	r0, #24
 80036e4:	f001 fe6f 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80036e8:	2018      	movs	r0, #24
 80036ea:	f001 fe86 	bl	80053fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	2019      	movs	r0, #25
 80036f4:	f001 fe67 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80036f8:	2019      	movs	r0, #25
 80036fa:	f001 fe7e 	bl	80053fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 80036fe:	e056      	b.n	80037ae <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003708:	d114      	bne.n	8003734 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800370a:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	4a2b      	ldr	r2, [pc, #172]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6593      	str	r3, [r2, #88]	@ 0x58
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	201c      	movs	r0, #28
 8003728:	f001 fe4d 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800372c:	201c      	movs	r0, #28
 800372e:	f001 fe64 	bl	80053fa <HAL_NVIC_EnableIRQ>
}
 8003732:	e03c      	b.n	80037ae <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a21      	ldr	r2, [pc, #132]	@ (80037c0 <HAL_TIM_Base_MspInit+0x10c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10c      	bne.n	8003758 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800373e:	4b1f      	ldr	r3, [pc, #124]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 8003740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003742:	4a1e      	ldr	r2, [pc, #120]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 8003744:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003748:	6613      	str	r3, [r2, #96]	@ 0x60
 800374a:	4b1c      	ldr	r3, [pc, #112]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	697b      	ldr	r3, [r7, #20]
}
 8003756:	e02a      	b.n	80037ae <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a19      	ldr	r2, [pc, #100]	@ (80037c4 <HAL_TIM_Base_MspInit+0x110>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d114      	bne.n	800378c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003762:	4b16      	ldr	r3, [pc, #88]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 8003764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003766:	4a15      	ldr	r2, [pc, #84]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376c:	6613      	str	r3, [r2, #96]	@ 0x60
 800376e:	4b13      	ldr	r3, [pc, #76]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 8003770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	2100      	movs	r1, #0
 800377e:	2019      	movs	r0, #25
 8003780:	f001 fe21 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003784:	2019      	movs	r0, #25
 8003786:	f001 fe38 	bl	80053fa <HAL_NVIC_EnableIRQ>
}
 800378a:	e010      	b.n	80037ae <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_TIM_Base_MspInit+0x114>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10b      	bne.n	80037ae <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 8003798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379a:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 800379c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_TIM_Base_MspInit+0x108>)
 80037a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
}
 80037ae:	bf00      	nop
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40013400 	.word	0x40013400
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40015000 	.word	0x40015000

080037cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	@ 0x30
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 031c 	add.w	r3, r7, #28
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2f      	ldr	r2, [pc, #188]	@ (80038a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d129      	bne.n	8003842 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ee:	4b2f      	ldr	r3, [pc, #188]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	4a2e      	ldr	r2, [pc, #184]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 80037f4:	f043 0302 	orr.w	r3, r3, #2
 80037f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037fa:	4b2c      	ldr	r3, [pc, #176]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	4b29      	ldr	r3, [pc, #164]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380a:	4a28      	ldr	r2, [pc, #160]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003812:	4b26      	ldr	r3, [pc, #152]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 800381e:	23c0      	movs	r3, #192	@ 0xc0
 8003820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382a:	2300      	movs	r3, #0
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800382e:	2302      	movs	r3, #2
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003832:	f107 031c 	add.w	r3, r7, #28
 8003836:	4619      	mov	r1, r3
 8003838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800383c:	f002 f936 	bl	8005aac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003840:	e02e      	b.n	80038a0 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1a      	ldr	r2, [pc, #104]	@ (80038b0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d129      	bne.n	80038a0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800384c:	4b17      	ldr	r3, [pc, #92]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	4a16      	ldr	r2, [pc, #88]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6593      	str	r3, [r2, #88]	@ 0x58
 8003858:	4b14      	ldr	r3, [pc, #80]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003864:	4b11      	ldr	r3, [pc, #68]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003868:	4a10      	ldr	r2, [pc, #64]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003870:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <HAL_TIM_Encoder_MspInit+0xe0>)
 8003872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 800387c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003882:	2302      	movs	r3, #2
 8003884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388a:	2300      	movs	r3, #0
 800388c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800388e:	230a      	movs	r3, #10
 8003890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003892:	f107 031c 	add.w	r3, r7, #28
 8003896:	4619      	mov	r1, r3
 8003898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800389c:	f002 f906 	bl	8005aac <HAL_GPIO_Init>
}
 80038a0:	bf00      	nop
 80038a2:	3730      	adds	r7, #48	@ 0x30
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40000800 	.word	0x40000800

080038b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	@ 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a31      	ldr	r2, [pc, #196]	@ (8003998 <HAL_TIM_MspPostInit+0xe4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d11d      	bne.n	8003912 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d6:	4b31      	ldr	r3, [pc, #196]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 80038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038da:	4a30      	ldr	r2, [pc, #192]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038e2:	4b2e      	ldr	r3, [pc, #184]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 80038e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80038ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	2300      	movs	r3, #0
 80038fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003900:	2304      	movs	r3, #4
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	4619      	mov	r1, r3
 800390a:	4825      	ldr	r0, [pc, #148]	@ (80039a0 <HAL_TIM_MspPostInit+0xec>)
 800390c:	f002 f8ce 	bl	8005aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003910:	e03d      	b.n	800398e <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a23      	ldr	r2, [pc, #140]	@ (80039a4 <HAL_TIM_MspPostInit+0xf0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d138      	bne.n	800398e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391c:	4b1f      	ldr	r3, [pc, #124]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 800391e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003920:	4a1e      	ldr	r2, [pc, #120]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 8003922:	f043 0302 	orr.w	r3, r3, #2
 8003926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003928:	4b1c      	ldr	r3, [pc, #112]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 800392a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003934:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 8003936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003938:	4a18      	ldr	r2, [pc, #96]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003940:	4b16      	ldr	r3, [pc, #88]	@ (800399c <HAL_TIM_MspPostInit+0xe8>)
 8003942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 800394c:	2304      	movs	r3, #4
 800394e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003958:	2300      	movs	r3, #0
 800395a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800395c:	2303      	movs	r3, #3
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	4619      	mov	r1, r3
 8003966:	4810      	ldr	r0, [pc, #64]	@ (80039a8 <HAL_TIM_MspPostInit+0xf4>)
 8003968:	f002 f8a0 	bl	8005aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 800396c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003972:	2302      	movs	r3, #2
 8003974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397a:	2300      	movs	r3, #0
 800397c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800397e:	2306      	movs	r3, #6
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	4619      	mov	r1, r3
 8003988:	4805      	ldr	r0, [pc, #20]	@ (80039a0 <HAL_TIM_MspPostInit+0xec>)
 800398a:	f002 f88f 	bl	8005aac <HAL_GPIO_Init>
}
 800398e:	bf00      	nop
 8003990:	3728      	adds	r7, #40	@ 0x28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40013400 	.word	0x40013400
 800399c:	40021000 	.word	0x40021000
 80039a0:	48000800 	.word	0x48000800
 80039a4:	40015000 	.word	0x40015000
 80039a8:	48000400 	.word	0x48000400

080039ac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039b0:	4b23      	ldr	r3, [pc, #140]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039b2:	4a24      	ldr	r2, [pc, #144]	@ (8003a44 <MX_USART2_UART_Init+0x98>)
 80039b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80039b6:	4b22      	ldr	r3, [pc, #136]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039b8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80039bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80039be:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80039cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039d6:	220c      	movs	r2, #12
 80039d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039da:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039e0:	4b17      	ldr	r3, [pc, #92]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039e6:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039ec:	4b14      	ldr	r3, [pc, #80]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039f2:	4b13      	ldr	r3, [pc, #76]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039f8:	4811      	ldr	r0, [pc, #68]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 80039fa:	f005 fc13 	bl	8009224 <HAL_UART_Init>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003a04:	f7ff fa5a 	bl	8002ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a08:	2100      	movs	r1, #0
 8003a0a:	480d      	ldr	r0, [pc, #52]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 8003a0c:	f007 ff95 	bl	800b93a <HAL_UARTEx_SetTxFifoThreshold>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003a16:	f7ff fa51 	bl	8002ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4808      	ldr	r0, [pc, #32]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 8003a1e:	f007 ffca 	bl	800b9b6 <HAL_UARTEx_SetRxFifoThreshold>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003a28:	f7ff fa48 	bl	8002ebc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003a2c:	4804      	ldr	r0, [pc, #16]	@ (8003a40 <MX_USART2_UART_Init+0x94>)
 8003a2e:	f007 ff4b 	bl	800b8c8 <HAL_UARTEx_DisableFifoMode>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003a38:	f7ff fa40 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200018f4 	.word	0x200018f4
 8003a44:	40004400 	.word	0x40004400

08003a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b09e      	sub	sp, #120	@ 0x78
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	2254      	movs	r2, #84	@ 0x54
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f008 fd27 	bl	800c4bc <memset>
  if(uartHandle->Instance==USART2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a37      	ldr	r2, [pc, #220]	@ (8003b50 <HAL_UART_MspInit+0x108>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d167      	bne.n	8003b48 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a80:	f107 0310 	add.w	r3, r7, #16
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 ffa5 	bl	80069d4 <HAL_RCCEx_PeriphCLKConfig>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a90:	f7ff fa14 	bl	8002ebc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a94:	4b2f      	ldr	r3, [pc, #188]	@ (8003b54 <HAL_UART_MspInit+0x10c>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	4a2e      	ldr	r2, [pc, #184]	@ (8003b54 <HAL_UART_MspInit+0x10c>)
 8003a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <HAL_UART_MspInit+0x10c>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aac:	4b29      	ldr	r3, [pc, #164]	@ (8003b54 <HAL_UART_MspInit+0x10c>)
 8003aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab0:	4a28      	ldr	r2, [pc, #160]	@ (8003b54 <HAL_UART_MspInit+0x10c>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab8:	4b26      	ldr	r3, [pc, #152]	@ (8003b54 <HAL_UART_MspInit+0x10c>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ad4:	2307      	movs	r3, #7
 8003ad6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003adc:	4619      	mov	r1, r3
 8003ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ae2:	f001 ffe3 	bl	8005aac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <HAL_UART_MspInit+0x114>)
 8003aea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003aec:	4b1a      	ldr	r3, [pc, #104]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003aee:	221b      	movs	r2, #27
 8003af0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003af2:	4b19      	ldr	r3, [pc, #100]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003af4:	2210      	movs	r2, #16
 8003af6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af8:	4b17      	ldr	r3, [pc, #92]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003afe:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003b00:	2280      	movs	r2, #128	@ 0x80
 8003b02:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b04:	4b14      	ldr	r3, [pc, #80]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b0a:	4b13      	ldr	r3, [pc, #76]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003b10:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b1c:	480e      	ldr	r0, [pc, #56]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003b1e:	f001 fc87 	bl	8005430 <HAL_DMA_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003b28:	f7ff f9c8 	bl	8002ebc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003b30:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <HAL_UART_MspInit+0x110>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	2026      	movs	r0, #38	@ 0x26
 8003b3e:	f001 fc42 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b42:	2026      	movs	r0, #38	@ 0x26
 8003b44:	f001 fc59 	bl	80053fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3778      	adds	r7, #120	@ 0x78
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40004400 	.word	0x40004400
 8003b54:	40021000 	.word	0x40021000
 8003b58:	200019c0 	.word	0x200019c0
 8003b5c:	40020008 	.word	0x40020008

08003b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b60:	480d      	ldr	r0, [pc, #52]	@ (8003b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b64:	f7ff fa5a 	bl	800301c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b68:	480c      	ldr	r0, [pc, #48]	@ (8003b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8003b6a:	490d      	ldr	r1, [pc, #52]	@ (8003ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba4 <LoopForever+0xe>)
  movs r3, #0
 8003b6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b70:	e002      	b.n	8003b78 <LoopCopyDataInit>

08003b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b76:	3304      	adds	r3, #4

08003b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b7c:	d3f9      	bcc.n	8003b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b80:	4c0a      	ldr	r4, [pc, #40]	@ (8003bac <LoopForever+0x16>)
  movs r3, #0
 8003b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b84:	e001      	b.n	8003b8a <LoopFillZerobss>

08003b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b88:	3204      	adds	r2, #4

08003b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b8c:	d3fb      	bcc.n	8003b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b8e:	f008 fca3 	bl	800c4d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b92:	f7fe faf9 	bl	8002188 <main>

08003b96 <LoopForever>:

LoopForever:
    b LoopForever
 8003b96:	e7fe      	b.n	8003b96 <LoopForever>
  ldr   r0, =_estack
 8003b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba0:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003ba4:	0800c5e8 	.word	0x0800c5e8
  ldr r2, =_sbss
 8003ba8:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003bac:	20001b5c 	.word	0x20001b5c

08003bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bb0:	e7fe      	b.n	8003bb0 <ADC1_2_IRQHandler>

08003bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f001 fbf7 	bl	80053b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f000 f80e 	bl	8003be4 <HAL_InitTick>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	71fb      	strb	r3, [r7, #7]
 8003bd2:	e001      	b.n	8003bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bd4:	f7ff f978 	bl	8002ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bd8:	79fb      	ldrb	r3, [r7, #7]

}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003bf0:	4b16      	ldr	r3, [pc, #88]	@ (8003c4c <HAL_InitTick+0x68>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d022      	beq.n	8003c3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003bf8:	4b15      	ldr	r3, [pc, #84]	@ (8003c50 <HAL_InitTick+0x6c>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b13      	ldr	r3, [pc, #76]	@ (8003c4c <HAL_InitTick+0x68>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 fc02 	bl	8005416 <HAL_SYSTICK_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10f      	bne.n	8003c38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	d809      	bhi.n	8003c32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	f001 fbce 	bl	80053c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <HAL_InitTick+0x70>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	e007      	b.n	8003c42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	e004      	b.n	8003c42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e001      	b.n	8003c42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000208 	.word	0x20000208
 8003c50:	20000200 	.word	0x20000200
 8003c54:	20000204 	.word	0x20000204

08003c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c5c:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_IncTick+0x1c>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_IncTick+0x20>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	4a03      	ldr	r2, [pc, #12]	@ (8003c74 <HAL_IncTick+0x1c>)
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	20001a20 	.word	0x20001a20
 8003c78:	20000208 	.word	0x20000208

08003c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c80:	4b03      	ldr	r3, [pc, #12]	@ (8003c90 <HAL_GetTick+0x14>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20001a20 	.word	0x20001a20

08003c94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3360      	adds	r3, #96	@ 0x60
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <LL_ADC_SetOffset+0x44>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	03fff000 	.word	0x03fff000

08003d44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3360      	adds	r3, #96	@ 0x60
 8003d52:	461a      	mov	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3360      	adds	r3, #96	@ 0x60
 8003d80:	461a      	mov	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b087      	sub	sp, #28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3360      	adds	r3, #96	@ 0x60
 8003db6:	461a      	mov	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3360      	adds	r3, #96	@ 0x60
 8003dec:	461a      	mov	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	615a      	str	r2, [r3, #20]
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3330      	adds	r3, #48	@ 0x30
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	4413      	add	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	211f      	movs	r1, #31
 8003e64:	fa01 f303 	lsl.w	r3, r1, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	0e9b      	lsrs	r3, r3, #26
 8003e70:	f003 011f 	and.w	r1, r3, #31
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3314      	adds	r3, #20
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	0e5b      	lsrs	r3, r3, #25
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	4413      	add	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	0d1b      	lsrs	r3, r3, #20
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2107      	movs	r1, #7
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	0d1b      	lsrs	r3, r3, #20
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f00:	43db      	mvns	r3, r3
 8003f02:	401a      	ands	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0318 	and.w	r3, r3, #24
 8003f0a:	4908      	ldr	r1, [pc, #32]	@ (8003f2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f0c:	40d9      	lsrs	r1, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	400b      	ands	r3, r1
 8003f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f16:	431a      	orrs	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	0007ffff 	.word	0x0007ffff

08003f30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6093      	str	r3, [r2, #8]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f84:	d101      	bne.n	8003f8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003fa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd4:	d101      	bne.n	8003fda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <LL_ADC_IsEnabled+0x18>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <LL_ADC_IsEnabled+0x1a>
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004046:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800404a:	f043 0204 	orr.w	r2, r3, #4
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d101      	bne.n	8004076 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b08      	cmp	r3, #8
 8004096:	d101      	bne.n	800409c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b089      	sub	sp, #36	@ 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e1a9      	b.n	800441a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fd feb3 	bl	8001e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff3f 	bl	8003f70 <LL_ADC_IsDeepPowerDownEnabled>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff25 	bl	8003f4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff ff5a 	bl	8003fc0 <LL_ADC_IsInternalRegulatorEnabled>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d115      	bne.n	800413e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff ff3e 	bl	8003f98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800411c:	4b9c      	ldr	r3, [pc, #624]	@ (8004390 <HAL_ADC_Init+0x2e4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	4a9c      	ldr	r2, [pc, #624]	@ (8004394 <HAL_ADC_Init+0x2e8>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004130:	e002      	b.n	8004138 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f9      	bne.n	8004132 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff3c 	bl	8003fc0 <LL_ADC_IsInternalRegulatorEnabled>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004152:	f043 0210 	orr.w	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff ff75 	bl	800405e <LL_ADC_REG_IsConversionOngoing>
 8004174:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 8142 	bne.w	8004408 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 813e 	bne.w	8004408 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004190:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004194:	f043 0202 	orr.w	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ff35 	bl	8004010 <LL_ADC_IsEnabled>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d141      	bne.n	8004230 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b4:	d004      	beq.n	80041c0 <HAL_ADC_Init+0x114>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a77      	ldr	r2, [pc, #476]	@ (8004398 <HAL_ADC_Init+0x2ec>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10f      	bne.n	80041e0 <HAL_ADC_Init+0x134>
 80041c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80041c4:	f7ff ff24 	bl	8004010 <LL_ADC_IsEnabled>
 80041c8:	4604      	mov	r4, r0
 80041ca:	4873      	ldr	r0, [pc, #460]	@ (8004398 <HAL_ADC_Init+0x2ec>)
 80041cc:	f7ff ff20 	bl	8004010 <LL_ADC_IsEnabled>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4323      	orrs	r3, r4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e012      	b.n	8004206 <HAL_ADC_Init+0x15a>
 80041e0:	486e      	ldr	r0, [pc, #440]	@ (800439c <HAL_ADC_Init+0x2f0>)
 80041e2:	f7ff ff15 	bl	8004010 <LL_ADC_IsEnabled>
 80041e6:	4604      	mov	r4, r0
 80041e8:	486d      	ldr	r0, [pc, #436]	@ (80043a0 <HAL_ADC_Init+0x2f4>)
 80041ea:	f7ff ff11 	bl	8004010 <LL_ADC_IsEnabled>
 80041ee:	4603      	mov	r3, r0
 80041f0:	431c      	orrs	r4, r3
 80041f2:	486c      	ldr	r0, [pc, #432]	@ (80043a4 <HAL_ADC_Init+0x2f8>)
 80041f4:	f7ff ff0c 	bl	8004010 <LL_ADC_IsEnabled>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4323      	orrs	r3, r4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004212:	d004      	beq.n	800421e <HAL_ADC_Init+0x172>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a5f      	ldr	r2, [pc, #380]	@ (8004398 <HAL_ADC_Init+0x2ec>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <HAL_ADC_Init+0x176>
 800421e:	4a62      	ldr	r2, [pc, #392]	@ (80043a8 <HAL_ADC_Init+0x2fc>)
 8004220:	e000      	b.n	8004224 <HAL_ADC_Init+0x178>
 8004222:	4a62      	ldr	r2, [pc, #392]	@ (80043ac <HAL_ADC_Init+0x300>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4619      	mov	r1, r3
 800422a:	4610      	mov	r0, r2
 800422c:	f7ff fd32 	bl	8003c94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7f5b      	ldrb	r3, [r3, #29]
 8004234:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800423a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004240:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004246:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800424e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800425a:	2b01      	cmp	r3, #1
 800425c:	d106      	bne.n	800426c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	3b01      	subs	r3, #1
 8004264:	045b      	lsls	r3, r3, #17
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	4b48      	ldr	r3, [pc, #288]	@ (80043b0 <HAL_ADC_Init+0x304>)
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	69b9      	ldr	r1, [r7, #24]
 8004298:	430b      	orrs	r3, r1
 800429a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fee4 	bl	8004084 <LL_ADC_INJ_IsConversionOngoing>
 80042bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d17f      	bne.n	80043c4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d17c      	bne.n	80043c4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80042ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e6:	f023 0302 	bic.w	r3, r3, #2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	430b      	orrs	r3, r1
 80042f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d017      	beq.n	800432c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800430a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004314:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6911      	ldr	r1, [r2, #16]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	430b      	orrs	r3, r1
 8004326:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800432a:	e013      	b.n	8004354 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800433a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800434c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004350:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800435a:	2b01      	cmp	r3, #1
 800435c:	d12a      	bne.n	80043b4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004368:	f023 0304 	bic.w	r3, r3, #4
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800437a:	4311      	orrs	r1, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004380:	430a      	orrs	r2, r1
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	611a      	str	r2, [r3, #16]
 800438e:	e019      	b.n	80043c4 <HAL_ADC_Init+0x318>
 8004390:	20000200 	.word	0x20000200
 8004394:	053e2d63 	.word	0x053e2d63
 8004398:	50000100 	.word	0x50000100
 800439c:	50000400 	.word	0x50000400
 80043a0:	50000500 	.word	0x50000500
 80043a4:	50000600 	.word	0x50000600
 80043a8:	50000300 	.word	0x50000300
 80043ac:	50000700 	.word	0x50000700
 80043b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10c      	bne.n	80043e6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f023 010f 	bic.w	r1, r3, #15
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80043e4:	e007      	b.n	80043f6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 020f 	bic.w	r2, r2, #15
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004406:	e007      	b.n	8004418 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	f043 0210 	orr.w	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004418:	7ffb      	ldrb	r3, [r7, #31]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3724      	adds	r7, #36	@ 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd90      	pop	{r4, r7, pc}
 8004422:	bf00      	nop

08004424 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004434:	d004      	beq.n	8004440 <HAL_ADC_Start+0x1c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a67      	ldr	r2, [pc, #412]	@ (80045d8 <HAL_ADC_Start+0x1b4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_ADC_Start+0x20>
 8004440:	4b66      	ldr	r3, [pc, #408]	@ (80045dc <HAL_ADC_Start+0x1b8>)
 8004442:	e000      	b.n	8004446 <HAL_ADC_Start+0x22>
 8004444:	4b66      	ldr	r3, [pc, #408]	@ (80045e0 <HAL_ADC_Start+0x1bc>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fd72 	bl	8003f30 <LL_ADC_GetMultimode>
 800444c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fe03 	bl	800405e <LL_ADC_REG_IsConversionOngoing>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 80b4 	bne.w	80045c8 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_ADC_Start+0x4a>
 800446a:	2302      	movs	r3, #2
 800446c:	e0af      	b.n	80045ce <HAL_ADC_Start+0x1aa>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fd06 	bl	8004e88 <ADC_Enable>
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f040 809b 	bne.w	80045be <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a4d      	ldr	r2, [pc, #308]	@ (80045d8 <HAL_ADC_Start+0x1b4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_ADC_Start+0x96>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a4e      	ldr	r2, [pc, #312]	@ (80045e4 <HAL_ADC_Start+0x1c0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d002      	beq.n	80044b6 <HAL_ADC_Start+0x92>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	e003      	b.n	80044be <HAL_ADC_Start+0x9a>
 80044b6:	4b4c      	ldr	r3, [pc, #304]	@ (80045e8 <HAL_ADC_Start+0x1c4>)
 80044b8:	e001      	b.n	80044be <HAL_ADC_Start+0x9a>
 80044ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d002      	beq.n	80044cc <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e4:	d106      	bne.n	80044f4 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ea:	f023 0206 	bic.w	r2, r3, #6
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80044f2:	e002      	b.n	80044fa <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	221c      	movs	r2, #28
 8004500:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a32      	ldr	r2, [pc, #200]	@ (80045d8 <HAL_ADC_Start+0x1b4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_ADC_Start+0x104>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a32      	ldr	r2, [pc, #200]	@ (80045e4 <HAL_ADC_Start+0x1c0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d002      	beq.n	8004524 <HAL_ADC_Start+0x100>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	e003      	b.n	800452c <HAL_ADC_Start+0x108>
 8004524:	4b30      	ldr	r3, [pc, #192]	@ (80045e8 <HAL_ADC_Start+0x1c4>)
 8004526:	e001      	b.n	800452c <HAL_ADC_Start+0x108>
 8004528:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	4293      	cmp	r3, r2
 8004532:	d008      	beq.n	8004546 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b05      	cmp	r3, #5
 800453e:	d002      	beq.n	8004546 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b09      	cmp	r3, #9
 8004544:	d114      	bne.n	8004570 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004558:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800455c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fd64 	bl	8004036 <LL_ADC_REG_StartConversion>
 800456e:	e02d      	b.n	80045cc <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a15      	ldr	r2, [pc, #84]	@ (80045d8 <HAL_ADC_Start+0x1b4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d009      	beq.n	800459a <HAL_ADC_Start+0x176>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a16      	ldr	r2, [pc, #88]	@ (80045e4 <HAL_ADC_Start+0x1c0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d002      	beq.n	8004596 <HAL_ADC_Start+0x172>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	e003      	b.n	800459e <HAL_ADC_Start+0x17a>
 8004596:	4b14      	ldr	r3, [pc, #80]	@ (80045e8 <HAL_ADC_Start+0x1c4>)
 8004598:	e001      	b.n	800459e <HAL_ADC_Start+0x17a>
 800459a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800459e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00f      	beq.n	80045cc <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045bc:	e006      	b.n	80045cc <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80045c6:	e001      	b.n	80045cc <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
 80045ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	50000100 	.word	0x50000100
 80045dc:	50000300 	.word	0x50000300
 80045e0:	50000700 	.word	0x50000700
 80045e4:	50000500 	.word	0x50000500
 80045e8:	50000400 	.word	0x50000400

080045ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0b6      	sub	sp, #216	@ 0xd8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004622:	2b01      	cmp	r3, #1
 8004624:	d102      	bne.n	800462c <HAL_ADC_ConfigChannel+0x24>
 8004626:	2302      	movs	r3, #2
 8004628:	f000 bc13 	b.w	8004e52 <HAL_ADC_ConfigChannel+0x84a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fd10 	bl	800405e <LL_ADC_REG_IsConversionOngoing>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 83f3 	bne.w	8004e2c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f7ff fbf0 	bl	8003e38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fcfe 	bl	800405e <LL_ADC_REG_IsConversionOngoing>
 8004662:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fd0a 	bl	8004084 <LL_ADC_INJ_IsConversionOngoing>
 8004670:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004674:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 81d9 	bne.w	8004a30 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800467e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 81d4 	bne.w	8004a30 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004690:	d10f      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	4619      	mov	r1, r3
 800469e:	f7ff fbf7 	bl	8003e90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fbb1 	bl	8003e12 <LL_ADC_SetSamplingTimeCommonConfig>
 80046b0:	e00e      	b.n	80046d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	461a      	mov	r2, r3
 80046c0:	f7ff fbe6 	bl	8003e90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fba1 	bl	8003e12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	08db      	lsrs	r3, r3, #3
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d022      	beq.n	8004738 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6919      	ldr	r1, [r3, #16]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004702:	f7ff fafb 	bl	8003cfc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6919      	ldr	r1, [r3, #16]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	461a      	mov	r2, r3
 8004714:	f7ff fb47 	bl	8003da6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004724:	2b01      	cmp	r3, #1
 8004726:	d102      	bne.n	800472e <HAL_ADC_ConfigChannel+0x126>
 8004728:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800472c:	e000      	b.n	8004730 <HAL_ADC_ConfigChannel+0x128>
 800472e:	2300      	movs	r3, #0
 8004730:	461a      	mov	r2, r3
 8004732:	f7ff fb53 	bl	8003ddc <LL_ADC_SetOffsetSaturation>
 8004736:	e17b      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fb00 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004744:	4603      	mov	r3, r0
 8004746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x15c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff faf5 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 800475a:	4603      	mov	r3, r0
 800475c:	0e9b      	lsrs	r3, r3, #26
 800475e:	f003 021f 	and.w	r2, r3, #31
 8004762:	e01e      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x19a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff faea 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004770:	4603      	mov	r3, r0
 8004772:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004782:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004786:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800478a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004792:	2320      	movs	r3, #32
 8004794:	e004      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x1b2>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0e9b      	lsrs	r3, r3, #26
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	e018      	b.n	80047ec <HAL_ADC_ConfigChannel+0x1e4>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80047c6:	fa93 f3a3 	rbit	r3, r3
 80047ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80047ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80047d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80047de:	2320      	movs	r3, #32
 80047e0:	e004      	b.n	80047ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80047e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d106      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff fab9 	bl	8003d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2101      	movs	r1, #1
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fa9d 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 800480a:	4603      	mov	r3, r0
 800480c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <HAL_ADC_ConfigChannel+0x222>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fa92 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004820:	4603      	mov	r3, r0
 8004822:	0e9b      	lsrs	r3, r3, #26
 8004824:	f003 021f 	and.w	r2, r3, #31
 8004828:	e01e      	b.n	8004868 <HAL_ADC_ConfigChannel+0x260>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2101      	movs	r1, #1
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fa87 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004836:	4603      	mov	r3, r0
 8004838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800484c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004858:	2320      	movs	r3, #32
 800485a:	e004      	b.n	8004866 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800485c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x278>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	0e9b      	lsrs	r3, r3, #26
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	e018      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x2aa>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004894:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800489c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80048a4:	2320      	movs	r3, #32
 80048a6:	e004      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80048a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d106      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2101      	movs	r1, #1
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fa56 	bl	8003d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fa3a 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x2e8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2102      	movs	r1, #2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fa2f 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 80048e6:	4603      	mov	r3, r0
 80048e8:	0e9b      	lsrs	r3, r3, #26
 80048ea:	f003 021f 	and.w	r2, r3, #31
 80048ee:	e01e      	b.n	800492e <HAL_ADC_ConfigChannel+0x326>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fa24 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800490e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004916:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800491e:	2320      	movs	r3, #32
 8004920:	e004      	b.n	800492c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004922:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x33e>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	e016      	b.n	8004974 <HAL_ADC_ConfigChannel+0x36c>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004958:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800495a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800495e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004966:	2320      	movs	r3, #32
 8004968:	e004      	b.n	8004974 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800496a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004974:	429a      	cmp	r2, r3
 8004976:	d106      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2200      	movs	r2, #0
 800497e:	2102      	movs	r1, #2
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff f9f5 	bl	8003d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2103      	movs	r1, #3
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff f9d9 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004992:	4603      	mov	r3, r0
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x3aa>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2103      	movs	r1, #3
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f9ce 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 80049a8:	4603      	mov	r3, r0
 80049aa:	0e9b      	lsrs	r3, r3, #26
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	e017      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x3da>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2103      	movs	r1, #3
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff f9c3 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 80049be:	4603      	mov	r3, r0
 80049c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c4:	fa93 f3a3 	rbit	r3, r3
 80049c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80049ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80049ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80049d4:	2320      	movs	r3, #32
 80049d6:	e003      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80049d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049da:	fab3 f383 	clz	r3, r3
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d105      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x3f2>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	0e9b      	lsrs	r3, r3, #26
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	e011      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x416>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004a12:	2320      	movs	r3, #32
 8004a14:	e003      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a18:	fab3 f383 	clz	r3, r3
 8004a1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d106      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2103      	movs	r1, #3
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff f9a0 	bl	8003d70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff faeb 	bl	8004010 <LL_ADC_IsEnabled>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 813d 	bne.w	8004cbc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6819      	ldr	r1, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f7ff fa4a 	bl	8003ee8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4aa2      	ldr	r2, [pc, #648]	@ (8004ce4 <HAL_ADC_ConfigChannel+0x6dc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	f040 812e 	bne.w	8004cbc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x480>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	3301      	adds	r3, #1
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	2b09      	cmp	r3, #9
 8004a7e:	bf94      	ite	ls
 8004a80:	2301      	movls	r3, #1
 8004a82:	2300      	movhi	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e019      	b.n	8004abc <HAL_ADC_ConfigChannel+0x4b4>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004a96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004a9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004aa0:	2320      	movs	r3, #32
 8004aa2:	e003      	b.n	8004aac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	2b09      	cmp	r3, #9
 8004ab4:	bf94      	ite	ls
 8004ab6:	2301      	movls	r3, #1
 8004ab8:	2300      	movhi	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d079      	beq.n	8004bb4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x4d4>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	0e9b      	lsrs	r3, r3, #26
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	069b      	lsls	r3, r3, #26
 8004ad6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ada:	e015      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x500>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ae4:	fa93 f3a3 	rbit	r3, r3
 8004ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004af4:	2320      	movs	r3, #32
 8004af6:	e003      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3301      	adds	r3, #1
 8004b02:	069b      	lsls	r3, r3, #26
 8004b04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x520>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	0e9b      	lsrs	r3, r3, #26
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	e017      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x550>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b30:	fa93 f3a3 	rbit	r3, r3
 8004b34:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b38:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004b40:	2320      	movs	r3, #32
 8004b42:	e003      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b46:	fab3 f383 	clz	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2101      	movs	r1, #1
 8004b54:	fa01 f303 	lsl.w	r3, r1, r3
 8004b58:	ea42 0103 	orr.w	r1, r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x576>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	0e9b      	lsrs	r3, r3, #26
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f003 021f 	and.w	r2, r3, #31
 8004b74:	4613      	mov	r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	4413      	add	r3, r2
 8004b7a:	051b      	lsls	r3, r3, #20
 8004b7c:	e018      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x5a8>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004b96:	2320      	movs	r3, #32
 8004b98:	e003      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b9c:	fab3 f383 	clz	r3, r3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	f003 021f 	and.w	r2, r3, #31
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	e07e      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x5c8>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	0e9b      	lsrs	r3, r3, #26
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	069b      	lsls	r3, r3, #26
 8004bca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bce:	e015      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x5f4>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd8:	fa93 f3a3 	rbit	r3, r3
 8004bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004be8:	2320      	movs	r3, #32
 8004bea:	e003      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	069b      	lsls	r3, r3, #26
 8004bf8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x614>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	0e9b      	lsrs	r3, r3, #26
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	e017      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x644>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	fa93 f3a3 	rbit	r3, r3
 8004c28:	61fb      	str	r3, [r7, #28]
  return result;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004c34:	2320      	movs	r3, #32
 8004c36:	e003      	b.n	8004c40 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	fab3 f383 	clz	r3, r3
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	2101      	movs	r1, #1
 8004c48:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4c:	ea42 0103 	orr.w	r1, r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10d      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x670>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	0e9b      	lsrs	r3, r3, #26
 8004c62:	3301      	adds	r3, #1
 8004c64:	f003 021f 	and.w	r2, r3, #31
 8004c68:	4613      	mov	r3, r2
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3b1e      	subs	r3, #30
 8004c70:	051b      	lsls	r3, r3, #20
 8004c72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c76:	e01b      	b.n	8004cb0 <HAL_ADC_ConfigChannel+0x6a8>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	613b      	str	r3, [r7, #16]
  return result;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004c90:	2320      	movs	r3, #32
 8004c92:	e003      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f003 021f 	and.w	r2, r3, #31
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3b1e      	subs	r3, #30
 8004caa:	051b      	lsls	r3, r3, #20
 8004cac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cb0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7ff f8ea 	bl	8003e90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <HAL_ADC_ConfigChannel+0x6e0>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80be 	beq.w	8004e46 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd2:	d004      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x6d6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a04      	ldr	r2, [pc, #16]	@ (8004cec <HAL_ADC_ConfigChannel+0x6e4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10a      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x6ec>
 8004cde:	4b04      	ldr	r3, [pc, #16]	@ (8004cf0 <HAL_ADC_ConfigChannel+0x6e8>)
 8004ce0:	e009      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x6ee>
 8004ce2:	bf00      	nop
 8004ce4:	407f0000 	.word	0x407f0000
 8004ce8:	80080000 	.word	0x80080000
 8004cec:	50000100 	.word	0x50000100
 8004cf0:	50000300 	.word	0x50000300
 8004cf4:	4b59      	ldr	r3, [pc, #356]	@ (8004e5c <HAL_ADC_ConfigChannel+0x854>)
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fff2 	bl	8003ce0 <LL_ADC_GetCommonPathInternalCh>
 8004cfc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a56      	ldr	r2, [pc, #344]	@ (8004e60 <HAL_ADC_ConfigChannel+0x858>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_ADC_ConfigChannel+0x70c>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a55      	ldr	r2, [pc, #340]	@ (8004e64 <HAL_ADC_ConfigChannel+0x85c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d13a      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d134      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d28:	d005      	beq.n	8004d36 <HAL_ADC_ConfigChannel+0x72e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e68 <HAL_ADC_ConfigChannel+0x860>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	f040 8085 	bne.w	8004e40 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d3e:	d004      	beq.n	8004d4a <HAL_ADC_ConfigChannel+0x742>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a49      	ldr	r2, [pc, #292]	@ (8004e6c <HAL_ADC_ConfigChannel+0x864>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0x746>
 8004d4a:	4a49      	ldr	r2, [pc, #292]	@ (8004e70 <HAL_ADC_ConfigChannel+0x868>)
 8004d4c:	e000      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x748>
 8004d4e:	4a43      	ldr	r2, [pc, #268]	@ (8004e5c <HAL_ADC_ConfigChannel+0x854>)
 8004d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7fe ffad 	bl	8003cba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d60:	4b44      	ldr	r3, [pc, #272]	@ (8004e74 <HAL_ADC_ConfigChannel+0x86c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	099b      	lsrs	r3, r3, #6
 8004d66:	4a44      	ldr	r2, [pc, #272]	@ (8004e78 <HAL_ADC_ConfigChannel+0x870>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	099b      	lsrs	r3, r3, #6
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	4613      	mov	r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d7a:	e002      	b.n	8004d82 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f9      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d88:	e05a      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8004e7c <HAL_ADC_ConfigChannel+0x874>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d125      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d11f      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a31      	ldr	r2, [pc, #196]	@ (8004e6c <HAL_ADC_ConfigChannel+0x864>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d104      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x7ac>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a34      	ldr	r2, [pc, #208]	@ (8004e80 <HAL_ADC_ConfigChannel+0x878>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d047      	beq.n	8004e44 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dbc:	d004      	beq.n	8004dc8 <HAL_ADC_ConfigChannel+0x7c0>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e6c <HAL_ADC_ConfigChannel+0x864>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x7c4>
 8004dc8:	4a29      	ldr	r2, [pc, #164]	@ (8004e70 <HAL_ADC_ConfigChannel+0x868>)
 8004dca:	e000      	b.n	8004dce <HAL_ADC_ConfigChannel+0x7c6>
 8004dcc:	4a23      	ldr	r2, [pc, #140]	@ (8004e5c <HAL_ADC_ConfigChannel+0x854>)
 8004dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fe ff6e 	bl	8003cba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dde:	e031      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a27      	ldr	r2, [pc, #156]	@ (8004e84 <HAL_ADC_ConfigChannel+0x87c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d12d      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d127      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004e6c <HAL_ADC_ConfigChannel+0x864>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d022      	beq.n	8004e46 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e08:	d004      	beq.n	8004e14 <HAL_ADC_ConfigChannel+0x80c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a17      	ldr	r2, [pc, #92]	@ (8004e6c <HAL_ADC_ConfigChannel+0x864>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x810>
 8004e14:	4a16      	ldr	r2, [pc, #88]	@ (8004e70 <HAL_ADC_ConfigChannel+0x868>)
 8004e16:	e000      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x812>
 8004e18:	4a10      	ldr	r2, [pc, #64]	@ (8004e5c <HAL_ADC_ConfigChannel+0x854>)
 8004e1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f7fe ff48 	bl	8003cba <LL_ADC_SetCommonPathInternalCh>
 8004e2a:	e00c      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004e3e:	e002      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e40:	bf00      	nop
 8004e42:	e000      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	37d8      	adds	r7, #216	@ 0xd8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	50000700 	.word	0x50000700
 8004e60:	c3210000 	.word	0xc3210000
 8004e64:	90c00010 	.word	0x90c00010
 8004e68:	50000600 	.word	0x50000600
 8004e6c:	50000100 	.word	0x50000100
 8004e70:	50000300 	.word	0x50000300
 8004e74:	20000200 	.word	0x20000200
 8004e78:	053e2d63 	.word	0x053e2d63
 8004e7c:	c7520000 	.word	0xc7520000
 8004e80:	50000500 	.word	0x50000500
 8004e84:	cb840000 	.word	0xcb840000

08004e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff f8b9 	bl	8004010 <LL_ADC_IsEnabled>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d176      	bne.n	8004f92 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8004f9c <ADC_Enable+0x114>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb6:	f043 0210 	orr.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec2:	f043 0201 	orr.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e062      	b.n	8004f94 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f888 	bl	8003fe8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ee0:	d004      	beq.n	8004eec <ADC_Enable+0x64>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa0 <ADC_Enable+0x118>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <ADC_Enable+0x68>
 8004eec:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa4 <ADC_Enable+0x11c>)
 8004eee:	e000      	b.n	8004ef2 <ADC_Enable+0x6a>
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa8 <ADC_Enable+0x120>)
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fef4 	bl	8003ce0 <LL_ADC_GetCommonPathInternalCh>
 8004ef8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d013      	beq.n	8004f2a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f02:	4b2a      	ldr	r3, [pc, #168]	@ (8004fac <ADC_Enable+0x124>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	4a29      	ldr	r2, [pc, #164]	@ (8004fb0 <ADC_Enable+0x128>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	099b      	lsrs	r3, r3, #6
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f1c:	e002      	b.n	8004f24 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f9      	bne.n	8004f1e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f2a:	f7fe fea7 	bl	8003c7c <HAL_GetTick>
 8004f2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f30:	e028      	b.n	8004f84 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff f86a 	bl	8004010 <LL_ADC_IsEnabled>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d104      	bne.n	8004f4c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f84e 	bl	8003fe8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f4c:	f7fe fe96 	bl	8003c7c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d914      	bls.n	8004f84 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d00d      	beq.n	8004f84 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6c:	f043 0210 	orr.w	r2, r3, #16
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f78:	f043 0201 	orr.w	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e007      	b.n	8004f94 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d1cf      	bne.n	8004f32 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	8000003f 	.word	0x8000003f
 8004fa0:	50000100 	.word	0x50000100
 8004fa4:	50000300 	.word	0x50000300
 8004fa8:	50000700 	.word	0x50000700
 8004fac:	20000200 	.word	0x20000200
 8004fb0:	053e2d63 	.word	0x053e2d63

08004fb4 <LL_ADC_IsEnabled>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <LL_ADC_IsEnabled+0x18>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <LL_ADC_IsEnabled+0x1a>
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <LL_ADC_REG_IsConversionOngoing>:
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d101      	bne.n	8004ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b0a1      	sub	sp, #132	@ 0x84
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800501a:	2302      	movs	r3, #2
 800501c:	e0e7      	b.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005026:	2300      	movs	r3, #0
 8005028:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800502a:	2300      	movs	r3, #0
 800502c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005036:	d102      	bne.n	800503e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005038:	4b6f      	ldr	r3, [pc, #444]	@ (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	e009      	b.n	8005052 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a6e      	ldr	r2, [pc, #440]	@ (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d102      	bne.n	800504e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005048:	4b6d      	ldr	r3, [pc, #436]	@ (8005200 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	e001      	b.n	8005052 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0be      	b.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff ffb1 	bl	8004fda <LL_ADC_REG_IsConversionOngoing>
 8005078:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ffab 	bl	8004fda <LL_ADC_REG_IsConversionOngoing>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 80a0 	bne.w	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800508c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 809c 	bne.w	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800509c:	d004      	beq.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a55      	ldr	r2, [pc, #340]	@ (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80050a8:	4b56      	ldr	r3, [pc, #344]	@ (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80050aa:	e000      	b.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80050ac:	4b56      	ldr	r3, [pc, #344]	@ (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80050ae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d04b      	beq.n	8005150 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6859      	ldr	r1, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050ca:	035b      	lsls	r3, r3, #13
 80050cc:	430b      	orrs	r3, r1
 80050ce:	431a      	orrs	r2, r3
 80050d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050dc:	d004      	beq.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a45      	ldr	r2, [pc, #276]	@ (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10f      	bne.n	8005108 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80050e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050ec:	f7ff ff62 	bl	8004fb4 <LL_ADC_IsEnabled>
 80050f0:	4604      	mov	r4, r0
 80050f2:	4841      	ldr	r0, [pc, #260]	@ (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050f4:	f7ff ff5e 	bl	8004fb4 <LL_ADC_IsEnabled>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4323      	orrs	r3, r4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e012      	b.n	800512e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005108:	483c      	ldr	r0, [pc, #240]	@ (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800510a:	f7ff ff53 	bl	8004fb4 <LL_ADC_IsEnabled>
 800510e:	4604      	mov	r4, r0
 8005110:	483b      	ldr	r0, [pc, #236]	@ (8005200 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005112:	f7ff ff4f 	bl	8004fb4 <LL_ADC_IsEnabled>
 8005116:	4603      	mov	r3, r0
 8005118:	431c      	orrs	r4, r3
 800511a:	483c      	ldr	r0, [pc, #240]	@ (800520c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800511c:	f7ff ff4a 	bl	8004fb4 <LL_ADC_IsEnabled>
 8005120:	4603      	mov	r3, r0
 8005122:	4323      	orrs	r3, r4
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d056      	beq.n	80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800513a:	f023 030f 	bic.w	r3, r3, #15
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	6892      	ldr	r2, [r2, #8]
 8005146:	430a      	orrs	r2, r1
 8005148:	431a      	orrs	r2, r3
 800514a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800514c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800514e:	e047      	b.n	80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800515a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005164:	d004      	beq.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a23      	ldr	r2, [pc, #140]	@ (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10f      	bne.n	8005190 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005170:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005174:	f7ff ff1e 	bl	8004fb4 <LL_ADC_IsEnabled>
 8005178:	4604      	mov	r4, r0
 800517a:	481f      	ldr	r0, [pc, #124]	@ (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800517c:	f7ff ff1a 	bl	8004fb4 <LL_ADC_IsEnabled>
 8005180:	4603      	mov	r3, r0
 8005182:	4323      	orrs	r3, r4
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e012      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005190:	481a      	ldr	r0, [pc, #104]	@ (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005192:	f7ff ff0f 	bl	8004fb4 <LL_ADC_IsEnabled>
 8005196:	4604      	mov	r4, r0
 8005198:	4819      	ldr	r0, [pc, #100]	@ (8005200 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800519a:	f7ff ff0b 	bl	8004fb4 <LL_ADC_IsEnabled>
 800519e:	4603      	mov	r3, r0
 80051a0:	431c      	orrs	r4, r3
 80051a2:	481a      	ldr	r0, [pc, #104]	@ (800520c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051a4:	f7ff ff06 	bl	8004fb4 <LL_ADC_IsEnabled>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4323      	orrs	r3, r4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d012      	beq.n	80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051c2:	f023 030f 	bic.w	r3, r3, #15
 80051c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80051c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051ca:	e009      	b.n	80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80051de:	e000      	b.n	80051e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3784      	adds	r7, #132	@ 0x84
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	50000100 	.word	0x50000100
 80051fc:	50000400 	.word	0x50000400
 8005200:	50000500 	.word	0x50000500
 8005204:	50000300 	.word	0x50000300
 8005208:	50000700 	.word	0x50000700
 800520c:	50000600 	.word	0x50000600

08005210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005220:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <__NVIC_SetPriorityGrouping+0x44>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800522c:	4013      	ands	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800523c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005242:	4a04      	ldr	r2, [pc, #16]	@ (8005254 <__NVIC_SetPriorityGrouping+0x44>)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	60d3      	str	r3, [r2, #12]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	e000ed00 	.word	0xe000ed00

08005258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800525c:	4b04      	ldr	r3, [pc, #16]	@ (8005270 <__NVIC_GetPriorityGrouping+0x18>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	f003 0307 	and.w	r3, r3, #7
}
 8005266:	4618      	mov	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	2b00      	cmp	r3, #0
 8005284:	db0b      	blt.n	800529e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	4907      	ldr	r1, [pc, #28]	@ (80052ac <__NVIC_EnableIRQ+0x38>)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2001      	movs	r0, #1
 8005296:	fa00 f202 	lsl.w	r2, r0, r2
 800529a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000e100 	.word	0xe000e100

080052b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	6039      	str	r1, [r7, #0]
 80052ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	db0a      	blt.n	80052da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	490c      	ldr	r1, [pc, #48]	@ (80052fc <__NVIC_SetPriority+0x4c>)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	440b      	add	r3, r1
 80052d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052d8:	e00a      	b.n	80052f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4908      	ldr	r1, [pc, #32]	@ (8005300 <__NVIC_SetPriority+0x50>)
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	3b04      	subs	r3, #4
 80052e8:	0112      	lsls	r2, r2, #4
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	440b      	add	r3, r1
 80052ee:	761a      	strb	r2, [r3, #24]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000e100 	.word	0xe000e100
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005304:	b480      	push	{r7}
 8005306:	b089      	sub	sp, #36	@ 0x24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f1c3 0307 	rsb	r3, r3, #7
 800531e:	2b04      	cmp	r3, #4
 8005320:	bf28      	it	cs
 8005322:	2304      	movcs	r3, #4
 8005324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3304      	adds	r3, #4
 800532a:	2b06      	cmp	r3, #6
 800532c:	d902      	bls.n	8005334 <NVIC_EncodePriority+0x30>
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3b03      	subs	r3, #3
 8005332:	e000      	b.n	8005336 <NVIC_EncodePriority+0x32>
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43da      	mvns	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	401a      	ands	r2, r3
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800534c:	f04f 31ff 	mov.w	r1, #4294967295
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	43d9      	mvns	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535c:	4313      	orrs	r3, r2
         );
}
 800535e:	4618      	mov	r0, r3
 8005360:	3724      	adds	r7, #36	@ 0x24
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3b01      	subs	r3, #1
 8005378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800537c:	d301      	bcc.n	8005382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800537e:	2301      	movs	r3, #1
 8005380:	e00f      	b.n	80053a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005382:	4a0a      	ldr	r2, [pc, #40]	@ (80053ac <SysTick_Config+0x40>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3b01      	subs	r3, #1
 8005388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800538a:	210f      	movs	r1, #15
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	f7ff ff8e 	bl	80052b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005394:	4b05      	ldr	r3, [pc, #20]	@ (80053ac <SysTick_Config+0x40>)
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800539a:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <SysTick_Config+0x40>)
 800539c:	2207      	movs	r2, #7
 800539e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	e000e010 	.word	0xe000e010

080053b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ff29 	bl	8005210 <__NVIC_SetPriorityGrouping>
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b086      	sub	sp, #24
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	4603      	mov	r3, r0
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053d4:	f7ff ff40 	bl	8005258 <__NVIC_GetPriorityGrouping>
 80053d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f7ff ff90 	bl	8005304 <NVIC_EncodePriority>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff ff5f 	bl	80052b0 <__NVIC_SetPriority>
}
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	4603      	mov	r3, r0
 8005402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff33 	bl	8005274 <__NVIC_EnableIRQ>
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff ffa4 	bl	800536c <SysTick_Config>
 8005424:	4603      	mov	r3, r0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e08d      	b.n	800555e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	4b47      	ldr	r3, [pc, #284]	@ (8005568 <HAL_DMA_Init+0x138>)
 800544a:	429a      	cmp	r2, r3
 800544c:	d80f      	bhi.n	800546e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	4b45      	ldr	r3, [pc, #276]	@ (800556c <HAL_DMA_Init+0x13c>)
 8005456:	4413      	add	r3, r2
 8005458:	4a45      	ldr	r2, [pc, #276]	@ (8005570 <HAL_DMA_Init+0x140>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	009a      	lsls	r2, r3, #2
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a42      	ldr	r2, [pc, #264]	@ (8005574 <HAL_DMA_Init+0x144>)
 800546a:	641a      	str	r2, [r3, #64]	@ 0x40
 800546c:	e00e      	b.n	800548c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	4b40      	ldr	r3, [pc, #256]	@ (8005578 <HAL_DMA_Init+0x148>)
 8005476:	4413      	add	r3, r2
 8005478:	4a3d      	ldr	r2, [pc, #244]	@ (8005570 <HAL_DMA_Init+0x140>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	009a      	lsls	r2, r3, #2
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a3c      	ldr	r2, [pc, #240]	@ (800557c <HAL_DMA_Init+0x14c>)
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80054a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa82 	bl	80059e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ec:	d102      	bne.n	80054f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005508:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <HAL_DMA_Init+0x104>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b04      	cmp	r3, #4
 8005518:	d80c      	bhi.n	8005534 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 faa2 	bl	8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	e008      	b.n	8005546 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40020407 	.word	0x40020407
 800556c:	bffdfff8 	.word	0xbffdfff8
 8005570:	cccccccd 	.word	0xcccccccd
 8005574:	40020000 	.word	0x40020000
 8005578:	bffdfbf8 	.word	0xbffdfbf8
 800557c:	40020400 	.word	0x40020400

08005580 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_DMA_Start_IT+0x20>
 800559c:	2302      	movs	r3, #2
 800559e:	e066      	b.n	800566e <HAL_DMA_Start_IT+0xee>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d155      	bne.n	8005660 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f9c7 	bl	800596c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d008      	beq.n	80055f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 020e 	orr.w	r2, r2, #14
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e00f      	b.n	8005618 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0204 	bic.w	r2, r2, #4
 8005606:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 020a 	orr.w	r2, r2, #10
 8005616:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005634:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800564c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e005      	b.n	800566c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005668:	2302      	movs	r3, #2
 800566a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d005      	beq.n	800569a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2204      	movs	r2, #4
 8005692:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e037      	b.n	800570a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 020e 	bic.w	r2, r2, #14
 80056a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	f003 021f 	and.w	r2, r3, #31
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	2101      	movs	r1, #1
 80056d8:	fa01 f202 	lsl.w	r2, r1, r2
 80056dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005708:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800571a:	7bfb      	ldrb	r3, [r7, #15]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d00d      	beq.n	800575c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2204      	movs	r2, #4
 8005744:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
 800575a:	e047      	b.n	80057ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 020e 	bic.w	r2, r2, #14
 800576a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0201 	bic.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005786:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800578a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	f003 021f 	and.w	r2, r3, #31
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	2101      	movs	r1, #1
 800579a:	fa01 f202 	lsl.w	r2, r1, r2
 800579e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00c      	beq.n	80057cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	4798      	blx	r3
    }
  }
  return status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	2204      	movs	r2, #4
 8005818:	409a      	lsls	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d026      	beq.n	8005870 <HAL_DMA_IRQHandler+0x7a>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d021      	beq.n	8005870 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d107      	bne.n	800584a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0204 	bic.w	r2, r2, #4
 8005848:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	f003 021f 	and.w	r2, r3, #31
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	2104      	movs	r1, #4
 8005858:	fa01 f202 	lsl.w	r2, r1, r2
 800585c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	2b00      	cmp	r3, #0
 8005864:	d071      	beq.n	800594a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800586e:	e06c      	b.n	800594a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	2202      	movs	r2, #2
 800587a:	409a      	lsls	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4013      	ands	r3, r2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02e      	beq.n	80058e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d029      	beq.n	80058e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10b      	bne.n	80058b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 020a 	bic.w	r2, r2, #10
 80058aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b8:	f003 021f 	and.w	r2, r3, #31
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	2102      	movs	r1, #2
 80058c2:	fa01 f202 	lsl.w	r2, r1, r2
 80058c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d038      	beq.n	800594a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80058e0:	e033      	b.n	800594a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	2208      	movs	r2, #8
 80058ec:	409a      	lsls	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d02a      	beq.n	800594c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d025      	beq.n	800594c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 020e 	bic.w	r2, r2, #14
 800590e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005914:	f003 021f 	and.w	r2, r3, #31
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f202 	lsl.w	r2, r1, r2
 8005922:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800593e:	2b00      	cmp	r3, #0
 8005940:	d004      	beq.n	800594c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800594a:	bf00      	nop
 800594c:	bf00      	nop
}
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005982:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005994:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	f003 021f 	and.w	r2, r3, #31
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	2101      	movs	r1, #1
 80059a4:	fa01 f202 	lsl.w	r2, r1, r2
 80059a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b10      	cmp	r3, #16
 80059b8:	d108      	bne.n	80059cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059ca:	e007      	b.n	80059dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	60da      	str	r2, [r3, #12]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	4b16      	ldr	r3, [pc, #88]	@ (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d802      	bhi.n	8005a02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80059fc:	4b15      	ldr	r3, [pc, #84]	@ (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e001      	b.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005a02:	4b15      	ldr	r3, [pc, #84]	@ (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005a04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	3b08      	subs	r3, #8
 8005a12:	4a12      	ldr	r2, [pc, #72]	@ (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	009a      	lsls	r2, r3, #2
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	461a      	mov	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a0b      	ldr	r2, [pc, #44]	@ (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005a32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40020407 	.word	0x40020407
 8005a54:	40020800 	.word	0x40020800
 8005a58:	40020820 	.word	0x40020820
 8005a5c:	cccccccd 	.word	0xcccccccd
 8005a60:	40020880 	.word	0x40020880

08005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a08      	ldr	r2, [pc, #32]	@ (8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a86:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2201      	movs	r2, #1
 8005a92:	409a      	lsls	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	1000823f 	.word	0x1000823f
 8005aa8:	40020940 	.word	0x40020940

08005aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005aba:	e15a      	b.n	8005d72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 814c 	beq.w	8005d6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0303 	and.w	r3, r3, #3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d005      	beq.n	8005aec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d130      	bne.n	8005b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	2203      	movs	r2, #3
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4013      	ands	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b22:	2201      	movs	r2, #1
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	f003 0201 	and.w	r2, r3, #1
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d017      	beq.n	8005b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	2203      	movs	r2, #3
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d123      	bne.n	8005bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	08da      	lsrs	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3208      	adds	r2, #8
 8005b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	220f      	movs	r2, #15
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	08da      	lsrs	r2, r3, #3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3208      	adds	r2, #8
 8005bd8:	6939      	ldr	r1, [r7, #16]
 8005bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	2203      	movs	r2, #3
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0203 	and.w	r2, r3, #3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80a6 	beq.w	8005d6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c20:	4b5b      	ldr	r3, [pc, #364]	@ (8005d90 <HAL_GPIO_Init+0x2e4>)
 8005c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c24:	4a5a      	ldr	r2, [pc, #360]	@ (8005d90 <HAL_GPIO_Init+0x2e4>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c2c:	4b58      	ldr	r3, [pc, #352]	@ (8005d90 <HAL_GPIO_Init+0x2e4>)
 8005c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c38:	4a56      	ldr	r2, [pc, #344]	@ (8005d94 <HAL_GPIO_Init+0x2e8>)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	089b      	lsrs	r3, r3, #2
 8005c3e:	3302      	adds	r3, #2
 8005c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	220f      	movs	r2, #15
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c62:	d01f      	beq.n	8005ca4 <HAL_GPIO_Init+0x1f8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a4c      	ldr	r2, [pc, #304]	@ (8005d98 <HAL_GPIO_Init+0x2ec>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d019      	beq.n	8005ca0 <HAL_GPIO_Init+0x1f4>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8005d9c <HAL_GPIO_Init+0x2f0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <HAL_GPIO_Init+0x1f0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a4a      	ldr	r2, [pc, #296]	@ (8005da0 <HAL_GPIO_Init+0x2f4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00d      	beq.n	8005c98 <HAL_GPIO_Init+0x1ec>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a49      	ldr	r2, [pc, #292]	@ (8005da4 <HAL_GPIO_Init+0x2f8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <HAL_GPIO_Init+0x1e8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a48      	ldr	r2, [pc, #288]	@ (8005da8 <HAL_GPIO_Init+0x2fc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d101      	bne.n	8005c90 <HAL_GPIO_Init+0x1e4>
 8005c8c:	2305      	movs	r3, #5
 8005c8e:	e00a      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005c90:	2306      	movs	r3, #6
 8005c92:	e008      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005c94:	2304      	movs	r3, #4
 8005c96:	e006      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e004      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e002      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	f002 0203 	and.w	r2, r2, #3
 8005cac:	0092      	lsls	r2, r2, #2
 8005cae:	4093      	lsls	r3, r2
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cb6:	4937      	ldr	r1, [pc, #220]	@ (8005d94 <HAL_GPIO_Init+0x2e8>)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	089b      	lsrs	r3, r3, #2
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cc4:	4b39      	ldr	r3, [pc, #228]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ce8:	4a30      	ldr	r2, [pc, #192]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cee:	4b2f      	ldr	r3, [pc, #188]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d12:	4a26      	ldr	r2, [pc, #152]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d18:	4b24      	ldr	r3, [pc, #144]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4013      	ands	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d42:	4b1a      	ldr	r3, [pc, #104]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d66:	4a11      	ldr	r2, [pc, #68]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f47f ae9d 	bne.w	8005abc <HAL_GPIO_Init+0x10>
  }
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40010000 	.word	0x40010000
 8005d98:	48000400 	.word	0x48000400
 8005d9c:	48000800 	.word	0x48000800
 8005da0:	48000c00 	.word	0x48000c00
 8005da4:	48001000 	.word	0x48001000
 8005da8:	48001400 	.word	0x48001400
 8005dac:	40010400 	.word	0x40010400

08005db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	807b      	strh	r3, [r7, #2]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dc0:	787b      	ldrb	r3, [r7, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dc6:	887a      	ldrh	r2, [r7, #2]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dcc:	e002      	b.n	8005dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dce:	887a      	ldrh	r2, [r7, #2]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005dea:	4b08      	ldr	r3, [pc, #32]	@ (8005e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005df6:	4a05      	ldr	r2, [pc, #20]	@ (8005e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005df8:	88fb      	ldrh	r3, [r7, #6]
 8005dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fc feca 	bl	8002b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40010400 	.word	0x40010400

08005e10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d141      	bne.n	8005ea2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e2a:	d131      	bne.n	8005e90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e2c:	4b47      	ldr	r3, [pc, #284]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e32:	4a46      	ldr	r2, [pc, #280]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e3c:	4b43      	ldr	r3, [pc, #268]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e44:	4a41      	ldr	r2, [pc, #260]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e4c:	4b40      	ldr	r3, [pc, #256]	@ (8005f50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2232      	movs	r2, #50	@ 0x32
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	4a3f      	ldr	r2, [pc, #252]	@ (8005f54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e58:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5c:	0c9b      	lsrs	r3, r3, #18
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e62:	e002      	b.n	8005e6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e6a:	4b38      	ldr	r3, [pc, #224]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e76:	d102      	bne.n	8005e7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f2      	bne.n	8005e64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e7e:	4b33      	ldr	r3, [pc, #204]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e8a:	d158      	bne.n	8005f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e057      	b.n	8005f40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e90:	4b2e      	ldr	r3, [pc, #184]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e96:	4a2d      	ldr	r2, [pc, #180]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ea0:	e04d      	b.n	8005f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ea8:	d141      	bne.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005eaa:	4b28      	ldr	r3, [pc, #160]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb6:	d131      	bne.n	8005f1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005eb8:	4b24      	ldr	r3, [pc, #144]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ebe:	4a23      	ldr	r2, [pc, #140]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ec8:	4b20      	ldr	r3, [pc, #128]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2232      	movs	r2, #50	@ 0x32
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	0c9b      	lsrs	r3, r3, #18
 8005eea:	3301      	adds	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eee:	e002      	b.n	8005ef6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ef6:	4b15      	ldr	r3, [pc, #84]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f02:	d102      	bne.n	8005f0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f2      	bne.n	8005ef0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f0a:	4b10      	ldr	r3, [pc, #64]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f16:	d112      	bne.n	8005f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e011      	b.n	8005f40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f22:	4a0a      	ldr	r2, [pc, #40]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f2c:	e007      	b.n	8005f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f2e:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f36:	4a05      	ldr	r2, [pc, #20]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40007000 	.word	0x40007000
 8005f50:	20000200 	.word	0x20000200
 8005f54:	431bde83 	.word	0x431bde83

08005f58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4a04      	ldr	r2, [pc, #16]	@ (8005f74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f66:	6093      	str	r3, [r2, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40007000 	.word	0x40007000

08005f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e2fe      	b.n	8006588 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d075      	beq.n	8006082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f96:	4b97      	ldr	r3, [pc, #604]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fa0:	4b94      	ldr	r3, [pc, #592]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d102      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x3e>
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d002      	beq.n	8005fbc <HAL_RCC_OscConfig+0x44>
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d10b      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fbc:	4b8d      	ldr	r3, [pc, #564]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05b      	beq.n	8006080 <HAL_RCC_OscConfig+0x108>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d157      	bne.n	8006080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e2d9      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fdc:	d106      	bne.n	8005fec <HAL_RCC_OscConfig+0x74>
 8005fde:	4b85      	ldr	r3, [pc, #532]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a84      	ldr	r2, [pc, #528]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e01d      	b.n	8006028 <HAL_RCC_OscConfig+0xb0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCC_OscConfig+0x98>
 8005ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a7e      	ldr	r2, [pc, #504]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8005ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b7c      	ldr	r3, [pc, #496]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a7b      	ldr	r2, [pc, #492]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e00b      	b.n	8006028 <HAL_RCC_OscConfig+0xb0>
 8006010:	4b78      	ldr	r3, [pc, #480]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a77      	ldr	r2, [pc, #476]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4b75      	ldr	r3, [pc, #468]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a74      	ldr	r2, [pc, #464]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d013      	beq.n	8006058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fd fe24 	bl	8003c7c <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006038:	f7fd fe20 	bl	8003c7c <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	@ 0x64
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e29e      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800604a:	4b6a      	ldr	r3, [pc, #424]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0xc0>
 8006056:	e014      	b.n	8006082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006058:	f7fd fe10 	bl	8003c7c <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006060:	f7fd fe0c 	bl	8003c7c <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	@ 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e28a      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006072:	4b60      	ldr	r3, [pc, #384]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0xe8>
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d075      	beq.n	800617a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800608e:	4b59      	ldr	r3, [pc, #356]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006098:	4b56      	ldr	r3, [pc, #344]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b0c      	cmp	r3, #12
 80060a6:	d102      	bne.n	80060ae <HAL_RCC_OscConfig+0x136>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d002      	beq.n	80060b4 <HAL_RCC_OscConfig+0x13c>
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d11f      	bne.n	80060f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060b4:	4b4f      	ldr	r3, [pc, #316]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_RCC_OscConfig+0x154>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e25d      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060cc:	4b49      	ldr	r3, [pc, #292]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	061b      	lsls	r3, r3, #24
 80060da:	4946      	ldr	r1, [pc, #280]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060e0:	4b45      	ldr	r3, [pc, #276]	@ (80061f8 <HAL_RCC_OscConfig+0x280>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fd fd7d 	bl	8003be4 <HAL_InitTick>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d043      	beq.n	8006178 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e249      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d023      	beq.n	8006144 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060fc:	4b3d      	ldr	r3, [pc, #244]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a3c      	ldr	r2, [pc, #240]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fd fdb8 	bl	8003c7c <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006110:	f7fd fdb4 	bl	8003c7c <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e232      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006122:	4b34      	ldr	r3, [pc, #208]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612e:	4b31      	ldr	r3, [pc, #196]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	061b      	lsls	r3, r3, #24
 800613c:	492d      	ldr	r1, [pc, #180]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 800613e:	4313      	orrs	r3, r2
 8006140:	604b      	str	r3, [r1, #4]
 8006142:	e01a      	b.n	800617a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006144:	4b2b      	ldr	r3, [pc, #172]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a2a      	ldr	r2, [pc, #168]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 800614a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800614e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006150:	f7fd fd94 	bl	8003c7c <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006158:	f7fd fd90 	bl	8003c7c <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e20e      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800616a:	4b22      	ldr	r3, [pc, #136]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x1e0>
 8006176:	e000      	b.n	800617a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d041      	beq.n	800620a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01c      	beq.n	80061c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800618e:	4b19      	ldr	r3, [pc, #100]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006194:	4a17      	ldr	r2, [pc, #92]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619e:	f7fd fd6d 	bl	8003c7c <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a6:	f7fd fd69 	bl	8003c7c <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e1e7      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061b8:	4b0e      	ldr	r3, [pc, #56]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 80061ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0ef      	beq.n	80061a6 <HAL_RCC_OscConfig+0x22e>
 80061c6:	e020      	b.n	800620a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c8:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 80061ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061ce:	4a09      	ldr	r2, [pc, #36]	@ (80061f4 <HAL_RCC_OscConfig+0x27c>)
 80061d0:	f023 0301 	bic.w	r3, r3, #1
 80061d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d8:	f7fd fd50 	bl	8003c7c <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061de:	e00d      	b.n	80061fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061e0:	f7fd fd4c 	bl	8003c7c <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d906      	bls.n	80061fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e1ca      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000
 80061f8:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061fc:	4b8c      	ldr	r3, [pc, #560]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80061fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1ea      	bne.n	80061e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80a6 	beq.w	8006364 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006218:	2300      	movs	r3, #0
 800621a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800621c:	4b84      	ldr	r3, [pc, #528]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 800621e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_RCC_OscConfig+0x2b4>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <HAL_RCC_OscConfig+0x2b6>
 800622c:	2300      	movs	r3, #0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006232:	4b7f      	ldr	r3, [pc, #508]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006236:	4a7e      	ldr	r2, [pc, #504]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 8006238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800623c:	6593      	str	r3, [r2, #88]	@ 0x58
 800623e:	4b7c      	ldr	r3, [pc, #496]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 8006240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800624a:	2301      	movs	r3, #1
 800624c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800624e:	4b79      	ldr	r3, [pc, #484]	@ (8006434 <HAL_RCC_OscConfig+0x4bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d118      	bne.n	800628c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800625a:	4b76      	ldr	r3, [pc, #472]	@ (8006434 <HAL_RCC_OscConfig+0x4bc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a75      	ldr	r2, [pc, #468]	@ (8006434 <HAL_RCC_OscConfig+0x4bc>)
 8006260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006266:	f7fd fd09 	bl	8003c7c <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626e:	f7fd fd05 	bl	8003c7c <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e183      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006280:	4b6c      	ldr	r3, [pc, #432]	@ (8006434 <HAL_RCC_OscConfig+0x4bc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d108      	bne.n	80062a6 <HAL_RCC_OscConfig+0x32e>
 8006294:	4b66      	ldr	r3, [pc, #408]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	4a65      	ldr	r2, [pc, #404]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062a4:	e024      	b.n	80062f0 <HAL_RCC_OscConfig+0x378>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d110      	bne.n	80062d0 <HAL_RCC_OscConfig+0x358>
 80062ae:	4b60      	ldr	r3, [pc, #384]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b4:	4a5e      	ldr	r2, [pc, #376]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80062b6:	f043 0304 	orr.w	r3, r3, #4
 80062ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062be:	4b5c      	ldr	r3, [pc, #368]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c4:	4a5a      	ldr	r2, [pc, #360]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062ce:	e00f      	b.n	80062f0 <HAL_RCC_OscConfig+0x378>
 80062d0:	4b57      	ldr	r3, [pc, #348]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d6:	4a56      	ldr	r2, [pc, #344]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062e0:	4b53      	ldr	r3, [pc, #332]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e6:	4a52      	ldr	r2, [pc, #328]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80062e8:	f023 0304 	bic.w	r3, r3, #4
 80062ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d016      	beq.n	8006326 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f8:	f7fd fcc0 	bl	8003c7c <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fd fcbc 	bl	8003c7c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e138      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006316:	4b46      	ldr	r3, [pc, #280]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0ed      	beq.n	8006300 <HAL_RCC_OscConfig+0x388>
 8006324:	e015      	b.n	8006352 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006326:	f7fd fca9 	bl	8003c7c <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800632c:	e00a      	b.n	8006344 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632e:	f7fd fca5 	bl	8003c7c <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633c:	4293      	cmp	r3, r2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e121      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006344:	4b3a      	ldr	r3, [pc, #232]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1ed      	bne.n	800632e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006352:	7ffb      	ldrb	r3, [r7, #31]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d105      	bne.n	8006364 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006358:	4b35      	ldr	r3, [pc, #212]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635c:	4a34      	ldr	r2, [pc, #208]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 800635e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006362:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d03c      	beq.n	80063ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01c      	beq.n	80063b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006378:	4b2d      	ldr	r3, [pc, #180]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 800637a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800637e:	4a2c      	ldr	r2, [pc, #176]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 8006380:	f043 0301 	orr.w	r3, r3, #1
 8006384:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006388:	f7fd fc78 	bl	8003c7c <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006390:	f7fd fc74 	bl	8003c7c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e0f2      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063a2:	4b23      	ldr	r3, [pc, #140]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80063a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ef      	beq.n	8006390 <HAL_RCC_OscConfig+0x418>
 80063b0:	e01b      	b.n	80063ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80063b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c2:	f7fd fc5b 	bl	8003c7c <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063ca:	f7fd fc57 	bl	8003c7c <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e0d5      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063dc:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80063de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1ef      	bne.n	80063ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 80c9 	beq.w	8006586 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 030c 	and.w	r3, r3, #12
 80063fc:	2b0c      	cmp	r3, #12
 80063fe:	f000 8083 	beq.w	8006508 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d15e      	bne.n	80064c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640a:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a08      	ldr	r2, [pc, #32]	@ (8006430 <HAL_RCC_OscConfig+0x4b8>)
 8006410:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006416:	f7fd fc31 	bl	8003c7c <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800641c:	e00c      	b.n	8006438 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800641e:	f7fd fc2d 	bl	8003c7c <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d905      	bls.n	8006438 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e0ab      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
 8006430:	40021000 	.word	0x40021000
 8006434:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006438:	4b55      	ldr	r3, [pc, #340]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1ec      	bne.n	800641e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006444:	4b52      	ldr	r3, [pc, #328]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	4b52      	ldr	r3, [pc, #328]	@ (8006594 <HAL_RCC_OscConfig+0x61c>)
 800644a:	4013      	ands	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6a11      	ldr	r1, [r2, #32]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006454:	3a01      	subs	r2, #1
 8006456:	0112      	lsls	r2, r2, #4
 8006458:	4311      	orrs	r1, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800645e:	0212      	lsls	r2, r2, #8
 8006460:	4311      	orrs	r1, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006466:	0852      	lsrs	r2, r2, #1
 8006468:	3a01      	subs	r2, #1
 800646a:	0552      	lsls	r2, r2, #21
 800646c:	4311      	orrs	r1, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006472:	0852      	lsrs	r2, r2, #1
 8006474:	3a01      	subs	r2, #1
 8006476:	0652      	lsls	r2, r2, #25
 8006478:	4311      	orrs	r1, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800647e:	06d2      	lsls	r2, r2, #27
 8006480:	430a      	orrs	r2, r1
 8006482:	4943      	ldr	r1, [pc, #268]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 8006484:	4313      	orrs	r3, r2
 8006486:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006488:	4b41      	ldr	r3, [pc, #260]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a40      	ldr	r2, [pc, #256]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 800648e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006492:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006494:	4b3e      	ldr	r3, [pc, #248]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4a3d      	ldr	r2, [pc, #244]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 800649a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800649e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fd fbec 	bl	8003c7c <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a8:	f7fd fbe8 	bl	8003c7c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e066      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ba:	4b35      	ldr	r3, [pc, #212]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0x530>
 80064c6:	e05e      	b.n	8006586 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c8:	4b31      	ldr	r3, [pc, #196]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a30      	ldr	r2, [pc, #192]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 80064ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fd fbd2 	bl	8003c7c <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fd fbce 	bl	8003c7c <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e04c      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ee:	4b28      	ldr	r3, [pc, #160]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80064fa:	4b25      	ldr	r3, [pc, #148]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	4924      	ldr	r1, [pc, #144]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 8006500:	4b25      	ldr	r3, [pc, #148]	@ (8006598 <HAL_RCC_OscConfig+0x620>)
 8006502:	4013      	ands	r3, r2
 8006504:	60cb      	str	r3, [r1, #12]
 8006506:	e03e      	b.n	8006586 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e039      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006514:	4b1e      	ldr	r3, [pc, #120]	@ (8006590 <HAL_RCC_OscConfig+0x618>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f003 0203 	and.w	r2, r3, #3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	429a      	cmp	r2, r3
 8006526:	d12c      	bne.n	8006582 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	3b01      	subs	r3, #1
 8006534:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006536:	429a      	cmp	r2, r3
 8006538:	d123      	bne.n	8006582 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006544:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006546:	429a      	cmp	r2, r3
 8006548:	d11b      	bne.n	8006582 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006554:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006556:	429a      	cmp	r2, r3
 8006558:	d113      	bne.n	8006582 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	3b01      	subs	r3, #1
 8006568:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800656a:	429a      	cmp	r2, r3
 800656c:	d109      	bne.n	8006582 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	3b01      	subs	r3, #1
 800657c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d001      	beq.n	8006586 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40021000 	.word	0x40021000
 8006594:	019f800c 	.word	0x019f800c
 8006598:	feeefffc 	.word	0xfeeefffc

0800659c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e11e      	b.n	80067f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065b4:	4b91      	ldr	r3, [pc, #580]	@ (80067fc <HAL_RCC_ClockConfig+0x260>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d910      	bls.n	80065e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c2:	4b8e      	ldr	r3, [pc, #568]	@ (80067fc <HAL_RCC_ClockConfig+0x260>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f023 020f 	bic.w	r2, r3, #15
 80065ca:	498c      	ldr	r1, [pc, #560]	@ (80067fc <HAL_RCC_ClockConfig+0x260>)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d2:	4b8a      	ldr	r3, [pc, #552]	@ (80067fc <HAL_RCC_ClockConfig+0x260>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d001      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e106      	b.n	80067f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d073      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d129      	bne.n	800664c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065f8:	4b81      	ldr	r3, [pc, #516]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0f4      	b.n	80067f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006608:	f000 f99e 	bl	8006948 <RCC_GetSysClockFreqFromPLLSource>
 800660c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4a7c      	ldr	r2, [pc, #496]	@ (8006804 <HAL_RCC_ClockConfig+0x268>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d93f      	bls.n	8006696 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006616:	4b7a      	ldr	r3, [pc, #488]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800662a:	2b00      	cmp	r3, #0
 800662c:	d033      	beq.n	8006696 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006632:	2b00      	cmp	r3, #0
 8006634:	d12f      	bne.n	8006696 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006636:	4b72      	ldr	r3, [pc, #456]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800663e:	4a70      	ldr	r2, [pc, #448]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006644:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006646:	2380      	movs	r3, #128	@ 0x80
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	e024      	b.n	8006696 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d107      	bne.n	8006664 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006654:	4b6a      	ldr	r3, [pc, #424]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0c6      	b.n	80067f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006664:	4b66      	ldr	r3, [pc, #408]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0be      	b.n	80067f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006674:	f000 f8ce 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 8006678:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4a61      	ldr	r2, [pc, #388]	@ (8006804 <HAL_RCC_ClockConfig+0x268>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d909      	bls.n	8006696 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006682:	4b5f      	ldr	r3, [pc, #380]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800668a:	4a5d      	ldr	r2, [pc, #372]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 800668c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006690:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006692:	2380      	movs	r3, #128	@ 0x80
 8006694:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006696:	4b5a      	ldr	r3, [pc, #360]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f023 0203 	bic.w	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4957      	ldr	r1, [pc, #348]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a8:	f7fd fae8 	bl	8003c7c <HAL_GetTick>
 80066ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ae:	e00a      	b.n	80066c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b0:	f7fd fae4 	bl	8003c7c <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e095      	b.n	80067f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 020c 	and.w	r2, r3, #12
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d1eb      	bne.n	80066b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d023      	beq.n	800672c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066f0:	4b43      	ldr	r3, [pc, #268]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	4a42      	ldr	r2, [pc, #264]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80066f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80066fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006708:	4b3d      	ldr	r3, [pc, #244]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006710:	4a3b      	ldr	r2, [pc, #236]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006712:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006716:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006718:	4b39      	ldr	r3, [pc, #228]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4936      	ldr	r1, [pc, #216]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006726:	4313      	orrs	r3, r2
 8006728:	608b      	str	r3, [r1, #8]
 800672a:	e008      	b.n	800673e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b80      	cmp	r3, #128	@ 0x80
 8006730:	d105      	bne.n	800673e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006732:	4b33      	ldr	r3, [pc, #204]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	4a32      	ldr	r2, [pc, #200]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006738:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800673c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800673e:	4b2f      	ldr	r3, [pc, #188]	@ (80067fc <HAL_RCC_ClockConfig+0x260>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d21d      	bcs.n	8006788 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674c:	4b2b      	ldr	r3, [pc, #172]	@ (80067fc <HAL_RCC_ClockConfig+0x260>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f023 020f 	bic.w	r2, r3, #15
 8006754:	4929      	ldr	r1, [pc, #164]	@ (80067fc <HAL_RCC_ClockConfig+0x260>)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	4313      	orrs	r3, r2
 800675a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800675c:	f7fd fa8e 	bl	8003c7c <HAL_GetTick>
 8006760:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006762:	e00a      	b.n	800677a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006764:	f7fd fa8a 	bl	8003c7c <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e03b      	b.n	80067f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677a:	4b20      	ldr	r3, [pc, #128]	@ (80067fc <HAL_RCC_ClockConfig+0x260>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d1ed      	bne.n	8006764 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006794:	4b1a      	ldr	r3, [pc, #104]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4917      	ldr	r1, [pc, #92]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067b2:	4b13      	ldr	r3, [pc, #76]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	490f      	ldr	r1, [pc, #60]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067c6:	f000 f825 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006800 <HAL_RCC_ClockConfig+0x264>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	490c      	ldr	r1, [pc, #48]	@ (8006808 <HAL_RCC_ClockConfig+0x26c>)
 80067d8:	5ccb      	ldrb	r3, [r1, r3]
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	fa22 f303 	lsr.w	r3, r2, r3
 80067e2:	4a0a      	ldr	r2, [pc, #40]	@ (800680c <HAL_RCC_ClockConfig+0x270>)
 80067e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80067e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006810 <HAL_RCC_ClockConfig+0x274>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fd f9fa 	bl	8003be4 <HAL_InitTick>
 80067f0:	4603      	mov	r3, r0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40022000 	.word	0x40022000
 8006800:	40021000 	.word	0x40021000
 8006804:	04c4b400 	.word	0x04c4b400
 8006808:	0800c598 	.word	0x0800c598
 800680c:	20000200 	.word	0x20000200
 8006810:	20000204 	.word	0x20000204

08006814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800681a:	4b2c      	ldr	r3, [pc, #176]	@ (80068cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 030c 	and.w	r3, r3, #12
 8006822:	2b04      	cmp	r3, #4
 8006824:	d102      	bne.n	800682c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006826:	4b2a      	ldr	r3, [pc, #168]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	e047      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800682c:	4b27      	ldr	r3, [pc, #156]	@ (80068cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 030c 	and.w	r3, r3, #12
 8006834:	2b08      	cmp	r3, #8
 8006836:	d102      	bne.n	800683e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006838:	4b26      	ldr	r3, [pc, #152]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	e03e      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800683e:	4b23      	ldr	r3, [pc, #140]	@ (80068cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b0c      	cmp	r3, #12
 8006848:	d136      	bne.n	80068b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800684a:	4b20      	ldr	r3, [pc, #128]	@ (80068cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006854:	4b1d      	ldr	r3, [pc, #116]	@ (80068cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	3301      	adds	r3, #1
 8006860:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b03      	cmp	r3, #3
 8006866:	d10c      	bne.n	8006882 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006868:	4a1a      	ldr	r2, [pc, #104]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	4a16      	ldr	r2, [pc, #88]	@ (80068cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006872:	68d2      	ldr	r2, [r2, #12]
 8006874:	0a12      	lsrs	r2, r2, #8
 8006876:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800687a:	fb02 f303 	mul.w	r3, r2, r3
 800687e:	617b      	str	r3, [r7, #20]
      break;
 8006880:	e00c      	b.n	800689c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006882:	4a13      	ldr	r2, [pc, #76]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	fbb2 f3f3 	udiv	r3, r2, r3
 800688a:	4a10      	ldr	r2, [pc, #64]	@ (80068cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800688c:	68d2      	ldr	r2, [r2, #12]
 800688e:	0a12      	lsrs	r2, r2, #8
 8006890:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]
      break;
 800689a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800689c:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	0e5b      	lsrs	r3, r3, #25
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	3301      	adds	r3, #1
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	e001      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80068bc:	693b      	ldr	r3, [r7, #16]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40021000 	.word	0x40021000
 80068d0:	00f42400 	.word	0x00f42400
 80068d4:	016e3600 	.word	0x016e3600

080068d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068dc:	4b03      	ldr	r3, [pc, #12]	@ (80068ec <HAL_RCC_GetHCLKFreq+0x14>)
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000200 	.word	0x20000200

080068f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068f4:	f7ff fff0 	bl	80068d8 <HAL_RCC_GetHCLKFreq>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4b06      	ldr	r3, [pc, #24]	@ (8006914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	4904      	ldr	r1, [pc, #16]	@ (8006918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006906:	5ccb      	ldrb	r3, [r1, r3]
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006910:	4618      	mov	r0, r3
 8006912:	bd80      	pop	{r7, pc}
 8006914:	40021000 	.word	0x40021000
 8006918:	0800c5a8 	.word	0x0800c5a8

0800691c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006920:	f7ff ffda 	bl	80068d8 <HAL_RCC_GetHCLKFreq>
 8006924:	4602      	mov	r2, r0
 8006926:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	0adb      	lsrs	r3, r3, #11
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	4904      	ldr	r1, [pc, #16]	@ (8006944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006932:	5ccb      	ldrb	r3, [r1, r3]
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800693c:	4618      	mov	r0, r3
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40021000 	.word	0x40021000
 8006944:	0800c5a8 	.word	0x0800c5a8

08006948 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800694e:	4b1e      	ldr	r3, [pc, #120]	@ (80069c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006958:	4b1b      	ldr	r3, [pc, #108]	@ (80069c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	091b      	lsrs	r3, r3, #4
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d10c      	bne.n	8006986 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800696c:	4a17      	ldr	r2, [pc, #92]	@ (80069cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	fbb2 f3f3 	udiv	r3, r2, r3
 8006974:	4a14      	ldr	r2, [pc, #80]	@ (80069c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006976:	68d2      	ldr	r2, [r2, #12]
 8006978:	0a12      	lsrs	r2, r2, #8
 800697a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800697e:	fb02 f303 	mul.w	r3, r2, r3
 8006982:	617b      	str	r3, [r7, #20]
    break;
 8006984:	e00c      	b.n	80069a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006986:	4a12      	ldr	r2, [pc, #72]	@ (80069d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	4a0e      	ldr	r2, [pc, #56]	@ (80069c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006990:	68d2      	ldr	r2, [r2, #12]
 8006992:	0a12      	lsrs	r2, r2, #8
 8006994:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	617b      	str	r3, [r7, #20]
    break;
 800699e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069a0:	4b09      	ldr	r3, [pc, #36]	@ (80069c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	0e5b      	lsrs	r3, r3, #25
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	3301      	adds	r3, #1
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80069ba:	687b      	ldr	r3, [r7, #4]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40021000 	.word	0x40021000
 80069cc:	016e3600 	.word	0x016e3600
 80069d0:	00f42400 	.word	0x00f42400

080069d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069dc:	2300      	movs	r3, #0
 80069de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069e0:	2300      	movs	r3, #0
 80069e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8098 	beq.w	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069f2:	2300      	movs	r3, #0
 80069f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f6:	4b43      	ldr	r3, [pc, #268]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10d      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a02:	4b40      	ldr	r3, [pc, #256]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a06:	4a3f      	ldr	r2, [pc, #252]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a16:	60bb      	str	r3, [r7, #8]
 8006a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a39      	ldr	r2, [pc, #228]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a2a:	f7fd f927 	bl	8003c7c <HAL_GetTick>
 8006a2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a30:	e009      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a32:	f7fd f923 	bl	8003c7c <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d902      	bls.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	74fb      	strb	r3, [r7, #19]
        break;
 8006a44:	e005      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a46:	4b30      	ldr	r3, [pc, #192]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0ef      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a52:	7cfb      	ldrb	r3, [r7, #19]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d159      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a58:	4b2a      	ldr	r3, [pc, #168]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d01e      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d019      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a74:	4b23      	ldr	r3, [pc, #140]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a80:	4b20      	ldr	r3, [pc, #128]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a86:	4a1f      	ldr	r2, [pc, #124]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a90:	4b1c      	ldr	r3, [pc, #112]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a96:	4a1b      	ldr	r2, [pc, #108]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006aa0:	4a18      	ldr	r2, [pc, #96]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab2:	f7fd f8e3 	bl	8003c7c <HAL_GetTick>
 8006ab6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab8:	e00b      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aba:	f7fd f8df 	bl	8003c7c <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d902      	bls.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	74fb      	strb	r3, [r7, #19]
            break;
 8006ad0:	e006      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0ec      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ae0:	7cfb      	ldrb	r3, [r7, #19]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ae6:	4b07      	ldr	r3, [pc, #28]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	4903      	ldr	r1, [pc, #12]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006afc:	e008      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006afe:	7cfb      	ldrb	r3, [r7, #19]
 8006b00:	74bb      	strb	r3, [r7, #18]
 8006b02:	e005      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b04:	40021000 	.word	0x40021000
 8006b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	7cfb      	ldrb	r3, [r7, #19]
 8006b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b10:	7c7b      	ldrb	r3, [r7, #17]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d105      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b16:	4ba7      	ldr	r3, [pc, #668]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1a:	4aa6      	ldr	r2, [pc, #664]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b2e:	4ba1      	ldr	r3, [pc, #644]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b34:	f023 0203 	bic.w	r2, r3, #3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	499d      	ldr	r1, [pc, #628]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b50:	4b98      	ldr	r3, [pc, #608]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b56:	f023 020c 	bic.w	r2, r3, #12
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	4995      	ldr	r1, [pc, #596]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b72:	4b90      	ldr	r3, [pc, #576]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	498c      	ldr	r1, [pc, #560]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0308 	and.w	r3, r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b94:	4b87      	ldr	r3, [pc, #540]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	4984      	ldr	r1, [pc, #528]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	497b      	ldr	r1, [pc, #492]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bd8:	4b76      	ldr	r3, [pc, #472]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	4973      	ldr	r1, [pc, #460]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bfa:	4b6e      	ldr	r3, [pc, #440]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	496a      	ldr	r1, [pc, #424]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c1c:	4b65      	ldr	r3, [pc, #404]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	4962      	ldr	r1, [pc, #392]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	4959      	ldr	r1, [pc, #356]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c60:	4b54      	ldr	r3, [pc, #336]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c66:	f023 0203 	bic.w	r2, r3, #3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6e:	4951      	ldr	r1, [pc, #324]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c82:	4b4c      	ldr	r3, [pc, #304]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c90:	4948      	ldr	r1, [pc, #288]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d015      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ca4:	4b43      	ldr	r3, [pc, #268]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006caa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb2:	4940      	ldr	r1, [pc, #256]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cc2:	d105      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cdc:	4b35      	ldr	r3, [pc, #212]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cea:	4932      	ldr	r1, [pc, #200]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cfa:	d105      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4a2c      	ldr	r2, [pc, #176]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d06:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d015      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d14:	4b27      	ldr	r3, [pc, #156]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d22:	4924      	ldr	r1, [pc, #144]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d32:	d105      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d34:	4b1f      	ldr	r3, [pc, #124]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	4a1e      	ldr	r2, [pc, #120]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d015      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d4c:	4b19      	ldr	r3, [pc, #100]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d5a:	4916      	ldr	r1, [pc, #88]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d6a:	d105      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d6c:	4b11      	ldr	r3, [pc, #68]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4a10      	ldr	r2, [pc, #64]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d019      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d84:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	4908      	ldr	r1, [pc, #32]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006da2:	d109      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da4:	4b03      	ldr	r3, [pc, #12]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	4a02      	ldr	r2, [pc, #8]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dae:	60d3      	str	r3, [r2, #12]
 8006db0:	e002      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006db2:	bf00      	nop
 8006db4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d015      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006dc4:	4b29      	ldr	r3, [pc, #164]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd2:	4926      	ldr	r1, [pc, #152]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de2:	d105      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006de4:	4b21      	ldr	r3, [pc, #132]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4a20      	ldr	r2, [pc, #128]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d015      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e02:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e0a:	4918      	ldr	r1, [pc, #96]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1a:	d105      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e1c:	4b13      	ldr	r3, [pc, #76]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	4a12      	ldr	r2, [pc, #72]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d015      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e34:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e42:	490a      	ldr	r1, [pc, #40]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e52:	d105      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e54:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	4a04      	ldr	r2, [pc, #16]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e60:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40021000 	.word	0x40021000

08006e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e054      	b.n	8006f2c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d111      	bne.n	8006eb2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 ffd4 	bl	8008e44 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a23      	ldr	r2, [pc, #140]	@ (8006f34 <HAL_TIM_Base_Init+0xc4>)
 8006ea8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f001 fb1d 	bl	8008504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	080036b5 	.word	0x080036b5

08006f38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d001      	beq.n	8006f50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e04c      	b.n	8006fea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a26      	ldr	r2, [pc, #152]	@ (8006ff8 <HAL_TIM_Base_Start+0xc0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d022      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x70>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x70>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a22      	ldr	r2, [pc, #136]	@ (8006ffc <HAL_TIM_Base_Start+0xc4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d018      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x70>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	@ (8007000 <HAL_TIM_Base_Start+0xc8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x70>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <HAL_TIM_Base_Start+0xcc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x70>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007008 <HAL_TIM_Base_Start+0xd0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x70>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	@ (800700c <HAL_TIM_Base_Start+0xd4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x70>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8007010 <HAL_TIM_Base_Start+0xd8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d115      	bne.n	8006fd4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	4b19      	ldr	r3, [pc, #100]	@ (8007014 <HAL_TIM_Base_Start+0xdc>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b06      	cmp	r3, #6
 8006fb8:	d015      	beq.n	8006fe6 <HAL_TIM_Base_Start+0xae>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc0:	d011      	beq.n	8006fe6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd2:	e008      	b.n	8006fe6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e000      	b.n	8006fe8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40000c00 	.word	0x40000c00
 8007008:	40013400 	.word	0x40013400
 800700c:	40014000 	.word	0x40014000
 8007010:	40015000 	.word	0x40015000
 8007014:	00010007 	.word	0x00010007

08007018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d001      	beq.n	8007030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e054      	b.n	80070da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a26      	ldr	r2, [pc, #152]	@ (80070e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d022      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705a:	d01d      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a22      	ldr	r2, [pc, #136]	@ (80070ec <HAL_TIM_Base_Start_IT+0xd4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d018      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a21      	ldr	r2, [pc, #132]	@ (80070f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d013      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1f      	ldr	r2, [pc, #124]	@ (80070f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00e      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1e      	ldr	r2, [pc, #120]	@ (80070f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d009      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1c      	ldr	r2, [pc, #112]	@ (80070fc <HAL_TIM_Base_Start_IT+0xe4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d004      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1b      	ldr	r2, [pc, #108]	@ (8007100 <HAL_TIM_Base_Start_IT+0xe8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d115      	bne.n	80070c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	4b19      	ldr	r3, [pc, #100]	@ (8007104 <HAL_TIM_Base_Start_IT+0xec>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b06      	cmp	r3, #6
 80070a8:	d015      	beq.n	80070d6 <HAL_TIM_Base_Start_IT+0xbe>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070b0:	d011      	beq.n	80070d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0201 	orr.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c2:	e008      	b.n	80070d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e000      	b.n	80070d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40000400 	.word	0x40000400
 80070f0:	40000800 	.word	0x40000800
 80070f4:	40000c00 	.word	0x40000c00
 80070f8:	40013400 	.word	0x40013400
 80070fc:	40014000 	.word	0x40014000
 8007100:	40015000 	.word	0x40015000
 8007104:	00010007 	.word	0x00010007

08007108 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e054      	b.n	80071c4 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d111      	bne.n	800714a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 fe88 	bl	8008e44 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a23      	ldr	r2, [pc, #140]	@ (80071cc <HAL_TIM_OC_Init+0xc4>)
 8007140:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3304      	adds	r3, #4
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f001 f9d1 	bl	8008504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	080071d1 	.word	0x080071d1

080071d0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e054      	b.n	80072a0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d111      	bne.n	8007226 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 fe1a 	bl	8008e44 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a23      	ldr	r2, [pc, #140]	@ (80072a8 <HAL_TIM_PWM_Init+0xc4>)
 800721c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3304      	adds	r3, #4
 8007236:	4619      	mov	r1, r3
 8007238:	4610      	mov	r0, r2
 800723a:	f001 f963 	bl	8008504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	080072ad 	.word	0x080072ad

080072ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d109      	bne.n	80072e4 <HAL_TIM_PWM_Start+0x24>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b01      	cmp	r3, #1
 80072da:	bf14      	ite	ne
 80072dc:	2301      	movne	r3, #1
 80072de:	2300      	moveq	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	e03c      	b.n	800735e <HAL_TIM_PWM_Start+0x9e>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d109      	bne.n	80072fe <HAL_TIM_PWM_Start+0x3e>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	bf14      	ite	ne
 80072f6:	2301      	movne	r3, #1
 80072f8:	2300      	moveq	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	e02f      	b.n	800735e <HAL_TIM_PWM_Start+0x9e>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d109      	bne.n	8007318 <HAL_TIM_PWM_Start+0x58>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	bf14      	ite	ne
 8007310:	2301      	movne	r3, #1
 8007312:	2300      	moveq	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	e022      	b.n	800735e <HAL_TIM_PWM_Start+0x9e>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b0c      	cmp	r3, #12
 800731c:	d109      	bne.n	8007332 <HAL_TIM_PWM_Start+0x72>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b01      	cmp	r3, #1
 8007328:	bf14      	ite	ne
 800732a:	2301      	movne	r3, #1
 800732c:	2300      	moveq	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	e015      	b.n	800735e <HAL_TIM_PWM_Start+0x9e>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b10      	cmp	r3, #16
 8007336:	d109      	bne.n	800734c <HAL_TIM_PWM_Start+0x8c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	bf14      	ite	ne
 8007344:	2301      	movne	r3, #1
 8007346:	2300      	moveq	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	e008      	b.n	800735e <HAL_TIM_PWM_Start+0x9e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b01      	cmp	r3, #1
 8007356:	bf14      	ite	ne
 8007358:	2301      	movne	r3, #1
 800735a:	2300      	moveq	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e0a6      	b.n	80074b4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <HAL_TIM_PWM_Start+0xb6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007374:	e023      	b.n	80073be <HAL_TIM_PWM_Start+0xfe>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b04      	cmp	r3, #4
 800737a:	d104      	bne.n	8007386 <HAL_TIM_PWM_Start+0xc6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007384:	e01b      	b.n	80073be <HAL_TIM_PWM_Start+0xfe>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d104      	bne.n	8007396 <HAL_TIM_PWM_Start+0xd6>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007394:	e013      	b.n	80073be <HAL_TIM_PWM_Start+0xfe>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b0c      	cmp	r3, #12
 800739a:	d104      	bne.n	80073a6 <HAL_TIM_PWM_Start+0xe6>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073a4:	e00b      	b.n	80073be <HAL_TIM_PWM_Start+0xfe>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b10      	cmp	r3, #16
 80073aa:	d104      	bne.n	80073b6 <HAL_TIM_PWM_Start+0xf6>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073b4:	e003      	b.n	80073be <HAL_TIM_PWM_Start+0xfe>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2202      	movs	r2, #2
 80073ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2201      	movs	r2, #1
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fd16 	bl	8008df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a3a      	ldr	r2, [pc, #232]	@ (80074bc <HAL_TIM_PWM_Start+0x1fc>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d018      	beq.n	8007408 <HAL_TIM_PWM_Start+0x148>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a39      	ldr	r2, [pc, #228]	@ (80074c0 <HAL_TIM_PWM_Start+0x200>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <HAL_TIM_PWM_Start+0x148>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a37      	ldr	r2, [pc, #220]	@ (80074c4 <HAL_TIM_PWM_Start+0x204>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00e      	beq.n	8007408 <HAL_TIM_PWM_Start+0x148>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a36      	ldr	r2, [pc, #216]	@ (80074c8 <HAL_TIM_PWM_Start+0x208>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d009      	beq.n	8007408 <HAL_TIM_PWM_Start+0x148>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a34      	ldr	r2, [pc, #208]	@ (80074cc <HAL_TIM_PWM_Start+0x20c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d004      	beq.n	8007408 <HAL_TIM_PWM_Start+0x148>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a33      	ldr	r2, [pc, #204]	@ (80074d0 <HAL_TIM_PWM_Start+0x210>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d101      	bne.n	800740c <HAL_TIM_PWM_Start+0x14c>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <HAL_TIM_PWM_Start+0x14e>
 800740c:	2300      	movs	r3, #0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007420:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a25      	ldr	r2, [pc, #148]	@ (80074bc <HAL_TIM_PWM_Start+0x1fc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d022      	beq.n	8007472 <HAL_TIM_PWM_Start+0x1b2>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007434:	d01d      	beq.n	8007472 <HAL_TIM_PWM_Start+0x1b2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a26      	ldr	r2, [pc, #152]	@ (80074d4 <HAL_TIM_PWM_Start+0x214>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d018      	beq.n	8007472 <HAL_TIM_PWM_Start+0x1b2>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a24      	ldr	r2, [pc, #144]	@ (80074d8 <HAL_TIM_PWM_Start+0x218>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d013      	beq.n	8007472 <HAL_TIM_PWM_Start+0x1b2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a23      	ldr	r2, [pc, #140]	@ (80074dc <HAL_TIM_PWM_Start+0x21c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d00e      	beq.n	8007472 <HAL_TIM_PWM_Start+0x1b2>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a19      	ldr	r2, [pc, #100]	@ (80074c0 <HAL_TIM_PWM_Start+0x200>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d009      	beq.n	8007472 <HAL_TIM_PWM_Start+0x1b2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a18      	ldr	r2, [pc, #96]	@ (80074c4 <HAL_TIM_PWM_Start+0x204>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d004      	beq.n	8007472 <HAL_TIM_PWM_Start+0x1b2>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a18      	ldr	r2, [pc, #96]	@ (80074d0 <HAL_TIM_PWM_Start+0x210>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d115      	bne.n	800749e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	4b19      	ldr	r3, [pc, #100]	@ (80074e0 <HAL_TIM_PWM_Start+0x220>)
 800747a:	4013      	ands	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b06      	cmp	r3, #6
 8007482:	d015      	beq.n	80074b0 <HAL_TIM_PWM_Start+0x1f0>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800748a:	d011      	beq.n	80074b0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749c:	e008      	b.n	80074b0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	e000      	b.n	80074b2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	40012c00 	.word	0x40012c00
 80074c0:	40013400 	.word	0x40013400
 80074c4:	40014000 	.word	0x40014000
 80074c8:	40014400 	.word	0x40014400
 80074cc:	40014800 	.word	0x40014800
 80074d0:	40015000 	.word	0x40015000
 80074d4:	40000400 	.word	0x40000400
 80074d8:	40000800 	.word	0x40000800
 80074dc:	40000c00 	.word	0x40000c00
 80074e0:	00010007 	.word	0x00010007

080074e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e04c      	b.n	8007592 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d111      	bne.n	8007528 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 fc99 	bl	8008e44 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d102      	bne.n	8007520 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1f      	ldr	r2, [pc, #124]	@ (800759c <HAL_TIM_OnePulse_Init+0xb8>)
 800751e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f000 ffe2 	bl	8008504 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0208 	bic.w	r2, r2, #8
 800754e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6819      	ldr	r1, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	080075a1 	.word	0x080075a1

080075a0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075dc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d108      	bne.n	80075f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d105      	bne.n	80075f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075ea:	7b7b      	ldrb	r3, [r7, #13]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d102      	bne.n	80075f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075f0:	7b3b      	ldrb	r3, [r7, #12]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d001      	beq.n	80075fa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e059      	b.n	80076ae <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2202      	movs	r2, #2
 800760e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2202      	movs	r2, #2
 8007616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0202 	orr.w	r2, r2, #2
 8007628:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0204 	orr.w	r2, r2, #4
 8007638:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2201      	movs	r2, #1
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f001 fbd8 	bl	8008df8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2201      	movs	r2, #1
 800764e:	2104      	movs	r1, #4
 8007650:	4618      	mov	r0, r3
 8007652:	f001 fbd1 	bl	8008df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a17      	ldr	r2, [pc, #92]	@ (80076b8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d018      	beq.n	8007692 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a15      	ldr	r2, [pc, #84]	@ (80076bc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d013      	beq.n	8007692 <HAL_TIM_OnePulse_Start_IT+0xde>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a14      	ldr	r2, [pc, #80]	@ (80076c0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00e      	beq.n	8007692 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a12      	ldr	r2, [pc, #72]	@ (80076c4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <HAL_TIM_OnePulse_Start_IT+0xde>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a11      	ldr	r2, [pc, #68]	@ (80076c8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a0f      	ldr	r2, [pc, #60]	@ (80076cc <HAL_TIM_OnePulse_Start_IT+0x118>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d101      	bne.n	8007696 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007696:	2300      	movs	r3, #0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40013400 	.word	0x40013400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40014400 	.word	0x40014400
 80076c8:	40014800 	.word	0x40014800
 80076cc:	40015000 	.word	0x40015000

080076d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e0a2      	b.n	800782a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d111      	bne.n	8007714 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fba3 	bl	8008e44 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a4a      	ldr	r2, [pc, #296]	@ (8007834 <HAL_TIM_Encoder_Init+0x164>)
 800770a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f000 fee2 	bl	8008504 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007768:	f023 0303 	bic.w	r3, r3, #3
 800776c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	4313      	orrs	r3, r2
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007786:	f023 030c 	bic.w	r3, r3, #12
 800778a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	4313      	orrs	r3, r2
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	011a      	lsls	r2, r3, #4
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	031b      	lsls	r3, r3, #12
 80077b6:	4313      	orrs	r3, r2
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80077c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80077cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	4313      	orrs	r3, r2
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	080037cd 	.word	0x080037cd

08007838 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007848:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007850:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007858:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007860:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d110      	bne.n	800788a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d102      	bne.n	8007874 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800786e:	7b7b      	ldrb	r3, [r7, #13]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d001      	beq.n	8007878 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e069      	b.n	800794c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007888:	e031      	b.n	80078ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b04      	cmp	r3, #4
 800788e:	d110      	bne.n	80078b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d102      	bne.n	800789c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007896:	7b3b      	ldrb	r3, [r7, #12]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d001      	beq.n	80078a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e055      	b.n	800794c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078b0:	e01d      	b.n	80078ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d108      	bne.n	80078ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d105      	bne.n	80078ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078be:	7b7b      	ldrb	r3, [r7, #13]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d102      	bne.n	80078ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078c4:	7b3b      	ldrb	r3, [r7, #12]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d001      	beq.n	80078ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e03e      	b.n	800794c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <HAL_TIM_Encoder_Start+0xc4>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d008      	beq.n	800790c <HAL_TIM_Encoder_Start+0xd4>
 80078fa:	e00f      	b.n	800791c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2201      	movs	r2, #1
 8007902:	2100      	movs	r1, #0
 8007904:	4618      	mov	r0, r3
 8007906:	f001 fa77 	bl	8008df8 <TIM_CCxChannelCmd>
      break;
 800790a:	e016      	b.n	800793a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2201      	movs	r2, #1
 8007912:	2104      	movs	r1, #4
 8007914:	4618      	mov	r0, r3
 8007916:	f001 fa6f 	bl	8008df8 <TIM_CCxChannelCmd>
      break;
 800791a:	e00e      	b.n	800793a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2201      	movs	r2, #1
 8007922:	2100      	movs	r1, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f001 fa67 	bl	8008df8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2201      	movs	r2, #1
 8007930:	2104      	movs	r1, #4
 8007932:	4618      	mov	r0, r3
 8007934:	f001 fa60 	bl	8008df8 <TIM_CCxChannelCmd>
      break;
 8007938:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f042 0201 	orr.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d026      	beq.n	80079c4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d021      	beq.n	80079c4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0202 	mvn.w	r2, #2
 8007988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
 80079a8:	e009      	b.n	80079be <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d026      	beq.n	8007a1c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d021      	beq.n	8007a1c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0204 	mvn.w	r2, #4
 80079e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2202      	movs	r2, #2
 80079e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
 8007a00:	e009      	b.n	8007a16 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d026      	beq.n	8007a74 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d021      	beq.n	8007a74 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0208 	mvn.w	r2, #8
 8007a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	4798      	blx	r3
 8007a58:	e009      	b.n	8007a6e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d026      	beq.n	8007acc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d021      	beq.n	8007acc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0210 	mvn.w	r2, #16
 8007a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2208      	movs	r2, #8
 8007a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
 8007ab0:	e009      	b.n	8007ac6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0201 	mvn.w	r2, #1
 8007ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d104      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00e      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d009      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00e      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00e      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d009      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f06f 0220 	mvn.w	r2, #32
 8007b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00e      	beq.n	8007bc6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00e      	beq.n	8007bee <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00e      	beq.n	8007c16 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00e      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e066      	b.n	8007d34 <HAL_TIM_OC_ConfigChannel+0xec>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b14      	cmp	r3, #20
 8007c72:	d857      	bhi.n	8007d24 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007c74:	a201      	add	r2, pc, #4	@ (adr r2, 8007c7c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007cd1 	.word	0x08007cd1
 8007c80:	08007d25 	.word	0x08007d25
 8007c84:	08007d25 	.word	0x08007d25
 8007c88:	08007d25 	.word	0x08007d25
 8007c8c:	08007cdf 	.word	0x08007cdf
 8007c90:	08007d25 	.word	0x08007d25
 8007c94:	08007d25 	.word	0x08007d25
 8007c98:	08007d25 	.word	0x08007d25
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d25 	.word	0x08007d25
 8007ca8:	08007d25 	.word	0x08007d25
 8007cac:	08007cfb 	.word	0x08007cfb
 8007cb0:	08007d25 	.word	0x08007d25
 8007cb4:	08007d25 	.word	0x08007d25
 8007cb8:	08007d25 	.word	0x08007d25
 8007cbc:	08007d09 	.word	0x08007d09
 8007cc0:	08007d25 	.word	0x08007d25
 8007cc4:	08007d25 	.word	0x08007d25
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d17 	.word	0x08007d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fcc8 	bl	800866c <TIM_OC1_SetConfig>
      break;
 8007cdc:	e025      	b.n	8007d2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fd5b 	bl	80087a0 <TIM_OC2_SetConfig>
      break;
 8007cea:	e01e      	b.n	8007d2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fde8 	bl	80088c8 <TIM_OC3_SetConfig>
      break;
 8007cf8:	e017      	b.n	8007d2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fe73 	bl	80089ec <TIM_OC4_SetConfig>
      break;
 8007d06:	e010      	b.n	8007d2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 ff00 	bl	8008b14 <TIM_OC5_SetConfig>
      break;
 8007d14:	e009      	b.n	8007d2a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 ff63 	bl	8008be8 <TIM_OC6_SetConfig>
      break;
 8007d22:	e002      	b.n	8007d2a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	75fb      	strb	r3, [r7, #23]
      break;
 8007d28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e0ff      	b.n	8007f5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b14      	cmp	r3, #20
 8007d66:	f200 80f0 	bhi.w	8007f4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007dc5 	.word	0x08007dc5
 8007d74:	08007f4b 	.word	0x08007f4b
 8007d78:	08007f4b 	.word	0x08007f4b
 8007d7c:	08007f4b 	.word	0x08007f4b
 8007d80:	08007e05 	.word	0x08007e05
 8007d84:	08007f4b 	.word	0x08007f4b
 8007d88:	08007f4b 	.word	0x08007f4b
 8007d8c:	08007f4b 	.word	0x08007f4b
 8007d90:	08007e47 	.word	0x08007e47
 8007d94:	08007f4b 	.word	0x08007f4b
 8007d98:	08007f4b 	.word	0x08007f4b
 8007d9c:	08007f4b 	.word	0x08007f4b
 8007da0:	08007e87 	.word	0x08007e87
 8007da4:	08007f4b 	.word	0x08007f4b
 8007da8:	08007f4b 	.word	0x08007f4b
 8007dac:	08007f4b 	.word	0x08007f4b
 8007db0:	08007ec9 	.word	0x08007ec9
 8007db4:	08007f4b 	.word	0x08007f4b
 8007db8:	08007f4b 	.word	0x08007f4b
 8007dbc:	08007f4b 	.word	0x08007f4b
 8007dc0:	08007f09 	.word	0x08007f09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fc4e 	bl	800866c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f042 0208 	orr.w	r2, r2, #8
 8007dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0204 	bic.w	r2, r2, #4
 8007dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6999      	ldr	r1, [r3, #24]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	619a      	str	r2, [r3, #24]
      break;
 8007e02:	e0a5      	b.n	8007f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fcc8 	bl	80087a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6999      	ldr	r1, [r3, #24]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	021a      	lsls	r2, r3, #8
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	619a      	str	r2, [r3, #24]
      break;
 8007e44:	e084      	b.n	8007f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68b9      	ldr	r1, [r7, #8]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fd3b 	bl	80088c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69da      	ldr	r2, [r3, #28]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0208 	orr.w	r2, r2, #8
 8007e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69da      	ldr	r2, [r3, #28]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0204 	bic.w	r2, r2, #4
 8007e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69d9      	ldr	r1, [r3, #28]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	61da      	str	r2, [r3, #28]
      break;
 8007e84:	e064      	b.n	8007f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fdad 	bl	80089ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69d9      	ldr	r1, [r3, #28]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	021a      	lsls	r2, r3, #8
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	61da      	str	r2, [r3, #28]
      break;
 8007ec6:	e043      	b.n	8007f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fe20 	bl	8008b14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0208 	orr.w	r2, r2, #8
 8007ee2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0204 	bic.w	r2, r2, #4
 8007ef2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f06:	e023      	b.n	8007f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fe6a 	bl	8008be8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f32:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	021a      	lsls	r2, r3, #8
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f48:	e002      	b.n	8007f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop

08007f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d101      	bne.n	8007f80 <HAL_TIM_ConfigClockSource+0x1c>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e0f6      	b.n	800816e <HAL_TIM_ConfigClockSource+0x20a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007f9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a6f      	ldr	r2, [pc, #444]	@ (8008178 <HAL_TIM_ConfigClockSource+0x214>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	f000 80c1 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8007fc0:	4a6d      	ldr	r2, [pc, #436]	@ (8008178 <HAL_TIM_ConfigClockSource+0x214>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	f200 80c6 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fc8:	4a6c      	ldr	r2, [pc, #432]	@ (800817c <HAL_TIM_ConfigClockSource+0x218>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	f000 80b9 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8007fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800817c <HAL_TIM_ConfigClockSource+0x218>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	f200 80be 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fd8:	4a69      	ldr	r2, [pc, #420]	@ (8008180 <HAL_TIM_ConfigClockSource+0x21c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	f000 80b1 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8007fe0:	4a67      	ldr	r2, [pc, #412]	@ (8008180 <HAL_TIM_ConfigClockSource+0x21c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	f200 80b6 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fe8:	4a66      	ldr	r2, [pc, #408]	@ (8008184 <HAL_TIM_ConfigClockSource+0x220>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	f000 80a9 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8007ff0:	4a64      	ldr	r2, [pc, #400]	@ (8008184 <HAL_TIM_ConfigClockSource+0x220>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	f200 80ae 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ff8:	4a63      	ldr	r2, [pc, #396]	@ (8008188 <HAL_TIM_ConfigClockSource+0x224>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	f000 80a1 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8008000:	4a61      	ldr	r2, [pc, #388]	@ (8008188 <HAL_TIM_ConfigClockSource+0x224>)
 8008002:	4293      	cmp	r3, r2
 8008004:	f200 80a6 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008008:	4a60      	ldr	r2, [pc, #384]	@ (800818c <HAL_TIM_ConfigClockSource+0x228>)
 800800a:	4293      	cmp	r3, r2
 800800c:	f000 8099 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8008010:	4a5e      	ldr	r2, [pc, #376]	@ (800818c <HAL_TIM_ConfigClockSource+0x228>)
 8008012:	4293      	cmp	r3, r2
 8008014:	f200 809e 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008018:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800801c:	f000 8091 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8008020:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008024:	f200 8096 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008028:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800802c:	f000 8089 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8008030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008034:	f200 808e 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800803c:	d03e      	beq.n	80080bc <HAL_TIM_ConfigClockSource+0x158>
 800803e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008042:	f200 8087 	bhi.w	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800804a:	f000 8086 	beq.w	800815a <HAL_TIM_ConfigClockSource+0x1f6>
 800804e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008052:	d87f      	bhi.n	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008054:	2b70      	cmp	r3, #112	@ 0x70
 8008056:	d01a      	beq.n	800808e <HAL_TIM_ConfigClockSource+0x12a>
 8008058:	2b70      	cmp	r3, #112	@ 0x70
 800805a:	d87b      	bhi.n	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 800805c:	2b60      	cmp	r3, #96	@ 0x60
 800805e:	d050      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x19e>
 8008060:	2b60      	cmp	r3, #96	@ 0x60
 8008062:	d877      	bhi.n	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008064:	2b50      	cmp	r3, #80	@ 0x50
 8008066:	d03c      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x17e>
 8008068:	2b50      	cmp	r3, #80	@ 0x50
 800806a:	d873      	bhi.n	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	d058      	beq.n	8008122 <HAL_TIM_ConfigClockSource+0x1be>
 8008070:	2b40      	cmp	r3, #64	@ 0x40
 8008072:	d86f      	bhi.n	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008074:	2b30      	cmp	r3, #48	@ 0x30
 8008076:	d064      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8008078:	2b30      	cmp	r3, #48	@ 0x30
 800807a:	d86b      	bhi.n	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 800807c:	2b20      	cmp	r3, #32
 800807e:	d060      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8008080:	2b20      	cmp	r3, #32
 8008082:	d867      	bhi.n	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05c      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 8008088:	2b10      	cmp	r3, #16
 800808a:	d05a      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0x1de>
 800808c:	e062      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800809e:	f000 fe8b 	bl	8008db8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80080b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	609a      	str	r2, [r3, #8]
      break;
 80080ba:	e04f      	b.n	800815c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080cc:	f000 fe74 	bl	8008db8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080de:	609a      	str	r2, [r3, #8]
      break;
 80080e0:	e03c      	b.n	800815c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ee:	461a      	mov	r2, r3
 80080f0:	f000 fde6 	bl	8008cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2150      	movs	r1, #80	@ 0x50
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fe3f 	bl	8008d7e <TIM_ITRx_SetConfig>
      break;
 8008100:	e02c      	b.n	800815c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800810e:	461a      	mov	r2, r3
 8008110:	f000 fe05 	bl	8008d1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2160      	movs	r1, #96	@ 0x60
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fe2f 	bl	8008d7e <TIM_ITRx_SetConfig>
      break;
 8008120:	e01c      	b.n	800815c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800812e:	461a      	mov	r2, r3
 8008130:	f000 fdc6 	bl	8008cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2140      	movs	r1, #64	@ 0x40
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fe1f 	bl	8008d7e <TIM_ITRx_SetConfig>
      break;
 8008140:	e00c      	b.n	800815c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f000 fe16 	bl	8008d7e <TIM_ITRx_SetConfig>
      break;
 8008152:	e003      	b.n	800815c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	73fb      	strb	r3, [r7, #15]
      break;
 8008158:	e000      	b.n	800815c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800815a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	00100070 	.word	0x00100070
 800817c:	00100060 	.word	0x00100060
 8008180:	00100050 	.word	0x00100050
 8008184:	00100040 	.word	0x00100040
 8008188:	00100030 	.word	0x00100030
 800818c:	00100020 	.word	0x00100020

08008190 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	460b      	mov	r3, r1
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e14a      	b.n	80084f6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b01      	cmp	r3, #1
 800826a:	f040 80dd 	bne.w	8008428 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	2b1f      	cmp	r3, #31
 8008272:	f200 80d6 	bhi.w	8008422 <HAL_TIM_RegisterCallback+0x1de>
 8008276:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <HAL_TIM_RegisterCallback+0x38>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	080082fd 	.word	0x080082fd
 8008280:	08008305 	.word	0x08008305
 8008284:	0800830d 	.word	0x0800830d
 8008288:	08008315 	.word	0x08008315
 800828c:	0800831d 	.word	0x0800831d
 8008290:	08008325 	.word	0x08008325
 8008294:	0800832d 	.word	0x0800832d
 8008298:	08008335 	.word	0x08008335
 800829c:	0800833d 	.word	0x0800833d
 80082a0:	08008345 	.word	0x08008345
 80082a4:	0800834d 	.word	0x0800834d
 80082a8:	08008355 	.word	0x08008355
 80082ac:	0800835d 	.word	0x0800835d
 80082b0:	08008365 	.word	0x08008365
 80082b4:	0800836f 	.word	0x0800836f
 80082b8:	08008379 	.word	0x08008379
 80082bc:	08008383 	.word	0x08008383
 80082c0:	0800838d 	.word	0x0800838d
 80082c4:	08008397 	.word	0x08008397
 80082c8:	080083a1 	.word	0x080083a1
 80082cc:	080083ab 	.word	0x080083ab
 80082d0:	080083b5 	.word	0x080083b5
 80082d4:	080083bf 	.word	0x080083bf
 80082d8:	080083c9 	.word	0x080083c9
 80082dc:	080083d3 	.word	0x080083d3
 80082e0:	080083dd 	.word	0x080083dd
 80082e4:	080083e7 	.word	0x080083e7
 80082e8:	080083f1 	.word	0x080083f1
 80082ec:	080083fb 	.word	0x080083fb
 80082f0:	08008405 	.word	0x08008405
 80082f4:	0800840f 	.word	0x0800840f
 80082f8:	08008419 	.word	0x08008419
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008302:	e0f7      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800830a:	e0f3      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008312:	e0ef      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800831a:	e0eb      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008322:	e0e7      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800832a:	e0e3      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008332:	e0df      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800833a:	e0db      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008342:	e0d7      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800834a:	e0d3      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008352:	e0cf      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800835a:	e0cb      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008362:	e0c7      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800836c:	e0c2      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008376:	e0bd      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008380:	e0b8      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800838a:	e0b3      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008394:	e0ae      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800839e:	e0a9      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80083a8:	e0a4      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80083b2:	e09f      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80083bc:	e09a      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80083c6:	e095      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80083d0:	e090      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80083da:	e08b      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80083e4:	e086      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80083ee:	e081      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80083f8:	e07c      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008402:	e077      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800840c:	e072      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008416:	e06d      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008420:	e068      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	75fb      	strb	r3, [r7, #23]
        break;
 8008426:	e065      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d15d      	bne.n	80084f0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	2b0d      	cmp	r3, #13
 8008438:	d857      	bhi.n	80084ea <HAL_TIM_RegisterCallback+0x2a6>
 800843a:	a201      	add	r2, pc, #4	@ (adr r2, 8008440 <HAL_TIM_RegisterCallback+0x1fc>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008479 	.word	0x08008479
 8008444:	08008481 	.word	0x08008481
 8008448:	08008489 	.word	0x08008489
 800844c:	08008491 	.word	0x08008491
 8008450:	08008499 	.word	0x08008499
 8008454:	080084a1 	.word	0x080084a1
 8008458:	080084a9 	.word	0x080084a9
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084b9 	.word	0x080084b9
 8008464:	080084c1 	.word	0x080084c1
 8008468:	080084c9 	.word	0x080084c9
 800846c:	080084d1 	.word	0x080084d1
 8008470:	080084d9 	.word	0x080084d9
 8008474:	080084e1 	.word	0x080084e1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800847e:	e039      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008486:	e035      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800848e:	e031      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008496:	e02d      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800849e:	e029      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80084a6:	e025      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80084ae:	e021      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80084b6:	e01d      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80084be:	e019      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80084c6:	e015      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80084ce:	e011      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80084d6:	e00d      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80084de:	e009      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80084e8:	e004      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	75fb      	strb	r3, [r7, #23]
        break;
 80084ee:	e001      	b.n	80084f4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a4c      	ldr	r2, [pc, #304]	@ (8008648 <TIM_Base_SetConfig+0x144>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d017      	beq.n	800854c <TIM_Base_SetConfig+0x48>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008522:	d013      	beq.n	800854c <TIM_Base_SetConfig+0x48>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a49      	ldr	r2, [pc, #292]	@ (800864c <TIM_Base_SetConfig+0x148>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00f      	beq.n	800854c <TIM_Base_SetConfig+0x48>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a48      	ldr	r2, [pc, #288]	@ (8008650 <TIM_Base_SetConfig+0x14c>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00b      	beq.n	800854c <TIM_Base_SetConfig+0x48>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a47      	ldr	r2, [pc, #284]	@ (8008654 <TIM_Base_SetConfig+0x150>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d007      	beq.n	800854c <TIM_Base_SetConfig+0x48>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a46      	ldr	r2, [pc, #280]	@ (8008658 <TIM_Base_SetConfig+0x154>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d003      	beq.n	800854c <TIM_Base_SetConfig+0x48>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a45      	ldr	r2, [pc, #276]	@ (800865c <TIM_Base_SetConfig+0x158>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d108      	bne.n	800855e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a39      	ldr	r2, [pc, #228]	@ (8008648 <TIM_Base_SetConfig+0x144>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d023      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800856c:	d01f      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a36      	ldr	r2, [pc, #216]	@ (800864c <TIM_Base_SetConfig+0x148>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01b      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a35      	ldr	r2, [pc, #212]	@ (8008650 <TIM_Base_SetConfig+0x14c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d017      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a34      	ldr	r2, [pc, #208]	@ (8008654 <TIM_Base_SetConfig+0x150>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a33      	ldr	r2, [pc, #204]	@ (8008658 <TIM_Base_SetConfig+0x154>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00f      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a33      	ldr	r2, [pc, #204]	@ (8008660 <TIM_Base_SetConfig+0x15c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00b      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a32      	ldr	r2, [pc, #200]	@ (8008664 <TIM_Base_SetConfig+0x160>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d007      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a31      	ldr	r2, [pc, #196]	@ (8008668 <TIM_Base_SetConfig+0x164>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d003      	beq.n	80085ae <TIM_Base_SetConfig+0xaa>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a2c      	ldr	r2, [pc, #176]	@ (800865c <TIM_Base_SetConfig+0x158>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d108      	bne.n	80085c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a18      	ldr	r2, [pc, #96]	@ (8008648 <TIM_Base_SetConfig+0x144>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <TIM_Base_SetConfig+0x110>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008658 <TIM_Base_SetConfig+0x154>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00f      	beq.n	8008614 <TIM_Base_SetConfig+0x110>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008660 <TIM_Base_SetConfig+0x15c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00b      	beq.n	8008614 <TIM_Base_SetConfig+0x110>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a19      	ldr	r2, [pc, #100]	@ (8008664 <TIM_Base_SetConfig+0x160>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d007      	beq.n	8008614 <TIM_Base_SetConfig+0x110>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a18      	ldr	r2, [pc, #96]	@ (8008668 <TIM_Base_SetConfig+0x164>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <TIM_Base_SetConfig+0x110>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a13      	ldr	r2, [pc, #76]	@ (800865c <TIM_Base_SetConfig+0x158>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d103      	bne.n	800861c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	691a      	ldr	r2, [r3, #16]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b01      	cmp	r3, #1
 800862c:	d105      	bne.n	800863a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	f023 0201 	bic.w	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	611a      	str	r2, [r3, #16]
  }
}
 800863a:	bf00      	nop
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	40012c00 	.word	0x40012c00
 800864c:	40000400 	.word	0x40000400
 8008650:	40000800 	.word	0x40000800
 8008654:	40000c00 	.word	0x40000c00
 8008658:	40013400 	.word	0x40013400
 800865c:	40015000 	.word	0x40015000
 8008660:	40014000 	.word	0x40014000
 8008664:	40014400 	.word	0x40014400
 8008668:	40014800 	.word	0x40014800

0800866c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	f023 0201 	bic.w	r2, r3, #1
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800869a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 0303 	bic.w	r3, r3, #3
 80086a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f023 0302 	bic.w	r3, r3, #2
 80086b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a30      	ldr	r2, [pc, #192]	@ (8008788 <TIM_OC1_SetConfig+0x11c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d013      	beq.n	80086f4 <TIM_OC1_SetConfig+0x88>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a2f      	ldr	r2, [pc, #188]	@ (800878c <TIM_OC1_SetConfig+0x120>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00f      	beq.n	80086f4 <TIM_OC1_SetConfig+0x88>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a2e      	ldr	r2, [pc, #184]	@ (8008790 <TIM_OC1_SetConfig+0x124>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00b      	beq.n	80086f4 <TIM_OC1_SetConfig+0x88>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a2d      	ldr	r2, [pc, #180]	@ (8008794 <TIM_OC1_SetConfig+0x128>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d007      	beq.n	80086f4 <TIM_OC1_SetConfig+0x88>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008798 <TIM_OC1_SetConfig+0x12c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d003      	beq.n	80086f4 <TIM_OC1_SetConfig+0x88>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a2b      	ldr	r2, [pc, #172]	@ (800879c <TIM_OC1_SetConfig+0x130>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d10c      	bne.n	800870e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f023 0308 	bic.w	r3, r3, #8
 80086fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f023 0304 	bic.w	r3, r3, #4
 800870c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a1d      	ldr	r2, [pc, #116]	@ (8008788 <TIM_OC1_SetConfig+0x11c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d013      	beq.n	800873e <TIM_OC1_SetConfig+0xd2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1c      	ldr	r2, [pc, #112]	@ (800878c <TIM_OC1_SetConfig+0x120>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00f      	beq.n	800873e <TIM_OC1_SetConfig+0xd2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a1b      	ldr	r2, [pc, #108]	@ (8008790 <TIM_OC1_SetConfig+0x124>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d00b      	beq.n	800873e <TIM_OC1_SetConfig+0xd2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a1a      	ldr	r2, [pc, #104]	@ (8008794 <TIM_OC1_SetConfig+0x128>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d007      	beq.n	800873e <TIM_OC1_SetConfig+0xd2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a19      	ldr	r2, [pc, #100]	@ (8008798 <TIM_OC1_SetConfig+0x12c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d003      	beq.n	800873e <TIM_OC1_SetConfig+0xd2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a18      	ldr	r2, [pc, #96]	@ (800879c <TIM_OC1_SetConfig+0x130>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d111      	bne.n	8008762 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800874c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4313      	orrs	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	621a      	str	r2, [r3, #32]
}
 800877c:	bf00      	nop
 800877e:	371c      	adds	r7, #28
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	40012c00 	.word	0x40012c00
 800878c:	40013400 	.word	0x40013400
 8008790:	40014000 	.word	0x40014000
 8008794:	40014400 	.word	0x40014400
 8008798:	40014800 	.word	0x40014800
 800879c:	40015000 	.word	0x40015000

080087a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	f023 0210 	bic.w	r2, r3, #16
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f023 0320 	bic.w	r3, r3, #32
 80087ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a2c      	ldr	r2, [pc, #176]	@ (80088b0 <TIM_OC2_SetConfig+0x110>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d007      	beq.n	8008814 <TIM_OC2_SetConfig+0x74>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a2b      	ldr	r2, [pc, #172]	@ (80088b4 <TIM_OC2_SetConfig+0x114>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d003      	beq.n	8008814 <TIM_OC2_SetConfig+0x74>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a2a      	ldr	r2, [pc, #168]	@ (80088b8 <TIM_OC2_SetConfig+0x118>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d10d      	bne.n	8008830 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800881a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	4313      	orrs	r3, r2
 8008826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800882e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a1f      	ldr	r2, [pc, #124]	@ (80088b0 <TIM_OC2_SetConfig+0x110>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d013      	beq.n	8008860 <TIM_OC2_SetConfig+0xc0>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a1e      	ldr	r2, [pc, #120]	@ (80088b4 <TIM_OC2_SetConfig+0x114>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00f      	beq.n	8008860 <TIM_OC2_SetConfig+0xc0>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a1e      	ldr	r2, [pc, #120]	@ (80088bc <TIM_OC2_SetConfig+0x11c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00b      	beq.n	8008860 <TIM_OC2_SetConfig+0xc0>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a1d      	ldr	r2, [pc, #116]	@ (80088c0 <TIM_OC2_SetConfig+0x120>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d007      	beq.n	8008860 <TIM_OC2_SetConfig+0xc0>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a1c      	ldr	r2, [pc, #112]	@ (80088c4 <TIM_OC2_SetConfig+0x124>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d003      	beq.n	8008860 <TIM_OC2_SetConfig+0xc0>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a17      	ldr	r2, [pc, #92]	@ (80088b8 <TIM_OC2_SetConfig+0x118>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d113      	bne.n	8008888 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800886e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4313      	orrs	r3, r2
 800887a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4313      	orrs	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	621a      	str	r2, [r3, #32]
}
 80088a2:	bf00      	nop
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	40012c00 	.word	0x40012c00
 80088b4:	40013400 	.word	0x40013400
 80088b8:	40015000 	.word	0x40015000
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40014400 	.word	0x40014400
 80088c4:	40014800 	.word	0x40014800

080088c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a2b      	ldr	r2, [pc, #172]	@ (80089d4 <TIM_OC3_SetConfig+0x10c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d007      	beq.n	800893a <TIM_OC3_SetConfig+0x72>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a2a      	ldr	r2, [pc, #168]	@ (80089d8 <TIM_OC3_SetConfig+0x110>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d003      	beq.n	800893a <TIM_OC3_SetConfig+0x72>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a29      	ldr	r2, [pc, #164]	@ (80089dc <TIM_OC3_SetConfig+0x114>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d10d      	bne.n	8008956 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1e      	ldr	r2, [pc, #120]	@ (80089d4 <TIM_OC3_SetConfig+0x10c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d013      	beq.n	8008986 <TIM_OC3_SetConfig+0xbe>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a1d      	ldr	r2, [pc, #116]	@ (80089d8 <TIM_OC3_SetConfig+0x110>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00f      	beq.n	8008986 <TIM_OC3_SetConfig+0xbe>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a1d      	ldr	r2, [pc, #116]	@ (80089e0 <TIM_OC3_SetConfig+0x118>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00b      	beq.n	8008986 <TIM_OC3_SetConfig+0xbe>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a1c      	ldr	r2, [pc, #112]	@ (80089e4 <TIM_OC3_SetConfig+0x11c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d007      	beq.n	8008986 <TIM_OC3_SetConfig+0xbe>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a1b      	ldr	r2, [pc, #108]	@ (80089e8 <TIM_OC3_SetConfig+0x120>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d003      	beq.n	8008986 <TIM_OC3_SetConfig+0xbe>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a16      	ldr	r2, [pc, #88]	@ (80089dc <TIM_OC3_SetConfig+0x114>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d113      	bne.n	80089ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800898c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	621a      	str	r2, [r3, #32]
}
 80089c8:	bf00      	nop
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40013400 	.word	0x40013400
 80089dc:	40015000 	.word	0x40015000
 80089e0:	40014000 	.word	0x40014000
 80089e4:	40014400 	.word	0x40014400
 80089e8:	40014800 	.word	0x40014800

080089ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	021b      	lsls	r3, r3, #8
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	031b      	lsls	r3, r3, #12
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8008afc <TIM_OC4_SetConfig+0x110>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d007      	beq.n	8008a60 <TIM_OC4_SetConfig+0x74>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a2b      	ldr	r2, [pc, #172]	@ (8008b00 <TIM_OC4_SetConfig+0x114>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d003      	beq.n	8008a60 <TIM_OC4_SetConfig+0x74>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b04 <TIM_OC4_SetConfig+0x118>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10d      	bne.n	8008a7c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	031b      	lsls	r3, r3, #12
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8008afc <TIM_OC4_SetConfig+0x110>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d013      	beq.n	8008aac <TIM_OC4_SetConfig+0xc0>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a1e      	ldr	r2, [pc, #120]	@ (8008b00 <TIM_OC4_SetConfig+0x114>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00f      	beq.n	8008aac <TIM_OC4_SetConfig+0xc0>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8008b08 <TIM_OC4_SetConfig+0x11c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00b      	beq.n	8008aac <TIM_OC4_SetConfig+0xc0>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a1d      	ldr	r2, [pc, #116]	@ (8008b0c <TIM_OC4_SetConfig+0x120>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d007      	beq.n	8008aac <TIM_OC4_SetConfig+0xc0>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8008b10 <TIM_OC4_SetConfig+0x124>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d003      	beq.n	8008aac <TIM_OC4_SetConfig+0xc0>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a17      	ldr	r2, [pc, #92]	@ (8008b04 <TIM_OC4_SetConfig+0x118>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d113      	bne.n	8008ad4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ab2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008aba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	019b      	lsls	r3, r3, #6
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	019b      	lsls	r3, r3, #6
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	621a      	str	r2, [r3, #32]
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40013400 	.word	0x40013400
 8008b04:	40015000 	.word	0x40015000
 8008b08:	40014000 	.word	0x40014000
 8008b0c:	40014400 	.word	0x40014400
 8008b10:	40014800 	.word	0x40014800

08008b14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	041b      	lsls	r3, r3, #16
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a19      	ldr	r2, [pc, #100]	@ (8008bd0 <TIM_OC5_SetConfig+0xbc>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d013      	beq.n	8008b96 <TIM_OC5_SetConfig+0x82>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a18      	ldr	r2, [pc, #96]	@ (8008bd4 <TIM_OC5_SetConfig+0xc0>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00f      	beq.n	8008b96 <TIM_OC5_SetConfig+0x82>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a17      	ldr	r2, [pc, #92]	@ (8008bd8 <TIM_OC5_SetConfig+0xc4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00b      	beq.n	8008b96 <TIM_OC5_SetConfig+0x82>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a16      	ldr	r2, [pc, #88]	@ (8008bdc <TIM_OC5_SetConfig+0xc8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d007      	beq.n	8008b96 <TIM_OC5_SetConfig+0x82>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a15      	ldr	r2, [pc, #84]	@ (8008be0 <TIM_OC5_SetConfig+0xcc>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d003      	beq.n	8008b96 <TIM_OC5_SetConfig+0x82>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a14      	ldr	r2, [pc, #80]	@ (8008be4 <TIM_OC5_SetConfig+0xd0>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d109      	bne.n	8008baa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	621a      	str	r2, [r3, #32]
}
 8008bc4:	bf00      	nop
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	40012c00 	.word	0x40012c00
 8008bd4:	40013400 	.word	0x40013400
 8008bd8:	40014000 	.word	0x40014000
 8008bdc:	40014400 	.word	0x40014400
 8008be0:	40014800 	.word	0x40014800
 8008be4:	40015000 	.word	0x40015000

08008be8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	021b      	lsls	r3, r3, #8
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	051b      	lsls	r3, r3, #20
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ca8 <TIM_OC6_SetConfig+0xc0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d013      	beq.n	8008c6c <TIM_OC6_SetConfig+0x84>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a19      	ldr	r2, [pc, #100]	@ (8008cac <TIM_OC6_SetConfig+0xc4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00f      	beq.n	8008c6c <TIM_OC6_SetConfig+0x84>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a18      	ldr	r2, [pc, #96]	@ (8008cb0 <TIM_OC6_SetConfig+0xc8>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d00b      	beq.n	8008c6c <TIM_OC6_SetConfig+0x84>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a17      	ldr	r2, [pc, #92]	@ (8008cb4 <TIM_OC6_SetConfig+0xcc>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d007      	beq.n	8008c6c <TIM_OC6_SetConfig+0x84>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a16      	ldr	r2, [pc, #88]	@ (8008cb8 <TIM_OC6_SetConfig+0xd0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <TIM_OC6_SetConfig+0x84>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a15      	ldr	r2, [pc, #84]	@ (8008cbc <TIM_OC6_SetConfig+0xd4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d109      	bne.n	8008c80 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	029b      	lsls	r3, r3, #10
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40012c00 	.word	0x40012c00
 8008cac:	40013400 	.word	0x40013400
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40014400 	.word	0x40014400
 8008cb8:	40014800 	.word	0x40014800
 8008cbc:	40015000 	.word	0x40015000

08008cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f023 0201 	bic.w	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 030a 	bic.w	r3, r3, #10
 8008cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b087      	sub	sp, #28
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	f023 0210 	bic.w	r2, r3, #16
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	031b      	lsls	r3, r3, #12
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	621a      	str	r2, [r3, #32]
}
 8008d72:	bf00      	nop
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	f043 0307 	orr.w	r3, r3, #7
 8008da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	609a      	str	r2, [r3, #8]
}
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	021a      	lsls	r2, r3, #8
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	609a      	str	r2, [r3, #8]
}
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f003 031f 	and.w	r3, r3, #31
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a1a      	ldr	r2, [r3, #32]
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	43db      	mvns	r3, r3
 8008e1a:	401a      	ands	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a1a      	ldr	r2, [r3, #32]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f003 031f 	and.w	r3, r3, #31
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e30:	431a      	orrs	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	621a      	str	r2, [r3, #32]
}
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
	...

08008e44 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a26      	ldr	r2, [pc, #152]	@ (8008ee8 <TIM_ResetCallback+0xa4>)
 8008e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a25      	ldr	r2, [pc, #148]	@ (8008eec <TIM_ResetCallback+0xa8>)
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a24      	ldr	r2, [pc, #144]	@ (8008ef0 <TIM_ResetCallback+0xac>)
 8008e60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a23      	ldr	r2, [pc, #140]	@ (8008ef4 <TIM_ResetCallback+0xb0>)
 8008e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a22      	ldr	r2, [pc, #136]	@ (8008ef8 <TIM_ResetCallback+0xb4>)
 8008e70:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a21      	ldr	r2, [pc, #132]	@ (8008efc <TIM_ResetCallback+0xb8>)
 8008e78:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a20      	ldr	r2, [pc, #128]	@ (8008f00 <TIM_ResetCallback+0xbc>)
 8008e80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a1f      	ldr	r2, [pc, #124]	@ (8008f04 <TIM_ResetCallback+0xc0>)
 8008e88:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8008f08 <TIM_ResetCallback+0xc4>)
 8008e90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a1d      	ldr	r2, [pc, #116]	@ (8008f0c <TIM_ResetCallback+0xc8>)
 8008e98:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8008f10 <TIM_ResetCallback+0xcc>)
 8008ea0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8008f14 <TIM_ResetCallback+0xd0>)
 8008ea8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a1a      	ldr	r2, [pc, #104]	@ (8008f18 <TIM_ResetCallback+0xd4>)
 8008eb0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a19      	ldr	r2, [pc, #100]	@ (8008f1c <TIM_ResetCallback+0xd8>)
 8008eb8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a18      	ldr	r2, [pc, #96]	@ (8008f20 <TIM_ResetCallback+0xdc>)
 8008ec0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a17      	ldr	r2, [pc, #92]	@ (8008f24 <TIM_ResetCallback+0xe0>)
 8008ec8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a16      	ldr	r2, [pc, #88]	@ (8008f28 <TIM_ResetCallback+0xe4>)
 8008ed0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a15      	ldr	r2, [pc, #84]	@ (8008f2c <TIM_ResetCallback+0xe8>)
 8008ed8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	08002c21 	.word	0x08002c21
 8008eec:	08008191 	.word	0x08008191
 8008ef0:	08008209 	.word	0x08008209
 8008ef4:	0800821d 	.word	0x0800821d
 8008ef8:	080081b9 	.word	0x080081b9
 8008efc:	080081cd 	.word	0x080081cd
 8008f00:	080081a5 	.word	0x080081a5
 8008f04:	080081e1 	.word	0x080081e1
 8008f08:	080081f5 	.word	0x080081f5
 8008f0c:	08008231 	.word	0x08008231
 8008f10:	08009185 	.word	0x08009185
 8008f14:	08009199 	.word	0x08009199
 8008f18:	080091ad 	.word	0x080091ad
 8008f1c:	080091c1 	.word	0x080091c1
 8008f20:	080091d5 	.word	0x080091d5
 8008f24:	080091e9 	.word	0x080091e9
 8008f28:	080091fd 	.word	0x080091fd
 8008f2c:	08009211 	.word	0x08009211

08008f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e074      	b.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a34      	ldr	r2, [pc, #208]	@ (8009040 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d009      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a33      	ldr	r2, [pc, #204]	@ (8009044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d004      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a31      	ldr	r2, [pc, #196]	@ (8009048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d108      	bne.n	8008f98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a21      	ldr	r2, [pc, #132]	@ (8009040 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d022      	beq.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fc8:	d01d      	beq.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a1f      	ldr	r2, [pc, #124]	@ (800904c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d018      	beq.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009050 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d013      	beq.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8009054 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d00e      	beq.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a15      	ldr	r2, [pc, #84]	@ (8009044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d009      	beq.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a18      	ldr	r2, [pc, #96]	@ (8009058 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d004      	beq.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a11      	ldr	r2, [pc, #68]	@ (8009048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d10c      	bne.n	8009020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800900c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	4313      	orrs	r3, r2
 8009016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	40012c00 	.word	0x40012c00
 8009044:	40013400 	.word	0x40013400
 8009048:	40015000 	.word	0x40015000
 800904c:	40000400 	.word	0x40000400
 8009050:	40000800 	.word	0x40000800
 8009054:	40000c00 	.word	0x40000c00
 8009058:	40014000 	.word	0x40014000

0800905c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009074:	2302      	movs	r3, #2
 8009076:	e078      	b.n	800916a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	041b      	lsls	r3, r3, #16
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1c      	ldr	r2, [pc, #112]	@ (8009178 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d009      	beq.n	800911e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1b      	ldr	r2, [pc, #108]	@ (800917c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d004      	beq.n	800911e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a19      	ldr	r2, [pc, #100]	@ (8009180 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d11c      	bne.n	8009158 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009128:	051b      	lsls	r3, r3, #20
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009154:	4313      	orrs	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40012c00 	.word	0x40012c00
 800917c:	40013400 	.word	0x40013400
 8009180:	40015000 	.word	0x40015000

08009184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e050      	b.n	80092d8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800923c:	2b00      	cmp	r3, #0
 800923e:	d114      	bne.n	800926a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fe37 	bl	8009ebc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d103      	bne.n	8009260 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a21      	ldr	r2, [pc, #132]	@ (80092e0 <HAL_UART_Init+0xbc>)
 800925c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2224      	movs	r2, #36	@ 0x24
 800926e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 0201 	bic.w	r2, r2, #1
 8009280:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 f964 	bl	800a558 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fe65 	bl	8009f60 <UART_SetConfig>
 8009296:	4603      	mov	r3, r0
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e01b      	b.n	80092d8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689a      	ldr	r2, [r3, #8]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f042 0201 	orr.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f9e3 	bl	800a69c <UART_CheckIdleState>
 80092d6:	4603      	mov	r3, r0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	08003a49 	.word	0x08003a49

080092e4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	460b      	mov	r3, r1
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d109      	bne.n	8009310 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009302:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e09c      	b.n	800944a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009316:	2b20      	cmp	r3, #32
 8009318:	d16c      	bne.n	80093f4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800931a:	7afb      	ldrb	r3, [r7, #11]
 800931c:	2b0c      	cmp	r3, #12
 800931e:	d85e      	bhi.n	80093de <HAL_UART_RegisterCallback+0xfa>
 8009320:	a201      	add	r2, pc, #4	@ (adr r2, 8009328 <HAL_UART_RegisterCallback+0x44>)
 8009322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009326:	bf00      	nop
 8009328:	0800935d 	.word	0x0800935d
 800932c:	08009367 	.word	0x08009367
 8009330:	08009371 	.word	0x08009371
 8009334:	0800937b 	.word	0x0800937b
 8009338:	08009385 	.word	0x08009385
 800933c:	0800938f 	.word	0x0800938f
 8009340:	08009399 	.word	0x08009399
 8009344:	080093a3 	.word	0x080093a3
 8009348:	080093ad 	.word	0x080093ad
 800934c:	080093b7 	.word	0x080093b7
 8009350:	080093c1 	.word	0x080093c1
 8009354:	080093cb 	.word	0x080093cb
 8009358:	080093d5 	.word	0x080093d5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009364:	e070      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800936e:	e06b      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009378:	e066      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009382:	e061      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800938c:	e05c      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009396:	e057      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80093a0:	e052      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80093aa:	e04d      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80093b4:	e048      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80093be:	e043      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80093c8:	e03e      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80093d2:	e039      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80093dc:	e034      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	75fb      	strb	r3, [r7, #23]
        break;
 80093f2:	e029      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d11a      	bne.n	8009434 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80093fe:	7afb      	ldrb	r3, [r7, #11]
 8009400:	2b0b      	cmp	r3, #11
 8009402:	d002      	beq.n	800940a <HAL_UART_RegisterCallback+0x126>
 8009404:	2b0c      	cmp	r3, #12
 8009406:	d005      	beq.n	8009414 <HAL_UART_RegisterCallback+0x130>
 8009408:	e009      	b.n	800941e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009412:	e019      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800941c:	e014      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009424:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]
        break;
 8009432:	e009      	b.n	8009448 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800943a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009448:	7dfb      	ldrb	r3, [r7, #23]
}
 800944a:	4618      	mov	r0, r3
 800944c:	371c      	adds	r7, #28
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop

08009458 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08a      	sub	sp, #40	@ 0x28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800946c:	2b20      	cmp	r3, #32
 800946e:	d137      	bne.n	80094e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_UART_Receive_IT+0x24>
 8009476:	88fb      	ldrh	r3, [r7, #6]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e030      	b.n	80094e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a18      	ldr	r2, [pc, #96]	@ (80094ec <HAL_UART_Receive_IT+0x94>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d01f      	beq.n	80094d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d018      	beq.n	80094d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	613b      	str	r3, [r7, #16]
   return(result);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	461a      	mov	r2, r3
 80094ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094bc:	623b      	str	r3, [r7, #32]
 80094be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	69f9      	ldr	r1, [r7, #28]
 80094c2:	6a3a      	ldr	r2, [r7, #32]
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e6      	bne.n	800949e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094d0:	88fb      	ldrh	r3, [r7, #6]
 80094d2:	461a      	mov	r2, r3
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f001 f9f8 	bl	800a8cc <UART_Start_Receive_IT>
 80094dc:	4603      	mov	r3, r0
 80094de:	e000      	b.n	80094e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094e0:	2302      	movs	r3, #2
  }
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3728      	adds	r7, #40	@ 0x28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	40008000 	.word	0x40008000

080094f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	@ 0x28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	4613      	mov	r3, r2
 80094fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009504:	2b20      	cmp	r3, #32
 8009506:	d167      	bne.n	80095d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <HAL_UART_Transmit_DMA+0x24>
 800950e:	88fb      	ldrh	r3, [r7, #6]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e060      	b.n	80095da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	88fa      	ldrh	r2, [r7, #6]
 8009522:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	88fa      	ldrh	r2, [r7, #6]
 800952a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2221      	movs	r2, #33	@ 0x21
 800953a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d028      	beq.n	8009598 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800954a:	4a26      	ldr	r2, [pc, #152]	@ (80095e4 <HAL_UART_Transmit_DMA+0xf4>)
 800954c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009552:	4a25      	ldr	r2, [pc, #148]	@ (80095e8 <HAL_UART_Transmit_DMA+0xf8>)
 8009554:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800955a:	4a24      	ldr	r2, [pc, #144]	@ (80095ec <HAL_UART_Transmit_DMA+0xfc>)
 800955c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009562:	2200      	movs	r2, #0
 8009564:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956e:	4619      	mov	r1, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3328      	adds	r3, #40	@ 0x28
 8009576:	461a      	mov	r2, r3
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	f7fc f801 	bl	8005580 <HAL_DMA_Start_IT>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d009      	beq.n	8009598 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2210      	movs	r2, #16
 8009588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2220      	movs	r2, #32
 8009590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e020      	b.n	80095da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2240      	movs	r2, #64	@ 0x40
 800959e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3308      	adds	r3, #8
 80095a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	e853 3f00 	ldrex	r3, [r3]
 80095ae:	613b      	str	r3, [r7, #16]
   return(result);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c0:	623a      	str	r2, [r7, #32]
 80095c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	69f9      	ldr	r1, [r7, #28]
 80095c6:	6a3a      	ldr	r2, [r7, #32]
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e5      	bne.n	80095a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e000      	b.n	80095da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80095d8:	2302      	movs	r3, #2
  }
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3728      	adds	r7, #40	@ 0x28
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	0800ac5f 	.word	0x0800ac5f
 80095e8:	0800acfd 	.word	0x0800acfd
 80095ec:	0800ad1d 	.word	0x0800ad1d

080095f0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b09a      	sub	sp, #104	@ 0x68
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800960c:	667b      	str	r3, [r7, #100]	@ 0x64
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009616:	657b      	str	r3, [r7, #84]	@ 0x54
 8009618:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800961c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e6      	bne.n	80095f8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3308      	adds	r3, #8
 8009630:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	663b      	str	r3, [r7, #96]	@ 0x60
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800964e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009654:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800965c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e3      	bne.n	800962a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009666:	2b01      	cmp	r3, #1
 8009668:	d118      	bne.n	800969c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	61fb      	str	r3, [r7, #28]
   return(result);
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	f023 0310 	bic.w	r3, r3, #16
 800967e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800968a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800968e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e6      	bne.n	800966a <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096a6:	2b40      	cmp	r3, #64	@ 0x40
 80096a8:	d13b      	bne.n	8009722 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3308      	adds	r3, #8
 80096b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3308      	adds	r3, #8
 80096c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096ca:	61ba      	str	r2, [r7, #24]
 80096cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	613b      	str	r3, [r7, #16]
   return(result);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e5      	bne.n	80096aa <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01c      	beq.n	8009722 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ee:	2200      	movs	r2, #0
 80096f0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fb ffbc 	bl	8005676 <HAL_DMA_Abort>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00e      	beq.n	8009722 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970a:	4618      	mov	r0, r3
 800970c:	f7fc f922 	bl	8005954 <HAL_DMA_GetError>
 8009710:	4603      	mov	r3, r0
 8009712:	2b20      	cmp	r3, #32
 8009714:	d105      	bne.n	8009722 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2210      	movs	r2, #16
 800971a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e017      	b.n	8009752 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	220f      	movs	r2, #15
 8009730:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699a      	ldr	r2, [r3, #24]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f042 0208 	orr.w	r2, r2, #8
 8009740:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3768      	adds	r7, #104	@ 0x68
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b0ba      	sub	sp, #232	@ 0xe8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009782:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009786:	f640 030f 	movw	r3, #2063	@ 0x80f
 800978a:	4013      	ands	r3, r2
 800978c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11b      	bne.n	80097d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d015      	beq.n	80097d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a8:	f003 0320 	and.w	r3, r3, #32
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d105      	bne.n	80097bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d009      	beq.n	80097d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 8312 	beq.w	8009dea <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
      }
      return;
 80097ce:	e30c      	b.n	8009dea <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 8129 	beq.w	8009a2c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097de:	4b90      	ldr	r3, [pc, #576]	@ (8009a20 <HAL_UART_IRQHandler+0x2c4>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d106      	bne.n	80097f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80097ea:	4b8e      	ldr	r3, [pc, #568]	@ (8009a24 <HAL_UART_IRQHandler+0x2c8>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 811c 	beq.w	8009a2c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d011      	beq.n	8009824 <HAL_UART_IRQHandler+0xc8>
 8009800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2201      	movs	r2, #1
 8009812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981a:	f043 0201 	orr.w	r2, r3, #1
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d011      	beq.n	8009854 <HAL_UART_IRQHandler+0xf8>
 8009830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00b      	beq.n	8009854 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2202      	movs	r2, #2
 8009842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800984a:	f043 0204 	orr.w	r2, r3, #4
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d011      	beq.n	8009884 <HAL_UART_IRQHandler+0x128>
 8009860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2204      	movs	r2, #4
 8009872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800987a:	f043 0202 	orr.w	r2, r3, #2
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009888:	f003 0308 	and.w	r3, r3, #8
 800988c:	2b00      	cmp	r3, #0
 800988e:	d017      	beq.n	80098c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009894:	f003 0320 	and.w	r3, r3, #32
 8009898:	2b00      	cmp	r3, #0
 800989a:	d105      	bne.n	80098a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800989c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80098a0:	4b5f      	ldr	r3, [pc, #380]	@ (8009a20 <HAL_UART_IRQHandler+0x2c4>)
 80098a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00b      	beq.n	80098c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2208      	movs	r2, #8
 80098ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098b6:	f043 0208 	orr.w	r2, r3, #8
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d012      	beq.n	80098f2 <HAL_UART_IRQHandler+0x196>
 80098cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00c      	beq.n	80098f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80098e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098e8:	f043 0220 	orr.w	r2, r3, #32
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8278 	beq.w	8009dee <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d013      	beq.n	8009932 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800990a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d105      	bne.n	8009922 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800991a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d007      	beq.n	8009932 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009938:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009946:	2b40      	cmp	r3, #64	@ 0x40
 8009948:	d005      	beq.n	8009956 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800994a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800994e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009952:	2b00      	cmp	r3, #0
 8009954:	d058      	beq.n	8009a08 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f001 f91b 	bl	800ab92 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009966:	2b40      	cmp	r3, #64	@ 0x40
 8009968:	d148      	bne.n	80099fc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009996:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800999a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80099a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80099ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1d9      	bne.n	800996a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d017      	beq.n	80099f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c6:	4a18      	ldr	r2, [pc, #96]	@ (8009a28 <HAL_UART_IRQHandler+0x2cc>)
 80099c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fb fea9 	bl	8005728 <HAL_DMA_Abort_IT>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d01f      	beq.n	8009a1c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80099ea:	4610      	mov	r0, r2
 80099ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ee:	e015      	b.n	8009a1c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099fa:	e00f      	b.n	8009a1c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a06:	e009      	b.n	8009a1c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009a1a:	e1e8      	b.n	8009dee <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a1c:	bf00      	nop
    return;
 8009a1e:	e1e6      	b.n	8009dee <HAL_UART_IRQHandler+0x692>
 8009a20:	10000001 	.word	0x10000001
 8009a24:	04000120 	.word	0x04000120
 8009a28:	0800ada1 	.word	0x0800ada1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	f040 8176 	bne.w	8009d22 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a3a:	f003 0310 	and.w	r3, r3, #16
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 816f 	beq.w	8009d22 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a48:	f003 0310 	and.w	r3, r3, #16
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 8168 	beq.w	8009d22 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2210      	movs	r2, #16
 8009a58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a64:	2b40      	cmp	r3, #64	@ 0x40
 8009a66:	f040 80dc 	bne.w	8009c22 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 80b1 	beq.w	8009be4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	f080 80a9 	bcs.w	8009be4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f040 8087 	bne.w	8009bbe <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ade:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1da      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b0c:	f023 0301 	bic.w	r3, r3, #1
 8009b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e1      	bne.n	8009afa <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3308      	adds	r3, #8
 8009b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e3      	bne.n	8009b36 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b8c:	f023 0310 	bic.w	r3, r3, #16
 8009b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ba0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e4      	bne.n	8009b7c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fb fd5c 	bl	8005676 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009bd6:	b292      	uxth	r2, r2
 8009bd8:	1a8a      	subs	r2, r1, r2
 8009bda:	b292      	uxth	r2, r2
 8009bdc:	4611      	mov	r1, r2
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009be2:	e106      	b.n	8009df2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	f040 80ff 	bne.w	8009df2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0320 	and.w	r3, r3, #32
 8009c02:	2b20      	cmp	r3, #32
 8009c04:	f040 80f5 	bne.w	8009df2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	4798      	blx	r3
      return;
 8009c20:	e0e7      	b.n	8009df2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 80d9 	beq.w	8009df6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 80d4 	beq.w	8009df6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	e853 3f00 	ldrex	r3, [r3]
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c78:	e841 2300 	strex	r3, r2, [r1]
 8009c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e4      	bne.n	8009c4e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3308      	adds	r3, #8
 8009c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	e853 3f00 	ldrex	r3, [r3]
 8009c92:	623b      	str	r3, [r7, #32]
   return(result);
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c9a:	f023 0301 	bic.w	r3, r3, #1
 8009c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009cac:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e1      	bne.n	8009c84 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f023 0310 	bic.w	r3, r3, #16
 8009ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009cf6:	61fb      	str	r3, [r7, #28]
 8009cf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	69b9      	ldr	r1, [r7, #24]
 8009cfc:	69fa      	ldr	r2, [r7, #28]
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	617b      	str	r3, [r7, #20]
   return(result);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e4      	bne.n	8009cd4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009d16:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d20:	e069      	b.n	8009df6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d010      	beq.n	8009d50 <HAL_UART_IRQHandler+0x5f4>
 8009d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009d42:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d4e:	e055      	b.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d014      	beq.n	8009d86 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d105      	bne.n	8009d74 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d008      	beq.n	8009d86 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d03e      	beq.n	8009dfa <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	4798      	blx	r3
    }
    return;
 8009d84:	e039      	b.n	8009dfa <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d009      	beq.n	8009da6 <HAL_UART_IRQHandler+0x64a>
 8009d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f001 f812 	bl	800adc8 <UART_EndTransmit_IT>
    return;
 8009da4:	e02a      	b.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00b      	beq.n	8009dca <HAL_UART_IRQHandler+0x66e>
 8009db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009db6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dc8:	e018      	b.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d012      	beq.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
 8009dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da0e      	bge.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009de8:	e008      	b.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
      return;
 8009dea:	bf00      	nop
 8009dec:	e006      	b.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
    return;
 8009dee:	bf00      	nop
 8009df0:	e004      	b.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
      return;
 8009df2:	bf00      	nop
 8009df4:	e002      	b.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
      return;
 8009df6:	bf00      	nop
 8009df8:	e000      	b.n	8009dfc <HAL_UART_IRQHandler+0x6a0>
    return;
 8009dfa:	bf00      	nop
  }
}
 8009dfc:	37e8      	adds	r7, #232	@ 0xe8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop

08009e04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f30 <UART_InitCallbacksToDefault+0x74>)
 8009ec8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a19      	ldr	r2, [pc, #100]	@ (8009f34 <UART_InitCallbacksToDefault+0x78>)
 8009ed0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a18      	ldr	r2, [pc, #96]	@ (8009f38 <UART_InitCallbacksToDefault+0x7c>)
 8009ed8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a17      	ldr	r2, [pc, #92]	@ (8009f3c <UART_InitCallbacksToDefault+0x80>)
 8009ee0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a16      	ldr	r2, [pc, #88]	@ (8009f40 <UART_InitCallbacksToDefault+0x84>)
 8009ee8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a15      	ldr	r2, [pc, #84]	@ (8009f44 <UART_InitCallbacksToDefault+0x88>)
 8009ef0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a14      	ldr	r2, [pc, #80]	@ (8009f48 <UART_InitCallbacksToDefault+0x8c>)
 8009ef8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a13      	ldr	r2, [pc, #76]	@ (8009f4c <UART_InitCallbacksToDefault+0x90>)
 8009f00:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a12      	ldr	r2, [pc, #72]	@ (8009f50 <UART_InitCallbacksToDefault+0x94>)
 8009f08:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a11      	ldr	r2, [pc, #68]	@ (8009f54 <UART_InitCallbacksToDefault+0x98>)
 8009f10:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a10      	ldr	r2, [pc, #64]	@ (8009f58 <UART_InitCallbacksToDefault+0x9c>)
 8009f18:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8009f5c <UART_InitCallbacksToDefault+0xa0>)
 8009f20:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	08009e19 	.word	0x08009e19
 8009f34:	08009e05 	.word	0x08009e05
 8009f38:	08009e41 	.word	0x08009e41
 8009f3c:	08009e2d 	.word	0x08009e2d
 8009f40:	08009e55 	.word	0x08009e55
 8009f44:	08009e69 	.word	0x08009e69
 8009f48:	08009e7d 	.word	0x08009e7d
 8009f4c:	08009e91 	.word	0x08009e91
 8009f50:	0800b88d 	.word	0x0800b88d
 8009f54:	0800b8a1 	.word	0x0800b8a1
 8009f58:	0800b8b5 	.word	0x0800b8b5
 8009f5c:	08009ea5 	.word	0x08009ea5

08009f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f64:	b08c      	sub	sp, #48	@ 0x30
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	689a      	ldr	r2, [r3, #8]
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	4baa      	ldr	r3, [pc, #680]	@ (800a238 <UART_SetConfig+0x2d8>)
 8009f90:	4013      	ands	r3, r2
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	6812      	ldr	r2, [r2, #0]
 8009f96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a9f      	ldr	r2, [pc, #636]	@ (800a23c <UART_SetConfig+0x2dc>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d004      	beq.n	8009fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009fd6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fe0:	430b      	orrs	r3, r1
 8009fe2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fea:	f023 010f 	bic.w	r1, r3, #15
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a90      	ldr	r2, [pc, #576]	@ (800a240 <UART_SetConfig+0x2e0>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d125      	bne.n	800a050 <UART_SetConfig+0xf0>
 800a004:	4b8f      	ldr	r3, [pc, #572]	@ (800a244 <UART_SetConfig+0x2e4>)
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a00a:	f003 0303 	and.w	r3, r3, #3
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d81a      	bhi.n	800a048 <UART_SetConfig+0xe8>
 800a012:	a201      	add	r2, pc, #4	@ (adr r2, 800a018 <UART_SetConfig+0xb8>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a029 	.word	0x0800a029
 800a01c:	0800a039 	.word	0x0800a039
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a041 	.word	0x0800a041
 800a028:	2301      	movs	r3, #1
 800a02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02e:	e116      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a030:	2302      	movs	r3, #2
 800a032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a036:	e112      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a038:	2304      	movs	r3, #4
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03e:	e10e      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a040:	2308      	movs	r3, #8
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a046:	e10a      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a048:	2310      	movs	r3, #16
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04e:	e106      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a7c      	ldr	r2, [pc, #496]	@ (800a248 <UART_SetConfig+0x2e8>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d138      	bne.n	800a0cc <UART_SetConfig+0x16c>
 800a05a:	4b7a      	ldr	r3, [pc, #488]	@ (800a244 <UART_SetConfig+0x2e4>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a060:	f003 030c 	and.w	r3, r3, #12
 800a064:	2b0c      	cmp	r3, #12
 800a066:	d82d      	bhi.n	800a0c4 <UART_SetConfig+0x164>
 800a068:	a201      	add	r2, pc, #4	@ (adr r2, 800a070 <UART_SetConfig+0x110>)
 800a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06e:	bf00      	nop
 800a070:	0800a0a5 	.word	0x0800a0a5
 800a074:	0800a0c5 	.word	0x0800a0c5
 800a078:	0800a0c5 	.word	0x0800a0c5
 800a07c:	0800a0c5 	.word	0x0800a0c5
 800a080:	0800a0b5 	.word	0x0800a0b5
 800a084:	0800a0c5 	.word	0x0800a0c5
 800a088:	0800a0c5 	.word	0x0800a0c5
 800a08c:	0800a0c5 	.word	0x0800a0c5
 800a090:	0800a0ad 	.word	0x0800a0ad
 800a094:	0800a0c5 	.word	0x0800a0c5
 800a098:	0800a0c5 	.word	0x0800a0c5
 800a09c:	0800a0c5 	.word	0x0800a0c5
 800a0a0:	0800a0bd 	.word	0x0800a0bd
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0aa:	e0d8      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b2:	e0d4      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a0b4:	2304      	movs	r3, #4
 800a0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ba:	e0d0      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a0bc:	2308      	movs	r3, #8
 800a0be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0c2:	e0cc      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ca:	e0c8      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a5e      	ldr	r2, [pc, #376]	@ (800a24c <UART_SetConfig+0x2ec>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d125      	bne.n	800a122 <UART_SetConfig+0x1c2>
 800a0d6:	4b5b      	ldr	r3, [pc, #364]	@ (800a244 <UART_SetConfig+0x2e4>)
 800a0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a0e0:	2b30      	cmp	r3, #48	@ 0x30
 800a0e2:	d016      	beq.n	800a112 <UART_SetConfig+0x1b2>
 800a0e4:	2b30      	cmp	r3, #48	@ 0x30
 800a0e6:	d818      	bhi.n	800a11a <UART_SetConfig+0x1ba>
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	d00a      	beq.n	800a102 <UART_SetConfig+0x1a2>
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	d814      	bhi.n	800a11a <UART_SetConfig+0x1ba>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <UART_SetConfig+0x19a>
 800a0f4:	2b10      	cmp	r3, #16
 800a0f6:	d008      	beq.n	800a10a <UART_SetConfig+0x1aa>
 800a0f8:	e00f      	b.n	800a11a <UART_SetConfig+0x1ba>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a100:	e0ad      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a102:	2302      	movs	r3, #2
 800a104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a108:	e0a9      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a10a:	2304      	movs	r3, #4
 800a10c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a110:	e0a5      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a112:	2308      	movs	r3, #8
 800a114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a118:	e0a1      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a11a:	2310      	movs	r3, #16
 800a11c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a120:	e09d      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a4a      	ldr	r2, [pc, #296]	@ (800a250 <UART_SetConfig+0x2f0>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d125      	bne.n	800a178 <UART_SetConfig+0x218>
 800a12c:	4b45      	ldr	r3, [pc, #276]	@ (800a244 <UART_SetConfig+0x2e4>)
 800a12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a132:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a136:	2bc0      	cmp	r3, #192	@ 0xc0
 800a138:	d016      	beq.n	800a168 <UART_SetConfig+0x208>
 800a13a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a13c:	d818      	bhi.n	800a170 <UART_SetConfig+0x210>
 800a13e:	2b80      	cmp	r3, #128	@ 0x80
 800a140:	d00a      	beq.n	800a158 <UART_SetConfig+0x1f8>
 800a142:	2b80      	cmp	r3, #128	@ 0x80
 800a144:	d814      	bhi.n	800a170 <UART_SetConfig+0x210>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <UART_SetConfig+0x1f0>
 800a14a:	2b40      	cmp	r3, #64	@ 0x40
 800a14c:	d008      	beq.n	800a160 <UART_SetConfig+0x200>
 800a14e:	e00f      	b.n	800a170 <UART_SetConfig+0x210>
 800a150:	2300      	movs	r3, #0
 800a152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a156:	e082      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a158:	2302      	movs	r3, #2
 800a15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a15e:	e07e      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a166:	e07a      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a16e:	e076      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a176:	e072      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a35      	ldr	r2, [pc, #212]	@ (800a254 <UART_SetConfig+0x2f4>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d12a      	bne.n	800a1d8 <UART_SetConfig+0x278>
 800a182:	4b30      	ldr	r3, [pc, #192]	@ (800a244 <UART_SetConfig+0x2e4>)
 800a184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a18c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a190:	d01a      	beq.n	800a1c8 <UART_SetConfig+0x268>
 800a192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a196:	d81b      	bhi.n	800a1d0 <UART_SetConfig+0x270>
 800a198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a19c:	d00c      	beq.n	800a1b8 <UART_SetConfig+0x258>
 800a19e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a2:	d815      	bhi.n	800a1d0 <UART_SetConfig+0x270>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <UART_SetConfig+0x250>
 800a1a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1ac:	d008      	beq.n	800a1c0 <UART_SetConfig+0x260>
 800a1ae:	e00f      	b.n	800a1d0 <UART_SetConfig+0x270>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1b6:	e052      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1be:	e04e      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c6:	e04a      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ce:	e046      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d6:	e042      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a17      	ldr	r2, [pc, #92]	@ (800a23c <UART_SetConfig+0x2dc>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d13a      	bne.n	800a258 <UART_SetConfig+0x2f8>
 800a1e2:	4b18      	ldr	r3, [pc, #96]	@ (800a244 <UART_SetConfig+0x2e4>)
 800a1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a1ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1f0:	d01a      	beq.n	800a228 <UART_SetConfig+0x2c8>
 800a1f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1f6:	d81b      	bhi.n	800a230 <UART_SetConfig+0x2d0>
 800a1f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1fc:	d00c      	beq.n	800a218 <UART_SetConfig+0x2b8>
 800a1fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a202:	d815      	bhi.n	800a230 <UART_SetConfig+0x2d0>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <UART_SetConfig+0x2b0>
 800a208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a20c:	d008      	beq.n	800a220 <UART_SetConfig+0x2c0>
 800a20e:	e00f      	b.n	800a230 <UART_SetConfig+0x2d0>
 800a210:	2300      	movs	r3, #0
 800a212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a216:	e022      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a218:	2302      	movs	r3, #2
 800a21a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a21e:	e01e      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a220:	2304      	movs	r3, #4
 800a222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a226:	e01a      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a228:	2308      	movs	r3, #8
 800a22a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a22e:	e016      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a230:	2310      	movs	r3, #16
 800a232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a236:	e012      	b.n	800a25e <UART_SetConfig+0x2fe>
 800a238:	cfff69f3 	.word	0xcfff69f3
 800a23c:	40008000 	.word	0x40008000
 800a240:	40013800 	.word	0x40013800
 800a244:	40021000 	.word	0x40021000
 800a248:	40004400 	.word	0x40004400
 800a24c:	40004800 	.word	0x40004800
 800a250:	40004c00 	.word	0x40004c00
 800a254:	40005000 	.word	0x40005000
 800a258:	2310      	movs	r3, #16
 800a25a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4aae      	ldr	r2, [pc, #696]	@ (800a51c <UART_SetConfig+0x5bc>)
 800a264:	4293      	cmp	r3, r2
 800a266:	f040 8097 	bne.w	800a398 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a26a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a26e:	2b08      	cmp	r3, #8
 800a270:	d823      	bhi.n	800a2ba <UART_SetConfig+0x35a>
 800a272:	a201      	add	r2, pc, #4	@ (adr r2, 800a278 <UART_SetConfig+0x318>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a29d 	.word	0x0800a29d
 800a27c:	0800a2bb 	.word	0x0800a2bb
 800a280:	0800a2a5 	.word	0x0800a2a5
 800a284:	0800a2bb 	.word	0x0800a2bb
 800a288:	0800a2ab 	.word	0x0800a2ab
 800a28c:	0800a2bb 	.word	0x0800a2bb
 800a290:	0800a2bb 	.word	0x0800a2bb
 800a294:	0800a2bb 	.word	0x0800a2bb
 800a298:	0800a2b3 	.word	0x0800a2b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a29c:	f7fc fb28 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800a2a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2a2:	e010      	b.n	800a2c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2a4:	4b9e      	ldr	r3, [pc, #632]	@ (800a520 <UART_SetConfig+0x5c0>)
 800a2a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2a8:	e00d      	b.n	800a2c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2aa:	f7fc fab3 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 800a2ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2b0:	e009      	b.n	800a2c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2b8:	e005      	b.n	800a2c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a2c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 8130 	beq.w	800a52e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d2:	4a94      	ldr	r2, [pc, #592]	@ (800a524 <UART_SetConfig+0x5c4>)
 800a2d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	4413      	add	r3, r2
 800a2ec:	69ba      	ldr	r2, [r7, #24]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d305      	bcc.n	800a2fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d903      	bls.n	800a306 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a304:	e113      	b.n	800a52e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	2200      	movs	r2, #0
 800a30a:	60bb      	str	r3, [r7, #8]
 800a30c:	60fa      	str	r2, [r7, #12]
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a312:	4a84      	ldr	r2, [pc, #528]	@ (800a524 <UART_SetConfig+0x5c4>)
 800a314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	2200      	movs	r2, #0
 800a31c:	603b      	str	r3, [r7, #0]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a324:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a328:	f7f6 f9ba 	bl	80006a0 <__aeabi_uldivmod>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4610      	mov	r0, r2
 800a332:	4619      	mov	r1, r3
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	f04f 0300 	mov.w	r3, #0
 800a33c:	020b      	lsls	r3, r1, #8
 800a33e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a342:	0202      	lsls	r2, r0, #8
 800a344:	6979      	ldr	r1, [r7, #20]
 800a346:	6849      	ldr	r1, [r1, #4]
 800a348:	0849      	lsrs	r1, r1, #1
 800a34a:	2000      	movs	r0, #0
 800a34c:	460c      	mov	r4, r1
 800a34e:	4605      	mov	r5, r0
 800a350:	eb12 0804 	adds.w	r8, r2, r4
 800a354:	eb43 0905 	adc.w	r9, r3, r5
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	469a      	mov	sl, r3
 800a360:	4693      	mov	fp, r2
 800a362:	4652      	mov	r2, sl
 800a364:	465b      	mov	r3, fp
 800a366:	4640      	mov	r0, r8
 800a368:	4649      	mov	r1, r9
 800a36a:	f7f6 f999 	bl	80006a0 <__aeabi_uldivmod>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4613      	mov	r3, r2
 800a374:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a37c:	d308      	bcc.n	800a390 <UART_SetConfig+0x430>
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a384:	d204      	bcs.n	800a390 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6a3a      	ldr	r2, [r7, #32]
 800a38c:	60da      	str	r2, [r3, #12]
 800a38e:	e0ce      	b.n	800a52e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a396:	e0ca      	b.n	800a52e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3a0:	d166      	bne.n	800a470 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a3a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3a6:	2b08      	cmp	r3, #8
 800a3a8:	d827      	bhi.n	800a3fa <UART_SetConfig+0x49a>
 800a3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b0 <UART_SetConfig+0x450>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a3d5 	.word	0x0800a3d5
 800a3b4:	0800a3dd 	.word	0x0800a3dd
 800a3b8:	0800a3e5 	.word	0x0800a3e5
 800a3bc:	0800a3fb 	.word	0x0800a3fb
 800a3c0:	0800a3eb 	.word	0x0800a3eb
 800a3c4:	0800a3fb 	.word	0x0800a3fb
 800a3c8:	0800a3fb 	.word	0x0800a3fb
 800a3cc:	0800a3fb 	.word	0x0800a3fb
 800a3d0:	0800a3f3 	.word	0x0800a3f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3d4:	f7fc fa8c 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800a3d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3da:	e014      	b.n	800a406 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3dc:	f7fc fa9e 	bl	800691c <HAL_RCC_GetPCLK2Freq>
 800a3e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3e2:	e010      	b.n	800a406 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3e4:	4b4e      	ldr	r3, [pc, #312]	@ (800a520 <UART_SetConfig+0x5c0>)
 800a3e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3e8:	e00d      	b.n	800a406 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ea:	f7fc fa13 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 800a3ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3f0:	e009      	b.n	800a406 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3f8:	e005      	b.n	800a406 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 8090 	beq.w	800a52e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a412:	4a44      	ldr	r2, [pc, #272]	@ (800a524 <UART_SetConfig+0x5c4>)
 800a414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a418:	461a      	mov	r2, r3
 800a41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a420:	005a      	lsls	r2, r3, #1
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	441a      	add	r2, r3
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a432:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	2b0f      	cmp	r3, #15
 800a438:	d916      	bls.n	800a468 <UART_SetConfig+0x508>
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a440:	d212      	bcs.n	800a468 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	b29b      	uxth	r3, r3
 800a446:	f023 030f 	bic.w	r3, r3, #15
 800a44a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	085b      	lsrs	r3, r3, #1
 800a450:	b29b      	uxth	r3, r3
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	b29a      	uxth	r2, r3
 800a458:	8bfb      	ldrh	r3, [r7, #30]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	8bfa      	ldrh	r2, [r7, #30]
 800a464:	60da      	str	r2, [r3, #12]
 800a466:	e062      	b.n	800a52e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a46e:	e05e      	b.n	800a52e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a470:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a474:	2b08      	cmp	r3, #8
 800a476:	d828      	bhi.n	800a4ca <UART_SetConfig+0x56a>
 800a478:	a201      	add	r2, pc, #4	@ (adr r2, 800a480 <UART_SetConfig+0x520>)
 800a47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47e:	bf00      	nop
 800a480:	0800a4a5 	.word	0x0800a4a5
 800a484:	0800a4ad 	.word	0x0800a4ad
 800a488:	0800a4b5 	.word	0x0800a4b5
 800a48c:	0800a4cb 	.word	0x0800a4cb
 800a490:	0800a4bb 	.word	0x0800a4bb
 800a494:	0800a4cb 	.word	0x0800a4cb
 800a498:	0800a4cb 	.word	0x0800a4cb
 800a49c:	0800a4cb 	.word	0x0800a4cb
 800a4a0:	0800a4c3 	.word	0x0800a4c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4a4:	f7fc fa24 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 800a4a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4aa:	e014      	b.n	800a4d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4ac:	f7fc fa36 	bl	800691c <HAL_RCC_GetPCLK2Freq>
 800a4b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4b2:	e010      	b.n	800a4d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a520 <UART_SetConfig+0x5c0>)
 800a4b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4b8:	e00d      	b.n	800a4d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4ba:	f7fc f9ab 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 800a4be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4c0:	e009      	b.n	800a4d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4c8:	e005      	b.n	800a4d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4d4:	bf00      	nop
    }

    if (pclk != 0U)
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d028      	beq.n	800a52e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e0:	4a10      	ldr	r2, [pc, #64]	@ (800a524 <UART_SetConfig+0x5c4>)
 800a4e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	085b      	lsrs	r3, r3, #1
 800a4f4:	441a      	add	r2, r3
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	2b0f      	cmp	r3, #15
 800a504:	d910      	bls.n	800a528 <UART_SetConfig+0x5c8>
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a50c:	d20c      	bcs.n	800a528 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	b29a      	uxth	r2, r3
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	60da      	str	r2, [r3, #12]
 800a518:	e009      	b.n	800a52e <UART_SetConfig+0x5ce>
 800a51a:	bf00      	nop
 800a51c:	40008000 	.word	0x40008000
 800a520:	00f42400 	.word	0x00f42400
 800a524:	0800c5b0 	.word	0x0800c5b0
      }
      else
      {
        ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2201      	movs	r2, #1
 800a532:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2201      	movs	r2, #1
 800a53a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2200      	movs	r2, #0
 800a542:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2200      	movs	r2, #0
 800a548:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a54a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3730      	adds	r7, #48	@ 0x30
 800a552:	46bd      	mov	sp, r7
 800a554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a564:	f003 0308 	and.w	r3, r3, #8
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a8:	f003 0302 	and.w	r3, r3, #2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00a      	beq.n	800a5c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ca:	f003 0304 	and.w	r3, r3, #4
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ec:	f003 0310 	and.w	r3, r3, #16
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00a      	beq.n	800a60a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60e:	f003 0320 	and.w	r3, r3, #32
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00a      	beq.n	800a62c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01a      	beq.n	800a66e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a656:	d10a      	bne.n	800a66e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	605a      	str	r2, [r3, #4]
  }
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b098      	sub	sp, #96	@ 0x60
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6ac:	f7f9 fae6 	bl	8003c7c <HAL_GetTick>
 800a6b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0308 	and.w	r3, r3, #8
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d12f      	bne.n	800a720 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f88e 	bl	800a7f0 <UART_WaitOnFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d022      	beq.n	800a720 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e2:	e853 3f00 	ldrex	r3, [r3]
 800a6e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a700:	e841 2300 	strex	r3, r2, [r1]
 800a704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e6      	bne.n	800a6da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2220      	movs	r2, #32
 800a710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e063      	b.n	800a7e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0304 	and.w	r3, r3, #4
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	d149      	bne.n	800a7c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a72e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a736:	2200      	movs	r2, #0
 800a738:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f857 	bl	800a7f0 <UART_WaitOnFlagUntilTimeout>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d03c      	beq.n	800a7c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	623b      	str	r3, [r7, #32]
   return(result);
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a75c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a766:	633b      	str	r3, [r7, #48]	@ 0x30
 800a768:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a76c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e6      	bne.n	800a748 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3308      	adds	r3, #8
 800a780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	60fb      	str	r3, [r7, #12]
   return(result);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f023 0301 	bic.w	r3, r3, #1
 800a790:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3308      	adds	r3, #8
 800a798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a79a:	61fa      	str	r2, [r7, #28]
 800a79c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	69b9      	ldr	r1, [r7, #24]
 800a7a0:	69fa      	ldr	r2, [r7, #28]
 800a7a2:	e841 2300 	strex	r3, r2, [r1]
 800a7a6:	617b      	str	r3, [r7, #20]
   return(result);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1e5      	bne.n	800a77a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e012      	b.n	800a7e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3758      	adds	r7, #88	@ 0x58
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a800:	e04f      	b.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a808:	d04b      	beq.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a80a:	f7f9 fa37 	bl	8003c7c <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	429a      	cmp	r2, r3
 800a818:	d302      	bcc.n	800a820 <UART_WaitOnFlagUntilTimeout+0x30>
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d101      	bne.n	800a824 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e04e      	b.n	800a8c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d037      	beq.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b80      	cmp	r3, #128	@ 0x80
 800a836:	d034      	beq.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2b40      	cmp	r3, #64	@ 0x40
 800a83c:	d031      	beq.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	f003 0308 	and.w	r3, r3, #8
 800a848:	2b08      	cmp	r3, #8
 800a84a:	d110      	bne.n	800a86e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2208      	movs	r2, #8
 800a852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f000 f99c 	bl	800ab92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2208      	movs	r2, #8
 800a85e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e029      	b.n	800a8c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	69db      	ldr	r3, [r3, #28]
 800a874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a87c:	d111      	bne.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 f982 	bl	800ab92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2220      	movs	r2, #32
 800a892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e00f      	b.n	800a8c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	69da      	ldr	r2, [r3, #28]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	bf0c      	ite	eq
 800a8b2:	2301      	moveq	r3, #1
 800a8b4:	2300      	movne	r3, #0
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d0a0      	beq.n	800a802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b0a3      	sub	sp, #140	@ 0x8c
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	88fa      	ldrh	r2, [r7, #6]
 800a8e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	88fa      	ldrh	r2, [r7, #6]
 800a8ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8fe:	d10e      	bne.n	800a91e <UART_Start_Receive_IT+0x52>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d105      	bne.n	800a914 <UART_Start_Receive_IT+0x48>
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a90e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a912:	e02d      	b.n	800a970 <UART_Start_Receive_IT+0xa4>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	22ff      	movs	r2, #255	@ 0xff
 800a918:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a91c:	e028      	b.n	800a970 <UART_Start_Receive_IT+0xa4>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10d      	bne.n	800a942 <UART_Start_Receive_IT+0x76>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d104      	bne.n	800a938 <UART_Start_Receive_IT+0x6c>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	22ff      	movs	r2, #255	@ 0xff
 800a932:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a936:	e01b      	b.n	800a970 <UART_Start_Receive_IT+0xa4>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	227f      	movs	r2, #127	@ 0x7f
 800a93c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a940:	e016      	b.n	800a970 <UART_Start_Receive_IT+0xa4>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a94a:	d10d      	bne.n	800a968 <UART_Start_Receive_IT+0x9c>
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d104      	bne.n	800a95e <UART_Start_Receive_IT+0x92>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	227f      	movs	r2, #127	@ 0x7f
 800a958:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a95c:	e008      	b.n	800a970 <UART_Start_Receive_IT+0xa4>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	223f      	movs	r2, #63	@ 0x3f
 800a962:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a966:	e003      	b.n	800a970 <UART_Start_Receive_IT+0xa4>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2222      	movs	r2, #34	@ 0x22
 800a97c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3308      	adds	r3, #8
 800a986:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a98a:	e853 3f00 	ldrex	r3, [r3]
 800a98e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a990:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a992:	f043 0301 	orr.w	r3, r3, #1
 800a996:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	3308      	adds	r3, #8
 800a9a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a9a4:	673a      	str	r2, [r7, #112]	@ 0x70
 800a9a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a9aa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a9ac:	e841 2300 	strex	r3, r2, [r1]
 800a9b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a9b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e3      	bne.n	800a980 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9c0:	d14f      	bne.n	800aa62 <UART_Start_Receive_IT+0x196>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a9c8:	88fa      	ldrh	r2, [r7, #6]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d349      	bcc.n	800aa62 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9d6:	d107      	bne.n	800a9e8 <UART_Start_Receive_IT+0x11c>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d103      	bne.n	800a9e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a47      	ldr	r2, [pc, #284]	@ (800ab00 <UART_Start_Receive_IT+0x234>)
 800a9e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a9e6:	e002      	b.n	800a9ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4a46      	ldr	r2, [pc, #280]	@ (800ab04 <UART_Start_Receive_IT+0x238>)
 800a9ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d01a      	beq.n	800aa2c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa1a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800aa1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800aa26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e4      	bne.n	800a9f6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3308      	adds	r3, #8
 800aa32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3308      	adds	r3, #8
 800aa4a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aa4c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800aa4e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa50:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa54:	e841 2300 	strex	r3, r2, [r1]
 800aa58:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aa5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1e5      	bne.n	800aa2c <UART_Start_Receive_IT+0x160>
 800aa60:	e046      	b.n	800aaf0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa6a:	d107      	bne.n	800aa7c <UART_Start_Receive_IT+0x1b0>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d103      	bne.n	800aa7c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4a24      	ldr	r2, [pc, #144]	@ (800ab08 <UART_Start_Receive_IT+0x23c>)
 800aa78:	675a      	str	r2, [r3, #116]	@ 0x74
 800aa7a:	e002      	b.n	800aa82 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4a23      	ldr	r2, [pc, #140]	@ (800ab0c <UART_Start_Receive_IT+0x240>)
 800aa80:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d019      	beq.n	800aabe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800aa9e:	677b      	str	r3, [r7, #116]	@ 0x74
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aaa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaaa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aaae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e6      	bne.n	800aa8a <UART_Start_Receive_IT+0x1be>
 800aabc:	e018      	b.n	800aaf0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	e853 3f00 	ldrex	r3, [r3]
 800aaca:	613b      	str	r3, [r7, #16]
   return(result);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f043 0320 	orr.w	r3, r3, #32
 800aad2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	461a      	mov	r2, r3
 800aada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aadc:	623b      	str	r3, [r7, #32]
 800aade:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	69f9      	ldr	r1, [r7, #28]
 800aae2:	6a3a      	ldr	r2, [r7, #32]
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e6      	bne.n	800aabe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	378c      	adds	r7, #140	@ 0x8c
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	0800b515 	.word	0x0800b515
 800ab04:	0800b1a5 	.word	0x0800b1a5
 800ab08:	0800afe5 	.word	0x0800afe5
 800ab0c:	0800ae25 	.word	0x0800ae25

0800ab10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b08f      	sub	sp, #60	@ 0x3c
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	461a      	mov	r2, r3
 800ab34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab38:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab3e:	e841 2300 	strex	r3, r2, [r1]
 800ab42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1e6      	bne.n	800ab18 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	3308      	adds	r3, #8
 800ab50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	e853 3f00 	ldrex	r3, [r3]
 800ab58:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ab60:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3308      	adds	r3, #8
 800ab68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab6a:	61ba      	str	r2, [r7, #24]
 800ab6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	6979      	ldr	r1, [r7, #20]
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	e841 2300 	strex	r3, r2, [r1]
 800ab76:	613b      	str	r3, [r7, #16]
   return(result);
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1e5      	bne.n	800ab4a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2220      	movs	r2, #32
 800ab82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ab86:	bf00      	nop
 800ab88:	373c      	adds	r7, #60	@ 0x3c
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b095      	sub	sp, #84	@ 0x54
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba2:	e853 3f00 	ldrex	r3, [r3]
 800aba6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	461a      	mov	r2, r3
 800abb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800abba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abc0:	e841 2300 	strex	r3, r2, [r1]
 800abc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e6      	bne.n	800ab9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3308      	adds	r3, #8
 800abd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	e853 3f00 	ldrex	r3, [r3]
 800abda:	61fb      	str	r3, [r7, #28]
   return(result);
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abe2:	f023 0301 	bic.w	r3, r3, #1
 800abe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3308      	adds	r3, #8
 800abee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abf8:	e841 2300 	strex	r3, r2, [r1]
 800abfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e3      	bne.n	800abcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d118      	bne.n	800ac3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	f023 0310 	bic.w	r3, r3, #16
 800ac20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac2a:	61bb      	str	r3, [r7, #24]
 800ac2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	6979      	ldr	r1, [r7, #20]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	e841 2300 	strex	r3, r2, [r1]
 800ac36:	613b      	str	r3, [r7, #16]
   return(result);
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e6      	bne.n	800ac0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2220      	movs	r2, #32
 800ac42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac52:	bf00      	nop
 800ac54:	3754      	adds	r7, #84	@ 0x54
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b090      	sub	sp, #64	@ 0x40
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0320 	and.w	r3, r3, #32
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d137      	bne.n	800acea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ac7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	623b      	str	r3, [r7, #32]
   return(result);
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac98:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aca2:	633a      	str	r2, [r7, #48]	@ 0x30
 800aca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e5      	bne.n	800ac82 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	e853 3f00 	ldrex	r3, [r3]
 800acc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acca:	637b      	str	r3, [r7, #52]	@ 0x34
 800accc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
 800acd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd4:	61fb      	str	r3, [r7, #28]
 800acd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd8:	69b9      	ldr	r1, [r7, #24]
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	e841 2300 	strex	r3, r2, [r1]
 800ace0:	617b      	str	r3, [r7, #20]
   return(result);
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e6      	bne.n	800acb6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ace8:	e004      	b.n	800acf4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800acea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800acf0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800acf2:	4798      	blx	r3
}
 800acf4:	bf00      	nop
 800acf6:	3740      	adds	r7, #64	@ 0x40
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad14:	bf00      	nop
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad44:	2b80      	cmp	r3, #128	@ 0x80
 800ad46:	d109      	bne.n	800ad5c <UART_DMAError+0x40>
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2b21      	cmp	r3, #33	@ 0x21
 800ad4c:	d106      	bne.n	800ad5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ad56:	6978      	ldr	r0, [r7, #20]
 800ad58:	f7ff feda 	bl	800ab10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad66:	2b40      	cmp	r3, #64	@ 0x40
 800ad68:	d109      	bne.n	800ad7e <UART_DMAError+0x62>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b22      	cmp	r3, #34	@ 0x22
 800ad6e:	d106      	bne.n	800ad7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ad78:	6978      	ldr	r0, [r7, #20]
 800ad7a:	f7ff ff0a 	bl	800ab92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad84:	f043 0210 	orr.w	r2, r3, #16
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad94:	6978      	ldr	r0, [r7, #20]
 800ad96:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad98:	bf00      	nop
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	60bb      	str	r3, [r7, #8]
   return(result);
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ade4:	61fb      	str	r3, [r7, #28]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	461a      	mov	r2, r3
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	61bb      	str	r3, [r7, #24]
 800adf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf2:	6979      	ldr	r1, [r7, #20]
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	e841 2300 	strex	r3, r2, [r1]
 800adfa:	613b      	str	r3, [r7, #16]
   return(result);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e6      	bne.n	800add0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2220      	movs	r2, #32
 800ae06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae1a:	bf00      	nop
 800ae1c:	3720      	adds	r7, #32
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b09c      	sub	sp, #112	@ 0x70
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae3c:	2b22      	cmp	r3, #34	@ 0x22
 800ae3e:	f040 80c2 	bne.w	800afc6 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae50:	b2d9      	uxtb	r1, r3
 800ae52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae5c:	400a      	ands	r2, r1
 800ae5e:	b2d2      	uxtb	r2, r2
 800ae60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	3b01      	subs	r3, #1
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f040 80a5 	bne.w	800afd6 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aeaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aeac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aeb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aeb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e6      	bne.n	800ae8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3308      	adds	r3, #8
 800aec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed0:	f023 0301 	bic.w	r3, r3, #1
 800aed4:	667b      	str	r3, [r7, #100]	@ 0x64
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3308      	adds	r3, #8
 800aedc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aede:	647a      	str	r2, [r7, #68]	@ 0x44
 800aee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e5      	bne.n	800aebe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a35      	ldr	r2, [pc, #212]	@ (800afe0 <UART_RxISR_8BIT+0x1bc>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d01f      	beq.n	800af50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d018      	beq.n	800af50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	623b      	str	r3, [r7, #32]
   return(result);
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af32:	663b      	str	r3, [r7, #96]	@ 0x60
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	461a      	mov	r2, r3
 800af3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e6      	bne.n	800af1e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af54:	2b01      	cmp	r3, #1
 800af56:	d130      	bne.n	800afba <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	e853 3f00 	ldrex	r3, [r3]
 800af6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f023 0310 	bic.w	r3, r3, #16
 800af72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	461a      	mov	r2, r3
 800af7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af7c:	61fb      	str	r3, [r7, #28]
 800af7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af80:	69b9      	ldr	r1, [r7, #24]
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	e841 2300 	strex	r3, r2, [r1]
 800af88:	617b      	str	r3, [r7, #20]
   return(result);
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e6      	bne.n	800af5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	69db      	ldr	r3, [r3, #28]
 800af96:	f003 0310 	and.w	r3, r3, #16
 800af9a:	2b10      	cmp	r3, #16
 800af9c:	d103      	bne.n	800afa6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2210      	movs	r2, #16
 800afa4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800afb2:	4611      	mov	r1, r2
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800afb8:	e00d      	b.n	800afd6 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
}
 800afc4:	e007      	b.n	800afd6 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	699a      	ldr	r2, [r3, #24]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f042 0208 	orr.w	r2, r2, #8
 800afd4:	619a      	str	r2, [r3, #24]
}
 800afd6:	bf00      	nop
 800afd8:	3770      	adds	r7, #112	@ 0x70
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	40008000 	.word	0x40008000

0800afe4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b09c      	sub	sp, #112	@ 0x70
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aff2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800affc:	2b22      	cmp	r3, #34	@ 0x22
 800affe:	f040 80c2 	bne.w	800b186 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b008:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b010:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b012:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b016:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b01a:	4013      	ands	r3, r2
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b020:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b026:	1c9a      	adds	r2, r3, #2
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b032:	b29b      	uxth	r3, r3
 800b034:	3b01      	subs	r3, #1
 800b036:	b29a      	uxth	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b044:	b29b      	uxth	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 80a5 	bne.w	800b196 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b05a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b05c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b060:	667b      	str	r3, [r7, #100]	@ 0x64
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b06a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b06c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b070:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b072:	e841 2300 	strex	r3, r2, [r1]
 800b076:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e6      	bne.n	800b04c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3308      	adds	r3, #8
 800b084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b090:	f023 0301 	bic.w	r3, r3, #1
 800b094:	663b      	str	r3, [r7, #96]	@ 0x60
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3308      	adds	r3, #8
 800b09c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b09e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e5      	bne.n	800b07e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a35      	ldr	r2, [pc, #212]	@ (800b1a0 <UART_RxISR_16BIT+0x1bc>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d01f      	beq.n	800b110 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d018      	beq.n	800b110 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0fe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b104:	e841 2300 	strex	r3, r2, [r1]
 800b108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1e6      	bne.n	800b0de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b114:	2b01      	cmp	r3, #1
 800b116:	d130      	bne.n	800b17a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	f023 0310 	bic.w	r3, r3, #16
 800b132:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	461a      	mov	r2, r3
 800b13a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b13c:	61bb      	str	r3, [r7, #24]
 800b13e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6979      	ldr	r1, [r7, #20]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	613b      	str	r3, [r7, #16]
   return(result);
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e6      	bne.n	800b11e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	69db      	ldr	r3, [r3, #28]
 800b156:	f003 0310 	and.w	r3, r3, #16
 800b15a:	2b10      	cmp	r3, #16
 800b15c:	d103      	bne.n	800b166 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2210      	movs	r2, #16
 800b164:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b172:	4611      	mov	r1, r2
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b178:	e00d      	b.n	800b196 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	4798      	blx	r3
}
 800b184:	e007      	b.n	800b196 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	699a      	ldr	r2, [r3, #24]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f042 0208 	orr.w	r2, r2, #8
 800b194:	619a      	str	r2, [r3, #24]
}
 800b196:	bf00      	nop
 800b198:	3770      	adds	r7, #112	@ 0x70
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	40008000 	.word	0x40008000

0800b1a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b0ac      	sub	sp, #176	@ 0xb0
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b1b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1da:	2b22      	cmp	r3, #34	@ 0x22
 800b1dc:	f040 8189 	bne.w	800b4f2 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b1e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1ea:	e12c      	b.n	800b446 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b1f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b1fa:	b2d9      	uxtb	r1, r3
 800b1fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b200:	b2da      	uxtb	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b206:	400a      	ands	r2, r1
 800b208:	b2d2      	uxtb	r2, r2
 800b20a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	b29a      	uxth	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d055      	beq.n	800b2ea <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b23e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	2b00      	cmp	r3, #0
 800b248:	d011      	beq.n	800b26e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b24a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b24e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00b      	beq.n	800b26e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2201      	movs	r2, #1
 800b25c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b264:	f043 0201 	orr.w	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b26e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	2b00      	cmp	r3, #0
 800b278:	d011      	beq.n	800b29e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b27a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00b      	beq.n	800b29e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2202      	movs	r2, #2
 800b28c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b294:	f043 0204 	orr.w	r2, r3, #4
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b29e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d011      	beq.n	800b2ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b2aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00b      	beq.n	800b2ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2204      	movs	r2, #4
 800b2bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2c4:	f043 0202 	orr.w	r2, r3, #2
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d008      	beq.n	800b2ea <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f040 80a7 	bne.w	800b446 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b300:	e853 3f00 	ldrex	r3, [r3]
 800b304:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b30c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b31a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b31c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b320:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b322:	e841 2300 	strex	r3, r2, [r1]
 800b326:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1e4      	bne.n	800b2f8 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3308      	adds	r3, #8
 800b334:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b338:	e853 3f00 	ldrex	r3, [r3]
 800b33c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b33e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b344:	f023 0301 	bic.w	r3, r3, #1
 800b348:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3308      	adds	r3, #8
 800b352:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b356:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b358:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b35c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b35e:	e841 2300 	strex	r3, r2, [r1]
 800b362:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b364:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1e1      	bne.n	800b32e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a62      	ldr	r2, [pc, #392]	@ (800b50c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d021      	beq.n	800b3cc <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d01a      	beq.n	800b3cc <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b39e:	e853 3f00 	ldrex	r3, [r3]
 800b3a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b3b8:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3ba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b3be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3c0:	e841 2300 	strex	r3, r2, [r1]
 800b3c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b3c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1e4      	bne.n	800b396 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d132      	bne.n	800b43a <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e2:	e853 3f00 	ldrex	r3, [r3]
 800b3e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ea:	f023 0310 	bic.w	r3, r3, #16
 800b3ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b404:	e841 2300 	strex	r3, r2, [r1]
 800b408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1e4      	bne.n	800b3da <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	f003 0310 	and.w	r3, r3, #16
 800b41a:	2b10      	cmp	r3, #16
 800b41c:	d103      	bne.n	800b426 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2210      	movs	r2, #16
 800b424:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b432:	4611      	mov	r1, r2
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b438:	e010      	b.n	800b45c <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	4798      	blx	r3
        break;
 800b444:	e00a      	b.n	800b45c <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b446:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d006      	beq.n	800b45c <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800b44e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b452:	f003 0320 	and.w	r3, r3, #32
 800b456:	2b00      	cmp	r3, #0
 800b458:	f47f aec8 	bne.w	800b1ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b462:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b466:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d049      	beq.n	800b502 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b474:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b478:	429a      	cmp	r2, r3
 800b47a:	d242      	bcs.n	800b502 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3308      	adds	r3, #8
 800b482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	e853 3f00 	ldrex	r3, [r3]
 800b48a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3308      	adds	r3, #8
 800b49c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b4a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e3      	bne.n	800b47c <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a16      	ldr	r2, [pc, #88]	@ (800b510 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800b4b8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	e853 3f00 	ldrex	r3, [r3]
 800b4c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f043 0320 	orr.w	r3, r3, #32
 800b4ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b4dc:	61bb      	str	r3, [r7, #24]
 800b4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e0:	6979      	ldr	r1, [r7, #20]
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	e841 2300 	strex	r3, r2, [r1]
 800b4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1e4      	bne.n	800b4ba <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4f0:	e007      	b.n	800b502 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	699a      	ldr	r2, [r3, #24]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f042 0208 	orr.w	r2, r2, #8
 800b500:	619a      	str	r2, [r3, #24]
}
 800b502:	bf00      	nop
 800b504:	37b0      	adds	r7, #176	@ 0xb0
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	40008000 	.word	0x40008000
 800b510:	0800ae25 	.word	0x0800ae25

0800b514 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b0ae      	sub	sp, #184	@ 0xb8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b522:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b54a:	2b22      	cmp	r3, #34	@ 0x22
 800b54c:	f040 818d 	bne.w	800b86a <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b556:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b55a:	e130      	b.n	800b7be <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b562:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b56a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b56e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b572:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b576:	4013      	ands	r3, r2
 800b578:	b29a      	uxth	r2, r3
 800b57a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b57e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b584:	1c9a      	adds	r2, r3, #2
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b590:	b29b      	uxth	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	b29a      	uxth	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	69db      	ldr	r3, [r3, #28]
 800b5a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b5a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5aa:	f003 0307 	and.w	r3, r3, #7
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d055      	beq.n	800b65e <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d011      	beq.n	800b5e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b5be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00b      	beq.n	800b5e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5d8:	f043 0201 	orr.w	r2, r3, #1
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d011      	beq.n	800b612 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b5ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00b      	beq.n	800b612 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2202      	movs	r2, #2
 800b600:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b608:	f043 0204 	orr.w	r2, r3, #4
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b616:	f003 0304 	and.w	r3, r3, #4
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d011      	beq.n	800b642 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b61e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00b      	beq.n	800b642 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2204      	movs	r2, #4
 800b630:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b638:	f043 0202 	orr.w	r2, r3, #2
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d008      	beq.n	800b65e <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b664:	b29b      	uxth	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	f040 80a9 	bne.w	800b7be <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b674:	e853 3f00 	ldrex	r3, [r3]
 800b678:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b67a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b67c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	461a      	mov	r2, r3
 800b68a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b68e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b692:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b69a:	e841 2300 	strex	r3, r2, [r1]
 800b69e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b6a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1e2      	bne.n	800b66c <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3308      	adds	r3, #8
 800b6ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6b0:	e853 3f00 	ldrex	r3, [r3]
 800b6b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b6b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6bc:	f023 0301 	bic.w	r3, r3, #1
 800b6c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3308      	adds	r3, #8
 800b6ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b6ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b6d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e1      	bne.n	800b6a6 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a62      	ldr	r2, [pc, #392]	@ (800b884 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d021      	beq.n	800b744 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d01a      	beq.n	800b744 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b716:	e853 3f00 	ldrex	r3, [r3]
 800b71a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b71c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b71e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b722:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b730:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b732:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b736:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b73e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e4      	bne.n	800b70e <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d132      	bne.n	800b7b2 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b762:	f023 0310 	bic.w	r3, r3, #16
 800b766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b774:	647b      	str	r3, [r7, #68]	@ 0x44
 800b776:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b77a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b77c:	e841 2300 	strex	r3, r2, [r1]
 800b780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e4      	bne.n	800b752 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	69db      	ldr	r3, [r3, #28]
 800b78e:	f003 0310 	and.w	r3, r3, #16
 800b792:	2b10      	cmp	r3, #16
 800b794:	d103      	bne.n	800b79e <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2210      	movs	r2, #16
 800b79c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b7b0:	e010      	b.n	800b7d4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	4798      	blx	r3
        break;
 800b7bc:	e00a      	b.n	800b7d4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b7be:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d006      	beq.n	800b7d4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800b7c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7ca:	f003 0320 	and.w	r3, r3, #32
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f47f aec4 	bne.w	800b55c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7da:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b7de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d049      	beq.n	800b87a <UART_RxISR_16BIT_FIFOEN+0x366>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b7ec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d242      	bcs.n	800b87a <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	623b      	str	r3, [r7, #32]
   return(result);
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b80a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3308      	adds	r3, #8
 800b814:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b818:	633a      	str	r2, [r7, #48]	@ 0x30
 800b81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b81e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e3      	bne.n	800b7f4 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a16      	ldr	r2, [pc, #88]	@ (800b888 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800b830:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	e853 3f00 	ldrex	r3, [r3]
 800b83e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f043 0320 	orr.w	r3, r3, #32
 800b846:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b854:	61fb      	str	r3, [r7, #28]
 800b856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b858:	69b9      	ldr	r1, [r7, #24]
 800b85a:	69fa      	ldr	r2, [r7, #28]
 800b85c:	e841 2300 	strex	r3, r2, [r1]
 800b860:	617b      	str	r3, [r7, #20]
   return(result);
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e4      	bne.n	800b832 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b868:	e007      	b.n	800b87a <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	699a      	ldr	r2, [r3, #24]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f042 0208 	orr.w	r2, r2, #8
 800b878:	619a      	str	r2, [r3, #24]
}
 800b87a:	bf00      	nop
 800b87c:	37b8      	adds	r7, #184	@ 0xb8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	40008000 	.word	0x40008000
 800b888:	0800afe5 	.word	0x0800afe5

0800b88c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d101      	bne.n	800b8de <HAL_UARTEx_DisableFifoMode+0x16>
 800b8da:	2302      	movs	r3, #2
 800b8dc:	e027      	b.n	800b92e <HAL_UARTEx_DisableFifoMode+0x66>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2224      	movs	r2, #36	@ 0x24
 800b8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f022 0201 	bic.w	r2, r2, #1
 800b904:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b90c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2220      	movs	r2, #32
 800b920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d101      	bne.n	800b952 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b94e:	2302      	movs	r3, #2
 800b950:	e02d      	b.n	800b9ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2224      	movs	r2, #36	@ 0x24
 800b95e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0201 	bic.w	r2, r2, #1
 800b978:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f850 	bl	800ba34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2220      	movs	r2, #32
 800b9a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d101      	bne.n	800b9ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	e02d      	b.n	800ba2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2224      	movs	r2, #36	@ 0x24
 800b9da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 0201 	bic.w	r2, r2, #1
 800b9f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	430a      	orrs	r2, r1
 800ba08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f812 	bl	800ba34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d108      	bne.n	800ba56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba54:	e031      	b.n	800baba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba56:	2308      	movs	r3, #8
 800ba58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba5a:	2308      	movs	r3, #8
 800ba5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	0e5b      	lsrs	r3, r3, #25
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	f003 0307 	and.w	r3, r3, #7
 800ba6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	0f5b      	lsrs	r3, r3, #29
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	f003 0307 	and.w	r3, r3, #7
 800ba7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	7b3a      	ldrb	r2, [r7, #12]
 800ba82:	4911      	ldr	r1, [pc, #68]	@ (800bac8 <UARTEx_SetNbDataToProcess+0x94>)
 800ba84:	5c8a      	ldrb	r2, [r1, r2]
 800ba86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba8a:	7b3a      	ldrb	r2, [r7, #12]
 800ba8c:	490f      	ldr	r1, [pc, #60]	@ (800bacc <UARTEx_SetNbDataToProcess+0x98>)
 800ba8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba90:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
 800ba9e:	7b7a      	ldrb	r2, [r7, #13]
 800baa0:	4909      	ldr	r1, [pc, #36]	@ (800bac8 <UARTEx_SetNbDataToProcess+0x94>)
 800baa2:	5c8a      	ldrb	r2, [r1, r2]
 800baa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800baa8:	7b7a      	ldrb	r2, [r7, #13]
 800baaa:	4908      	ldr	r1, [pc, #32]	@ (800bacc <UARTEx_SetNbDataToProcess+0x98>)
 800baac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800baae:	fb93 f3f2 	sdiv	r3, r3, r2
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800baba:	bf00      	nop
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	0800c5c8 	.word	0x0800c5c8
 800bacc:	0800c5d0 	.word	0x0800c5d0

0800bad0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	ed93 7a06 	vldr	s14, [r3, #24]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	edd3 7a07 	vldr	s15, [r3, #28]
 800bae6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	edd3 7a08 	vldr	s15, [r3, #32]
 800baf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	edd3 7a06 	vldr	s15, [r3, #24]
 800bb00:	eeb1 7a67 	vneg.f32	s14, s15
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	edd3 7a08 	vldr	s15, [r3, #32]
 800bb0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a1a      	ldr	r2, [r3, #32]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d006      	beq.n	800bb34 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	330c      	adds	r3, #12
 800bb2a:	220c      	movs	r2, #12
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 fcc4 	bl	800c4bc <memset>
  }

}
 800bb34:	bf00      	nop
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b08b      	sub	sp, #44	@ 0x2c
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	885b      	ldrh	r3, [r3, #2]
 800bb64:	fb02 f303 	mul.w	r3, r2, r3
 800bb68:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bb6e:	e013      	b.n	800bb98 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800bb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb72:	1d1a      	adds	r2, r3, #4
 800bb74:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb76:	ed93 7a00 	vldr	s14, [r3]
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	1d1a      	adds	r2, r3, #4
 800bb7e:	623a      	str	r2, [r7, #32]
 800bb80:	edd3 7a00 	vldr	s15, [r3]
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	61fa      	str	r2, [r7, #28]
 800bb8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb8e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e8      	bne.n	800bb70 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800bba2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	372c      	adds	r7, #44	@ 0x2c
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b085      	sub	sp, #20
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	607b      	str	r3, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	817b      	strh	r3, [r7, #10]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	897a      	ldrh	r2, [r7, #10]
 800bbc8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	893a      	ldrh	r2, [r7, #8]
 800bbce:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	605a      	str	r2, [r3, #4]
}
 800bbd6:	bf00      	nop
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b0bb      	sub	sp, #236	@ 0xec
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	881b      	ldrh	r3, [r3, #0]
 800bbfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	885b      	ldrh	r3, [r3, #2]
 800bc02:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800bc12:	2300      	movs	r3, #0
 800bc14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800bc18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800bc1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800bc24:	e03b      	b.n	800bc9e <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800bc26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bc28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc32:	e00c      	b.n	800bc4e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800bc34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc38:	1d1a      	adds	r2, r3, #4
 800bc3a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bc3e:	f04f 0200 	mov.w	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]
        j--;
 800bc44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1ee      	bne.n	800bc34 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800bc56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc5a:	1d1a      	adds	r2, r3, #4
 800bc5c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bc60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800bc64:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800bc66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc70:	e00c      	b.n	800bc8c <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800bc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc76:	1d1a      	adds	r2, r3, #4
 800bc78:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bc7c:	f04f 0200 	mov.w	r2, #0
 800bc80:	601a      	str	r2, [r3, #0]
        j--;
 800bc82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc86:	3b01      	subs	r3, #1
 800bc88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1ee      	bne.n	800bc72 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800bc94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800bc9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1bf      	bne.n	800bc26 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800bca6:	2300      	movs	r3, #0
 800bca8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bcac:	e2c7      	b.n	800c23e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800bcae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcb2:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	885b      	ldrh	r3, [r3, #2]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800bcc2:	fb01 f303 	mul.w	r3, r1, r3
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800bcce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800bcd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bce4:	3301      	adds	r3, #1
 800bce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bcea:	e02c      	b.n	800bd46 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	885b      	ldrh	r3, [r3, #2]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bcfa:	fb03 f101 	mul.w	r1, r3, r1
 800bcfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd02:	440b      	add	r3, r1
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800bd0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800bd14:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800bd18:	eeb0 7ae7 	vabs.f32	s14, s15
 800bd1c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bd20:	eef0 7ae7 	vabs.f32	s15, s15
 800bd24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd2c:	dd06      	ble.n	800bd3c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800bd2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800bd36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bd3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd40:	3301      	adds	r3, #1
 800bd42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd46:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bd4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d3cd      	bcc.n	800bcec <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800bd50:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bd54:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd5c:	f000 809b 	beq.w	800be96 <arm_mat_inverse_f32+0x2b4>
 800bd60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bd64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	f000 8094 	beq.w	800be96 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	885b      	ldrh	r3, [r3, #2]
 800bd82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd92:	fb03 f202 	mul.w	r2, r3, r2
 800bd96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bda2:	4413      	add	r3, r2
 800bda4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bda8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bdae:	fb03 f202 	mul.w	r2, r3, r2
 800bdb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdb6:	4413      	add	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bdca:	e018      	b.n	800bdfe <arm_mat_inverse_f32+0x21c>
 800bdcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bdd8:	1d1a      	adds	r2, r3, #4
 800bdda:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800bdde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bde2:	6812      	ldr	r2, [r2, #0]
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bdea:	1d1a      	adds	r2, r3, #4
 800bdec:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800bdf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bdfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800be02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be04:	429a      	cmp	r2, r3
 800be06:	dbe1      	blt.n	800bdcc <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	885b      	ldrh	r3, [r3, #2]
 800be1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be20:	643b      	str	r3, [r7, #64]	@ 0x40
 800be22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be26:	fb02 f303 	mul.w	r3, r2, r3
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800be30:	4413      	add	r3, r2
 800be32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800be3c:	fb02 f303 	mul.w	r3, r2, r3
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be46:	4413      	add	r3, r2
 800be48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be4c:	2300      	movs	r3, #0
 800be4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be52:	e018      	b.n	800be86 <arm_mat_inverse_f32+0x2a4>
 800be54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be60:	1d1a      	adds	r2, r3, #4
 800be62:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800be66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be6a:	6812      	ldr	r2, [r2, #0]
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be72:	1d1a      	adds	r2, r3, #4
 800be74:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800be78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800be80:	3301      	adds	r3, #1
 800be82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800be8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be8c:	429a      	cmp	r2, r3
 800be8e:	dbe1      	blt.n	800be54 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800be90:	2301      	movs	r3, #1
 800be92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800be96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d009      	beq.n	800beb2 <arm_mat_inverse_f32+0x2d0>
 800be9e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bea2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beaa:	d102      	bne.n	800beb2 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800beac:	f06f 0304 	mvn.w	r3, #4
 800beb0:	e208      	b.n	800c2c4 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800beb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800beb6:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800beba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bebe:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	885b      	ldrh	r3, [r3, #2]
 800bece:	637b      	str	r3, [r7, #52]	@ 0x34
 800bed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	633b      	str	r3, [r7, #48]	@ 0x30
 800beda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bedc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bede:	fb03 f202 	mul.w	r2, r3, r2
 800bee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bee6:	4413      	add	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800beee:	4413      	add	r3, r2
 800bef0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bef4:	2300      	movs	r3, #0
 800bef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800befa:	e011      	b.n	800bf20 <arm_mat_inverse_f32+0x33e>
 800befc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf00:	1d1a      	adds	r2, r3, #4
 800bf02:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800bf06:	ed93 7a00 	vldr	s14, [r3]
 800bf0a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bf0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf12:	edc3 7a00 	vstr	s15, [r3]
 800bf16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bf20:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bf24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf26:	429a      	cmp	r2, r3
 800bf28:	dbe8      	blt.n	800befc <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	885b      	ldrh	r3, [r3, #2]
 800bf36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf40:	fb02 f303 	mul.w	r3, r2, r3
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf50:	2300      	movs	r3, #0
 800bf52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf56:	e011      	b.n	800bf7c <arm_mat_inverse_f32+0x39a>
 800bf58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf5c:	1d1a      	adds	r2, r3, #4
 800bf5e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800bf62:	ed93 7a00 	vldr	s14, [r3]
 800bf66:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6e:	edc3 7a00 	vstr	s15, [r3]
 800bf72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf76:	3301      	adds	r3, #1
 800bf78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf7c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800bf80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf82:	429a      	cmp	r2, r3
 800bf84:	dbe8      	blt.n	800bf58 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800bf8c:	e0ae      	b.n	800c0ec <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	885b      	ldrh	r3, [r3, #2]
 800bf96:	4619      	mov	r1, r3
 800bf98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf9c:	fb03 f101 	mul.w	r1, r3, r1
 800bfa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bfa4:	440b      	add	r3, r1
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800bfae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	885b      	ldrh	r3, [r3, #2]
 800bfcc:	617b      	str	r3, [r7, #20]
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	613b      	str	r3, [r7, #16]
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bfde:	fb03 f202 	mul.w	r2, r3, r2
 800bfe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bfe6:	4413      	add	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800bfee:	4413      	add	r3, r2
 800bff0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bff8:	fb03 f202 	mul.w	r2, r3, r2
 800bffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c000:	4413      	add	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c008:	4413      	add	r3, r2
 800c00a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c00e:	2300      	movs	r3, #0
 800c010:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c014:	e01a      	b.n	800c04c <arm_mat_inverse_f32+0x46a>
 800c016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c01a:	1d1a      	adds	r2, r3, #4
 800c01c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c020:	ed93 7a00 	vldr	s14, [r3]
 800c024:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c02c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c030:	1d1a      	adds	r2, r3, #4
 800c032:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c036:	ed93 7a00 	vldr	s14, [r3]
 800c03a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c03e:	edc3 7a00 	vstr	s15, [r3]
 800c042:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c046:	3301      	adds	r3, #1
 800c048:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c04c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	429a      	cmp	r2, r3
 800c054:	dbdf      	blt.n	800c016 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	885b      	ldrh	r3, [r3, #2]
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	60bb      	str	r3, [r7, #8]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c076:	fb02 f303 	mul.w	r3, r2, r3
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c080:	4413      	add	r3, r2
 800c082:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c08a:	fb02 f303 	mul.w	r3, r2, r3
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c094:	4413      	add	r3, r2
 800c096:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c09a:	2300      	movs	r3, #0
 800c09c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c0a0:	e01a      	b.n	800c0d8 <arm_mat_inverse_f32+0x4f6>
 800c0a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c0a6:	1d1a      	adds	r2, r3, #4
 800c0a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c0ac:	ed93 7a00 	vldr	s14, [r3]
 800c0b0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c0bc:	1d1a      	adds	r2, r3, #4
 800c0be:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c0c2:	ed93 7a00 	vldr	s14, [r3]
 800c0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0ca:	edc3 7a00 	vstr	s15, [r3]
 800c0ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c0d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	dbdf      	blt.n	800c0a2 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800c0e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c0f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	f4ff af4b 	bcc.w	800bf8e <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c0f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c100:	e092      	b.n	800c228 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	885b      	ldrh	r3, [r3, #2]
 800c10a:	4619      	mov	r1, r3
 800c10c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c110:	fb03 f101 	mul.w	r1, r3, r1
 800c114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c118:	440b      	add	r3, r1
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	677b      	str	r3, [r7, #116]	@ 0x74
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	885b      	ldrh	r3, [r3, #2]
 800c13c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	623b      	str	r3, [r7, #32]
 800c148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c14e:	fb03 f202 	mul.w	r2, r3, r2
 800c152:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c156:	4413      	add	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c15c:	4413      	add	r3, r2
 800c15e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c162:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c164:	fb03 f202 	mul.w	r2, r3, r2
 800c168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c172:	4413      	add	r3, r2
 800c174:	677b      	str	r3, [r7, #116]	@ 0x74
 800c176:	2300      	movs	r3, #0
 800c178:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c17a:	e014      	b.n	800c1a6 <arm_mat_inverse_f32+0x5c4>
 800c17c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c17e:	1d1a      	adds	r2, r3, #4
 800c180:	677a      	str	r2, [r7, #116]	@ 0x74
 800c182:	ed93 7a00 	vldr	s14, [r3]
 800c186:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c18e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c190:	1d1a      	adds	r2, r3, #4
 800c192:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c194:	ed93 7a00 	vldr	s14, [r3]
 800c198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c19c:	edc3 7a00 	vstr	s15, [r3]
 800c1a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c1a8:	6a3b      	ldr	r3, [r7, #32]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	dbe6      	blt.n	800c17c <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	885b      	ldrh	r3, [r3, #2]
 800c1be:	61fb      	str	r3, [r7, #28]
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	61bb      	str	r3, [r7, #24]
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c1ca:	fb02 f303 	mul.w	r3, r2, r3
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c1d2:	4413      	add	r3, r2
 800c1d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c1da:	fb02 f303 	mul.w	r3, r2, r3
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c1e2:	4413      	add	r3, r2
 800c1e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1ea:	e014      	b.n	800c216 <arm_mat_inverse_f32+0x634>
 800c1ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1ee:	1d1a      	adds	r2, r3, #4
 800c1f0:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c1f2:	ed93 7a00 	vldr	s14, [r3]
 800c1f6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c200:	1d1a      	adds	r2, r3, #4
 800c202:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c204:	ed93 7a00 	vldr	s14, [r3]
 800c208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c20c:	edc3 7a00 	vstr	s15, [r3]
 800c210:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c212:	3301      	adds	r3, #1
 800c214:	673b      	str	r3, [r7, #112]	@ 0x70
 800c216:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	dbe6      	blt.n	800c1ec <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c21e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c222:	3301      	adds	r3, #1
 800c224:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c228:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c22c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c22e:	429a      	cmp	r2, r3
 800c230:	f4ff af67 	bcc.w	800c102 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800c234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c238:	3301      	adds	r3, #1
 800c23a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c23e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c244:	429a      	cmp	r2, r3
 800c246:	f4ff ad32 	bcc.w	800bcae <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c24a:	2300      	movs	r3, #0
 800c24c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800c250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c254:	2b01      	cmp	r3, #1
 800c256:	d033      	beq.n	800c2c0 <arm_mat_inverse_f32+0x6de>
 800c258:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c25c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c264:	d12c      	bne.n	800c2c0 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800c26c:	2300      	movs	r3, #0
 800c26e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c272:	e010      	b.n	800c296 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800c274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c27c:	4413      	add	r3, r2
 800c27e:	edd3 7a00 	vldr	s15, [r3]
 800c282:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28a:	d10d      	bne.n	800c2a8 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800c28c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c290:	3301      	adds	r3, #1
 800c292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c298:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c29a:	fb02 f303 	mul.w	r3, r2, r3
 800c29e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d3e6      	bcc.n	800c274 <arm_mat_inverse_f32+0x692>
 800c2a6:	e000      	b.n	800c2aa <arm_mat_inverse_f32+0x6c8>
            break;
 800c2a8:	bf00      	nop
      }

      if (i == numRows * numCols)
 800c2aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2ae:	fb02 f303 	mul.w	r3, r2, r3
 800c2b2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d102      	bne.n	800c2c0 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800c2ba:	23fb      	movs	r3, #251	@ 0xfb
 800c2bc:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800c2c0:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	37ec      	adds	r7, #236	@ 0xec
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b093      	sub	sp, #76	@ 0x4c
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	885b      	ldrh	r3, [r3, #2]
 800c304:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	885b      	ldrh	r3, [r3, #2]
 800c30a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800c30c:	2300      	movs	r3, #0
 800c30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c310:	8b7b      	ldrh	r3, [r7, #26]
 800c312:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800c314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	69fa      	ldr	r2, [r7, #28]
 800c31a:	4413      	add	r3, r2
 800c31c:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800c31e:	8b3b      	ldrh	r3, [r7, #24]
 800c320:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800c32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c330:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800c332:	8afb      	ldrh	r3, [r7, #22]
 800c334:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800c336:	e017      	b.n	800c368 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800c338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c33a:	1d1a      	adds	r2, r3, #4
 800c33c:	647a      	str	r2, [r7, #68]	@ 0x44
 800c33e:	ed93 7a00 	vldr	s14, [r3]
 800c342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c344:	edd3 7a00 	vldr	s15, [r3]
 800c348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c34c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800c350:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c354:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800c358:	8b3b      	ldrh	r3, [r7, #24]
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c35e:	4413      	add	r3, r2
 800c360:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800c362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c364:	3b01      	subs	r3, #1
 800c366:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800c368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1e4      	bne.n	800c338 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800c36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c376:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800c378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37a:	3b01      	subs	r3, #1
 800c37c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800c37e:	8b3a      	ldrh	r2, [r7, #24]
 800c380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	6a3a      	ldr	r2, [r7, #32]
 800c388:	4413      	add	r3, r2
 800c38a:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800c38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1ca      	bne.n	800c328 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800c392:	8b3b      	ldrh	r3, [r7, #24]
 800c394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c396:	4413      	add	r3, r2
 800c398:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800c39a:	8afb      	ldrh	r3, [r7, #22]
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3a0:	4413      	add	r3, r2
 800c3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800c3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800c3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1b1      	bne.n	800c314 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800c3b4:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	374c      	adds	r7, #76	@ 0x4c
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b08b      	sub	sp, #44	@ 0x2c
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	881b      	ldrh	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	885b      	ldrh	r3, [r3, #2]
 800c3ec:	fb02 f303 	mul.w	r3, r2, r3
 800c3f0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c3f6:	e013      	b.n	800c420 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fa:	1d1a      	adds	r2, r3, #4
 800c3fc:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3fe:	ed93 7a00 	vldr	s14, [r3]
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	1d1a      	adds	r2, r3, #4
 800c406:	623a      	str	r2, [r7, #32]
 800c408:	edd3 7a00 	vldr	s15, [r3]
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	1d1a      	adds	r2, r3, #4
 800c410:	61fa      	str	r2, [r7, #28]
 800c412:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c416:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e8      	bne.n	800c3f8 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c426:	2300      	movs	r3, #0
 800c428:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c42a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	372c      	adds	r7, #44	@ 0x2c
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b08b      	sub	sp, #44	@ 0x2c
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	885b      	ldrh	r3, [r3, #2]
 800c45a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800c45c:	89fb      	ldrh	r3, [r7, #14]
 800c45e:	61bb      	str	r3, [r7, #24]
 800c460:	2300      	movs	r3, #0
 800c462:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	4413      	add	r3, r2
 800c46c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800c46e:	89bb      	ldrh	r3, [r7, #12]
 800c470:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800c472:	e00d      	b.n	800c490 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800c474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c476:	1d1a      	adds	r2, r3, #4
 800c478:	627a      	str	r2, [r7, #36]	@ 0x24
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	6a3b      	ldr	r3, [r7, #32]
 800c47e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800c480:	89fb      	ldrh	r3, [r7, #14]
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	6a3a      	ldr	r2, [r7, #32]
 800c486:	4413      	add	r3, r2
 800c488:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	3b01      	subs	r3, #1
 800c48e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1ee      	bne.n	800c474 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	3301      	adds	r3, #1
 800c49a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1dd      	bne.n	800c464 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800c4ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	372c      	adds	r7, #44	@ 0x2c
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <memset>:
 800c4bc:	4402      	add	r2, r0
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d100      	bne.n	800c4c6 <memset+0xa>
 800c4c4:	4770      	bx	lr
 800c4c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ca:	e7f9      	b.n	800c4c0 <memset+0x4>

0800c4cc <__errno>:
 800c4cc:	4b01      	ldr	r3, [pc, #4]	@ (800c4d4 <__errno+0x8>)
 800c4ce:	6818      	ldr	r0, [r3, #0]
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	2000020c 	.word	0x2000020c

0800c4d8 <__libc_init_array>:
 800c4d8:	b570      	push	{r4, r5, r6, lr}
 800c4da:	4d0d      	ldr	r5, [pc, #52]	@ (800c510 <__libc_init_array+0x38>)
 800c4dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c514 <__libc_init_array+0x3c>)
 800c4de:	1b64      	subs	r4, r4, r5
 800c4e0:	10a4      	asrs	r4, r4, #2
 800c4e2:	2600      	movs	r6, #0
 800c4e4:	42a6      	cmp	r6, r4
 800c4e6:	d109      	bne.n	800c4fc <__libc_init_array+0x24>
 800c4e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c518 <__libc_init_array+0x40>)
 800c4ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c51c <__libc_init_array+0x44>)
 800c4ec:	f000 f848 	bl	800c580 <_init>
 800c4f0:	1b64      	subs	r4, r4, r5
 800c4f2:	10a4      	asrs	r4, r4, #2
 800c4f4:	2600      	movs	r6, #0
 800c4f6:	42a6      	cmp	r6, r4
 800c4f8:	d105      	bne.n	800c506 <__libc_init_array+0x2e>
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}
 800c4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c500:	4798      	blx	r3
 800c502:	3601      	adds	r6, #1
 800c504:	e7ee      	b.n	800c4e4 <__libc_init_array+0xc>
 800c506:	f855 3b04 	ldr.w	r3, [r5], #4
 800c50a:	4798      	blx	r3
 800c50c:	3601      	adds	r6, #1
 800c50e:	e7f2      	b.n	800c4f6 <__libc_init_array+0x1e>
 800c510:	0800c5e0 	.word	0x0800c5e0
 800c514:	0800c5e0 	.word	0x0800c5e0
 800c518:	0800c5e0 	.word	0x0800c5e0
 800c51c:	0800c5e4 	.word	0x0800c5e4

0800c520 <memcpy>:
 800c520:	440a      	add	r2, r1
 800c522:	4291      	cmp	r1, r2
 800c524:	f100 33ff 	add.w	r3, r0, #4294967295
 800c528:	d100      	bne.n	800c52c <memcpy+0xc>
 800c52a:	4770      	bx	lr
 800c52c:	b510      	push	{r4, lr}
 800c52e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c532:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c536:	4291      	cmp	r1, r2
 800c538:	d1f9      	bne.n	800c52e <memcpy+0xe>
 800c53a:	bd10      	pop	{r4, pc}

0800c53c <sqrtf>:
 800c53c:	b508      	push	{r3, lr}
 800c53e:	ed2d 8b02 	vpush	{d8}
 800c542:	eeb0 8a40 	vmov.f32	s16, s0
 800c546:	f000 f817 	bl	800c578 <__ieee754_sqrtf>
 800c54a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c552:	d60c      	bvs.n	800c56e <sqrtf+0x32>
 800c554:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c574 <sqrtf+0x38>
 800c558:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c560:	d505      	bpl.n	800c56e <sqrtf+0x32>
 800c562:	f7ff ffb3 	bl	800c4cc <__errno>
 800c566:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c56a:	2321      	movs	r3, #33	@ 0x21
 800c56c:	6003      	str	r3, [r0, #0]
 800c56e:	ecbd 8b02 	vpop	{d8}
 800c572:	bd08      	pop	{r3, pc}
 800c574:	00000000 	.word	0x00000000

0800c578 <__ieee754_sqrtf>:
 800c578:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c57c:	4770      	bx	lr
	...

0800c580 <_init>:
 800c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c582:	bf00      	nop
 800c584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c586:	bc08      	pop	{r3}
 800c588:	469e      	mov	lr, r3
 800c58a:	4770      	bx	lr

0800c58c <_fini>:
 800c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58e:	bf00      	nop
 800c590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c592:	bc08      	pop	{r3}
 800c594:	469e      	mov	lr, r3
 800c596:	4770      	bx	lr
