
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b000  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b1d8  0800b1d8  0000c1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b218  0800b218  0000d25c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b218  0800b218  0000c218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b220  0800b220  0000d25c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b220  0800b220  0000c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b224  0800b224  0000c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800b228  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001598  20000260  0800b484  0000d260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200017f8  0800b484  0000d7f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d25c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e69  00000000  00000000  0000d28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad5  00000000  00000000  000300f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00033bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137a  00000000  00000000  000354a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000042ea  00000000  00000000  00036822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020587  00000000  00000000  0003ab0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117f7c  00000000  00000000  0005b093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017300f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e20  00000000  00000000  00173054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00179e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000260 	.word	0x20000260
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b1c0 	.word	0x0800b1c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000264 	.word	0x20000264
 8000214:	0800b1c0 	.word	0x0800b1c0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000554:	213c      	movs	r1, #60	@ 0x3c
 8000556:	6838      	ldr	r0, [r7, #0]
 8000558:	f006 fc36 	bl	8006dc8 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f04f 0200 	mov.w	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ac:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005be:	4293      	cmp	r3, r2
 80005c0:	dd05      	ble.n	80005ce <Encoder_Update+0x36>
        deltaRaw -= 60000;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 80005c8:	3b60      	subs	r3, #96	@ 0x60
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e008      	b.n	80005e0 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <Encoder_Update+0x15c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	da04      	bge.n	80005e0 <Encoder_Update+0x48>
        deltaRaw += 60000;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80005dc:	3360      	adds	r3, #96	@ 0x60
 80005de:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80006f8 <Encoder_Update+0x160>
 80005f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80005f8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80006fc <Encoder_Update+0x164>
 80005fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	edd3 7a06 	vldr	s15, [r3, #24]
 8000616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800061a:	ed97 7a00 	vldr	s14, [r7]
 800061e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	ed93 7a03 	vldr	s14, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a07 	vldr	s15, [r3, #28]
 8000634:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000638:	ed97 7a00 	vldr	s14, [r7]
 800063c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	edd3 7a02 	vldr	s15, [r3, #8]
 800064c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000700 <Encoder_Update+0x168>
 8000650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	ed93 7a08 	vldr	s14, [r3, #32]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000680:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 80006fc <Encoder_Update+0x164>
 8000684:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000688:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800068c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	ed93 7a08 	vldr	s14, [r3, #32]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80006a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006aa:	ed97 7a00 	vldr	s14, [r7]
 80006ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80006c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006c8:	ed97 7a00 	vldr	s14, [r7]
 80006cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a1a      	ldr	r2, [r3, #32]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	ffff8ad0 	.word	0xffff8ad0
 80006f8:	40c90fda 	.word	0x40c90fda
 80006fc:	463b8000 	.word	0x463b8000
 8000700:	42651738 	.word	0x42651738

08000704 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    return enc->position;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	ee07 3a90 	vmov	s15, r3
}
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	ee07 3a90 	vmov	s15, r3
}
 8000732:	eeb0 0a67 	vmov.f32	s0, s15
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	ee07 3a90 	vmov	s15, r3
}
 8000750:	eeb0 0a67 	vmov.f32	s0, s15
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <Encoder_GetPosition_mm>:

float Encoder_GetDegree(Encoder *enc) {
	return enc->position_degree;
}

float Encoder_GetPosition_mm(Encoder *enc) {
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6a1b      	ldr	r3, [r3, #32]
 800076a:	ee07 3a90 	vmov	s15, r3
}
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000788:	ee07 3a90 	vmov	s15, r3
}
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3370      	adds	r3, #112	@ 0x70
 80007a8:	2204      	movs	r2, #4
 80007aa:	2104      	movs	r1, #4
 80007ac:	f00a fc8e 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f103 0008 	add.w	r0, r3, #8
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	33b0      	adds	r3, #176	@ 0xb0
 80007ba:	2204      	movs	r2, #4
 80007bc:	2104      	movs	r1, #4
 80007be:	f00a fc85 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f103 0010 	add.w	r0, r3, #16
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	33f0      	adds	r3, #240	@ 0xf0
 80007cc:	2204      	movs	r2, #4
 80007ce:	2104      	movs	r1, #4
 80007d0:	f00a fc7c 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f103 0018 	add.w	r0, r3, #24
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80007e0:	2204      	movs	r2, #4
 80007e2:	2104      	movs	r1, #4
 80007e4:	f00a fc72 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f103 0020 	add.w	r0, r3, #32
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80007f4:	2204      	movs	r2, #4
 80007f6:	2104      	movs	r1, #4
 80007f8:	f00a fc68 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8000808:	2204      	movs	r2, #4
 800080a:	2104      	movs	r1, #4
 800080c:	f00a fc5e 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800081c:	2204      	movs	r2, #4
 800081e:	2104      	movs	r1, #4
 8000820:	f00a fc54 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->Input_data);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000830:	2204      	movs	r2, #4
 8000832:	2104      	movs	r1, #4
 8000834:	f00a fc4a 	bl	800b0cc <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000844:	2201      	movs	r2, #1
 8000846:	2104      	movs	r1, #4
 8000848:	f00a fc40 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8000858:	2201      	movs	r2, #1
 800085a:	2104      	movs	r1, #4
 800085c:	f00a fc36 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800086c:	2201      	movs	r2, #1
 800086e:	2104      	movs	r1, #4
 8000870:	f00a fc2c 	bl	800b0cc <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000880:	2204      	movs	r2, #4
 8000882:	2104      	movs	r1, #4
 8000884:	f00a fc22 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000894:	2204      	movs	r2, #4
 8000896:	2104      	movs	r1, #4
 8000898:	f00a fc18 	bl	800b0cc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80008a8:	2204      	movs	r2, #4
 80008aa:	2104      	movs	r1, #4
 80008ac:	f00a fc0e 	bl	800b0cc <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e00b      	b.n	80008ce <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	338c      	adds	r3, #140	@ 0x8c
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	3304      	adds	r3, #4
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	ddf0      	ble.n	80008b6 <Kalman_Init+0x11c>
    }
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 80008de:	b480      	push	{r7}
 80008e0:	b085      	sub	sp, #20
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e01c      	b.n	800092a <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	e013      	b.n	800091e <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d101      	bne.n	8000902 <Kalman_SetProcessNoise+0x24>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	e001      	b.n	8000906 <Kalman_SetProcessNoise+0x28>
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	0091      	lsls	r1, r2, #2
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	440a      	add	r2, r1
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	324c      	adds	r2, #76	@ 0x4c
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	440a      	add	r2, r1
 8000916:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	3301      	adds	r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b03      	cmp	r3, #3
 8000922:	dde8      	ble.n	80008f6 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b03      	cmp	r3, #3
 800092e:	dddf      	ble.n	80008f0 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e01c      	b.n	800098a <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	e013      	b.n	800097e <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	429a      	cmp	r2, r3
 800095c:	d101      	bne.n	8000962 <Kalman_SetMeasurementNoise+0x24>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	e001      	b.n	8000966 <Kalman_SetMeasurementNoise+0x28>
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	0091      	lsls	r1, r2, #2
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	440a      	add	r2, r1
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	325c      	adds	r2, #92	@ 0x5c
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	440a      	add	r2, r1
 8000976:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3301      	adds	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b03      	cmp	r3, #3
 8000982:	dde8      	ble.n	8000956 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b03      	cmp	r3, #3
 800098e:	dddf      	ble.n	8000950 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <modbus_1t5_Timeout+0x1c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2201      	movs	r2, #1
 80009ae:	751a      	strb	r2, [r3, #20]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	2000027c 	.word	0x2000027c

080009c0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <modbus_3t5_Timeout+0x1c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2201      	movs	r2, #1
 80009ce:	755a      	strb	r2, [r3, #21]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	2000027c 	.word	0x2000027c

080009e0 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <modbus_UART_Recived+0x60>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2201      	movs	r2, #1
 80009f0:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <modbus_UART_Recived+0x60>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 80009fa:	1c59      	adds	r1, r3, #1
 80009fc:	b289      	uxth	r1, r1
 80009fe:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000a02:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000a06:	d210      	bcs.n	8000a2a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <modbus_UART_Recived+0x60>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68d8      	ldr	r0, [r3, #12]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <modbus_UART_Recived+0x60>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <modbus_UART_Recived+0x60>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a1a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000a1e:	4413      	add	r3, r2
 8000a20:	3302      	adds	r3, #2
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	f007 ffdf 	bl	80089e8 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <modbus_UART_Recived+0x60>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000027c 	.word	0x2000027c

08000a44 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000a4e:	4a24      	ldr	r2, [pc, #144]	@ (8000ae0 <Modbus_init+0x9c>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000a54:	4b22      	ldr	r3, [pc, #136]	@ (8000ae0 <Modbus_init+0x9c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000a5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <Modbus_init+0x9c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <Modbus_init+0xa0>)
 8000a64:	2114      	movs	r1, #20
 8000a66:	4618      	mov	r0, r3
 8000a68:	f006 feb4 	bl	80077d4 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <Modbus_init+0x9c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae8 <Modbus_init+0xa4>)
 8000a74:	210e      	movs	r1, #14
 8000a76:	4618      	mov	r0, r3
 8000a78:	f006 feac 	bl	80077d4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <Modbus_init+0x9c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4a1a      	ldr	r2, [pc, #104]	@ (8000aec <Modbus_init+0xa8>)
 8000a84:	2103      	movs	r1, #3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 fef4 	bl	8008874 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <Modbus_init+0x9c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	68d8      	ldr	r0, [r3, #12]
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <Modbus_init+0x9c>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <Modbus_init+0x9c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a9e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000aa2:	4413      	add	r3, r2
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f007 ff9d 	bl	80089e8 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <Modbus_init+0x9c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10c      	bne.n	8000ad8 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <Modbus_init+0x9c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fd6f 	bl	80065a8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000aca:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <Modbus_init+0x9c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f006 f836 	bl	8006b44 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000027c 	.word	0x2000027c
 8000ae4:	080009a1 	.word	0x080009a1
 8000ae8:	080009c1 	.word	0x080009c1
 8000aec:	080009e1 	.word	0x080009e1

08000af0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000afc:	23ff      	movs	r3, #255	@ 0xff
 8000afe:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000b00:	23ff      	movs	r3, #255	@ 0xff
 8000b02:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000b04:	e013      	b.n	8000b2e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	4053      	eors	r3, r2
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000b16:	4a10      	ldr	r2, [pc, #64]	@ (8000b58 <CRC16+0x68>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	4053      	eors	r3, r2
 8000b22:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <CRC16+0x6c>)
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	4413      	add	r3, r2
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000b2e:	883b      	ldrh	r3, [r7, #0]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	803a      	strh	r2, [r7, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e6      	bne.n	8000b06 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	b29b      	uxth	r3, r3
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000100 	.word	0x20000100
 8000b5c:	20000000 	.word	0x20000000

08000b60 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000b66:	4b80      	ldr	r3, [pc, #512]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	7e1b      	ldrb	r3, [r3, #24]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d80a      	bhi.n	8000b88 <Modbus_Protocal_Worker+0x28>
 8000b72:	a201      	add	r2, pc, #4	@ (adr r2, 8000b78 <Modbus_Protocal_Worker+0x18>)
 8000b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b78:	08000b93 	.word	0x08000b93
 8000b7c:	08000d31 	.word	0x08000d31
 8000b80:	08000c1d 	.word	0x08000c1d
 8000b84:	08000c43 	.word	0x08000c43
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000b88:	4b77      	ldr	r3, [pc, #476]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	761a      	strb	r2, [r3, #24]
		break;
 8000b90:	e0e6      	b.n	8000d60 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000b92:	4b75      	ldr	r3, [pc, #468]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000b9e:	f000 f9d5 	bl	8000f4c <Modbus_Emission>
 8000ba2:	e01c      	b.n	8000bde <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000ba4:	4b70      	ldr	r3, [pc, #448]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	7d9b      	ldrb	r3, [r3, #22]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d017      	beq.n	8000bde <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000bae:	4b6e      	ldr	r3, [pc, #440]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b67      	ldr	r3, [pc, #412]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f042 0201 	orr.w	r2, r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000bd6:	4b64      	ldr	r3, [pc, #400]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2203      	movs	r2, #3
 8000bdc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000bde:	4b62      	ldr	r3, [pc, #392]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be8:	2b20      	cmp	r3, #32
 8000bea:	f040 80b2 	bne.w	8000d52 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000bee:	4b5e      	ldr	r3, [pc, #376]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68d8      	ldr	r0, [r3, #12]
 8000bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b59      	ldr	r3, [pc, #356]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000c0a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000c0e:	4413      	add	r3, r2
 8000c10:	3302      	adds	r3, #2
 8000c12:	2201      	movs	r2, #1
 8000c14:	4619      	mov	r1, r3
 8000c16:	f007 fee7 	bl	80089e8 <HAL_UART_Receive_IT>
		}
		break;
 8000c1a:	e09a      	b.n	8000d52 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000c1c:	4b52      	ldr	r3, [pc, #328]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	7d1b      	ldrb	r3, [r3, #20]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8097 	beq.w	8000d56 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000c28:	4b4f      	ldr	r3, [pc, #316]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000c30:	4b4d      	ldr	r3, [pc, #308]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	22fe      	movs	r2, #254	@ 0xfe
 8000c36:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000c38:	4b4b      	ldr	r3, [pc, #300]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000c40:	e089      	b.n	8000d56 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000c42:	4b49      	ldr	r3, [pc, #292]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	7d9b      	ldrb	r3, [r3, #22]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d009      	beq.n	8000c60 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8000c4c:	4b46      	ldr	r3, [pc, #280]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d103      	bne.n	8000c60 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000c58:	4b43      	ldr	r3, [pc, #268]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	22ff      	movs	r2, #255	@ 0xff
 8000c5e:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000c60:	4b41      	ldr	r3, [pc, #260]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000c68:	f113 0f02 	cmn.w	r3, #2
 8000c6c:	d150      	bne.n	8000d10 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000c76:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000c86:	3b02      	subs	r3, #2
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	f7ff ff30 	bl	8000af0 <CRC16>
 8000c90:	4603      	mov	r3, r0
 8000c92:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000c94:	793a      	ldrb	r2, [r7, #4]
 8000c96:	4b34      	ldr	r3, [pc, #208]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c98:	6819      	ldr	r1, [r3, #0]
 8000c9a:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d10c      	bne.n	8000cc8 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000cae:	797a      	ldrb	r2, [r7, #5]
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d004      	beq.n	8000cd2 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000cc8:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	22ff      	movs	r2, #255	@ 0xff
 8000cce:	75da      	strb	r2, [r3, #23]
				break;
 8000cd0:	e046      	b.n	8000d60 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000cd2:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000cda:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d113      	bne.n	8000d0c <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000ce4:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000cec:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000cf4:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000cfe:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000d00:	461a      	mov	r2, r3
 8000d02:	f00a fa2d 	bl	800b160 <memcpy>

			//execute command
			Modbus_frame_response();
 8000d06:	f000 f909 	bl	8000f1c <Modbus_frame_response>
 8000d0a:	e001      	b.n	8000d10 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000d0c:	bf00      	nop
					}
		break;


	}
}
 8000d0e:	e027      	b.n	8000d60 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	7d5b      	ldrb	r3, [r3, #21]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d01f      	beq.n	8000d5a <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f007 ff29 	bl	8008b80 <HAL_UART_AbortReceive>
		break;
 8000d2e:	e014      	b.n	8000d5a <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	2b20      	cmp	r3, #32
 8000d3c:	d10f      	bne.n	8000d5e <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000d48:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <Modbus_Protocal_Worker+0x208>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	761a      	strb	r2, [r3, #24]
		break;
 8000d50:	e005      	b.n	8000d5e <Modbus_Protocal_Worker+0x1fe>
		break;
 8000d52:	bf00      	nop
 8000d54:	e004      	b.n	8000d60 <Modbus_Protocal_Worker+0x200>
		break;
 8000d56:	bf00      	nop
 8000d58:	e002      	b.n	8000d60 <Modbus_Protocal_Worker+0x200>
		break;
 8000d5a:	bf00      	nop
 8000d5c:	e000      	b.n	8000d60 <Modbus_Protocal_Worker+0x200>
		break;
 8000d5e:	bf00      	nop
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000027c 	.word	0x2000027c

08000d6c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000d72:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	7e9b      	ldrb	r3, [r3, #26]
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	7ed2      	ldrb	r2, [r2, #27]
 8000d82:	4413      	add	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d903      	bls.n	8000d9a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f000 f8a0 	bl	8000ed8 <ModbusErrorReply>
			 return;
 8000d98:	e023      	b.n	8000de2 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000d9a:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6859      	ldr	r1, [r3, #4]
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	440b      	add	r3, r1
 8000daa:	7f12      	ldrb	r2, [r2, #28]
 8000dac:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6859      	ldr	r1, [r3, #4]
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	440b      	add	r3, r1
 8000dbe:	7f52      	ldrb	r2, [r2, #29]
 8000dc0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f00a f9c4 	bl	800b160 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <modbusWrite1Register+0x7c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2205      	movs	r2, #5
 8000dde:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000027c 	.word	0x2000027c

08000dec <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000df2:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	7f1b      	ldrb	r3, [r3, #28]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4a35      	ldr	r2, [pc, #212]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	7f52      	ldrb	r2, [r2, #29]
 8000e02:	4413      	add	r3, r2
 8000e04:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	7e9b      	ldrb	r3, [r3, #26]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4a30      	ldr	r2, [pc, #192]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	7ed2      	ldrb	r2, [r2, #27]
 8000e16:	4413      	add	r3, r2
 8000e18:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <modbusRead1Register+0x3a>
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e24:	d903      	bls.n	8000e2e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f856 	bl	8000ed8 <ModbusErrorReply>
		 return;
 8000e2c:	e04e      	b.n	8000ecc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d808      	bhi.n	8000e4c <modbusRead1Register+0x60>
 8000e3a:	88ba      	ldrh	r2, [r7, #4]
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	4413      	add	r3, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d903      	bls.n	8000e54 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 f843 	bl	8000ed8 <ModbusErrorReply>
		 return;
 8000e52:	e03b      	b.n	8000ecc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	0052      	lsls	r2, r2, #1
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000e6e:	2400      	movs	r4, #0
 8000e70:	e020      	b.n	8000eb4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	4423      	add	r3, r4
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	18d1      	adds	r1, r2, r3
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	1c63      	adds	r3, r4, #1
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	7849      	ldrb	r1, [r1, #1]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	4423      	add	r3, r4
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	18d1      	adds	r1, r2, r3
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	0063      	lsls	r3, r4, #1
 8000ea6:	3303      	adds	r3, #3
 8000ea8:	7809      	ldrb	r1, [r1, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	460a      	mov	r2, r1
 8000eae:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000eb2:	3401      	adds	r4, #1
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	dbdb      	blt.n	8000e72 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <modbusRead1Register+0xe8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0052      	lsls	r2, r2, #1
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000027c 	.word	0x2000027c

08000ed8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <ModbusErrorReply+0x40>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	7e5a      	ldrb	r2, [r3, #25]
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <ModbusErrorReply+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <ModbusErrorReply+0x40>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <ModbusErrorReply+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2202      	movs	r2, #2
 8000f06:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000027c 	.word	0x2000027c

08000f1c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <Modbus_frame_response+0x2c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	7e5b      	ldrb	r3, [r3, #25]
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d004      	beq.n	8000f34 <Modbus_frame_response+0x18>
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d105      	bne.n	8000f3a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000f2e:	f7ff ff1d 	bl	8000d6c <modbusWrite1Register>
		break;
 8000f32:	e006      	b.n	8000f42 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000f34:	f7ff ff5a 	bl	8000dec <modbusRead1Register>
		break;
 8000f38:	e003      	b.n	8000f42 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ffcc 	bl	8000ed8 <ModbusErrorReply>
		break;
 8000f40:	bf00      	nop

	}
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000027c 	.word	0x2000027c

08000f4c <Modbus_Emission>:

void Modbus_Emission()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000f52:	4b3c      	ldr	r3, [pc, #240]	@ (8001044 <Modbus_Emission+0xf8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5c:	2b20      	cmp	r3, #32
 8000f5e:	d15d      	bne.n	800101c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000f60:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <Modbus_Emission+0xf8>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <Modbus_Emission+0xf8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000f6e:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <Modbus_Emission+0xf8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000f76:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000f78:	4b32      	ldr	r3, [pc, #200]	@ (8001044 <Modbus_Emission+0xf8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000f80:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <Modbus_Emission+0xf8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f00a f8e9 	bl	800b160 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <Modbus_Emission+0xf8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <Modbus_Emission+0xf8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3203      	adds	r2, #3
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000fa4:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <Modbus_Emission+0xf8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000fac:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <Modbus_Emission+0xf8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000fb4:	3b02      	subs	r3, #2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4610      	mov	r0, r2
 8000fba:	f7ff fd99 	bl	8000af0 <CRC16>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <Modbus_Emission+0xf8>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <Modbus_Emission+0xf8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000fce:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000fd0:	7939      	ldrb	r1, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <Modbus_Emission+0xf8>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <Modbus_Emission+0xf8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000fe6:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000fe8:	7979      	ldrb	r1, [r7, #5]
 8000fea:	4413      	add	r3, r2
 8000fec:	460a      	mov	r2, r1
 8000fee:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <Modbus_Emission+0xf8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffc:	2b20      	cmp	r3, #32
 8000ffe:	d10d      	bne.n	800101c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <Modbus_Emission+0xf8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <Modbus_Emission+0xf8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <Modbus_Emission+0xf8>)
 8001010:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001012:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001016:	461a      	mov	r2, r3
 8001018:	f007 fd32 	bl	8008a80 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <Modbus_Emission+0xf8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <Modbus_Emission+0xf8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <Modbus_Emission+0xf8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <Modbus_Emission+0xf8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2202      	movs	r2, #2
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000027c 	.word	0x2000027c

08001048 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8001048:	b4b0      	push	{r4, r5, r7}
 800104a:	b09f      	sub	sp, #124	@ 0x7c
 800104c:	af00      	add	r7, sp, #0
 800104e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001050:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001054:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001058:	ed87 2b08 	vstr	d2, [r7, #32]
 800105c:	ed87 3b06 	vstr	d3, [r7, #24]
 8001060:	ed87 4b04 	vstr	d4, [r7, #16]
 8001064:	ed87 5b02 	vstr	d5, [r7, #8]
 8001068:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 800106c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001070:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001074:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001078:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800107c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001080:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001088:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 800108c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001090:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001098:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 800109c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010a0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 80010a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010a6:	461d      	mov	r5, r3
 80010a8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010bc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80010c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010c2:	377c      	adds	r7, #124	@ 0x7c
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bcb0      	pop	{r4, r5, r7}
 80010c8:	4770      	bx	lr
	...

080010cc <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	@ 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6178      	str	r0, [r7, #20]
 80010d4:	ed87 0a04 	vstr	s0, [r7, #16]
 80010d8:	edc7 0a03 	vstr	s1, [r7, #12]
 80010dc:	ed87 1a02 	vstr	s2, [r7, #8]
 80010e0:	edc7 1a01 	vstr	s3, [r7, #4]
 80010e4:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 80010e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 80010f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	db02      	blt.n	800110c <InitTrajectorySegment+0x40>
 8001106:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800110a:	e000      	b.n	800110e <InitTrajectorySegment+0x42>
 800110c:	4b49      	ldr	r3, [pc, #292]	@ (8001234 <InitTrajectorySegment+0x168>)
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8001110:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001114:	eef0 7ae7 	vabs.f32	s15, s15
 8001118:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 800111c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 800112c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001130:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001138:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 800114c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001150:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001154:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	d524      	bpl.n	80011ac <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8001162:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001166:	edd7 7a01 	vldr	s15, [r7, #4]
 800116a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800116e:	eeb0 0a66 	vmov.f32	s0, s13
 8001172:	f00a f803 	bl	800b17c <sqrtf>
 8001176:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8001182:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001186:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8001190:	ed97 7a01 	vldr	s14, [r7, #4]
 8001194:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800119c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	edc3 7a02 	vstr	s15, [r3, #8]
 80011aa:	e027      	b.n	80011fc <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 80011ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80011b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011b4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 80011c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80011c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 80011d2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 80011ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8001208:	ed97 7a01 	vldr	s14, [r7, #4]
 800120c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800121e:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001224:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	621a      	str	r2, [r3, #32]
}
 800122c:	bf00      	nop
 800122e:	3730      	adds	r7, #48	@ 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	bf800000 	.word	0xbf800000

08001238 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8001238:	b480      	push	{r7}
 800123a:	b08f      	sub	sp, #60	@ 0x3c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edd3 7a08 	vldr	s15, [r3, #32]
 800124a:	ed97 7a00 	vldr	s14, [r7]
 800124e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001252:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8001256:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800125a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001262:	d503      	bpl.n	800126c <GetTrajectoryPosition+0x34>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	e0b4      	b.n	80013d6 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001272:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	db03      	blt.n	8001288 <GetTrajectoryPosition+0x50>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edd3 7a01 	vldr	s15, [r3, #4]
 8001286:	e0a6      	b.n	80013d6 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	edd3 7a04 	vldr	s15, [r3, #16]
 80012a0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80012a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	d512      	bpl.n	80012d4 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 80012ae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80012b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80012be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80012c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d2:	e080      	b.n	80013d6 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80012e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80012e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d525      	bpl.n	800133e <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80012f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001304:	edd7 7a04 	vldr	s15, [r7, #16]
 8001308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001314:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8001320:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001324:	edd7 7a04 	vldr	s15, [r7, #16]
 8001328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800132c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001334:	edd7 7a03 	vldr	s15, [r7, #12]
 8001338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133c:	e04b      	b.n	80013d6 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 800134a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800134e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001352:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001356:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800135a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001366:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 8001372:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001376:	edd7 7a08 	vldr	s15, [r7, #32]
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001386:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 800138a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800138e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001396:	edd7 7a08 	vldr	s15, [r7, #32]
 800139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139e:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 80013a2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013ba:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80013be:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d2:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	373c      	adds	r7, #60	@ 0x3c
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80013f6:	ed97 7a00 	vldr	s14, [r7]
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8001402:	edd7 7a05 	vldr	s15, [r7, #20]
 8001406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	d502      	bpl.n	8001416 <GetTrajectoryVelocity+0x32>
 8001410:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80014c0 <GetTrajectoryVelocity+0xdc>
 8001414:	e04d      	b.n	80014b2 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edd3 7a07 	vldr	s15, [r3, #28]
 800141c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	db02      	blt.n	8001430 <GetTrajectoryVelocity+0x4c>
 800142a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80014c0 <GetTrajectoryVelocity+0xdc>
 800142e:	e040      	b.n	80014b2 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001442:	ed97 7a05 	vldr	s14, [r7, #20]
 8001446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d506      	bpl.n	800145e <GetTrajectoryVelocity+0x7a>
        return a * t;
 8001450:	ed97 7a04 	vldr	s14, [r7, #16]
 8001454:	edd7 7a05 	vldr	s15, [r7, #20]
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	e029      	b.n	80014b2 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	ed93 7a04 	vldr	s14, [r3, #16]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	edd3 7a05 	vldr	s15, [r3, #20]
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147a:	d502      	bpl.n	8001482 <GetTrajectoryVelocity+0x9e>
        return v;
 800147c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001480:	e017      	b.n	80014b2 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a04 	vldr	s15, [r3, #16]
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a05 	vldr	s15, [r3, #20]
 8001496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149a:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 800149e:	ed97 7a04 	vldr	s14, [r7, #16]
 80014a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80014b2:	eeb0 0a67 	vmov.f32	s0, s15
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
	...

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b094      	sub	sp, #80	@ 0x50
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f001 fe38 	bl	8003142 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 fae3 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f000 ffbd 	bl	8002454 <MX_GPIO_Init>
  MX_DMA_Init();
 80014da:	f000 ff91 	bl	8002400 <MX_DMA_Init>
  MX_TIM3_Init();
 80014de:	f000 fca9 	bl	8001e34 <MX_TIM3_Init>
  MX_ADC1_Init();
 80014e2:	f000 fb27 	bl	8001b34 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014e6:	f000 fc03 	bl	8001cf0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014ea:	f000 fc55 	bl	8001d98 <MX_TIM2_Init>
  MX_TIM4_Init();
 80014ee:	f000 fcf7 	bl	8001ee0 <MX_TIM4_Init>
  MX_TIM20_Init();
 80014f2:	f000 fe7b 	bl	80021ec <MX_TIM20_Init>
  MX_TIM8_Init();
 80014f6:	f000 fd49 	bl	8001f8c <MX_TIM8_Init>
  MX_TIM16_Init();
 80014fa:	f000 fdf7 	bl	80020ec <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80014fe:	f000 ff31 	bl	8002364 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001502:	f000 fb8f 	bl	8001c24 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8001506:	4850      	ldr	r0, [pc, #320]	@ (8001648 <main+0x180>)
 8001508:	f004 ffde 	bl	80064c8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 800150c:	484f      	ldr	r0, [pc, #316]	@ (800164c <main+0x184>)
 800150e:	f004 ffdb 	bl	80064c8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001512:	210c      	movs	r1, #12
 8001514:	484d      	ldr	r0, [pc, #308]	@ (800164c <main+0x184>)
 8001516:	f005 f99b 	bl	8006850 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 800151a:	2100      	movs	r1, #0
 800151c:	484a      	ldr	r0, [pc, #296]	@ (8001648 <main+0x180>)
 800151e:	f005 f997 	bl	8006850 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 8001522:	2108      	movs	r1, #8
 8001524:	4848      	ldr	r0, [pc, #288]	@ (8001648 <main+0x180>)
 8001526:	f005 f993 	bl	8006850 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 800152a:	4949      	ldr	r1, [pc, #292]	@ (8001650 <main+0x188>)
 800152c:	4849      	ldr	r0, [pc, #292]	@ (8001654 <main+0x18c>)
 800152e:	f7ff f809 	bl	8000544 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8001532:	4949      	ldr	r1, [pc, #292]	@ (8001658 <main+0x190>)
 8001534:	4849      	ldr	r0, [pc, #292]	@ (800165c <main+0x194>)
 8001536:	f7ff f805 	bl	8000544 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 800153a:	4849      	ldr	r0, [pc, #292]	@ (8001660 <main+0x198>)
 800153c:	f002 fa3a 	bl	80039b4 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001540:	4848      	ldr	r0, [pc, #288]	@ (8001664 <main+0x19c>)
 8001542:	f005 f831 	bl	80065a8 <HAL_TIM_Base_Start_IT>

	int lastTick = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int pre_tick = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	643b      	str	r3, [r7, #64]	@ 0x40
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800154e:	213c      	movs	r1, #60	@ 0x3c
 8001550:	4841      	ldr	r0, [pc, #260]	@ (8001658 <main+0x190>)
 8001552:	f005 fc39 	bl	8006dc8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001556:	213c      	movs	r1, #60	@ 0x3c
 8001558:	483d      	ldr	r0, [pc, #244]	@ (8001650 <main+0x188>)
 800155a:	f005 fc35 	bl	8006dc8 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 800155e:	4b42      	ldr	r3, [pc, #264]	@ (8001668 <main+0x1a0>)
 8001560:	4a42      	ldr	r2, [pc, #264]	@ (800166c <main+0x1a4>)
 8001562:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001564:	4b40      	ldr	r3, [pc, #256]	@ (8001668 <main+0x1a0>)
 8001566:	4a42      	ldr	r2, [pc, #264]	@ (8001670 <main+0x1a8>)
 8001568:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 800156a:	4b3f      	ldr	r3, [pc, #252]	@ (8001668 <main+0x1a0>)
 800156c:	2215      	movs	r2, #21
 800156e:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001570:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <main+0x1a0>)
 8001572:	22c8      	movs	r2, #200	@ 0xc8
 8001574:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001576:	493f      	ldr	r1, [pc, #252]	@ (8001674 <main+0x1ac>)
 8001578:	483b      	ldr	r0, [pc, #236]	@ (8001668 <main+0x1a0>)
 800157a:	f7ff fa63 	bl	8000a44 <Modbus_init>

	Kalman_Init(&kf);
 800157e:	483e      	ldr	r0, [pc, #248]	@ (8001678 <main+0x1b0>)
 8001580:	f7ff f90b 	bl	800079a <Kalman_Init>

	kf.A_data[0] = 1;
 8001584:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <main+0x1b0>)
 8001586:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800158a:	671a      	str	r2, [r3, #112]	@ 0x70
	kf.A_data[1] = 0.0009998;
 800158c:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <main+0x1b0>)
 800158e:	4a3b      	ldr	r2, [pc, #236]	@ (800167c <main+0x1b4>)
 8001590:	675a      	str	r2, [r3, #116]	@ 0x74
	kf.A_data[2] = -2.659e-06;
 8001592:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <main+0x1b0>)
 8001594:	4a3a      	ldr	r2, [pc, #232]	@ (8001680 <main+0x1b8>)
 8001596:	679a      	str	r2, [r3, #120]	@ 0x78
	kf.A_data[3] = 8.108e-08;
 8001598:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <main+0x1b0>)
 800159a:	4a3a      	ldr	r2, [pc, #232]	@ (8001684 <main+0x1bc>)
 800159c:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf.A_data[4] = 0;
 800159e:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <main+0x1b0>)
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf.A_data[5] = 0.9996;
 80015a8:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <main+0x1b0>)
 80015aa:	4a37      	ldr	r2, [pc, #220]	@ (8001688 <main+0x1c0>)
 80015ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf.A_data[6] = -0.005318;
 80015b0:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <main+0x1b0>)
 80015b2:	4a36      	ldr	r2, [pc, #216]	@ (800168c <main+0x1c4>)
 80015b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf.A_data[7] = 0.0001622;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <main+0x1b0>)
 80015ba:	4a35      	ldr	r2, [pc, #212]	@ (8001690 <main+0x1c8>)
 80015bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf.A_data[8] = 0;
 80015c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <main+0x1b0>)
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf.A_data[9] = 0;
 80015ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <main+0x1b0>)
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf.A_data[10] = 1;
 80015d4:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <main+0x1b0>)
 80015d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf.A_data[11] = 0;
 80015de:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <main+0x1b0>)
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf.A_data[12] = 0;
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <main+0x1b0>)
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf.A_data[13] = -2.746;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <main+0x1b0>)
 80015f4:	4a27      	ldr	r2, [pc, #156]	@ (8001694 <main+0x1cc>)
 80015f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf.A_data[14] = 0.007303;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <main+0x1b0>)
 80015fc:	4a26      	ldr	r2, [pc, #152]	@ (8001698 <main+0x1d0>)
 80015fe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf.A_data[15] = 0.1354;
 8001602:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <main+0x1b0>)
 8001604:	4a25      	ldr	r2, [pc, #148]	@ (800169c <main+0x1d4>)
 8001606:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf.B_data[0] = 1.203e-07;
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <main+0x1b0>)
 800160c:	4a24      	ldr	r2, [pc, #144]	@ (80016a0 <main+0x1d8>)
 800160e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf.B_data[1] = 0.0002406;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <main+0x1b0>)
 8001614:	4a23      	ldr	r2, [pc, #140]	@ (80016a4 <main+0x1dc>)
 8001616:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf.B_data[2] = 0;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <main+0x1b0>)
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf.B_data[3] = 1.685;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <main+0x1b0>)
 8001626:	4a20      	ldr	r2, [pc, #128]	@ (80016a8 <main+0x1e0>)
 8001628:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800162c:	2300      	movs	r3, #0
 800162e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001630:	e050      	b.n	80016d4 <main+0x20c>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001632:	2300      	movs	r3, #0
 8001634:	647b      	str	r3, [r7, #68]	@ 0x44
 8001636:	e047      	b.n	80016c8 <main+0x200>
	        kf.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8001638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800163a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800163c:	429a      	cmp	r2, r3
 800163e:	d135      	bne.n	80016ac <main+0x1e4>
 8001640:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001644:	e034      	b.n	80016b0 <main+0x1e8>
 8001646:	bf00      	nop
 8001648:	20000820 	.word	0x20000820
 800164c:	20000688 	.word	0x20000688
 8001650:	200005bc 	.word	0x200005bc
 8001654:	20000a18 	.word	0x20000a18
 8001658:	200004f0 	.word	0x200004f0
 800165c:	20000a4c 	.word	0x20000a4c
 8001660:	20000280 	.word	0x20000280
 8001664:	20000424 	.word	0x20000424
 8001668:	20000c1c 	.word	0x20000c1c
 800166c:	200008ec 	.word	0x200008ec
 8001670:	20000754 	.word	0x20000754
 8001674:	200010f4 	.word	0x200010f4
 8001678:	20001358 	.word	0x20001358
 800167c:	3a830bb9 	.word	0x3a830bb9
 8001680:	b6327146 	.word	0xb6327146
 8001684:	33ae1e34 	.word	0x33ae1e34
 8001688:	3f7fe5c9 	.word	0x3f7fe5c9
 800168c:	bbae429e 	.word	0xbbae429e
 8001690:	392a143b 	.word	0x392a143b
 8001694:	c02fbe77 	.word	0xc02fbe77
 8001698:	3bef4e01 	.word	0x3bef4e01
 800169c:	3e0aa64c 	.word	0x3e0aa64c
 80016a0:	34012bd0 	.word	0x34012bd0
 80016a4:	397c4992 	.word	0x397c4992
 80016a8:	3fd7ae14 	.word	0x3fd7ae14
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016b2:	0099      	lsls	r1, r3, #2
 80016b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016b6:	440b      	add	r3, r1
 80016b8:	49b3      	ldr	r1, [pc, #716]	@ (8001988 <main+0x4c0>)
 80016ba:	333c      	adds	r3, #60	@ 0x3c
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80016c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016c4:	3301      	adds	r3, #1
 80016c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80016c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	ddb4      	ble.n	8001638 <main+0x170>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80016ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016d0:	3301      	adds	r3, #1
 80016d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	ddab      	ble.n	8001632 <main+0x16a>
	    }
	}

	// Prismatic
	kf.x_data[0] = 0;
 80016da:	4bab      	ldr	r3, [pc, #684]	@ (8001988 <main+0x4c0>)
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf.x_data[1] = 0;
 80016e4:	4ba8      	ldr	r3, [pc, #672]	@ (8001988 <main+0x4c0>)
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf.x_data[2] = 0;
 80016ee:	4ba6      	ldr	r3, [pc, #664]	@ (8001988 <main+0x4c0>)
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf.x_data[3] = 0;
 80016f8:	4ba3      	ldr	r3, [pc, #652]	@ (8001988 <main+0x4c0>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf, 0.01f);
 8001702:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 800198c <main+0x4c4>
 8001706:	48a0      	ldr	r0, [pc, #640]	@ (8001988 <main+0x4c0>)
 8001708:	f7ff f919 	bl	800093e <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf, 0.1f);
 800170c:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8001990 <main+0x4c8>
 8001710:	489d      	ldr	r0, [pc, #628]	@ (8001988 <main+0x4c0>)
 8001712:	f7ff f8e4 	bl	80008de <Kalman_SetProcessNoise>
	motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01, 1.77e-01, 3.8719, 0.0016);
 8001716:	4c9f      	ldr	r4, [pc, #636]	@ (8001994 <main+0x4cc>)
 8001718:	463b      	mov	r3, r7
 800171a:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8001958 <main+0x490>
 800171e:	ed9f 5b90 	vldr	d5, [pc, #576]	@ 8001960 <main+0x498>
 8001722:	ed9f 4b91 	vldr	d4, [pc, #580]	@ 8001968 <main+0x4a0>
 8001726:	ed9f 3b90 	vldr	d3, [pc, #576]	@ 8001968 <main+0x4a0>
 800172a:	ed9f 2b91 	vldr	d2, [pc, #580]	@ 8001970 <main+0x4a8>
 800172e:	ed9f 1b92 	vldr	d1, [pc, #584]	@ 8001978 <main+0x4b0>
 8001732:	ed9f 0b93 	vldr	d0, [pc, #588]	@ 8001980 <main+0x4b8>
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc86 	bl	8001048 <create_prismatic_motor>
 800173c:	4625      	mov	r5, r4
 800173e:	463c      	mov	r4, r7
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001750:	e885 0003 	stmia.w	r5, {r0, r1}

	// Prismatic Position
	Pris_posi_PID.Kp = 1;
 8001754:	4b90      	ldr	r3, [pc, #576]	@ (8001998 <main+0x4d0>)
 8001756:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800175a:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.05;
 800175c:	4b8e      	ldr	r3, [pc, #568]	@ (8001998 <main+0x4d0>)
 800175e:	4a8f      	ldr	r2, [pc, #572]	@ (800199c <main+0x4d4>)
 8001760:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.1;
 8001762:	4b8d      	ldr	r3, [pc, #564]	@ (8001998 <main+0x4d0>)
 8001764:	4a8e      	ldr	r2, [pc, #568]	@ (80019a0 <main+0x4d8>)
 8001766:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8001768:	2100      	movs	r1, #0
 800176a:	488b      	ldr	r0, [pc, #556]	@ (8001998 <main+0x4d0>)
 800176c:	f009 fc78 	bl	800b060 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 1;
 8001770:	4b8c      	ldr	r3, [pc, #560]	@ (80019a4 <main+0x4dc>)
 8001772:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001776:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.1;
 8001778:	4b8a      	ldr	r3, [pc, #552]	@ (80019a4 <main+0x4dc>)
 800177a:	4a89      	ldr	r2, [pc, #548]	@ (80019a0 <main+0x4d8>)
 800177c:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 800177e:	4b89      	ldr	r3, [pc, #548]	@ (80019a4 <main+0x4dc>)
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8001786:	2100      	movs	r1, #0
 8001788:	4886      	ldr	r0, [pc, #536]	@ (80019a4 <main+0x4dc>)
 800178a:	f009 fc69 	bl	800b060 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 1;
 800178e:	4b86      	ldr	r3, [pc, #536]	@ (80019a8 <main+0x4e0>)
 8001790:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001794:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 0.00001;
 8001796:	4b84      	ldr	r3, [pc, #528]	@ (80019a8 <main+0x4e0>)
 8001798:	4a84      	ldr	r2, [pc, #528]	@ (80019ac <main+0x4e4>)
 800179a:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 0.1;
 800179c:	4b82      	ldr	r3, [pc, #520]	@ (80019a8 <main+0x4e0>)
 800179e:	4a80      	ldr	r2, [pc, #512]	@ (80019a0 <main+0x4d8>)
 80017a0:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 80017a2:	2100      	movs	r1, #0
 80017a4:	4880      	ldr	r0, [pc, #512]	@ (80019a8 <main+0x4e0>)
 80017a6:	f009 fc5b 	bl	800b060 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 1;
 80017aa:	4b81      	ldr	r3, [pc, #516]	@ (80019b0 <main+0x4e8>)
 80017ac:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017b0:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.00001;
 80017b2:	4b7f      	ldr	r3, [pc, #508]	@ (80019b0 <main+0x4e8>)
 80017b4:	4a7d      	ldr	r2, [pc, #500]	@ (80019ac <main+0x4e4>)
 80017b6:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 80017b8:	4b7d      	ldr	r3, [pc, #500]	@ (80019b0 <main+0x4e8>)
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 80017c0:	2100      	movs	r1, #0
 80017c2:	487b      	ldr	r0, [pc, #492]	@ (80019b0 <main+0x4e8>)
 80017c4:	f009 fc4c 	bl	800b060 <arm_pid_init_f32>

	InitTrajectorySegment(&segments[0], 0.0f, 500.0f, 500.0f, 250.0f, 0.0f);
 80017c8:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 80019b4 <main+0x4ec>
 80017cc:	eddf 1a7a 	vldr	s3, [pc, #488]	@ 80019b8 <main+0x4f0>
 80017d0:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80019bc <main+0x4f4>
 80017d4:	eddf 0a79 	vldr	s1, [pc, #484]	@ 80019bc <main+0x4f4>
 80017d8:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 80019b4 <main+0x4ec>
 80017dc:	4878      	ldr	r0, [pc, #480]	@ (80019c0 <main+0x4f8>)
 80017de:	f7ff fc75 	bl	80010cc <InitTrajectorySegment>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 80017e2:	4b78      	ldr	r3, [pc, #480]	@ (80019c4 <main+0x4fc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	2140      	movs	r1, #64	@ 0x40
 80017ec:	4876      	ldr	r0, [pc, #472]	@ (80019c8 <main+0x500>)
 80017ee:	f003 fda7 	bl	8005340 <HAL_GPIO_WritePin>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
		HAL_ADC_Start(&hadc1);
 80017f2:	4876      	ldr	r0, [pc, #472]	@ (80019cc <main+0x504>)
 80017f4:	f002 f8de 	bl	80039b4 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 80017f8:	4875      	ldr	r0, [pc, #468]	@ (80019d0 <main+0x508>)
 80017fa:	f002 f8db 	bl	80039b4 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 80017fe:	4873      	ldr	r0, [pc, #460]	@ (80019cc <main+0x504>)
 8001800:	f002 f9bc 	bl	8003b7c <HAL_ADC_GetValue>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b72      	ldr	r3, [pc, #456]	@ (80019d4 <main+0x50c>)
 800180a:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 800180c:	4870      	ldr	r0, [pc, #448]	@ (80019d0 <main+0x508>)
 800180e:	f002 f9b5 	bl	8003b7c <HAL_ADC_GetValue>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <main+0x510>)
 8001818:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 800181a:	4b70      	ldr	r3, [pc, #448]	@ (80019dc <main+0x514>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	4a6f      	ldr	r2, [pc, #444]	@ (80019e0 <main+0x518>)
 8001822:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8001824:	4b6f      	ldr	r3, [pc, #444]	@ (80019e4 <main+0x51c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	4a6f      	ldr	r2, [pc, #444]	@ (80019e8 <main+0x520>)
 800182c:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 800182e:	f7ff f997 	bl	8000b60 <Modbus_Protocal_Worker>
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 8001832:	f001 fceb 	bl	800320c <HAL_GetTick>
 8001836:	63f8      	str	r0, [r7, #60]	@ 0x3c
		float dt = (currentTick - lastTick) / 1000.0f;
 8001838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800183a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001846:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80019ec <main+0x524>
 800184a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.01f) {
 8001852:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001856:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800198c <main+0x4c4>
 800185a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	db3b      	blt.n	80018dc <main+0x414>
			Encoder_Update(&encoder1, dt);
 8001864:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001868:	4861      	ldr	r0, [pc, #388]	@ (80019f0 <main+0x528>)
 800186a:	f7fe fe95 	bl	8000598 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 800186e:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001872:	4860      	ldr	r0, [pc, #384]	@ (80019f4 <main+0x52c>)
 8001874:	f7fe fe90 	bl	8000598 <Encoder_Update>
			lastTick = currentTick;
 8001878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800187a:	64fb      	str	r3, [r7, #76]	@ 0x4c

			p1 = Encoder_GetPosition(&encoder1);
 800187c:	485c      	ldr	r0, [pc, #368]	@ (80019f0 <main+0x528>)
 800187e:	f7fe ff41 	bl	8000704 <Encoder_GetPosition>
 8001882:	eef0 7a40 	vmov.f32	s15, s0
 8001886:	4b5c      	ldr	r3, [pc, #368]	@ (80019f8 <main+0x530>)
 8001888:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 800188c:	4858      	ldr	r0, [pc, #352]	@ (80019f0 <main+0x528>)
 800188e:	f7fe ff48 	bl	8000722 <Encoder_GetVelocity>
 8001892:	eef0 7a40 	vmov.f32	s15, s0
 8001896:	4b59      	ldr	r3, [pc, #356]	@ (80019fc <main+0x534>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 800189c:	4854      	ldr	r0, [pc, #336]	@ (80019f0 <main+0x528>)
 800189e:	f7fe ff4f 	bl	8000740 <Encoder_GetAcceleration>
 80018a2:	eef0 7a40 	vmov.f32	s15, s0
 80018a6:	4b56      	ldr	r3, [pc, #344]	@ (8001a00 <main+0x538>)
 80018a8:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 80018ac:	4851      	ldr	r0, [pc, #324]	@ (80019f4 <main+0x52c>)
 80018ae:	f7fe ff29 	bl	8000704 <Encoder_GetPosition>
 80018b2:	eef0 7a40 	vmov.f32	s15, s0
 80018b6:	4b53      	ldr	r3, [pc, #332]	@ (8001a04 <main+0x53c>)
 80018b8:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 80018bc:	484d      	ldr	r0, [pc, #308]	@ (80019f4 <main+0x52c>)
 80018be:	f7fe ff30 	bl	8000722 <Encoder_GetVelocity>
 80018c2:	eef0 7a40 	vmov.f32	s15, s0
 80018c6:	4b50      	ldr	r3, [pc, #320]	@ (8001a08 <main+0x540>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 80018cc:	4849      	ldr	r0, [pc, #292]	@ (80019f4 <main+0x52c>)
 80018ce:	f7fe ff37 	bl	8000740 <Encoder_GetAcceleration>
 80018d2:	eef0 7a40 	vmov.f32	s15, s0
 80018d6:	4b4d      	ldr	r3, [pc, #308]	@ (8001a0c <main+0x544>)
 80018d8:	edc3 7a00 	vstr	s15, [r3]

// Now use p1,v1,a1 and p2,v2,a2 as needed
		}
//
		t_global = HAL_GetTick() / 1000.0f;
 80018dc:	f001 fc96 	bl	800320c <HAL_GetTick>
 80018e0:	ee07 0a90 	vmov	s15, r0
 80018e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e8:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80019ec <main+0x524>
 80018ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f0:	4b47      	ldr	r3, [pc, #284]	@ (8001a10 <main+0x548>)
 80018f2:	edc3 7a00 	vstr	s15, [r3]
		pos = GetTrajectoryPosition(&segments[0], t_global);
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <main+0x548>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001900:	482f      	ldr	r0, [pc, #188]	@ (80019c0 <main+0x4f8>)
 8001902:	f7ff fc99 	bl	8001238 <GetTrajectoryPosition>
 8001906:	eef0 7a40 	vmov.f32	s15, s0
 800190a:	4b42      	ldr	r3, [pc, #264]	@ (8001a14 <main+0x54c>)
 800190c:	edc3 7a00 	vstr	s15, [r3]
		vel = GetTrajectoryVelocity(&segments[0], t_global);
 8001910:	4b3f      	ldr	r3, [pc, #252]	@ (8001a10 <main+0x548>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eeb0 0a67 	vmov.f32	s0, s15
 800191a:	4829      	ldr	r0, [pc, #164]	@ (80019c0 <main+0x4f8>)
 800191c:	f7ff fd62 	bl	80013e4 <GetTrajectoryVelocity>
 8001920:	eef0 7a40 	vmov.f32	s15, s0
 8001924:	4b3c      	ldr	r3, [pc, #240]	@ (8001a18 <main+0x550>)
 8001926:	edc3 7a00 	vstr	s15, [r3]
//		}
//		pwm_pris_posi = voltage_to_pwm(V_absoulte);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
//		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,pwm_pris_posi);

		if (V_pris_velo_PID < 0) {
 800192a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <main+0x554>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	d576      	bpl.n	8001a28 <main+0x560>
			DIR_24V = 0;
 800193a:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <main+0x558>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
			V_absoulte = fabsf(V_pris_velo_PID);
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <main+0x554>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eef0 7ae7 	vabs.f32	s15, s15
 800194a:	4b36      	ldr	r3, [pc, #216]	@ (8001a24 <main+0x55c>)
 800194c:	edc3 7a00 	vstr	s15, [r3]
 8001950:	e079      	b.n	8001a46 <main+0x57e>
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	eb1c432d 	.word	0xeb1c432d
 800195c:	3f5a36e2 	.word	0x3f5a36e2
 8001960:	b50b0f28 	.word	0xb50b0f28
 8001964:	400ef9a6 	.word	0x400ef9a6
 8001968:	9db22d0e 	.word	0x9db22d0e
 800196c:	3fc6a7ef 	.word	0x3fc6a7ef
 8001970:	00000000 	.word	0x00000000
 8001974:	3fec0000 	.word	0x3fec0000
 8001978:	3c968944 	.word	0x3c968944
 800197c:	3f3f969e 	.word	0x3f3f969e
 8001980:	05857aff 	.word	0x05857aff
 8001984:	3f2e03f7 	.word	0x3f2e03f7
 8001988:	20001358 	.word	0x20001358
 800198c:	3c23d70a 	.word	0x3c23d70a
 8001990:	3dcccccd 	.word	0x3dcccccd
 8001994:	20001680 	.word	0x20001680
 8001998:	20001290 	.word	0x20001290
 800199c:	3d4ccccd 	.word	0x3d4ccccd
 80019a0:	3dcccccd 	.word	0x3dcccccd
 80019a4:	200012d0 	.word	0x200012d0
 80019a8:	20001310 	.word	0x20001310
 80019ac:	3727c5ac 	.word	0x3727c5ac
 80019b0:	20001334 	.word	0x20001334
 80019b4:	00000000 	.word	0x00000000
 80019b8:	437a0000 	.word	0x437a0000
 80019bc:	43fa0000 	.word	0x43fa0000
 80019c0:	20000a90 	.word	0x20000a90
 80019c4:	20001284 	.word	0x20001284
 80019c8:	48000800 	.word	0x48000800
 80019cc:	20000280 	.word	0x20000280
 80019d0:	200002ec 	.word	0x200002ec
 80019d4:	20000c18 	.word	0x20000c18
 80019d8:	20000c1a 	.word	0x20000c1a
 80019dc:	200004f0 	.word	0x200004f0
 80019e0:	20000a80 	.word	0x20000a80
 80019e4:	200005bc 	.word	0x200005bc
 80019e8:	20000a84 	.word	0x20000a84
 80019ec:	447a0000 	.word	0x447a0000
 80019f0:	20000a18 	.word	0x20000a18
 80019f4:	20000a4c 	.word	0x20000a4c
 80019f8:	20000bfc 	.word	0x20000bfc
 80019fc:	20000c00 	.word	0x20000c00
 8001a00:	20000c04 	.word	0x20000c04
 8001a04:	20000c08 	.word	0x20000c08
 8001a08:	20000c0c 	.word	0x20000c0c
 8001a0c:	20000c10 	.word	0x20000c10
 8001a10:	20000bf8 	.word	0x20000bf8
 8001a14:	20000a88 	.word	0x20000a88
 8001a18:	20000a8c 	.word	0x20000a8c
 8001a1c:	200012fc 	.word	0x200012fc
 8001a20:	20001288 	.word	0x20001288
 8001a24:	200012c0 	.word	0x200012c0
		} else if (V_pris_velo_PID > 0) {
 8001a28:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <main+0x5bc>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	dd06      	ble.n	8001a46 <main+0x57e>
			DIR_24V = 1;
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <main+0x5c0>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
			V_absoulte = V_pris_velo_PID;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <main+0x5bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <main+0x5c4>)
 8001a44:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_velo = voltage_to_pwm(V_absoulte);
 8001a46:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <main+0x5c4>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a50:	f000 ffbe 	bl	80029d0 <voltage_to_pwm>
 8001a54:	eef0 7a40 	vmov.f32	s15, s0
 8001a58:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <main+0x5c8>)
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <main+0x5c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	2102      	movs	r1, #2
 8001a68:	480a      	ldr	r0, [pc, #40]	@ (8001a94 <main+0x5cc>)
 8001a6a:	f003 fc69 	bl	8005340 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,pwm_pris_velo);
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <main+0x5c8>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <main+0x5d0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7c:	ee17 2a90 	vmov	r2, s15
 8001a80:	635a      	str	r2, [r3, #52]	@ 0x34
	while (1) {
 8001a82:	e6ae      	b.n	80017e2 <main+0x31a>
 8001a84:	200012fc 	.word	0x200012fc
 8001a88:	20001288 	.word	0x20001288
 8001a8c:	200012c0 	.word	0x200012c0
 8001a90:	20001300 	.word	0x20001300
 8001a94:	48000400 	.word	0x48000400
 8001a98:	20000820 	.word	0x20000820

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	@ 0x50
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	2238      	movs	r2, #56	@ 0x38
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f009 fb26 	bl	800b0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f003 fc6e 	bl	80053a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ace:	2340      	movs	r3, #64	@ 0x40
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ada:	2304      	movs	r3, #4
 8001adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ade:	2355      	movs	r3, #85	@ 0x55
 8001ae0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fd08 	bl	8005508 <HAL_RCC_OscConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001afe:	f000 ff85 	bl	8002a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b02:	230f      	movs	r3, #15
 8001b04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b06:	2303      	movs	r3, #3
 8001b08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2104      	movs	r1, #4
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 f806 	bl	8005b2c <HAL_RCC_ClockConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b26:	f000 ff71 	bl	8002a0c <Error_Handler>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3750      	adds	r7, #80	@ 0x50
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f009 fad5 	bl	800b0fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b52:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b54:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b5a:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b5c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b62:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b68:	4b2c      	ldr	r3, [pc, #176]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b74:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b7a:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b80:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b86:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b8c:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bae:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bbc:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001bbe:	f001 fd3d 	bl	800363c <HAL_ADC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001bc8:	f000 ff20 	bl	8002a0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001bd8:	f002 fcda 	bl	8004590 <HAL_ADCEx_MultiModeConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001be2:	f000 ff13 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <MX_ADC1_Init+0xec>)
 8001be8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bea:	2306      	movs	r3, #6
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bf2:	237f      	movs	r3, #127	@ 0x7f
 8001bf4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001c04:	f001 ffc8 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001c0e:	f000 fefd 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	@ 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000280 	.word	0x20000280
 8001c20:	04300002 	.word	0x04300002

08001c24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f009 fa63 	bl	800b0fc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001c36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c38:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce8 <MX_ADC2_Init+0xc4>)
 8001c3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c3e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c42:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c44:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001c50:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c56:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001c62:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001c88:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001c96:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c9e:	4811      	ldr	r0, [pc, #68]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001ca0:	f001 fccc 	bl	800363c <HAL_ADC_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001caa:	f000 feaf 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <MX_ADC2_Init+0xc8>)
 8001cb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cba:	237f      	movs	r3, #127	@ 0x7f
 8001cbc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <MX_ADC2_Init+0xc0>)
 8001ccc:	f001 ff64 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001cd6:	f000 fe99 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002ec 	.word	0x200002ec
 8001ce8:	50000100 	.word	0x50000100
 8001cec:	08600004 	.word	0x08600004

08001cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d0e:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d10:	4a20      	ldr	r2, [pc, #128]	@ (8001d94 <MX_TIM1_Init+0xa4>)
 8001d12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d22:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001d26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d28:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d3a:	4815      	ldr	r0, [pc, #84]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d3c:	f004 fb60 	bl	8006400 <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d46:	f000 fe61 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	4619      	mov	r1, r3
 8001d56:	480e      	ldr	r0, [pc, #56]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d58:	f005 fbcc 	bl	80074f4 <HAL_TIM_ConfigClockSource>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001d62:	f000 fe53 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4806      	ldr	r0, [pc, #24]	@ (8001d90 <MX_TIM1_Init+0xa0>)
 8001d78:	f006 fba2 	bl	80084c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d82:	f000 fe43 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000358 	.word	0x20000358
 8001d94:	40012c00 	.word	0x40012c00

08001d98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001db8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001dc0:	22a9      	movs	r2, #169	@ 0xa9
 8001dc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001dca:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001dcc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dde:	4814      	ldr	r0, [pc, #80]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001de0:	f004 fb0e 	bl	8006400 <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001dea:	f000 fe0f 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480d      	ldr	r0, [pc, #52]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001dfc:	f005 fb7a 	bl	80074f4 <HAL_TIM_ConfigClockSource>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e06:	f000 fe01 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <MX_TIM2_Init+0x98>)
 8001e18:	f006 fb52 	bl	80084c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e22:	f000 fdf3 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	3720      	adds	r7, #32
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000424 	.word	0x20000424

08001e34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	@ 0x30
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	2224      	movs	r2, #36	@ 0x24
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f009 f95a 	bl	800b0fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	463b      	mov	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <MX_TIM3_Init+0xa4>)
 8001e54:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <MX_TIM3_Init+0xa8>)
 8001e56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <MX_TIM3_Init+0xa4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <MX_TIM3_Init+0xa4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <MX_TIM3_Init+0xa4>)
 8001e66:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001e6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <MX_TIM3_Init+0xa4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <MX_TIM3_Init+0xa4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e80:	2301      	movs	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e90:	2301      	movs	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <MX_TIM3_Init+0xa4>)
 8001ea4:	f004 fedc 	bl	8006c60 <HAL_TIM_Encoder_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001eae:	f000 fdad 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4806      	ldr	r0, [pc, #24]	@ (8001ed8 <MX_TIM3_Init+0xa4>)
 8001ec0:	f006 fafe 	bl	80084c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001eca:	f000 fd9f 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	@ 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200004f0 	.word	0x200004f0
 8001edc:	40000400 	.word	0x40000400

08001ee0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	@ 0x30
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	2224      	movs	r2, #36	@ 0x24
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f009 f904 	bl	800b0fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001efe:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <MX_TIM4_Init+0xa4>)
 8001f00:	4a21      	ldr	r2, [pc, #132]	@ (8001f88 <MX_TIM4_Init+0xa8>)
 8001f02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f04:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <MX_TIM4_Init+0xa4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <MX_TIM4_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001f10:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <MX_TIM4_Init+0xa4>)
 8001f12:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001f16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <MX_TIM4_Init+0xa4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <MX_TIM4_Init+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f24:	2303      	movs	r3, #3
 8001f26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <MX_TIM4_Init+0xa4>)
 8001f50:	f004 fe86 	bl	8006c60 <HAL_TIM_Encoder_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001f5a:	f000 fd57 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f66:	463b      	mov	r3, r7
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <MX_TIM4_Init+0xa4>)
 8001f6c:	f006 faa8 	bl	80084c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001f76:	f000 fd49 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	3730      	adds	r7, #48	@ 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200005bc 	.word	0x200005bc
 8001f88:	40000800 	.word	0x40000800

08001f8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b09c      	sub	sp, #112	@ 0x70
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
 8001fbc:	615a      	str	r2, [r3, #20]
 8001fbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	2234      	movs	r2, #52	@ 0x34
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f009 f898 	bl	800b0fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fcc:	4b45      	ldr	r3, [pc, #276]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8001fce:	4a46      	ldr	r2, [pc, #280]	@ (80020e8 <MX_TIM8_Init+0x15c>)
 8001fd0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fd2:	4b44      	ldr	r3, [pc, #272]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b42      	ldr	r3, [pc, #264]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001fde:	4b41      	ldr	r3, [pc, #260]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8001fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fec:	4b3d      	ldr	r3, [pc, #244]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ff8:	483a      	ldr	r0, [pc, #232]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8001ffa:	f004 fa01 	bl	8006400 <HAL_TIM_Base_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002004:	f000 fd02 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800200c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800200e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002012:	4619      	mov	r1, r3
 8002014:	4833      	ldr	r0, [pc, #204]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8002016:	f005 fa6d 	bl	80074f4 <HAL_TIM_ConfigClockSource>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002020:	f000 fcf4 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002024:	482f      	ldr	r0, [pc, #188]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8002026:	f004 fba5 	bl	8006774 <HAL_TIM_PWM_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002030:	f000 fcec 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002040:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002044:	4619      	mov	r1, r3
 8002046:	4827      	ldr	r0, [pc, #156]	@ (80020e4 <MX_TIM8_Init+0x158>)
 8002048:	f006 fa3a 	bl	80084c0 <HAL_TIMEx_MasterConfigSynchronization>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002052:	f000 fcdb 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002056:	2360      	movs	r3, #96	@ 0x60
 8002058:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205e:	2300      	movs	r3, #0
 8002060:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002062:	2300      	movs	r3, #0
 8002064:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002072:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002076:	220c      	movs	r2, #12
 8002078:	4619      	mov	r1, r3
 800207a:	481a      	ldr	r0, [pc, #104]	@ (80020e4 <MX_TIM8_Init+0x158>)
 800207c:	f005 f926 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002086:	f000 fcc1 	bl	8002a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800209e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80020ba:	2300      	movs	r3, #0
 80020bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <MX_TIM8_Init+0x158>)
 80020c8:	f006 fa90 	bl	80085ec <HAL_TIMEx_ConfigBreakDeadTime>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80020d2:	f000 fc9b 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80020d6:	4803      	ldr	r0, [pc, #12]	@ (80020e4 <MX_TIM8_Init+0x158>)
 80020d8:	f000 fe66 	bl	8002da8 <HAL_TIM_MspPostInit>

}
 80020dc:	bf00      	nop
 80020de:	3770      	adds	r7, #112	@ 0x70
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000688 	.word	0x20000688
 80020e8:	40013400 	.word	0x40013400

080020ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b094      	sub	sp, #80	@ 0x50
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2234      	movs	r2, #52	@ 0x34
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f008 fff5 	bl	800b0fc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002112:	4b34      	ldr	r3, [pc, #208]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 8002114:	4a34      	ldr	r2, [pc, #208]	@ (80021e8 <MX_TIM16_Init+0xfc>)
 8002116:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002118:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 800211a:	22a9      	movs	r2, #169	@ 0xa9
 800211c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8002124:	4b2f      	ldr	r3, [pc, #188]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 8002126:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 800212a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b2d      	ldr	r3, [pc, #180]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002132:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002138:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800213e:	4829      	ldr	r0, [pc, #164]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 8002140:	f004 f95e 	bl	8006400 <HAL_TIM_Base_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800214a:	f000 fc5f 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800214e:	4825      	ldr	r0, [pc, #148]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 8002150:	f004 faa2 	bl	8006698 <HAL_TIM_OC_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800215a:	f000 fc57 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800215e:	2108      	movs	r1, #8
 8002160:	4820      	ldr	r0, [pc, #128]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 8002162:	f004 fc87 	bl	8006a74 <HAL_TIM_OnePulse_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 800216c:	f000 fc4e 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002170:	2310      	movs	r3, #16
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8002174:	f240 5399 	movw	r3, #1433	@ 0x599
 8002178:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217a:	2300      	movs	r3, #0
 800217c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800217e:	2300      	movs	r3, #0
 8002180:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800218e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002192:	2200      	movs	r2, #0
 8002194:	4619      	mov	r1, r3
 8002196:	4813      	ldr	r0, [pc, #76]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 8002198:	f005 f81e 	bl	80071d8 <HAL_TIM_OC_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 80021a2:	f000 fc33 	bl	8002a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	@ (80021e4 <MX_TIM16_Init+0xf8>)
 80021ce:	f006 fa0d 	bl	80085ec <HAL_TIMEx_ConfigBreakDeadTime>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 80021d8:	f000 fc18 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	3750      	adds	r7, #80	@ 0x50
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000754 	.word	0x20000754
 80021e8:	40014400 	.word	0x40014400

080021ec <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b09c      	sub	sp, #112	@ 0x70
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2234      	movs	r2, #52	@ 0x34
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f008 ff68 	bl	800b0fc <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800222c:	4b4b      	ldr	r3, [pc, #300]	@ (800235c <MX_TIM20_Init+0x170>)
 800222e:	4a4c      	ldr	r2, [pc, #304]	@ (8002360 <MX_TIM20_Init+0x174>)
 8002230:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002232:	4b4a      	ldr	r3, [pc, #296]	@ (800235c <MX_TIM20_Init+0x170>)
 8002234:	2200      	movs	r2, #0
 8002236:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002238:	4b48      	ldr	r3, [pc, #288]	@ (800235c <MX_TIM20_Init+0x170>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800223e:	4b47      	ldr	r3, [pc, #284]	@ (800235c <MX_TIM20_Init+0x170>)
 8002240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002244:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002246:	4b45      	ldr	r3, [pc, #276]	@ (800235c <MX_TIM20_Init+0x170>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800224c:	4b43      	ldr	r3, [pc, #268]	@ (800235c <MX_TIM20_Init+0x170>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b42      	ldr	r3, [pc, #264]	@ (800235c <MX_TIM20_Init+0x170>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002258:	4840      	ldr	r0, [pc, #256]	@ (800235c <MX_TIM20_Init+0x170>)
 800225a:	f004 f8d1 	bl	8006400 <HAL_TIM_Base_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8002264:	f000 fbd2 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800226c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 800226e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002272:	4619      	mov	r1, r3
 8002274:	4839      	ldr	r0, [pc, #228]	@ (800235c <MX_TIM20_Init+0x170>)
 8002276:	f005 f93d 	bl	80074f4 <HAL_TIM_ConfigClockSource>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8002280:	f000 fbc4 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002284:	4835      	ldr	r0, [pc, #212]	@ (800235c <MX_TIM20_Init+0x170>)
 8002286:	f004 fa75 	bl	8006774 <HAL_TIM_PWM_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8002290:	f000 fbbc 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80022a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022a4:	4619      	mov	r1, r3
 80022a6:	482d      	ldr	r0, [pc, #180]	@ (800235c <MX_TIM20_Init+0x170>)
 80022a8:	f006 f90a 	bl	80084c0 <HAL_TIMEx_MasterConfigSynchronization>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 80022b2:	f000 fbab 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b6:	2360      	movs	r3, #96	@ 0x60
 80022b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022be:	2300      	movs	r3, #0
 80022c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022c2:	2300      	movs	r3, #0
 80022c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022d6:	2200      	movs	r2, #0
 80022d8:	4619      	mov	r1, r3
 80022da:	4820      	ldr	r0, [pc, #128]	@ (800235c <MX_TIM20_Init+0x170>)
 80022dc:	f004 fff6 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 80022e6:	f000 fb91 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022ee:	2208      	movs	r2, #8
 80022f0:	4619      	mov	r1, r3
 80022f2:	481a      	ldr	r0, [pc, #104]	@ (800235c <MX_TIM20_Init+0x170>)
 80022f4:	f004 ffea 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 80022fe:	f000 fb85 	bl	8002a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002328:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4807      	ldr	r0, [pc, #28]	@ (800235c <MX_TIM20_Init+0x170>)
 8002340:	f006 f954 	bl	80085ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 800234a:	f000 fb5f 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800234e:	4803      	ldr	r0, [pc, #12]	@ (800235c <MX_TIM20_Init+0x170>)
 8002350:	f000 fd2a 	bl	8002da8 <HAL_TIM_MspPostInit>

}
 8002354:	bf00      	nop
 8002356:	3770      	adds	r7, #112	@ 0x70
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000820 	.word	0x20000820
 8002360:	40015000 	.word	0x40015000

08002364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002368:	4b23      	ldr	r3, [pc, #140]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 800236a:	4a24      	ldr	r2, [pc, #144]	@ (80023fc <MX_USART2_UART_Init+0x98>)
 800236c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800236e:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 8002370:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 8002378:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800237c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800237e:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002384:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 8002386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800238a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800239e:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023a4:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023aa:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023b0:	4811      	ldr	r0, [pc, #68]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 80023b2:	f006 f9ff 	bl	80087b4 <HAL_UART_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80023bc:	f000 fb26 	bl	8002a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c0:	2100      	movs	r1, #0
 80023c2:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 80023c4:	f008 fd81 	bl	800aeca <HAL_UARTEx_SetTxFifoThreshold>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80023ce:	f000 fb1d 	bl	8002a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d2:	2100      	movs	r1, #0
 80023d4:	4808      	ldr	r0, [pc, #32]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 80023d6:	f008 fdb6 	bl	800af46 <HAL_UARTEx_SetRxFifoThreshold>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80023e0:	f000 fb14 	bl	8002a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023e4:	4804      	ldr	r0, [pc, #16]	@ (80023f8 <MX_USART2_UART_Init+0x94>)
 80023e6:	f008 fd37 	bl	800ae58 <HAL_UARTEx_DisableFifoMode>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80023f0:	f000 fb0c 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200008ec 	.word	0x200008ec
 80023fc:	40004400 	.word	0x40004400

08002400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <MX_DMA_Init+0x50>)
 8002408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240a:	4a11      	ldr	r2, [pc, #68]	@ (8002450 <MX_DMA_Init+0x50>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6493      	str	r3, [r2, #72]	@ 0x48
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <MX_DMA_Init+0x50>)
 8002414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800241e:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <MX_DMA_Init+0x50>)
 8002420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002422:	4a0b      	ldr	r2, [pc, #44]	@ (8002450 <MX_DMA_Init+0x50>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6493      	str	r3, [r2, #72]	@ 0x48
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <MX_DMA_Init+0x50>)
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	200b      	movs	r0, #11
 800243c:	f002 fa8b 	bl	8004956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002440:	200b      	movs	r0, #11
 8002442:	f002 faa2 	bl	800498a <HAL_NVIC_EnableIRQ>

}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000

08002454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246a:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	4a60      	ldr	r2, [pc, #384]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002476:	4b5e      	ldr	r3, [pc, #376]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002482:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	4a5a      	ldr	r2, [pc, #360]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 8002488:	f043 0320 	orr.w	r3, r3, #32
 800248c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248e:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b55      	ldr	r3, [pc, #340]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4a54      	ldr	r2, [pc, #336]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a6:	4b52      	ldr	r3, [pc, #328]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	4b4f      	ldr	r3, [pc, #316]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	4a4e      	ldr	r2, [pc, #312]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024be:	4b4c      	ldr	r3, [pc, #304]	@ (80025f0 <MX_GPIO_Init+0x19c>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2102      	movs	r1, #2
 80024ce:	4849      	ldr	r0, [pc, #292]	@ (80025f4 <MX_GPIO_Init+0x1a0>)
 80024d0:	f002 ff36 	bl	8005340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2140      	movs	r1, #64	@ 0x40
 80024d8:	4847      	ldr	r0, [pc, #284]	@ (80025f8 <MX_GPIO_Init+0x1a4>)
 80024da:	f002 ff31 	bl	8005340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024de:	2320      	movs	r3, #32
 80024e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ee:	2305      	movs	r3, #5
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fc:	f002 fd9e 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8002500:	2302      	movs	r3, #2
 8002502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002504:	2301      	movs	r3, #1
 8002506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	4837      	ldr	r0, [pc, #220]	@ (80025f4 <MX_GPIO_Init+0x1a0>)
 8002518:	f002 fd90 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin
                           Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin
 800251c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8002520:	617b      	str	r3, [r7, #20]
                          |Limit_Switch_pen_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002522:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4619      	mov	r1, r3
 8002532:	4830      	ldr	r0, [pc, #192]	@ (80025f4 <MX_GPIO_Init+0x1a0>)
 8002534:	f002 fd82 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8002538:	2340      	movs	r3, #64	@ 0x40
 800253a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	482a      	ldr	r0, [pc, #168]	@ (80025f8 <MX_GPIO_Init+0x1a4>)
 8002550:	f002 fd74 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8002554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4823      	ldr	r0, [pc, #140]	@ (80025f8 <MX_GPIO_Init+0x1a4>)
 800256a:	f002 fd67 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 800256e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002574:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	481c      	ldr	r0, [pc, #112]	@ (80025f8 <MX_GPIO_Init+0x1a4>)
 8002586:	f002 fd59 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 800258a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002590:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	4815      	ldr	r0, [pc, #84]	@ (80025f8 <MX_GPIO_Init+0x1a4>)
 80025a2:	f002 fd4b 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025a6:	2330      	movs	r3, #48	@ 0x30
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025b6:	2305      	movs	r3, #5
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	480c      	ldr	r0, [pc, #48]	@ (80025f4 <MX_GPIO_Init+0x1a0>)
 80025c2:	f002 fd3b 	bl	800503c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	2017      	movs	r0, #23
 80025cc:	f002 f9c3 	bl	8004956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025d0:	2017      	movs	r0, #23
 80025d2:	f002 f9da 	bl	800498a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	2028      	movs	r0, #40	@ 0x28
 80025dc:	f002 f9bb 	bl	8004956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025e0:	2028      	movs	r0, #40	@ 0x28
 80025e2:	f002 f9d2 	bl	800498a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	@ 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	48000400 	.word	0x48000400
 80025f8:	48000800 	.word	0x48000800

080025fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800260c:	d103      	bne.n	8002616 <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 800260e:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x84>)
 8002610:	2209      	movs	r2, #9
 8002612:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 8002614:	e02e      	b.n	8002674 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261c:	d103      	bne.n	8002626 <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x84>)
 8002620:	220a      	movs	r2, #10
 8002622:	601a      	str	r2, [r3, #0]
}
 8002624:	e026      	b.n	8002674 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800262c:	d103      	bne.n	8002636 <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 800262e:	4b14      	ldr	r3, [pc, #80]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x84>)
 8002630:	220b      	movs	r2, #11
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	e01e      	b.n	8002674 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800263c:	d103      	bne.n	8002646 <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x84>)
 8002640:	220c      	movs	r2, #12
 8002642:	601a      	str	r2, [r3, #0]
}
 8002644:	e016      	b.n	8002674 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800264c:	d103      	bne.n	8002656 <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x84>)
 8002650:	220d      	movs	r2, #13
 8002652:	601a      	str	r2, [r3, #0]
}
 8002654:	e00e      	b.n	8002674 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800265c:	d103      	bne.n	8002666 <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x84>)
 8002660:	220e      	movs	r2, #14
 8002662:	601a      	str	r2, [r3, #0]
}
 8002664:	e006      	b.n	8002674 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266c:	d102      	bne.n	8002674 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 800266e:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x84>)
 8002670:	220f      	movs	r2, #15
 8002672:	601a      	str	r2, [r3, #0]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	20000c14 	.word	0x20000c14

08002684 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a38      	ldr	r2, [pc, #224]	@ (8002770 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d168      	bne.n	8002766 <HAL_TIM_PeriodElapsedCallback+0xe2>
		count_Tim2 += 1;
 8002694:	4b37      	ldr	r3, [pc, #220]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	4a36      	ldr	r2, [pc, #216]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800269c:	6013      	str	r3, [r2, #0]
		// Velocity Control
		velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 800269e:	4836      	ldr	r0, [pc, #216]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80026a0:	f7fe f86c 	bl	800077c <Encoder_GetVelocity_mm>
 80026a4:	eef0 7a40 	vmov.f32	s15, s0
 80026a8:	4b34      	ldr	r3, [pc, #208]	@ (800277c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80026aa:	edc3 7a00 	vstr	s15, [r3]
		setvelocity_pris = GetTrajectoryVelocity(&segments[0], t_global) + V_pris_posi_PID;
 80026ae:	4b34      	ldr	r3, [pc, #208]	@ (8002780 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	4832      	ldr	r0, [pc, #200]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80026ba:	f7fe fe93 	bl	80013e4 <GetTrajectoryVelocity>
 80026be:	eeb0 7a40 	vmov.f32	s14, s0
 80026c2:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026cc:	4b2f      	ldr	r3, [pc, #188]	@ (800278c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026ce:	edc3 7a00 	vstr	s15, [r3]
		delta_velo_pris = setvelocity_pris - velocity_pris;
 80026d2:	4b2e      	ldr	r3, [pc, #184]	@ (800278c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026d4:	ed93 7a00 	vldr	s14, [r3]
 80026d8:	4b28      	ldr	r3, [pc, #160]	@ (800277c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002790 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80026e4:	edc3 7a00 	vstr	s15, [r3]
		V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 80026e8:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eeb0 0a67 	vmov.f32	s0, s15
 80026f2:	f000 f8cf 	bl	8002894 <Prismatic_velocity_control>
 80026f6:	eef0 7a40 	vmov.f32	s15, s0
 80026fa:	4b26      	ldr	r3, [pc, #152]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80026fc:	edc3 7a00 	vstr	s15, [r3]
		if (count_Tim2 >= 10) {
 8002700:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b09      	cmp	r3, #9
 8002706:	dd2e      	ble.n	8002766 <HAL_TIM_PeriodElapsedCallback+0xe2>
			// Position Control
			position_pris = Encoder_GetPosition_mm(&encoder1);
 8002708:	481b      	ldr	r0, [pc, #108]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800270a:	f7fe f828 	bl	800075e <Encoder_GetPosition_mm>
 800270e:	eef0 7a40 	vmov.f32	s15, s0
 8002712:	4b21      	ldr	r3, [pc, #132]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002714:	edc3 7a00 	vstr	s15, [r3]
			setposition_pris = GetTrajectoryPosition(&segments[0], t_global);
 8002718:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	eeb0 0a67 	vmov.f32	s0, s15
 8002722:	4818      	ldr	r0, [pc, #96]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002724:	f7fe fd88 	bl	8001238 <GetTrajectoryPosition>
 8002728:	eef0 7a40 	vmov.f32	s15, s0
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800272e:	edc3 7a00 	vstr	s15, [r3]
			delta_posi_pris = setposition_pris - position_pris;
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002734:	ed93 7a00 	vldr	s14, [r3]
 8002738:	4b17      	ldr	r3, [pc, #92]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002744:	edc3 7a00 	vstr	s15, [r3]
			V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
 8002748:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	eeb0 0a67 	vmov.f32	s0, s15
 8002752:	f000 f827 	bl	80027a4 <Prismatic_position_control>
 8002756:	eef0 7a40 	vmov.f32	s15, s0
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800275c:	edc3 7a00 	vstr	s15, [r3]
			count_Tim2 = 0;
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000424 	.word	0x20000424
 8002774:	2000128c 	.word	0x2000128c
 8002778:	20000a18 	.word	0x20000a18
 800277c:	200012f4 	.word	0x200012f4
 8002780:	20000bf8 	.word	0x20000bf8
 8002784:	20000a90 	.word	0x20000a90
 8002788:	200012bc 	.word	0x200012bc
 800278c:	200012f8 	.word	0x200012f8
 8002790:	2000130c 	.word	0x2000130c
 8002794:	200012fc 	.word	0x200012fc
 8002798:	200012b4 	.word	0x200012b4
 800279c:	200012b8 	.word	0x200012b8
 80027a0:	200012cc 	.word	0x200012cc

080027a4 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 80027ae:	4a36      	ldr	r2, [pc, #216]	@ (8002888 <Prismatic_position_control+0xe4>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 80027b4:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <Prismatic_position_control+0xe4>)
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	d50a      	bpl.n	80027da <Prismatic_position_control+0x36>
 80027c4:	4b30      	ldr	r3, [pc, #192]	@ (8002888 <Prismatic_position_control+0xe4>)
 80027c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80027ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	dd02      	ble.n	80027da <Prismatic_position_control+0x36>
		anti_windup = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e014      	b.n	8002804 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 80027da:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <Prismatic_position_control+0xe4>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	dd0a      	ble.n	8002800 <Prismatic_position_control+0x5c>
 80027ea:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <Prismatic_position_control+0xe4>)
 80027ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80027f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	d502      	bpl.n	8002800 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e001      	b.n	8002804 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8002800:	2301      	movs	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <Prismatic_position_control+0xe8>)
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	ed93 7a00 	vldr	s14, [r3]
 8002812:	edd7 7a03 	vldr	s15, [r7, #12]
 8002816:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	edd3 7a03 	vldr	s15, [r3, #12]
 8002826:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800282a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	edd3 6a02 	vldr	s13, [r3, #8]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	edd3 7a04 	vldr	s15, [r3, #16]
 800283a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284c:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002864:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <Prismatic_position_control+0xec>)
 8002868:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <Prismatic_position_control+0xe4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a06      	ldr	r2, [pc, #24]	@ (8002888 <Prismatic_position_control+0xe4>)
 8002870:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8002872:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <Prismatic_position_control+0xec>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	ee07 3a90 	vmov	s15, r3
}
 800287a:	eeb0 0a67 	vmov.f32	s0, s15
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	200012c4 	.word	0x200012c4
 800288c:	20001290 	.word	0x20001290
 8002890:	200012bc 	.word	0x200012bc

08002894 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] =  delta_velo;
 800289e:	4a47      	ldr	r2, [pc, #284]	@ (80029bc <Prismatic_velocity_control+0x128>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 80028a4:	4b45      	ldr	r3, [pc, #276]	@ (80029bc <Prismatic_velocity_control+0x128>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	d50a      	bpl.n	80028ca <Prismatic_velocity_control+0x36>
 80028b4:	4b41      	ldr	r3, [pc, #260]	@ (80029bc <Prismatic_velocity_control+0x128>)
 80028b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	dd02      	ble.n	80028ca <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e014      	b.n	80028f4 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 80028ca:	4b3c      	ldr	r3, [pc, #240]	@ (80029bc <Prismatic_velocity_control+0x128>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd0a      	ble.n	80028f0 <Prismatic_velocity_control+0x5c>
 80028da:	4b38      	ldr	r3, [pc, #224]	@ (80029bc <Prismatic_velocity_control+0x128>)
 80028dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80028e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e8:	d502      	bpl.n	80028f0 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e001      	b.n	80028f4 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80028f0:	2301      	movs	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 80028f4:	4b32      	ldr	r3, [pc, #200]	@ (80029c0 <Prismatic_velocity_control+0x12c>)
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80028fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	db07      	blt.n	8002918 <Prismatic_velocity_control+0x84>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 800290e:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <Prismatic_velocity_control+0x130>)
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
 8002916:	e002      	b.n	800291e <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 8002918:	4b2a      	ldr	r3, [pc, #168]	@ (80029c4 <Prismatic_velocity_control+0x130>)
 800291a:	4a2b      	ldr	r2, [pc, #172]	@ (80029c8 <Prismatic_velocity_control+0x134>)
 800291c:	61da      	str	r2, [r3, #28]
 800291e:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <Prismatic_velocity_control+0x130>)
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002930:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	edd3 6a01 	vldr	s13, [r3, #4]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002940:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	edd3 6a02 	vldr	s13, [r3, #8]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	edd3 7a04 	vldr	s15, [r3, #16]
 8002954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002966:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	615a      	str	r2, [r3, #20]
    return (out);
 800297e:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8002980:	4a0f      	ldr	r2, [pc, #60]	@ (80029c0 <Prismatic_velocity_control+0x12c>)
 8002982:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8002984:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <Prismatic_velocity_control+0x12c>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dd02      	ble.n	800299e <Prismatic_velocity_control+0x10a>
		V_pris_velo_PID = 24;
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <Prismatic_velocity_control+0x12c>)
 800299a:	4a0c      	ldr	r2, [pc, #48]	@ (80029cc <Prismatic_velocity_control+0x138>)
 800299c:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 800299e:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <Prismatic_velocity_control+0x128>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a06      	ldr	r2, [pc, #24]	@ (80029bc <Prismatic_velocity_control+0x128>)
 80029a4:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <Prismatic_velocity_control+0x12c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	ee07 3a90 	vmov	s15, r3
}
 80029ae:	eeb0 0a67 	vmov.f32	s0, s15
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	20001304 	.word	0x20001304
 80029c0:	200012fc 	.word	0x200012fc
 80029c4:	200012d0 	.word	0x200012d0
 80029c8:	3a83126f 	.word	0x3a83126f
 80029cc:	41c00000 	.word	0x41c00000

080029d0 <voltage_to_pwm>:
	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
	error_velo_rev[1] = error_velo_rev[0];
	return V_rev_velo_PID;
}

float voltage_to_pwm(float voltage) {
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 80029da:	edd7 7a01 	vldr	s15, [r7, #4]
 80029de:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002a08 <voltage_to_pwm+0x38>
 80029e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029e6:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80029ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ee:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	ee07 3a90 	vmov	s15, r3
}
 80029f8:	eeb0 0a67 	vmov.f32	s0, s15
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	477fff00 	.word	0x477fff00

08002a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a10:	b672      	cpsid	i
}
 8002a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a14:	bf00      	nop
 8002a16:	e7fd      	b.n	8002a14 <Error_Handler+0x8>

08002a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <HAL_MspInit+0x44>)
 8002a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a22:	4a0e      	ldr	r2, [pc, #56]	@ (8002a5c <HAL_MspInit+0x44>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <HAL_MspInit+0x44>)
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_MspInit+0x44>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	4a08      	ldr	r2, [pc, #32]	@ (8002a5c <HAL_MspInit+0x44>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_MspInit+0x44>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a4e:	f002 fd4b 	bl	80054e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0a0      	sub	sp, #128	@ 0x80
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	2254      	movs	r2, #84	@ 0x54
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f008 fb3b 	bl	800b0fc <memset>
  if(hadc->Instance==ADC1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a8e:	d13e      	bne.n	8002b0e <HAL_ADC_MspInit+0xae>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002a96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fa5f 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002aac:	f7ff ffae 	bl	8002a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8002b9c <HAL_ADC_MspInit+0x13c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a39      	ldr	r2, [pc, #228]	@ (8002b9c <HAL_ADC_MspInit+0x13c>)
 8002ab8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002aba:	4b38      	ldr	r3, [pc, #224]	@ (8002b9c <HAL_ADC_MspInit+0x13c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10b      	bne.n	8002ada <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002ac2:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	4a36      	ldr	r2, [pc, #216]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002ac8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ace:	4b34      	ldr	r3, [pc, #208]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	4a30      	ldr	r2, [pc, #192]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8002af2:	2303      	movs	r3, #3
 8002af4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af6:	2303      	movs	r3, #3
 8002af8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b08:	f002 fa98 	bl	800503c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002b0c:	e042      	b.n	8002b94 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a24      	ldr	r2, [pc, #144]	@ (8002ba4 <HAL_ADC_MspInit+0x144>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d13d      	bne.n	8002b94 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002b1e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b24:	f107 0318 	add.w	r3, r7, #24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 fa1b 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8002b34:	f7ff ff6a 	bl	8002a0c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002b38:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_ADC_MspInit+0x13c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	4a17      	ldr	r2, [pc, #92]	@ (8002b9c <HAL_ADC_MspInit+0x13c>)
 8002b40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002b42:	4b16      	ldr	r3, [pc, #88]	@ (8002b9c <HAL_ADC_MspInit+0x13c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10b      	bne.n	8002b62 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002b4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002b50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b56:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_ADC_MspInit+0x140>)
 8002b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b90:	f002 fa54 	bl	800503c <HAL_GPIO_Init>
}
 8002b94:	bf00      	nop
 8002b96:	3780      	adds	r7, #128	@ 0x80
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200016b8 	.word	0x200016b8
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	50000100 	.word	0x50000100

08002ba8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3d      	ldr	r2, [pc, #244]	@ (8002cac <HAL_TIM_Base_MspInit+0x104>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d11c      	bne.n	8002bf4 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bba:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002bc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2018      	movs	r0, #24
 8002bd8:	f001 febd 	bl	8004956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002bdc:	2018      	movs	r0, #24
 8002bde:	f001 fed4 	bl	800498a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	2019      	movs	r0, #25
 8002be8:	f001 feb5 	bl	8004956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002bec:	2019      	movs	r0, #25
 8002bee:	f001 fecc 	bl	800498a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002bf2:	e056      	b.n	8002ca2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bfc:	d114      	bne.n	8002c28 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c0a:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	201c      	movs	r0, #28
 8002c1c:	f001 fe9b 	bl	8004956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c20:	201c      	movs	r0, #28
 8002c22:	f001 feb2 	bl	800498a <HAL_NVIC_EnableIRQ>
}
 8002c26:	e03c      	b.n	8002ca2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a21      	ldr	r2, [pc, #132]	@ (8002cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10c      	bne.n	8002c4c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c32:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697b      	ldr	r3, [r7, #20]
}
 8002c4a:	e02a      	b.n	8002ca2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM16)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x110>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d114      	bne.n	8002c80 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c56:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c62:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	2019      	movs	r0, #25
 8002c74:	f001 fe6f 	bl	8004956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c78:	2019      	movs	r0, #25
 8002c7a:	f001 fe86 	bl	800498a <HAL_NVIC_EnableIRQ>
}
 8002c7e:	e010      	b.n	8002ca2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM20)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <HAL_TIM_Base_MspInit+0x114>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10b      	bne.n	8002ca2 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8e:	4a08      	ldr	r2, [pc, #32]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c94:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x108>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
}
 8002ca2:	bf00      	nop
 8002ca4:	3720      	adds	r7, #32
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40013400 	.word	0x40013400
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40015000 	.word	0x40015000

08002cc0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	@ 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8002d9c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d129      	bne.n	8002d36 <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cee:	4b2c      	ldr	r3, [pc, #176]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	4b29      	ldr	r3, [pc, #164]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfe:	4a28      	ldr	r2, [pc, #160]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d06:	4b26      	ldr	r3, [pc, #152]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8002d12:	23c0      	movs	r3, #192	@ 0xc0
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d22:	2302      	movs	r3, #2
 8002d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	f107 031c 	add.w	r3, r7, #28
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d30:	f002 f984 	bl	800503c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d34:	e02e      	b.n	8002d94 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002da4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d129      	bne.n	8002d94 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d40:	4b17      	ldr	r3, [pc, #92]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d44:	4a16      	ldr	r2, [pc, #88]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d4c:	4b14      	ldr	r3, [pc, #80]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d58:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5c:	4a10      	ldr	r2, [pc, #64]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d64:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8002d70:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002d82:	230a      	movs	r3, #10
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d86:	f107 031c 	add.w	r3, r7, #28
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d90:	f002 f954 	bl	800503c <HAL_GPIO_Init>
}
 8002d94:	bf00      	nop
 8002d96:	3730      	adds	r7, #48	@ 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40000800 	.word	0x40000800

08002da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	@ 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a31      	ldr	r2, [pc, #196]	@ (8002e8c <HAL_TIM_MspPostInit+0xe4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d11d      	bne.n	8002e06 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dca:	4b31      	ldr	r3, [pc, #196]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dce:	4a30      	ldr	r2, [pc, #192]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8002de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	2300      	movs	r3, #0
 8002df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002df4:	2304      	movs	r3, #4
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4825      	ldr	r0, [pc, #148]	@ (8002e94 <HAL_TIM_MspPostInit+0xec>)
 8002e00:	f002 f91c 	bl	800503c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8002e04:	e03d      	b.n	8002e82 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <HAL_TIM_MspPostInit+0xf0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d138      	bne.n	8002e82 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e10:	4b1f      	ldr	r3, [pc, #124]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e14:	4a1e      	ldr	r2, [pc, #120]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2c:	4a18      	ldr	r2, [pc, #96]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e34:	4b16      	ldr	r3, [pc, #88]	@ (8002e90 <HAL_TIM_MspPostInit+0xe8>)
 8002e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8002e40:	2304      	movs	r3, #4
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002e50:	2303      	movs	r3, #3
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4810      	ldr	r0, [pc, #64]	@ (8002e9c <HAL_TIM_MspPostInit+0xf4>)
 8002e5c:	f002 f8ee 	bl	800503c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8002e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002e72:	2306      	movs	r3, #6
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8002e76:	f107 0314 	add.w	r3, r7, #20
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4805      	ldr	r0, [pc, #20]	@ (8002e94 <HAL_TIM_MspPostInit+0xec>)
 8002e7e:	f002 f8dd 	bl	800503c <HAL_GPIO_Init>
}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	@ 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40013400 	.word	0x40013400
 8002e90:	40021000 	.word	0x40021000
 8002e94:	48000800 	.word	0x48000800
 8002e98:	40015000 	.word	0x40015000
 8002e9c:	48000400 	.word	0x48000400

08002ea0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b09e      	sub	sp, #120	@ 0x78
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	2254      	movs	r2, #84	@ 0x54
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f008 f91b 	bl	800b0fc <memset>
  if(huart->Instance==USART2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a37      	ldr	r2, [pc, #220]	@ (8002fa8 <HAL_UART_MspInit+0x108>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d167      	bne.n	8002fa0 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 f841 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ee8:	f7ff fd90 	bl	8002a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eec:	4b2f      	ldr	r3, [pc, #188]	@ (8002fac <HAL_UART_MspInit+0x10c>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8002fac <HAL_UART_MspInit+0x10c>)
 8002ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <HAL_UART_MspInit+0x10c>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f04:	4b29      	ldr	r3, [pc, #164]	@ (8002fac <HAL_UART_MspInit+0x10c>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f08:	4a28      	ldr	r2, [pc, #160]	@ (8002fac <HAL_UART_MspInit+0x10c>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f10:	4b26      	ldr	r3, [pc, #152]	@ (8002fac <HAL_UART_MspInit+0x10c>)
 8002f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f2c:	2307      	movs	r3, #7
 8002f2e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f34:	4619      	mov	r1, r3
 8002f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f3a:	f002 f87f 	bl	800503c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f40:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_UART_MspInit+0x114>)
 8002f42:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002f44:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f46:	221b      	movs	r2, #27
 8002f48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f4a:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f50:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f56:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f62:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f74:	480e      	ldr	r0, [pc, #56]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f76:	f001 fd23 	bl	80049c0 <HAL_DMA_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002f80:	f7ff fd44 	bl	8002a0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f88:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f8a:	4a09      	ldr	r2, [pc, #36]	@ (8002fb0 <HAL_UART_MspInit+0x110>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2100      	movs	r1, #0
 8002f94:	2026      	movs	r0, #38	@ 0x26
 8002f96:	f001 fcde 	bl	8004956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f9a:	2026      	movs	r0, #38	@ 0x26
 8002f9c:	f001 fcf5 	bl	800498a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002fa0:	bf00      	nop
 8002fa2:	3778      	adds	r7, #120	@ 0x78
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40004400 	.word	0x40004400
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	200009b8 	.word	0x200009b8
 8002fb4:	40020008 	.word	0x40020008

08002fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <NMI_Handler+0x4>

08002fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <HardFault_Handler+0x4>

08002fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <MemManage_Handler+0x4>

08002fd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <BusFault_Handler+0x4>

08002fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <UsageFault_Handler+0x4>

08002fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800300e:	f000 f8eb 	bl	80031e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800301c:	4802      	ldr	r0, [pc, #8]	@ (8003028 <DMA1_Channel1_IRQHandler+0x10>)
 800301e:	f001 feb2 	bl	8004d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200009b8 	.word	0x200009b8

0800302c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8003030:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003034:	f002 f99c 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003042:	f003 ff4f 	bl	8006ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000358 	.word	0x20000358

08003050 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003054:	4803      	ldr	r0, [pc, #12]	@ (8003064 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003056:	f003 ff45 	bl	8006ee4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800305a:	4803      	ldr	r0, [pc, #12]	@ (8003068 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800305c:	f003 ff42 	bl	8006ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000358 	.word	0x20000358
 8003068:	20000754 	.word	0x20000754

0800306c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003070:	4802      	ldr	r0, [pc, #8]	@ (800307c <TIM2_IRQHandler+0x10>)
 8003072:	f003 ff37 	bl	8006ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000424 	.word	0x20000424

08003080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003084:	4802      	ldr	r0, [pc, #8]	@ (8003090 <USART2_IRQHandler+0x10>)
 8003086:	f005 fe31 	bl	8008cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200008ec 	.word	0x200008ec

08003094 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8003098:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800309c:	f002 f968 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80030a0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80030a4:	f002 f964 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 80030a8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80030ac:	f002 f960 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 80030b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030b4:	f002 f95c 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 80030b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80030bc:	f002 f958 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 80030c0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80030c4:	f002 f954 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80030d0:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <SystemInit+0x20>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d6:	4a05      	ldr	r2, [pc, #20]	@ (80030ec <SystemInit+0x20>)
 80030d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030f0:	480d      	ldr	r0, [pc, #52]	@ (8003128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030f4:	f7ff ffea 	bl	80030cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030f8:	480c      	ldr	r0, [pc, #48]	@ (800312c <LoopForever+0x6>)
  ldr r1, =_edata
 80030fa:	490d      	ldr	r1, [pc, #52]	@ (8003130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003134 <LoopForever+0xe>)
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003100:	e002      	b.n	8003108 <LoopCopyDataInit>

08003102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003106:	3304      	adds	r3, #4

08003108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800310a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800310c:	d3f9      	bcc.n	8003102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800310e:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003110:	4c0a      	ldr	r4, [pc, #40]	@ (800313c <LoopForever+0x16>)
  movs r3, #0
 8003112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003114:	e001      	b.n	800311a <LoopFillZerobss>

08003116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003118:	3204      	adds	r2, #4

0800311a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800311a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800311c:	d3fb      	bcc.n	8003116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800311e:	f007 fffb 	bl	800b118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003122:	f7fe f9d1 	bl	80014c8 <main>

08003126 <LoopForever>:

LoopForever:
    b LoopForever
 8003126:	e7fe      	b.n	8003126 <LoopForever>
  ldr   r0, =_estack
 8003128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800312c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003130:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003134:	0800b228 	.word	0x0800b228
  ldr r2, =_sbss
 8003138:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 800313c:	200017f8 	.word	0x200017f8

08003140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003140:	e7fe      	b.n	8003140 <ADC1_2_IRQHandler>

08003142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314c:	2003      	movs	r0, #3
 800314e:	f001 fbf7 	bl	8004940 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003152:	2000      	movs	r0, #0
 8003154:	f000 f80e 	bl	8003174 <HAL_InitTick>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	71fb      	strb	r3, [r7, #7]
 8003162:	e001      	b.n	8003168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003164:	f7ff fc58 	bl	8002a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003168:	79fb      	ldrb	r3, [r7, #7]

}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003180:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <HAL_InitTick+0x68>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d022      	beq.n	80031ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003188:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <HAL_InitTick+0x6c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <HAL_InitTick+0x68>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	4618      	mov	r0, r3
 800319e:	f001 fc02 	bl	80049a6 <HAL_SYSTICK_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10f      	bne.n	80031c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	d809      	bhi.n	80031c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ae:	2200      	movs	r2, #0
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	f04f 30ff 	mov.w	r0, #4294967295
 80031b6:	f001 fbce 	bl	8004956 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031ba:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <HAL_InitTick+0x70>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e007      	b.n	80031d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e004      	b.n	80031d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e001      	b.n	80031d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000208 	.word	0x20000208
 80031e0:	20000200 	.word	0x20000200
 80031e4:	20000204 	.word	0x20000204

080031e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HAL_IncTick+0x1c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <HAL_IncTick+0x20>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	4a03      	ldr	r2, [pc, #12]	@ (8003204 <HAL_IncTick+0x1c>)
 80031f8:	6013      	str	r3, [r2, #0]
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	200016bc 	.word	0x200016bc
 8003208:	20000208 	.word	0x20000208

0800320c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return uwTick;
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <HAL_GetTick+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	200016bc 	.word	0x200016bc

08003224 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3360      	adds	r3, #96	@ 0x60
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <LL_ADC_SetOffset+0x44>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	03fff000 	.word	0x03fff000

080032d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3360      	adds	r3, #96	@ 0x60
 80032e2:	461a      	mov	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3360      	adds	r3, #96	@ 0x60
 8003310:	461a      	mov	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	431a      	orrs	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003336:	b480      	push	{r7}
 8003338:	b087      	sub	sp, #28
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3360      	adds	r3, #96	@ 0x60
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	431a      	orrs	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3360      	adds	r3, #96	@ 0x60
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	431a      	orrs	r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	615a      	str	r2, [r3, #20]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3330      	adds	r3, #48	@ 0x30
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	4413      	add	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	211f      	movs	r1, #31
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	401a      	ands	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	f003 011f 	and.w	r1, r3, #31
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	431a      	orrs	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3314      	adds	r3, #20
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0e5b      	lsrs	r3, r3, #25
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	4413      	add	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0d1b      	lsrs	r3, r3, #20
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2107      	movs	r1, #7
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	401a      	ands	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	0d1b      	lsrs	r3, r3, #20
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	431a      	orrs	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0318 	and.w	r3, r3, #24
 800349a:	4908      	ldr	r1, [pc, #32]	@ (80034bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800349c:	40d9      	lsrs	r1, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	400b      	ands	r3, r1
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	0007ffff 	.word	0x0007ffff

080034c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 031f 	and.w	r3, r3, #31
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80034ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6093      	str	r3, [r2, #8]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003514:	d101      	bne.n	800351a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003538:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800353c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003564:	d101      	bne.n	800356a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003588:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <LL_ADC_IsEnabled+0x18>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <LL_ADC_IsEnabled+0x1a>
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035da:	f043 0204 	orr.w	r2, r3, #4
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d101      	bne.n	8003606 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d101      	bne.n	800362c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b089      	sub	sp, #36	@ 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e1a9      	b.n	80039aa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff f9fb 	bl	8002a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff3f 	bl	8003500 <LL_ADC_IsDeepPowerDownEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff25 	bl	80034dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff5a 	bl	8003550 <LL_ADC_IsInternalRegulatorEnabled>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d115      	bne.n	80036ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ff3e 	bl	8003528 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003920 <HAL_ADC_Init+0x2e4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	4a9c      	ldr	r2, [pc, #624]	@ (8003924 <HAL_ADC_Init+0x2e8>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036c0:	e002      	b.n	80036c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f9      	bne.n	80036c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ff3c 	bl	8003550 <LL_ADC_IsInternalRegulatorEnabled>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ff75 	bl	80035ee <LL_ADC_REG_IsConversionOngoing>
 8003704:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8142 	bne.w	8003998 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 813e 	bne.w	8003998 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003720:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003724:	f043 0202 	orr.w	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff35 	bl	80035a0 <LL_ADC_IsEnabled>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d141      	bne.n	80037c0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003744:	d004      	beq.n	8003750 <HAL_ADC_Init+0x114>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a77      	ldr	r2, [pc, #476]	@ (8003928 <HAL_ADC_Init+0x2ec>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d10f      	bne.n	8003770 <HAL_ADC_Init+0x134>
 8003750:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003754:	f7ff ff24 	bl	80035a0 <LL_ADC_IsEnabled>
 8003758:	4604      	mov	r4, r0
 800375a:	4873      	ldr	r0, [pc, #460]	@ (8003928 <HAL_ADC_Init+0x2ec>)
 800375c:	f7ff ff20 	bl	80035a0 <LL_ADC_IsEnabled>
 8003760:	4603      	mov	r3, r0
 8003762:	4323      	orrs	r3, r4
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e012      	b.n	8003796 <HAL_ADC_Init+0x15a>
 8003770:	486e      	ldr	r0, [pc, #440]	@ (800392c <HAL_ADC_Init+0x2f0>)
 8003772:	f7ff ff15 	bl	80035a0 <LL_ADC_IsEnabled>
 8003776:	4604      	mov	r4, r0
 8003778:	486d      	ldr	r0, [pc, #436]	@ (8003930 <HAL_ADC_Init+0x2f4>)
 800377a:	f7ff ff11 	bl	80035a0 <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	431c      	orrs	r4, r3
 8003782:	486c      	ldr	r0, [pc, #432]	@ (8003934 <HAL_ADC_Init+0x2f8>)
 8003784:	f7ff ff0c 	bl	80035a0 <LL_ADC_IsEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	4323      	orrs	r3, r4
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a2:	d004      	beq.n	80037ae <HAL_ADC_Init+0x172>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a5f      	ldr	r2, [pc, #380]	@ (8003928 <HAL_ADC_Init+0x2ec>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_Init+0x176>
 80037ae:	4a62      	ldr	r2, [pc, #392]	@ (8003938 <HAL_ADC_Init+0x2fc>)
 80037b0:	e000      	b.n	80037b4 <HAL_ADC_Init+0x178>
 80037b2:	4a62      	ldr	r2, [pc, #392]	@ (800393c <HAL_ADC_Init+0x300>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f7ff fd32 	bl	8003224 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7f5b      	ldrb	r3, [r3, #29]
 80037c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80037d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80037d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d106      	bne.n	80037fc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	045b      	lsls	r3, r3, #17
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	4b48      	ldr	r3, [pc, #288]	@ (8003940 <HAL_ADC_Init+0x304>)
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	69b9      	ldr	r1, [r7, #24]
 8003828:	430b      	orrs	r3, r1
 800382a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fee4 	bl	8003614 <LL_ADC_INJ_IsConversionOngoing>
 800384c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d17f      	bne.n	8003954 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d17c      	bne.n	8003954 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800385e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003866:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003876:	f023 0302 	bic.w	r3, r3, #2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	430b      	orrs	r3, r1
 8003882:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d017      	beq.n	80038bc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800389a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80038a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80038a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6911      	ldr	r1, [r2, #16]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80038ba:	e013      	b.n	80038e4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80038ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80038dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d12a      	bne.n	8003944 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003904:	4311      	orrs	r1, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003910:	430a      	orrs	r2, r1
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0201 	orr.w	r2, r2, #1
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	e019      	b.n	8003954 <HAL_ADC_Init+0x318>
 8003920:	20000200 	.word	0x20000200
 8003924:	053e2d63 	.word	0x053e2d63
 8003928:	50000100 	.word	0x50000100
 800392c:	50000400 	.word	0x50000400
 8003930:	50000500 	.word	0x50000500
 8003934:	50000600 	.word	0x50000600
 8003938:	50000300 	.word	0x50000300
 800393c:	50000700 	.word	0x50000700
 8003940:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d10c      	bne.n	8003976 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003962:	f023 010f 	bic.w	r1, r3, #15
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
 8003974:	e007      	b.n	8003986 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 020f 	bic.w	r2, r2, #15
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003996:	e007      	b.n	80039a8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f043 0210 	orr.w	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3724      	adds	r7, #36	@ 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd90      	pop	{r4, r7, pc}
 80039b2:	bf00      	nop

080039b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c4:	d004      	beq.n	80039d0 <HAL_ADC_Start+0x1c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a67      	ldr	r2, [pc, #412]	@ (8003b68 <HAL_ADC_Start+0x1b4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_Start+0x20>
 80039d0:	4b66      	ldr	r3, [pc, #408]	@ (8003b6c <HAL_ADC_Start+0x1b8>)
 80039d2:	e000      	b.n	80039d6 <HAL_ADC_Start+0x22>
 80039d4:	4b66      	ldr	r3, [pc, #408]	@ (8003b70 <HAL_ADC_Start+0x1bc>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fd72 	bl	80034c0 <LL_ADC_GetMultimode>
 80039dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fe03 	bl	80035ee <LL_ADC_REG_IsConversionOngoing>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 80b4 	bne.w	8003b58 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_ADC_Start+0x4a>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0af      	b.n	8003b5e <HAL_ADC_Start+0x1aa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fd06 	bl	8004418 <ADC_Enable>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f040 809b 	bne.w	8003b4e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a4d      	ldr	r2, [pc, #308]	@ (8003b68 <HAL_ADC_Start+0x1b4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_ADC_Start+0x96>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a4e      	ldr	r2, [pc, #312]	@ (8003b74 <HAL_ADC_Start+0x1c0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d002      	beq.n	8003a46 <HAL_ADC_Start+0x92>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	e003      	b.n	8003a4e <HAL_ADC_Start+0x9a>
 8003a46:	4b4c      	ldr	r3, [pc, #304]	@ (8003b78 <HAL_ADC_Start+0x1c4>)
 8003a48:	e001      	b.n	8003a4e <HAL_ADC_Start+0x9a>
 8003a4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d002      	beq.n	8003a5c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a74:	d106      	bne.n	8003a84 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7a:	f023 0206 	bic.w	r2, r3, #6
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a82:	e002      	b.n	8003a8a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	221c      	movs	r2, #28
 8003a90:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a32      	ldr	r2, [pc, #200]	@ (8003b68 <HAL_ADC_Start+0x1b4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d009      	beq.n	8003ab8 <HAL_ADC_Start+0x104>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a32      	ldr	r2, [pc, #200]	@ (8003b74 <HAL_ADC_Start+0x1c0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d002      	beq.n	8003ab4 <HAL_ADC_Start+0x100>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	e003      	b.n	8003abc <HAL_ADC_Start+0x108>
 8003ab4:	4b30      	ldr	r3, [pc, #192]	@ (8003b78 <HAL_ADC_Start+0x1c4>)
 8003ab6:	e001      	b.n	8003abc <HAL_ADC_Start+0x108>
 8003ab8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d008      	beq.n	8003ad6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d002      	beq.n	8003ad6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b09      	cmp	r3, #9
 8003ad4:	d114      	bne.n	8003b00 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003aec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fd64 	bl	80035c6 <LL_ADC_REG_StartConversion>
 8003afe:	e02d      	b.n	8003b5c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b04:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a15      	ldr	r2, [pc, #84]	@ (8003b68 <HAL_ADC_Start+0x1b4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <HAL_ADC_Start+0x176>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a16      	ldr	r2, [pc, #88]	@ (8003b74 <HAL_ADC_Start+0x1c0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d002      	beq.n	8003b26 <HAL_ADC_Start+0x172>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	e003      	b.n	8003b2e <HAL_ADC_Start+0x17a>
 8003b26:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <HAL_ADC_Start+0x1c4>)
 8003b28:	e001      	b.n	8003b2e <HAL_ADC_Start+0x17a>
 8003b2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b2e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00f      	beq.n	8003b5c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b4c:	e006      	b.n	8003b5c <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003b56:	e001      	b.n	8003b5c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	50000100 	.word	0x50000100
 8003b6c:	50000300 	.word	0x50000300
 8003b70:	50000700 	.word	0x50000700
 8003b74:	50000500 	.word	0x50000500
 8003b78:	50000400 	.word	0x50000400

08003b7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b0b6      	sub	sp, #216	@ 0xd8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d102      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x24>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f000 bc13 	b.w	80043e2 <HAL_ADC_ConfigChannel+0x84a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fd10 	bl	80035ee <LL_ADC_REG_IsConversionOngoing>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f040 83f3 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f7ff fbf0 	bl	80033c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fcfe 	bl	80035ee <LL_ADC_REG_IsConversionOngoing>
 8003bf2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fd0a 	bl	8003614 <LL_ADC_INJ_IsConversionOngoing>
 8003c00:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 81d9 	bne.w	8003fc0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 81d4 	bne.w	8003fc0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c20:	d10f      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f7ff fbf7 	bl	8003420 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fbb1 	bl	80033a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003c40:	e00e      	b.n	8003c60 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f7ff fbe6 	bl	8003420 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fba1 	bl	80033a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	08db      	lsrs	r3, r3, #3
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d022      	beq.n	8003cc8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6919      	ldr	r1, [r3, #16]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c92:	f7ff fafb 	bl	800328c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6919      	ldr	r1, [r3, #16]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f7ff fb47 	bl	8003336 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d102      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x126>
 8003cb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cbc:	e000      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x128>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f7ff fb53 	bl	800336c <LL_ADC_SetOffsetSaturation>
 8003cc6:	e17b      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fb00 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x15c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff faf5 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003cea:	4603      	mov	r3, r0
 8003cec:	0e9b      	lsrs	r3, r3, #26
 8003cee:	f003 021f 	and.w	r2, r3, #31
 8003cf2:	e01e      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x19a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff faea 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d22:	2320      	movs	r3, #32
 8003d24:	e004      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x1b2>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	0e9b      	lsrs	r3, r3, #26
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	e018      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x1e4>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003d6e:	2320      	movs	r3, #32
 8003d70:	e004      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d106      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fab9 	bl	8003300 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fa9d 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x222>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fa92 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003db0:	4603      	mov	r3, r0
 8003db2:	0e9b      	lsrs	r3, r3, #26
 8003db4:	f003 021f 	and.w	r2, r3, #31
 8003db8:	e01e      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x260>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fa87 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003de8:	2320      	movs	r3, #32
 8003dea:	e004      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003df0:	fab3 f383 	clz	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x278>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	0e9b      	lsrs	r3, r3, #26
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	e018      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x2aa>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003e34:	2320      	movs	r3, #32
 8003e36:	e004      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d106      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fa56 	bl	8003300 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fa3a 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x2e8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fa2f 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	f003 021f 	and.w	r2, r3, #31
 8003e7e:	e01e      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x326>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2102      	movs	r1, #2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fa24 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003eae:	2320      	movs	r3, #32
 8003eb0:	e004      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x33e>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	0e9b      	lsrs	r3, r3, #26
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	e016      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x36c>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003ee8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	e004      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d106      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2102      	movs	r1, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff f9f5 	bl	8003300 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2103      	movs	r1, #3
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f9d9 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x3aa>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2103      	movs	r1, #3
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff f9ce 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	0e9b      	lsrs	r3, r3, #26
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	e017      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x3da>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2103      	movs	r1, #3
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff f9c3 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e003      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x3f2>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	0e9b      	lsrs	r3, r3, #26
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	e011      	b.n	8003fae <HAL_ADC_ConfigChannel+0x416>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	e003      	b.n	8003fae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d106      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2103      	movs	r1, #3
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f9a0 	bl	8003300 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff faeb 	bl	80035a0 <LL_ADC_IsEnabled>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 813d 	bne.w	800424c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f7ff fa4a 	bl	8003478 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4aa2      	ldr	r2, [pc, #648]	@ (8004274 <HAL_ADC_ConfigChannel+0x6dc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	f040 812e 	bne.w	800424c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x480>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0e9b      	lsrs	r3, r3, #26
 8004006:	3301      	adds	r3, #1
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2b09      	cmp	r3, #9
 800400e:	bf94      	ite	ls
 8004010:	2301      	movls	r3, #1
 8004012:	2300      	movhi	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e019      	b.n	800404c <HAL_ADC_ConfigChannel+0x4b4>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004028:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800402a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004030:	2320      	movs	r3, #32
 8004032:	e003      	b.n	800403c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004034:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	3301      	adds	r3, #1
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2b09      	cmp	r3, #9
 8004044:	bf94      	ite	ls
 8004046:	2301      	movls	r3, #1
 8004048:	2300      	movhi	r3, #0
 800404a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800404c:	2b00      	cmp	r3, #0
 800404e:	d079      	beq.n	8004144 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004058:	2b00      	cmp	r3, #0
 800405a:	d107      	bne.n	800406c <HAL_ADC_ConfigChannel+0x4d4>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	0e9b      	lsrs	r3, r3, #26
 8004062:	3301      	adds	r3, #1
 8004064:	069b      	lsls	r3, r3, #26
 8004066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800406a:	e015      	b.n	8004098 <HAL_ADC_ConfigChannel+0x500>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800407a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800407c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800407e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e003      	b.n	8004090 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3301      	adds	r3, #1
 8004092:	069b      	lsls	r3, r3, #26
 8004094:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x520>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0e9b      	lsrs	r3, r3, #26
 80040aa:	3301      	adds	r3, #1
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	e017      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x550>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80040d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	2101      	movs	r1, #1
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_ADC_ConfigChannel+0x576>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	0e9b      	lsrs	r3, r3, #26
 80040fe:	3301      	adds	r3, #1
 8004100:	f003 021f 	and.w	r2, r3, #31
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	051b      	lsls	r3, r3, #20
 800410c:	e018      	b.n	8004140 <HAL_ADC_ConfigChannel+0x5a8>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800411c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004126:	2320      	movs	r3, #32
 8004128:	e003      	b.n	8004132 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800412a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412c:	fab3 f383 	clz	r3, r3
 8004130:	b2db      	uxtb	r3, r3
 8004132:	3301      	adds	r3, #1
 8004134:	f003 021f 	and.w	r2, r3, #31
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004140:	430b      	orrs	r3, r1
 8004142:	e07e      	b.n	8004242 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x5c8>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	0e9b      	lsrs	r3, r3, #26
 8004156:	3301      	adds	r3, #1
 8004158:	069b      	lsls	r3, r3, #26
 800415a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800415e:	e015      	b.n	800418c <HAL_ADC_ConfigChannel+0x5f4>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800416e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004170:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e003      	b.n	8004184 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800417c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	069b      	lsls	r3, r3, #26
 8004188:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x614>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0e9b      	lsrs	r3, r3, #26
 800419e:	3301      	adds	r3, #1
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2101      	movs	r1, #1
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	e017      	b.n	80041dc <HAL_ADC_ConfigChannel+0x644>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	61fb      	str	r3, [r7, #28]
  return result;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	ea42 0103 	orr.w	r1, r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x670>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	3301      	adds	r3, #1
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4613      	mov	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4413      	add	r3, r2
 80041fe:	3b1e      	subs	r3, #30
 8004200:	051b      	lsls	r3, r3, #20
 8004202:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004206:	e01b      	b.n	8004240 <HAL_ADC_ConfigChannel+0x6a8>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	613b      	str	r3, [r7, #16]
  return result;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	3b1e      	subs	r3, #30
 800423a:	051b      	lsls	r3, r3, #20
 800423c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004240:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004246:	4619      	mov	r1, r3
 8004248:	f7ff f8ea 	bl	8003420 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <HAL_ADC_ConfigChannel+0x6e0>)
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80be 	beq.w	80043d6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004262:	d004      	beq.n	800426e <HAL_ADC_ConfigChannel+0x6d6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a04      	ldr	r2, [pc, #16]	@ (800427c <HAL_ADC_ConfigChannel+0x6e4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10a      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x6ec>
 800426e:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <HAL_ADC_ConfigChannel+0x6e8>)
 8004270:	e009      	b.n	8004286 <HAL_ADC_ConfigChannel+0x6ee>
 8004272:	bf00      	nop
 8004274:	407f0000 	.word	0x407f0000
 8004278:	80080000 	.word	0x80080000
 800427c:	50000100 	.word	0x50000100
 8004280:	50000300 	.word	0x50000300
 8004284:	4b59      	ldr	r3, [pc, #356]	@ (80043ec <HAL_ADC_ConfigChannel+0x854>)
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe fff2 	bl	8003270 <LL_ADC_GetCommonPathInternalCh>
 800428c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a56      	ldr	r2, [pc, #344]	@ (80043f0 <HAL_ADC_ConfigChannel+0x858>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x70c>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a55      	ldr	r2, [pc, #340]	@ (80043f4 <HAL_ADC_ConfigChannel+0x85c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d13a      	bne.n	800431a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d134      	bne.n	800431a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042b8:	d005      	beq.n	80042c6 <HAL_ADC_ConfigChannel+0x72e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a4e      	ldr	r2, [pc, #312]	@ (80043f8 <HAL_ADC_ConfigChannel+0x860>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	f040 8085 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ce:	d004      	beq.n	80042da <HAL_ADC_ConfigChannel+0x742>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a49      	ldr	r2, [pc, #292]	@ (80043fc <HAL_ADC_ConfigChannel+0x864>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_ADC_ConfigChannel+0x746>
 80042da:	4a49      	ldr	r2, [pc, #292]	@ (8004400 <HAL_ADC_ConfigChannel+0x868>)
 80042dc:	e000      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x748>
 80042de:	4a43      	ldr	r2, [pc, #268]	@ (80043ec <HAL_ADC_ConfigChannel+0x854>)
 80042e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f7fe ffad 	bl	800324a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042f0:	4b44      	ldr	r3, [pc, #272]	@ (8004404 <HAL_ADC_ConfigChannel+0x86c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	4a44      	ldr	r2, [pc, #272]	@ (8004408 <HAL_ADC_ConfigChannel+0x870>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800430a:	e002      	b.n	8004312 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3b01      	subs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f9      	bne.n	800430c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004318:	e05a      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3b      	ldr	r2, [pc, #236]	@ (800440c <HAL_ADC_ConfigChannel+0x874>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d125      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d11f      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a31      	ldr	r2, [pc, #196]	@ (80043fc <HAL_ADC_ConfigChannel+0x864>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d104      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x7ac>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a34      	ldr	r2, [pc, #208]	@ (8004410 <HAL_ADC_ConfigChannel+0x878>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d047      	beq.n	80043d4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800434c:	d004      	beq.n	8004358 <HAL_ADC_ConfigChannel+0x7c0>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2a      	ldr	r2, [pc, #168]	@ (80043fc <HAL_ADC_ConfigChannel+0x864>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d101      	bne.n	800435c <HAL_ADC_ConfigChannel+0x7c4>
 8004358:	4a29      	ldr	r2, [pc, #164]	@ (8004400 <HAL_ADC_ConfigChannel+0x868>)
 800435a:	e000      	b.n	800435e <HAL_ADC_ConfigChannel+0x7c6>
 800435c:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <HAL_ADC_ConfigChannel+0x854>)
 800435e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7fe ff6e 	bl	800324a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800436e:	e031      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a27      	ldr	r2, [pc, #156]	@ (8004414 <HAL_ADC_ConfigChannel+0x87c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d12d      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800437a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800437e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d127      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <HAL_ADC_ConfigChannel+0x864>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d022      	beq.n	80043d6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004398:	d004      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0x80c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <HAL_ADC_ConfigChannel+0x864>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x810>
 80043a4:	4a16      	ldr	r2, [pc, #88]	@ (8004400 <HAL_ADC_ConfigChannel+0x868>)
 80043a6:	e000      	b.n	80043aa <HAL_ADC_ConfigChannel+0x812>
 80043a8:	4a10      	ldr	r2, [pc, #64]	@ (80043ec <HAL_ADC_ConfigChannel+0x854>)
 80043aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe ff48 	bl	800324a <LL_ADC_SetCommonPathInternalCh>
 80043ba:	e00c      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80043ce:	e002      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	37d8      	adds	r7, #216	@ 0xd8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	50000700 	.word	0x50000700
 80043f0:	c3210000 	.word	0xc3210000
 80043f4:	90c00010 	.word	0x90c00010
 80043f8:	50000600 	.word	0x50000600
 80043fc:	50000100 	.word	0x50000100
 8004400:	50000300 	.word	0x50000300
 8004404:	20000200 	.word	0x20000200
 8004408:	053e2d63 	.word	0x053e2d63
 800440c:	c7520000 	.word	0xc7520000
 8004410:	50000500 	.word	0x50000500
 8004414:	cb840000 	.word	0xcb840000

08004418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004420:	2300      	movs	r3, #0
 8004422:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff f8b9 	bl	80035a0 <LL_ADC_IsEnabled>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d176      	bne.n	8004522 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	4b3c      	ldr	r3, [pc, #240]	@ (800452c <ADC_Enable+0x114>)
 800443c:	4013      	ands	r3, r2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	f043 0210 	orr.w	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e062      	b.n	8004524 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff f888 	bl	8003578 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004470:	d004      	beq.n	800447c <ADC_Enable+0x64>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2e      	ldr	r2, [pc, #184]	@ (8004530 <ADC_Enable+0x118>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <ADC_Enable+0x68>
 800447c:	4b2d      	ldr	r3, [pc, #180]	@ (8004534 <ADC_Enable+0x11c>)
 800447e:	e000      	b.n	8004482 <ADC_Enable+0x6a>
 8004480:	4b2d      	ldr	r3, [pc, #180]	@ (8004538 <ADC_Enable+0x120>)
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fef4 	bl	8003270 <LL_ADC_GetCommonPathInternalCh>
 8004488:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800448a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800448e:	2b00      	cmp	r3, #0
 8004490:	d013      	beq.n	80044ba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004492:	4b2a      	ldr	r3, [pc, #168]	@ (800453c <ADC_Enable+0x124>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a29      	ldr	r2, [pc, #164]	@ (8004540 <ADC_Enable+0x128>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044ac:	e002      	b.n	80044b4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f9      	bne.n	80044ae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044ba:	f7fe fea7 	bl	800320c <HAL_GetTick>
 80044be:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044c0:	e028      	b.n	8004514 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff f86a 	bl	80035a0 <LL_ADC_IsEnabled>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f84e 	bl	8003578 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044dc:	f7fe fe96 	bl	800320c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d914      	bls.n	8004514 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d00d      	beq.n	8004514 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fc:	f043 0210 	orr.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004508:	f043 0201 	orr.w	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e007      	b.n	8004524 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d1cf      	bne.n	80044c2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	8000003f 	.word	0x8000003f
 8004530:	50000100 	.word	0x50000100
 8004534:	50000300 	.word	0x50000300
 8004538:	50000700 	.word	0x50000700
 800453c:	20000200 	.word	0x20000200
 8004540:	053e2d63 	.word	0x053e2d63

08004544 <LL_ADC_IsEnabled>:
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <LL_ADC_IsEnabled+0x18>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <LL_ADC_IsEnabled+0x1a>
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <LL_ADC_REG_IsConversionOngoing>:
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b04      	cmp	r3, #4
 800457c:	d101      	bne.n	8004582 <LL_ADC_REG_IsConversionOngoing+0x18>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b0a1      	sub	sp, #132	@ 0x84
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e0e7      	b.n	800477e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80045b6:	2300      	movs	r3, #0
 80045b8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80045ba:	2300      	movs	r3, #0
 80045bc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045c6:	d102      	bne.n	80045ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004788 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	e009      	b.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6e      	ldr	r2, [pc, #440]	@ (800478c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d102      	bne.n	80045de <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80045d8:	4b6d      	ldr	r3, [pc, #436]	@ (8004790 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	e001      	b.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0be      	b.n	800477e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff ffb1 	bl	800456a <LL_ADC_REG_IsConversionOngoing>
 8004608:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ffab 	bl	800456a <LL_ADC_REG_IsConversionOngoing>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 80a0 	bne.w	800475c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800461c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800461e:	2b00      	cmp	r3, #0
 8004620:	f040 809c 	bne.w	800475c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800462c:	d004      	beq.n	8004638 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a55      	ldr	r2, [pc, #340]	@ (8004788 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d101      	bne.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004638:	4b56      	ldr	r3, [pc, #344]	@ (8004794 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800463a:	e000      	b.n	800463e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800463c:	4b56      	ldr	r3, [pc, #344]	@ (8004798 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800463e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d04b      	beq.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004648:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6859      	ldr	r1, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800465a:	035b      	lsls	r3, r3, #13
 800465c:	430b      	orrs	r3, r1
 800465e:	431a      	orrs	r2, r3
 8004660:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004662:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800466c:	d004      	beq.n	8004678 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a45      	ldr	r2, [pc, #276]	@ (8004788 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10f      	bne.n	8004698 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004678:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800467c:	f7ff ff62 	bl	8004544 <LL_ADC_IsEnabled>
 8004680:	4604      	mov	r4, r0
 8004682:	4841      	ldr	r0, [pc, #260]	@ (8004788 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004684:	f7ff ff5e 	bl	8004544 <LL_ADC_IsEnabled>
 8004688:	4603      	mov	r3, r0
 800468a:	4323      	orrs	r3, r4
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e012      	b.n	80046be <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004698:	483c      	ldr	r0, [pc, #240]	@ (800478c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800469a:	f7ff ff53 	bl	8004544 <LL_ADC_IsEnabled>
 800469e:	4604      	mov	r4, r0
 80046a0:	483b      	ldr	r0, [pc, #236]	@ (8004790 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046a2:	f7ff ff4f 	bl	8004544 <LL_ADC_IsEnabled>
 80046a6:	4603      	mov	r3, r0
 80046a8:	431c      	orrs	r4, r3
 80046aa:	483c      	ldr	r0, [pc, #240]	@ (800479c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80046ac:	f7ff ff4a 	bl	8004544 <LL_ADC_IsEnabled>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4323      	orrs	r3, r4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d056      	beq.n	8004770 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80046ca:	f023 030f 	bic.w	r3, r3, #15
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	6811      	ldr	r1, [r2, #0]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	6892      	ldr	r2, [r2, #8]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	431a      	orrs	r2, r3
 80046da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046dc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046de:	e047      	b.n	8004770 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046f4:	d004      	beq.n	8004700 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a23      	ldr	r2, [pc, #140]	@ (8004788 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10f      	bne.n	8004720 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004700:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004704:	f7ff ff1e 	bl	8004544 <LL_ADC_IsEnabled>
 8004708:	4604      	mov	r4, r0
 800470a:	481f      	ldr	r0, [pc, #124]	@ (8004788 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800470c:	f7ff ff1a 	bl	8004544 <LL_ADC_IsEnabled>
 8004710:	4603      	mov	r3, r0
 8004712:	4323      	orrs	r3, r4
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e012      	b.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004720:	481a      	ldr	r0, [pc, #104]	@ (800478c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004722:	f7ff ff0f 	bl	8004544 <LL_ADC_IsEnabled>
 8004726:	4604      	mov	r4, r0
 8004728:	4819      	ldr	r0, [pc, #100]	@ (8004790 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800472a:	f7ff ff0b 	bl	8004544 <LL_ADC_IsEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	431c      	orrs	r4, r3
 8004732:	481a      	ldr	r0, [pc, #104]	@ (800479c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004734:	f7ff ff06 	bl	8004544 <LL_ADC_IsEnabled>
 8004738:	4603      	mov	r3, r0
 800473a:	4323      	orrs	r3, r4
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800474a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004752:	f023 030f 	bic.w	r3, r3, #15
 8004756:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004758:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800475a:	e009      	b.n	8004770 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800476e:	e000      	b.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004770:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800477a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800477e:	4618      	mov	r0, r3
 8004780:	3784      	adds	r7, #132	@ 0x84
 8004782:	46bd      	mov	sp, r7
 8004784:	bd90      	pop	{r4, r7, pc}
 8004786:	bf00      	nop
 8004788:	50000100 	.word	0x50000100
 800478c:	50000400 	.word	0x50000400
 8004790:	50000500 	.word	0x50000500
 8004794:	50000300 	.word	0x50000300
 8004798:	50000700 	.word	0x50000700
 800479c:	50000600 	.word	0x50000600

080047a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b0:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <__NVIC_SetPriorityGrouping+0x44>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047bc:	4013      	ands	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047d2:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <__NVIC_SetPriorityGrouping+0x44>)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	60d3      	str	r3, [r2, #12]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047ec:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <__NVIC_GetPriorityGrouping+0x18>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	f003 0307 	and.w	r3, r3, #7
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	e000ed00 	.word	0xe000ed00

08004804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004812:	2b00      	cmp	r3, #0
 8004814:	db0b      	blt.n	800482e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	f003 021f 	and.w	r2, r3, #31
 800481c:	4907      	ldr	r1, [pc, #28]	@ (800483c <__NVIC_EnableIRQ+0x38>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	2001      	movs	r0, #1
 8004826:	fa00 f202 	lsl.w	r2, r0, r2
 800482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000e100 	.word	0xe000e100

08004840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800484c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004850:	2b00      	cmp	r3, #0
 8004852:	db0a      	blt.n	800486a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	b2da      	uxtb	r2, r3
 8004858:	490c      	ldr	r1, [pc, #48]	@ (800488c <__NVIC_SetPriority+0x4c>)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	0112      	lsls	r2, r2, #4
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	440b      	add	r3, r1
 8004864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004868:	e00a      	b.n	8004880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4908      	ldr	r1, [pc, #32]	@ (8004890 <__NVIC_SetPriority+0x50>)
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	3b04      	subs	r3, #4
 8004878:	0112      	lsls	r2, r2, #4
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	440b      	add	r3, r1
 800487e:	761a      	strb	r2, [r3, #24]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	e000e100 	.word	0xe000e100
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	@ 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f1c3 0307 	rsb	r3, r3, #7
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	bf28      	it	cs
 80048b2:	2304      	movcs	r3, #4
 80048b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3304      	adds	r3, #4
 80048ba:	2b06      	cmp	r3, #6
 80048bc:	d902      	bls.n	80048c4 <NVIC_EncodePriority+0x30>
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	3b03      	subs	r3, #3
 80048c2:	e000      	b.n	80048c6 <NVIC_EncodePriority+0x32>
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c8:	f04f 32ff 	mov.w	r2, #4294967295
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43da      	mvns	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	401a      	ands	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048dc:	f04f 31ff 	mov.w	r1, #4294967295
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	43d9      	mvns	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ec:	4313      	orrs	r3, r2
         );
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3724      	adds	r7, #36	@ 0x24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800490c:	d301      	bcc.n	8004912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800490e:	2301      	movs	r3, #1
 8004910:	e00f      	b.n	8004932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004912:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <SysTick_Config+0x40>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3b01      	subs	r3, #1
 8004918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800491a:	210f      	movs	r1, #15
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	f7ff ff8e 	bl	8004840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <SysTick_Config+0x40>)
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800492a:	4b04      	ldr	r3, [pc, #16]	@ (800493c <SysTick_Config+0x40>)
 800492c:	2207      	movs	r2, #7
 800492e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	e000e010 	.word	0xe000e010

08004940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff29 	bl	80047a0 <__NVIC_SetPriorityGrouping>
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	4603      	mov	r3, r0
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004964:	f7ff ff40 	bl	80047e8 <__NVIC_GetPriorityGrouping>
 8004968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	6978      	ldr	r0, [r7, #20]
 8004970:	f7ff ff90 	bl	8004894 <NVIC_EncodePriority>
 8004974:	4602      	mov	r2, r0
 8004976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497a:	4611      	mov	r1, r2
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff5f 	bl	8004840 <__NVIC_SetPriority>
}
 8004982:	bf00      	nop
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	4603      	mov	r3, r0
 8004992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff ff33 	bl	8004804 <__NVIC_EnableIRQ>
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ffa4 	bl	80048fc <SysTick_Config>
 80049b4:	4603      	mov	r3, r0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e08d      	b.n	8004aee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	4b47      	ldr	r3, [pc, #284]	@ (8004af8 <HAL_DMA_Init+0x138>)
 80049da:	429a      	cmp	r2, r3
 80049dc:	d80f      	bhi.n	80049fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	4b45      	ldr	r3, [pc, #276]	@ (8004afc <HAL_DMA_Init+0x13c>)
 80049e6:	4413      	add	r3, r2
 80049e8:	4a45      	ldr	r2, [pc, #276]	@ (8004b00 <HAL_DMA_Init+0x140>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a42      	ldr	r2, [pc, #264]	@ (8004b04 <HAL_DMA_Init+0x144>)
 80049fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80049fc:	e00e      	b.n	8004a1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	4b40      	ldr	r3, [pc, #256]	@ (8004b08 <HAL_DMA_Init+0x148>)
 8004a06:	4413      	add	r3, r2
 8004a08:	4a3d      	ldr	r2, [pc, #244]	@ (8004b00 <HAL_DMA_Init+0x140>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	009a      	lsls	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a3c      	ldr	r2, [pc, #240]	@ (8004b0c <HAL_DMA_Init+0x14c>)
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa82 	bl	8004f78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a7c:	d102      	bne.n	8004a84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a98:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d010      	beq.n	8004ac4 <HAL_DMA_Init+0x104>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d80c      	bhi.n	8004ac4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 faa2 	bl	8004ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	e008      	b.n	8004ad6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40020407 	.word	0x40020407
 8004afc:	bffdfff8 	.word	0xbffdfff8
 8004b00:	cccccccd 	.word	0xcccccccd
 8004b04:	40020000 	.word	0x40020000
 8004b08:	bffdfbf8 	.word	0xbffdfbf8
 8004b0c:	40020400 	.word	0x40020400

08004b10 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_DMA_Start_IT+0x20>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e066      	b.n	8004bfe <HAL_DMA_Start_IT+0xee>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d155      	bne.n	8004bf0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f9c7 	bl	8004efc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 020e 	orr.w	r2, r2, #14
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e00f      	b.n	8004ba8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0204 	bic.w	r2, r2, #4
 8004b96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 020a 	orr.w	r2, r2, #10
 8004ba6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bdc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0201 	orr.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e005      	b.n	8004bfc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d005      	beq.n	8004c2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2204      	movs	r2, #4
 8004c22:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
 8004c28:	e037      	b.n	8004c9a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 020e 	bic.w	r2, r2, #14
 8004c38:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c48:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0201 	bic.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5e:	f003 021f 	and.w	r2, r3, #31
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	2101      	movs	r1, #1
 8004c68:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c76:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00c      	beq.n	8004c9a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c8e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c98:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d00d      	beq.n	8004cec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
 8004cea:	e047      	b.n	8004d7c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 020e 	bic.w	r2, r2, #14
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d20:	f003 021f 	and.w	r2, r3, #31
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
    }
  }
  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	2204      	movs	r2, #4
 8004da8:	409a      	lsls	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d026      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x7a>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d021      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d107      	bne.n	8004dda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0204 	bic.w	r2, r2, #4
 8004dd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	f003 021f 	and.w	r2, r3, #31
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	2104      	movs	r1, #4
 8004de8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d071      	beq.n	8004eda <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004dfe:	e06c      	b.n	8004eda <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2202      	movs	r2, #2
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d02e      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d029      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 020a 	bic.w	r2, r2, #10
 8004e3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e48:	f003 021f 	and.w	r2, r3, #31
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	2102      	movs	r1, #2
 8004e52:	fa01 f202 	lsl.w	r2, r1, r2
 8004e56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d038      	beq.n	8004eda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e70:	e033      	b.n	8004eda <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d02a      	beq.n	8004edc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d025      	beq.n	8004edc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 020e 	bic.w	r2, r2, #14
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	f003 021f 	and.w	r2, r3, #31
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
}
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2a:	f003 021f 	and.w	r2, r3, #31
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	2101      	movs	r1, #1
 8004f34:	fa01 f202 	lsl.w	r2, r1, r2
 8004f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d108      	bne.n	8004f5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f5a:	e007      	b.n	8004f6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	4b16      	ldr	r3, [pc, #88]	@ (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d802      	bhi.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004f8c:	4b15      	ldr	r3, [pc, #84]	@ (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e001      	b.n	8004f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004f94:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	3b08      	subs	r3, #8
 8004fa2:	4a12      	ldr	r2, [pc, #72]	@ (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb0:	089b      	lsrs	r3, r3, #2
 8004fb2:	009a      	lsls	r2, r3, #2
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	461a      	mov	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004fc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2201      	movs	r2, #1
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40020407 	.word	0x40020407
 8004fe4:	40020800 	.word	0x40020800
 8004fe8:	40020820 	.word	0x40020820
 8004fec:	cccccccd 	.word	0xcccccccd
 8004ff0:	40020880 	.word	0x40020880

08004ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	461a      	mov	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a08      	ldr	r2, [pc, #32]	@ (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005016:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3b01      	subs	r3, #1
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2201      	movs	r2, #1
 8005022:	409a      	lsls	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	1000823f 	.word	0x1000823f
 8005038:	40020940 	.word	0x40020940

0800503c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800504a:	e15a      	b.n	8005302 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2101      	movs	r1, #1
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	4013      	ands	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 814c 	beq.w	80052fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d005      	beq.n	800507c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005078:	2b02      	cmp	r3, #2
 800507a:	d130      	bne.n	80050de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4013      	ands	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050b2:	2201      	movs	r2, #1
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4013      	ands	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 0201 	and.w	r2, r3, #1
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d017      	beq.n	800511a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	2203      	movs	r2, #3
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4013      	ands	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d123      	bne.n	800516e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	08da      	lsrs	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3208      	adds	r2, #8
 800512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	220f      	movs	r2, #15
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4013      	ands	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	08da      	lsrs	r2, r3, #3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3208      	adds	r2, #8
 8005168:	6939      	ldr	r1, [r7, #16]
 800516a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4013      	ands	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0203 	and.w	r2, r3, #3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80a6 	beq.w	80052fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005320 <HAL_GPIO_Init+0x2e4>)
 80051b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005320 <HAL_GPIO_Init+0x2e4>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80051bc:	4b58      	ldr	r3, [pc, #352]	@ (8005320 <HAL_GPIO_Init+0x2e4>)
 80051be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051c8:	4a56      	ldr	r2, [pc, #344]	@ (8005324 <HAL_GPIO_Init+0x2e8>)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	3302      	adds	r3, #2
 80051d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	220f      	movs	r2, #15
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4013      	ands	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80051f2:	d01f      	beq.n	8005234 <HAL_GPIO_Init+0x1f8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005328 <HAL_GPIO_Init+0x2ec>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d019      	beq.n	8005230 <HAL_GPIO_Init+0x1f4>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a4b      	ldr	r2, [pc, #300]	@ (800532c <HAL_GPIO_Init+0x2f0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_GPIO_Init+0x1f0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a4a      	ldr	r2, [pc, #296]	@ (8005330 <HAL_GPIO_Init+0x2f4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00d      	beq.n	8005228 <HAL_GPIO_Init+0x1ec>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a49      	ldr	r2, [pc, #292]	@ (8005334 <HAL_GPIO_Init+0x2f8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <HAL_GPIO_Init+0x1e8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a48      	ldr	r2, [pc, #288]	@ (8005338 <HAL_GPIO_Init+0x2fc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_GPIO_Init+0x1e4>
 800521c:	2305      	movs	r3, #5
 800521e:	e00a      	b.n	8005236 <HAL_GPIO_Init+0x1fa>
 8005220:	2306      	movs	r3, #6
 8005222:	e008      	b.n	8005236 <HAL_GPIO_Init+0x1fa>
 8005224:	2304      	movs	r3, #4
 8005226:	e006      	b.n	8005236 <HAL_GPIO_Init+0x1fa>
 8005228:	2303      	movs	r3, #3
 800522a:	e004      	b.n	8005236 <HAL_GPIO_Init+0x1fa>
 800522c:	2302      	movs	r3, #2
 800522e:	e002      	b.n	8005236 <HAL_GPIO_Init+0x1fa>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_GPIO_Init+0x1fa>
 8005234:	2300      	movs	r3, #0
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	f002 0203 	and.w	r2, r2, #3
 800523c:	0092      	lsls	r2, r2, #2
 800523e:	4093      	lsls	r3, r2
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005246:	4937      	ldr	r1, [pc, #220]	@ (8005324 <HAL_GPIO_Init+0x2e8>)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	089b      	lsrs	r3, r3, #2
 800524c:	3302      	adds	r3, #2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005254:	4b39      	ldr	r3, [pc, #228]	@ (800533c <HAL_GPIO_Init+0x300>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	43db      	mvns	r3, r3
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4013      	ands	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005278:	4a30      	ldr	r2, [pc, #192]	@ (800533c <HAL_GPIO_Init+0x300>)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800527e:	4b2f      	ldr	r3, [pc, #188]	@ (800533c <HAL_GPIO_Init+0x300>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	43db      	mvns	r3, r3
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052a2:	4a26      	ldr	r2, [pc, #152]	@ (800533c <HAL_GPIO_Init+0x300>)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80052a8:	4b24      	ldr	r3, [pc, #144]	@ (800533c <HAL_GPIO_Init+0x300>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4013      	ands	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052cc:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <HAL_GPIO_Init+0x300>)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052d2:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <HAL_GPIO_Init+0x300>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	43db      	mvns	r3, r3
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4013      	ands	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052f6:	4a11      	ldr	r2, [pc, #68]	@ (800533c <HAL_GPIO_Init+0x300>)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3301      	adds	r3, #1
 8005300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	f47f ae9d 	bne.w	800504c <HAL_GPIO_Init+0x10>
  }
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40021000 	.word	0x40021000
 8005324:	40010000 	.word	0x40010000
 8005328:	48000400 	.word	0x48000400
 800532c:	48000800 	.word	0x48000800
 8005330:	48000c00 	.word	0x48000c00
 8005334:	48001000 	.word	0x48001000
 8005338:	48001400 	.word	0x48001400
 800533c:	40010400 	.word	0x40010400

08005340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	807b      	strh	r3, [r7, #2]
 800534c:	4613      	mov	r3, r2
 800534e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005350:	787b      	ldrb	r3, [r7, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800535c:	e002      	b.n	8005364 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800535e:	887a      	ldrh	r2, [r7, #2]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800537a:	4b08      	ldr	r3, [pc, #32]	@ (800539c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005386:	4a05      	ldr	r2, [pc, #20]	@ (800539c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fd f934 	bl	80025fc <HAL_GPIO_EXTI_Callback>
  }
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40010400 	.word	0x40010400

080053a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d141      	bne.n	8005432 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ae:	4b4b      	ldr	r3, [pc, #300]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ba:	d131      	bne.n	8005420 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053bc:	4b47      	ldr	r3, [pc, #284]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053c2:	4a46      	ldr	r2, [pc, #280]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053cc:	4b43      	ldr	r3, [pc, #268]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053d4:	4a41      	ldr	r2, [pc, #260]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053dc:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2232      	movs	r2, #50	@ 0x32
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	4a3f      	ldr	r2, [pc, #252]	@ (80054e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	0c9b      	lsrs	r3, r3, #18
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053f2:	e002      	b.n	80053fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053fa:	4b38      	ldr	r3, [pc, #224]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005406:	d102      	bne.n	800540e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f2      	bne.n	80053f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800540e:	4b33      	ldr	r3, [pc, #204]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541a:	d158      	bne.n	80054ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e057      	b.n	80054d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005420:	4b2e      	ldr	r3, [pc, #184]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005426:	4a2d      	ldr	r2, [pc, #180]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800542c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005430:	e04d      	b.n	80054ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005438:	d141      	bne.n	80054be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800543a:	4b28      	ldr	r3, [pc, #160]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005446:	d131      	bne.n	80054ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005448:	4b24      	ldr	r3, [pc, #144]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800544a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800544e:	4a23      	ldr	r2, [pc, #140]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005454:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005458:	4b20      	ldr	r3, [pc, #128]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005460:	4a1e      	ldr	r2, [pc, #120]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005462:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005466:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005468:	4b1d      	ldr	r3, [pc, #116]	@ (80054e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2232      	movs	r2, #50	@ 0x32
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	4a1c      	ldr	r2, [pc, #112]	@ (80054e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	0c9b      	lsrs	r3, r3, #18
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800547e:	e002      	b.n	8005486 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3b01      	subs	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005486:	4b15      	ldr	r3, [pc, #84]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800548e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005492:	d102      	bne.n	800549a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f2      	bne.n	8005480 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800549a:	4b10      	ldr	r3, [pc, #64]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a6:	d112      	bne.n	80054ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e011      	b.n	80054d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b2:	4a0a      	ldr	r2, [pc, #40]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054bc:	e007      	b.n	80054ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054be:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054c6:	4a05      	ldr	r2, [pc, #20]	@ (80054dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40007000 	.word	0x40007000
 80054e0:	20000200 	.word	0x20000200
 80054e4:	431bde83 	.word	0x431bde83

080054e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80054ec:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	4a04      	ldr	r2, [pc, #16]	@ (8005504 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054f6:	6093      	str	r3, [r2, #8]
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40007000 	.word	0x40007000

08005508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e2fe      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d075      	beq.n	8005612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005526:	4b97      	ldr	r3, [pc, #604]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005530:	4b94      	ldr	r3, [pc, #592]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d102      	bne.n	8005546 <HAL_RCC_OscConfig+0x3e>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d002      	beq.n	800554c <HAL_RCC_OscConfig+0x44>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b08      	cmp	r3, #8
 800554a:	d10b      	bne.n	8005564 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800554c:	4b8d      	ldr	r3, [pc, #564]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d05b      	beq.n	8005610 <HAL_RCC_OscConfig+0x108>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d157      	bne.n	8005610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e2d9      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800556c:	d106      	bne.n	800557c <HAL_RCC_OscConfig+0x74>
 800556e:	4b85      	ldr	r3, [pc, #532]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a84      	ldr	r2, [pc, #528]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e01d      	b.n	80055b8 <HAL_RCC_OscConfig+0xb0>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005584:	d10c      	bne.n	80055a0 <HAL_RCC_OscConfig+0x98>
 8005586:	4b7f      	ldr	r3, [pc, #508]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a7e      	ldr	r2, [pc, #504]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 800558c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	4b7c      	ldr	r3, [pc, #496]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a7b      	ldr	r2, [pc, #492]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e00b      	b.n	80055b8 <HAL_RCC_OscConfig+0xb0>
 80055a0:	4b78      	ldr	r3, [pc, #480]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a77      	ldr	r2, [pc, #476]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80055a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	4b75      	ldr	r3, [pc, #468]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a74      	ldr	r2, [pc, #464]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80055b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d013      	beq.n	80055e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fd fe24 	bl	800320c <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c8:	f7fd fe20 	bl	800320c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b64      	cmp	r3, #100	@ 0x64
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e29e      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055da:	4b6a      	ldr	r3, [pc, #424]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0xc0>
 80055e6:	e014      	b.n	8005612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fd fe10 	bl	800320c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fd fe0c 	bl	800320c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	@ 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e28a      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005602:	4b60      	ldr	r3, [pc, #384]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0xe8>
 800560e:	e000      	b.n	8005612 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d075      	beq.n	800570a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800561e:	4b59      	ldr	r3, [pc, #356]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005628:	4b56      	ldr	r3, [pc, #344]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d102      	bne.n	800563e <HAL_RCC_OscConfig+0x136>
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d002      	beq.n	8005644 <HAL_RCC_OscConfig+0x13c>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b04      	cmp	r3, #4
 8005642:	d11f      	bne.n	8005684 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005644:	4b4f      	ldr	r3, [pc, #316]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_RCC_OscConfig+0x154>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e25d      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565c:	4b49      	ldr	r3, [pc, #292]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	4946      	ldr	r1, [pc, #280]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005670:	4b45      	ldr	r3, [pc, #276]	@ (8005788 <HAL_RCC_OscConfig+0x280>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7fd fd7d 	bl	8003174 <HAL_InitTick>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d043      	beq.n	8005708 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e249      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d023      	beq.n	80056d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800568c:	4b3d      	ldr	r3, [pc, #244]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a3c      	ldr	r2, [pc, #240]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fd fdb8 	bl	800320c <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a0:	f7fd fdb4 	bl	800320c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e232      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b2:	4b34      	ldr	r3, [pc, #208]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056be:	4b31      	ldr	r3, [pc, #196]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	061b      	lsls	r3, r3, #24
 80056cc:	492d      	ldr	r1, [pc, #180]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	604b      	str	r3, [r1, #4]
 80056d2:	e01a      	b.n	800570a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80056da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fd fd94 	bl	800320c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e8:	f7fd fd90 	bl	800320c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e20e      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056fa:	4b22      	ldr	r3, [pc, #136]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x1e0>
 8005706:	e000      	b.n	800570a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005708:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d041      	beq.n	800579a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01c      	beq.n	8005758 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800571e:	4b19      	ldr	r3, [pc, #100]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005724:	4a17      	ldr	r2, [pc, #92]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572e:	f7fd fd6d 	bl	800320c <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005736:	f7fd fd69 	bl	800320c <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e1e7      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005748:	4b0e      	ldr	r3, [pc, #56]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 800574a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ef      	beq.n	8005736 <HAL_RCC_OscConfig+0x22e>
 8005756:	e020      	b.n	800579a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005758:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 800575a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800575e:	4a09      	ldr	r2, [pc, #36]	@ (8005784 <HAL_RCC_OscConfig+0x27c>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fd fd50 	bl	800320c <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800576e:	e00d      	b.n	800578c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005770:	f7fd fd4c 	bl	800320c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d906      	bls.n	800578c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e1ca      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
 8005782:	bf00      	nop
 8005784:	40021000 	.word	0x40021000
 8005788:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800578c:	4b8c      	ldr	r3, [pc, #560]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 800578e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ea      	bne.n	8005770 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80a6 	beq.w	80058f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a8:	2300      	movs	r3, #0
 80057aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057ac:	4b84      	ldr	r3, [pc, #528]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_RCC_OscConfig+0x2b4>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <HAL_RCC_OscConfig+0x2b6>
 80057bc:	2300      	movs	r3, #0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c2:	4b7f      	ldr	r3, [pc, #508]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c6:	4a7e      	ldr	r2, [pc, #504]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ce:	4b7c      	ldr	r3, [pc, #496]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057da:	2301      	movs	r3, #1
 80057dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057de:	4b79      	ldr	r3, [pc, #484]	@ (80059c4 <HAL_RCC_OscConfig+0x4bc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d118      	bne.n	800581c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ea:	4b76      	ldr	r3, [pc, #472]	@ (80059c4 <HAL_RCC_OscConfig+0x4bc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a75      	ldr	r2, [pc, #468]	@ (80059c4 <HAL_RCC_OscConfig+0x4bc>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f6:	f7fd fd09 	bl	800320c <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fe:	f7fd fd05 	bl	800320c <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e183      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005810:	4b6c      	ldr	r3, [pc, #432]	@ (80059c4 <HAL_RCC_OscConfig+0x4bc>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d108      	bne.n	8005836 <HAL_RCC_OscConfig+0x32e>
 8005824:	4b66      	ldr	r3, [pc, #408]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582a:	4a65      	ldr	r2, [pc, #404]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005834:	e024      	b.n	8005880 <HAL_RCC_OscConfig+0x378>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b05      	cmp	r3, #5
 800583c:	d110      	bne.n	8005860 <HAL_RCC_OscConfig+0x358>
 800583e:	4b60      	ldr	r3, [pc, #384]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005844:	4a5e      	ldr	r2, [pc, #376]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800584e:	4b5c      	ldr	r3, [pc, #368]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005854:	4a5a      	ldr	r2, [pc, #360]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800585e:	e00f      	b.n	8005880 <HAL_RCC_OscConfig+0x378>
 8005860:	4b57      	ldr	r3, [pc, #348]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005866:	4a56      	ldr	r2, [pc, #344]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005870:	4b53      	ldr	r3, [pc, #332]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005876:	4a52      	ldr	r2, [pc, #328]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d016      	beq.n	80058b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005888:	f7fd fcc0 	bl	800320c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588e:	e00a      	b.n	80058a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fd fcbc 	bl	800320c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e138      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a6:	4b46      	ldr	r3, [pc, #280]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ed      	beq.n	8005890 <HAL_RCC_OscConfig+0x388>
 80058b4:	e015      	b.n	80058e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b6:	f7fd fca9 	bl	800320c <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058bc:	e00a      	b.n	80058d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fd fca5 	bl	800320c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e121      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058d4:	4b3a      	ldr	r3, [pc, #232]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1ed      	bne.n	80058be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058e2:	7ffb      	ldrb	r3, [r7, #31]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d105      	bne.n	80058f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e8:	4b35      	ldr	r3, [pc, #212]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80058ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ec:	4a34      	ldr	r2, [pc, #208]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80058ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d03c      	beq.n	800597a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01c      	beq.n	8005942 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005908:	4b2d      	ldr	r3, [pc, #180]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 800590a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800590e:	4a2c      	ldr	r2, [pc, #176]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fd fc78 	bl	800320c <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005920:	f7fd fc74 	bl	800320c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e0f2      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005932:	4b23      	ldr	r3, [pc, #140]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005934:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ef      	beq.n	8005920 <HAL_RCC_OscConfig+0x418>
 8005940:	e01b      	b.n	800597a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005942:	4b1f      	ldr	r3, [pc, #124]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005944:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005948:	4a1d      	ldr	r2, [pc, #116]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005952:	f7fd fc5b 	bl	800320c <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800595a:	f7fd fc57 	bl	800320c <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e0d5      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800596c:	4b14      	ldr	r3, [pc, #80]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 800596e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1ef      	bne.n	800595a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80c9 	beq.w	8005b16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005984:	4b0e      	ldr	r3, [pc, #56]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 030c 	and.w	r3, r3, #12
 800598c:	2b0c      	cmp	r3, #12
 800598e:	f000 8083 	beq.w	8005a98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d15e      	bne.n	8005a58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599a:	4b09      	ldr	r3, [pc, #36]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a08      	ldr	r2, [pc, #32]	@ (80059c0 <HAL_RCC_OscConfig+0x4b8>)
 80059a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a6:	f7fd fc31 	bl	800320c <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ac:	e00c      	b.n	80059c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ae:	f7fd fc2d 	bl	800320c <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d905      	bls.n	80059c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e0ab      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c8:	4b55      	ldr	r3, [pc, #340]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1ec      	bne.n	80059ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059d4:	4b52      	ldr	r3, [pc, #328]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	4b52      	ldr	r3, [pc, #328]	@ (8005b24 <HAL_RCC_OscConfig+0x61c>)
 80059da:	4013      	ands	r3, r2
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6a11      	ldr	r1, [r2, #32]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059e4:	3a01      	subs	r2, #1
 80059e6:	0112      	lsls	r2, r2, #4
 80059e8:	4311      	orrs	r1, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80059ee:	0212      	lsls	r2, r2, #8
 80059f0:	4311      	orrs	r1, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059f6:	0852      	lsrs	r2, r2, #1
 80059f8:	3a01      	subs	r2, #1
 80059fa:	0552      	lsls	r2, r2, #21
 80059fc:	4311      	orrs	r1, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a02:	0852      	lsrs	r2, r2, #1
 8005a04:	3a01      	subs	r2, #1
 8005a06:	0652      	lsls	r2, r2, #25
 8005a08:	4311      	orrs	r1, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a0e:	06d2      	lsls	r2, r2, #27
 8005a10:	430a      	orrs	r2, r1
 8005a12:	4943      	ldr	r1, [pc, #268]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a18:	4b41      	ldr	r3, [pc, #260]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a40      	ldr	r2, [pc, #256]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a24:	4b3e      	ldr	r3, [pc, #248]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4a3d      	ldr	r2, [pc, #244]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fd fbec 	bl	800320c <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fd fbe8 	bl	800320c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e066      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4a:	4b35      	ldr	r3, [pc, #212]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0x530>
 8005a56:	e05e      	b.n	8005b16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a58:	4b31      	ldr	r3, [pc, #196]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a30      	ldr	r2, [pc, #192]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7fd fbd2 	bl	800320c <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6c:	f7fd fbce 	bl	800320c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e04c      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7e:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a8a:	4b25      	ldr	r3, [pc, #148]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	4924      	ldr	r1, [pc, #144]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005a90:	4b25      	ldr	r3, [pc, #148]	@ (8005b28 <HAL_RCC_OscConfig+0x620>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	60cb      	str	r3, [r1, #12]
 8005a96:	e03e      	b.n	8005b16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e039      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b20 <HAL_RCC_OscConfig+0x618>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f003 0203 	and.w	r2, r3, #3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d12c      	bne.n	8005b12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d123      	bne.n	8005b12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d11b      	bne.n	8005b12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d113      	bne.n	8005b12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	3b01      	subs	r3, #1
 8005af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d109      	bne.n	8005b12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b08:	085b      	lsrs	r3, r3, #1
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	019f800c 	.word	0x019f800c
 8005b28:	feeefffc 	.word	0xfeeefffc

08005b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e11e      	b.n	8005d82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b44:	4b91      	ldr	r3, [pc, #580]	@ (8005d8c <HAL_RCC_ClockConfig+0x260>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d910      	bls.n	8005b74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b52:	4b8e      	ldr	r3, [pc, #568]	@ (8005d8c <HAL_RCC_ClockConfig+0x260>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f023 020f 	bic.w	r2, r3, #15
 8005b5a:	498c      	ldr	r1, [pc, #560]	@ (8005d8c <HAL_RCC_ClockConfig+0x260>)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b62:	4b8a      	ldr	r3, [pc, #552]	@ (8005d8c <HAL_RCC_ClockConfig+0x260>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d001      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e106      	b.n	8005d82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d073      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d129      	bne.n	8005bdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b88:	4b81      	ldr	r3, [pc, #516]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0f4      	b.n	8005d82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b98:	f000 f99e 	bl	8005ed8 <RCC_GetSysClockFreqFromPLLSource>
 8005b9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4a7c      	ldr	r2, [pc, #496]	@ (8005d94 <HAL_RCC_ClockConfig+0x268>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d93f      	bls.n	8005c26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ba6:	4b7a      	ldr	r3, [pc, #488]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d033      	beq.n	8005c26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d12f      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bc6:	4b72      	ldr	r3, [pc, #456]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bce:	4a70      	ldr	r2, [pc, #448]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bd6:	2380      	movs	r3, #128	@ 0x80
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e024      	b.n	8005c26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005be4:	4b6a      	ldr	r3, [pc, #424]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d109      	bne.n	8005c04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0c6      	b.n	8005d82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bf4:	4b66      	ldr	r3, [pc, #408]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0be      	b.n	8005d82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c04:	f000 f8ce 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 8005c08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4a61      	ldr	r2, [pc, #388]	@ (8005d94 <HAL_RCC_ClockConfig+0x268>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d909      	bls.n	8005c26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c12:	4b5f      	ldr	r3, [pc, #380]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c1a:	4a5d      	ldr	r2, [pc, #372]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c22:	2380      	movs	r3, #128	@ 0x80
 8005c24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c26:	4b5a      	ldr	r3, [pc, #360]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f023 0203 	bic.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4957      	ldr	r1, [pc, #348]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c38:	f7fd fae8 	bl	800320c <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3e:	e00a      	b.n	8005c56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c40:	f7fd fae4 	bl	800320c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e095      	b.n	8005d82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c56:	4b4e      	ldr	r3, [pc, #312]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 020c 	and.w	r2, r3, #12
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d1eb      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d023      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c80:	4b43      	ldr	r3, [pc, #268]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a42      	ldr	r2, [pc, #264]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005c86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c98:	4b3d      	ldr	r3, [pc, #244]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ca0:	4a3b      	ldr	r2, [pc, #236]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005ca2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ca6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca8:	4b39      	ldr	r3, [pc, #228]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	4936      	ldr	r1, [pc, #216]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	608b      	str	r3, [r1, #8]
 8005cba:	e008      	b.n	8005cce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b80      	cmp	r3, #128	@ 0x80
 8005cc0:	d105      	bne.n	8005cce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cc2:	4b33      	ldr	r3, [pc, #204]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	4a32      	ldr	r2, [pc, #200]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005cc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ccc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cce:	4b2f      	ldr	r3, [pc, #188]	@ (8005d8c <HAL_RCC_ClockConfig+0x260>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d21d      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d8c <HAL_RCC_ClockConfig+0x260>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f023 020f 	bic.w	r2, r3, #15
 8005ce4:	4929      	ldr	r1, [pc, #164]	@ (8005d8c <HAL_RCC_ClockConfig+0x260>)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cec:	f7fd fa8e 	bl	800320c <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f7fd fa8a 	bl	800320c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e03b      	b.n	8005d82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0a:	4b20      	ldr	r3, [pc, #128]	@ (8005d8c <HAL_RCC_ClockConfig+0x260>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d1ed      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d24:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4917      	ldr	r1, [pc, #92]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d42:	4b13      	ldr	r3, [pc, #76]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	490f      	ldr	r1, [pc, #60]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d56:	f000 f825 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d90 <HAL_RCC_ClockConfig+0x264>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	091b      	lsrs	r3, r3, #4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	490c      	ldr	r1, [pc, #48]	@ (8005d98 <HAL_RCC_ClockConfig+0x26c>)
 8005d68:	5ccb      	ldrb	r3, [r1, r3]
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d72:	4a0a      	ldr	r2, [pc, #40]	@ (8005d9c <HAL_RCC_ClockConfig+0x270>)
 8005d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d76:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <HAL_RCC_ClockConfig+0x274>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fd f9fa 	bl	8003174 <HAL_InitTick>
 8005d80:	4603      	mov	r3, r0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40022000 	.word	0x40022000
 8005d90:	40021000 	.word	0x40021000
 8005d94:	04c4b400 	.word	0x04c4b400
 8005d98:	0800b1d8 	.word	0x0800b1d8
 8005d9c:	20000200 	.word	0x20000200
 8005da0:	20000204 	.word	0x20000204

08005da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005daa:	4b2c      	ldr	r3, [pc, #176]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d102      	bne.n	8005dbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005db6:	4b2a      	ldr	r3, [pc, #168]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e047      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005dbc:	4b27      	ldr	r3, [pc, #156]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d102      	bne.n	8005dce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dc8:	4b26      	ldr	r3, [pc, #152]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e03e      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005dce:	4b23      	ldr	r3, [pc, #140]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 030c 	and.w	r3, r3, #12
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d136      	bne.n	8005e48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dda:	4b20      	ldr	r3, [pc, #128]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005de4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	3301      	adds	r3, #1
 8005df0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d10c      	bne.n	8005e12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005df8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e00:	4a16      	ldr	r2, [pc, #88]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e02:	68d2      	ldr	r2, [r2, #12]
 8005e04:	0a12      	lsrs	r2, r2, #8
 8005e06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	617b      	str	r3, [r7, #20]
      break;
 8005e10:	e00c      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e12:	4a13      	ldr	r2, [pc, #76]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	4a10      	ldr	r2, [pc, #64]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e1c:	68d2      	ldr	r2, [r2, #12]
 8005e1e:	0a12      	lsrs	r2, r2, #8
 8005e20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]
      break;
 8005e2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	0e5b      	lsrs	r3, r3, #25
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	3301      	adds	r3, #1
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	e001      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e4c:	693b      	ldr	r3, [r7, #16]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	00f42400 	.word	0x00f42400
 8005e64:	016e3600 	.word	0x016e3600

08005e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e6c:	4b03      	ldr	r3, [pc, #12]	@ (8005e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20000200 	.word	0x20000200

08005e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e84:	f7ff fff0 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	4904      	ldr	r1, [pc, #16]	@ (8005ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e96:	5ccb      	ldrb	r3, [r1, r3]
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	0800b1e8 	.word	0x0800b1e8

08005eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005eb0:	f7ff ffda 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	0adb      	lsrs	r3, r3, #11
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	4904      	ldr	r1, [pc, #16]	@ (8005ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ec2:	5ccb      	ldrb	r3, [r1, r3]
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	0800b1e8 	.word	0x0800b1e8

08005ed8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ede:	4b1e      	ldr	r3, [pc, #120]	@ (8005f58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d10c      	bne.n	8005f16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005efc:	4a17      	ldr	r2, [pc, #92]	@ (8005f5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	4a14      	ldr	r2, [pc, #80]	@ (8005f58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f06:	68d2      	ldr	r2, [r2, #12]
 8005f08:	0a12      	lsrs	r2, r2, #8
 8005f0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f0e:	fb02 f303 	mul.w	r3, r2, r3
 8005f12:	617b      	str	r3, [r7, #20]
    break;
 8005f14:	e00c      	b.n	8005f30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f16:	4a12      	ldr	r2, [pc, #72]	@ (8005f60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005f58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f20:	68d2      	ldr	r2, [r2, #12]
 8005f22:	0a12      	lsrs	r2, r2, #8
 8005f24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f28:	fb02 f303 	mul.w	r3, r2, r3
 8005f2c:	617b      	str	r3, [r7, #20]
    break;
 8005f2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f30:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	0e5b      	lsrs	r3, r3, #25
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f4a:	687b      	ldr	r3, [r7, #4]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	016e3600 	.word	0x016e3600
 8005f60:	00f42400 	.word	0x00f42400

08005f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f70:	2300      	movs	r3, #0
 8005f72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8098 	beq.w	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f82:	2300      	movs	r3, #0
 8005f84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f86:	4b43      	ldr	r3, [pc, #268]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f92:	4b40      	ldr	r3, [pc, #256]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	4a3f      	ldr	r2, [pc, #252]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005faa:	2301      	movs	r3, #1
 8005fac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fae:	4b3a      	ldr	r3, [pc, #232]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a39      	ldr	r2, [pc, #228]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fba:	f7fd f927 	bl	800320c <HAL_GetTick>
 8005fbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fc0:	e009      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fc2:	f7fd f923 	bl	800320c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d902      	bls.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	74fb      	strb	r3, [r7, #19]
        break;
 8005fd4:	e005      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fd6:	4b30      	ldr	r3, [pc, #192]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0ef      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005fe2:	7cfb      	ldrb	r3, [r7, #19]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d159      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01e      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	429a      	cmp	r2, r3
 8006002:	d019      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006004:	4b23      	ldr	r3, [pc, #140]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800600a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800600e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006010:	4b20      	ldr	r3, [pc, #128]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006016:	4a1f      	ldr	r2, [pc, #124]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800601c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006020:	4b1c      	ldr	r3, [pc, #112]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006026:	4a1b      	ldr	r2, [pc, #108]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800602c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006030:	4a18      	ldr	r2, [pc, #96]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d016      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006042:	f7fd f8e3 	bl	800320c <HAL_GetTick>
 8006046:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006048:	e00b      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604a:	f7fd f8df 	bl	800320c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006058:	4293      	cmp	r3, r2
 800605a:	d902      	bls.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	74fb      	strb	r3, [r7, #19]
            break;
 8006060:	e006      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006062:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0ec      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006076:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006084:	4903      	ldr	r1, [pc, #12]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800608c:	e008      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800608e:	7cfb      	ldrb	r3, [r7, #19]
 8006090:	74bb      	strb	r3, [r7, #18]
 8006092:	e005      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006094:	40021000 	.word	0x40021000
 8006098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060a0:	7c7b      	ldrb	r3, [r7, #17]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d105      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a6:	4ba7      	ldr	r3, [pc, #668]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060aa:	4aa6      	ldr	r2, [pc, #664]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060be:	4ba1      	ldr	r3, [pc, #644]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c4:	f023 0203 	bic.w	r2, r3, #3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	499d      	ldr	r1, [pc, #628]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060e0:	4b98      	ldr	r3, [pc, #608]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e6:	f023 020c 	bic.w	r2, r3, #12
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	4995      	ldr	r1, [pc, #596]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006102:	4b90      	ldr	r3, [pc, #576]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006108:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	498c      	ldr	r1, [pc, #560]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006124:	4b87      	ldr	r3, [pc, #540]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	4984      	ldr	r1, [pc, #528]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006146:	4b7f      	ldr	r3, [pc, #508]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	497b      	ldr	r1, [pc, #492]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006168:	4b76      	ldr	r3, [pc, #472]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	4973      	ldr	r1, [pc, #460]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800618a:	4b6e      	ldr	r3, [pc, #440]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006190:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	496a      	ldr	r1, [pc, #424]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061ac:	4b65      	ldr	r3, [pc, #404]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	4962      	ldr	r1, [pc, #392]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	4959      	ldr	r1, [pc, #356]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061f0:	4b54      	ldr	r3, [pc, #336]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061f6:	f023 0203 	bic.w	r2, r3, #3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	4951      	ldr	r1, [pc, #324]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006212:	4b4c      	ldr	r3, [pc, #304]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006218:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006220:	4948      	ldr	r1, [pc, #288]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006230:	2b00      	cmp	r3, #0
 8006232:	d015      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006234:	4b43      	ldr	r3, [pc, #268]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006242:	4940      	ldr	r1, [pc, #256]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006252:	d105      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006254:	4b3b      	ldr	r3, [pc, #236]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	4a3a      	ldr	r2, [pc, #232]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800625e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006268:	2b00      	cmp	r3, #0
 800626a:	d015      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800626c:	4b35      	ldr	r3, [pc, #212]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006272:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627a:	4932      	ldr	r1, [pc, #200]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800628a:	d105      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800628c:	4b2d      	ldr	r3, [pc, #180]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4a2c      	ldr	r2, [pc, #176]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006296:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062a4:	4b27      	ldr	r3, [pc, #156]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	4924      	ldr	r1, [pc, #144]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062c2:	d105      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d015      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062dc:	4b19      	ldr	r3, [pc, #100]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ea:	4916      	ldr	r1, [pc, #88]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062fa:	d105      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062fc:	4b11      	ldr	r3, [pc, #68]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4a10      	ldr	r2, [pc, #64]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006306:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d019      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006314:	4b0b      	ldr	r3, [pc, #44]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	4908      	ldr	r1, [pc, #32]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006332:	d109      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006334:	4b03      	ldr	r3, [pc, #12]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	4a02      	ldr	r2, [pc, #8]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800633e:	60d3      	str	r3, [r2, #12]
 8006340:	e002      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006342:	bf00      	nop
 8006344:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d015      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006354:	4b29      	ldr	r3, [pc, #164]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006362:	4926      	ldr	r1, [pc, #152]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006372:	d105      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006374:	4b21      	ldr	r3, [pc, #132]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4a20      	ldr	r2, [pc, #128]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800637a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800637e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d015      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800638c:	4b1b      	ldr	r3, [pc, #108]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006392:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639a:	4918      	ldr	r1, [pc, #96]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063aa:	d105      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063ac:	4b13      	ldr	r3, [pc, #76]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4a12      	ldr	r2, [pc, #72]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d015      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063c4:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d2:	490a      	ldr	r1, [pc, #40]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063e2:	d105      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4a04      	ldr	r2, [pc, #16]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80063f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40021000 	.word	0x40021000

08006400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e054      	b.n	80064bc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d111      	bne.n	8006442 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 ffd4 	bl	80083d4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a23      	ldr	r2, [pc, #140]	@ (80064c4 <HAL_TIM_Base_Init+0xc4>)
 8006438:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f001 fb1d 	bl	8007a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	08002ba9 	.word	0x08002ba9

080064c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d001      	beq.n	80064e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e04c      	b.n	800657a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a26      	ldr	r2, [pc, #152]	@ (8006588 <HAL_TIM_Base_Start+0xc0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d022      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fa:	d01d      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a22      	ldr	r2, [pc, #136]	@ (800658c <HAL_TIM_Base_Start+0xc4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a21      	ldr	r2, [pc, #132]	@ (8006590 <HAL_TIM_Base_Start+0xc8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1f      	ldr	r2, [pc, #124]	@ (8006594 <HAL_TIM_Base_Start+0xcc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1e      	ldr	r2, [pc, #120]	@ (8006598 <HAL_TIM_Base_Start+0xd0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1c      	ldr	r2, [pc, #112]	@ (800659c <HAL_TIM_Base_Start+0xd4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1b      	ldr	r2, [pc, #108]	@ (80065a0 <HAL_TIM_Base_Start+0xd8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d115      	bne.n	8006564 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	4b19      	ldr	r3, [pc, #100]	@ (80065a4 <HAL_TIM_Base_Start+0xdc>)
 8006540:	4013      	ands	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b06      	cmp	r3, #6
 8006548:	d015      	beq.n	8006576 <HAL_TIM_Base_Start+0xae>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006550:	d011      	beq.n	8006576 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	e008      	b.n	8006576 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e000      	b.n	8006578 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40012c00 	.word	0x40012c00
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40015000 	.word	0x40015000
 80065a4:	00010007 	.word	0x00010007

080065a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d001      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e054      	b.n	800666a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a26      	ldr	r2, [pc, #152]	@ (8006678 <HAL_TIM_Base_Start_IT+0xd0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d022      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x80>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ea:	d01d      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x80>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a22      	ldr	r2, [pc, #136]	@ (800667c <HAL_TIM_Base_Start_IT+0xd4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d018      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x80>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a21      	ldr	r2, [pc, #132]	@ (8006680 <HAL_TIM_Base_Start_IT+0xd8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x80>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1f      	ldr	r2, [pc, #124]	@ (8006684 <HAL_TIM_Base_Start_IT+0xdc>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00e      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x80>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1e      	ldr	r2, [pc, #120]	@ (8006688 <HAL_TIM_Base_Start_IT+0xe0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x80>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1c      	ldr	r2, [pc, #112]	@ (800668c <HAL_TIM_Base_Start_IT+0xe4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x80>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1b      	ldr	r2, [pc, #108]	@ (8006690 <HAL_TIM_Base_Start_IT+0xe8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d115      	bne.n	8006654 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	4b19      	ldr	r3, [pc, #100]	@ (8006694 <HAL_TIM_Base_Start_IT+0xec>)
 8006630:	4013      	ands	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b06      	cmp	r3, #6
 8006638:	d015      	beq.n	8006666 <HAL_TIM_Base_Start_IT+0xbe>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006640:	d011      	beq.n	8006666 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006652:	e008      	b.n	8006666 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e000      	b.n	8006668 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40012c00 	.word	0x40012c00
 800667c:	40000400 	.word	0x40000400
 8006680:	40000800 	.word	0x40000800
 8006684:	40000c00 	.word	0x40000c00
 8006688:	40013400 	.word	0x40013400
 800668c:	40014000 	.word	0x40014000
 8006690:	40015000 	.word	0x40015000
 8006694:	00010007 	.word	0x00010007

08006698 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e054      	b.n	8006754 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d111      	bne.n	80066da <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fe88 	bl	80083d4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a23      	ldr	r2, [pc, #140]	@ (800675c <HAL_TIM_OC_Init+0xc4>)
 80066d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f001 f9d1 	bl	8007a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	08006761 	.word	0x08006761

08006760 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e054      	b.n	8006830 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d111      	bne.n	80067b6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fe1a 	bl	80083d4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a23      	ldr	r2, [pc, #140]	@ (8006838 <HAL_TIM_PWM_Init+0xc4>)
 80067ac:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2202      	movs	r2, #2
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f001 f963 	bl	8007a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	0800683d 	.word	0x0800683d

0800683c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_TIM_PWM_Start+0x24>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	e03c      	b.n	80068ee <HAL_TIM_PWM_Start+0x9e>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b04      	cmp	r3, #4
 8006878:	d109      	bne.n	800688e <HAL_TIM_PWM_Start+0x3e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	bf14      	ite	ne
 8006886:	2301      	movne	r3, #1
 8006888:	2300      	moveq	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	e02f      	b.n	80068ee <HAL_TIM_PWM_Start+0x9e>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d109      	bne.n	80068a8 <HAL_TIM_PWM_Start+0x58>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e022      	b.n	80068ee <HAL_TIM_PWM_Start+0x9e>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b0c      	cmp	r3, #12
 80068ac:	d109      	bne.n	80068c2 <HAL_TIM_PWM_Start+0x72>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	bf14      	ite	ne
 80068ba:	2301      	movne	r3, #1
 80068bc:	2300      	moveq	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	e015      	b.n	80068ee <HAL_TIM_PWM_Start+0x9e>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d109      	bne.n	80068dc <HAL_TIM_PWM_Start+0x8c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	e008      	b.n	80068ee <HAL_TIM_PWM_Start+0x9e>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e0a6      	b.n	8006a44 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_PWM_Start+0xb6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006904:	e023      	b.n	800694e <HAL_TIM_PWM_Start+0xfe>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b04      	cmp	r3, #4
 800690a:	d104      	bne.n	8006916 <HAL_TIM_PWM_Start+0xc6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006914:	e01b      	b.n	800694e <HAL_TIM_PWM_Start+0xfe>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b08      	cmp	r3, #8
 800691a:	d104      	bne.n	8006926 <HAL_TIM_PWM_Start+0xd6>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006924:	e013      	b.n	800694e <HAL_TIM_PWM_Start+0xfe>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b0c      	cmp	r3, #12
 800692a:	d104      	bne.n	8006936 <HAL_TIM_PWM_Start+0xe6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006934:	e00b      	b.n	800694e <HAL_TIM_PWM_Start+0xfe>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b10      	cmp	r3, #16
 800693a:	d104      	bne.n	8006946 <HAL_TIM_PWM_Start+0xf6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006944:	e003      	b.n	800694e <HAL_TIM_PWM_Start+0xfe>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2201      	movs	r2, #1
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f001 fd16 	bl	8008388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a3a      	ldr	r2, [pc, #232]	@ (8006a4c <HAL_TIM_PWM_Start+0x1fc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d018      	beq.n	8006998 <HAL_TIM_PWM_Start+0x148>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a39      	ldr	r2, [pc, #228]	@ (8006a50 <HAL_TIM_PWM_Start+0x200>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <HAL_TIM_PWM_Start+0x148>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a37      	ldr	r2, [pc, #220]	@ (8006a54 <HAL_TIM_PWM_Start+0x204>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00e      	beq.n	8006998 <HAL_TIM_PWM_Start+0x148>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a36      	ldr	r2, [pc, #216]	@ (8006a58 <HAL_TIM_PWM_Start+0x208>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d009      	beq.n	8006998 <HAL_TIM_PWM_Start+0x148>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a34      	ldr	r2, [pc, #208]	@ (8006a5c <HAL_TIM_PWM_Start+0x20c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <HAL_TIM_PWM_Start+0x148>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a33      	ldr	r2, [pc, #204]	@ (8006a60 <HAL_TIM_PWM_Start+0x210>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d101      	bne.n	800699c <HAL_TIM_PWM_Start+0x14c>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <HAL_TIM_PWM_Start+0x14e>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a25      	ldr	r2, [pc, #148]	@ (8006a4c <HAL_TIM_PWM_Start+0x1fc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d022      	beq.n	8006a02 <HAL_TIM_PWM_Start+0x1b2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c4:	d01d      	beq.n	8006a02 <HAL_TIM_PWM_Start+0x1b2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a26      	ldr	r2, [pc, #152]	@ (8006a64 <HAL_TIM_PWM_Start+0x214>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d018      	beq.n	8006a02 <HAL_TIM_PWM_Start+0x1b2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a24      	ldr	r2, [pc, #144]	@ (8006a68 <HAL_TIM_PWM_Start+0x218>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <HAL_TIM_PWM_Start+0x1b2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a23      	ldr	r2, [pc, #140]	@ (8006a6c <HAL_TIM_PWM_Start+0x21c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00e      	beq.n	8006a02 <HAL_TIM_PWM_Start+0x1b2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a19      	ldr	r2, [pc, #100]	@ (8006a50 <HAL_TIM_PWM_Start+0x200>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d009      	beq.n	8006a02 <HAL_TIM_PWM_Start+0x1b2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a18      	ldr	r2, [pc, #96]	@ (8006a54 <HAL_TIM_PWM_Start+0x204>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d004      	beq.n	8006a02 <HAL_TIM_PWM_Start+0x1b2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a18      	ldr	r2, [pc, #96]	@ (8006a60 <HAL_TIM_PWM_Start+0x210>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d115      	bne.n	8006a2e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	4b19      	ldr	r3, [pc, #100]	@ (8006a70 <HAL_TIM_PWM_Start+0x220>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b06      	cmp	r3, #6
 8006a12:	d015      	beq.n	8006a40 <HAL_TIM_PWM_Start+0x1f0>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a1a:	d011      	beq.n	8006a40 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2c:	e008      	b.n	8006a40 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e000      	b.n	8006a42 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	40013400 	.word	0x40013400
 8006a54:	40014000 	.word	0x40014000
 8006a58:	40014400 	.word	0x40014400
 8006a5c:	40014800 	.word	0x40014800
 8006a60:	40015000 	.word	0x40015000
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	00010007 	.word	0x00010007

08006a74 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e04c      	b.n	8006b22 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d111      	bne.n	8006ab8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fc99 	bl	80083d4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d102      	bne.n	8006ab0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1f      	ldr	r2, [pc, #124]	@ (8006b2c <HAL_TIM_OnePulse_Init+0xb8>)
 8006aae:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f000 ffe2 	bl	8007a94 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0208 	bic.w	r2, r2, #8
 8006ade:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6819      	ldr	r1, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	08006b31 	.word	0x08006b31

08006b30 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b6c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d108      	bne.n	8006b86 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d105      	bne.n	8006b86 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b7a:	7b7b      	ldrb	r3, [r7, #13]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d102      	bne.n	8006b86 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b80:	7b3b      	ldrb	r3, [r7, #12]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d001      	beq.n	8006b8a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e059      	b.n	8006c3e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0202 	orr.w	r2, r2, #2
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0204 	orr.w	r2, r2, #4
 8006bc8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 fbd8 	bl	8008388 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	2104      	movs	r1, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 fbd1 	bl	8008388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a17      	ldr	r2, [pc, #92]	@ (8006c48 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d018      	beq.n	8006c22 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	@ (8006c4c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a14      	ldr	r2, [pc, #80]	@ (8006c50 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00e      	beq.n	8006c22 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a12      	ldr	r2, [pc, #72]	@ (8006c54 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d009      	beq.n	8006c22 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a11      	ldr	r2, [pc, #68]	@ (8006c58 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d004      	beq.n	8006c22 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8006c5c <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40013400 	.word	0x40013400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40014400 	.word	0x40014400
 8006c58:	40014800 	.word	0x40014800
 8006c5c:	40015000 	.word	0x40015000

08006c60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0a2      	b.n	8006dba <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d111      	bne.n	8006ca4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fba3 	bl	80083d4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a4a      	ldr	r2, [pc, #296]	@ (8006dc4 <HAL_TIM_Encoder_Init+0x164>)
 8006c9a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006cba:	f023 0307 	bic.w	r3, r3, #7
 8006cbe:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f000 fee2 	bl	8007a94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cf8:	f023 0303 	bic.w	r3, r3, #3
 8006cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006d16:	f023 030c 	bic.w	r3, r3, #12
 8006d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	4313      	orrs	r3, r2
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	011a      	lsls	r2, r3, #4
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	031b      	lsls	r3, r3, #12
 8006d46:	4313      	orrs	r3, r2
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006d54:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006d5c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08002cc1 	.word	0x08002cc1

08006dc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006de0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006de8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006df0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d110      	bne.n	8006e1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d102      	bne.n	8006e04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dfe:	7b7b      	ldrb	r3, [r7, #13]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d001      	beq.n	8006e08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e069      	b.n	8006edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e18:	e031      	b.n	8006e7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d110      	bne.n	8006e42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d102      	bne.n	8006e2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e26:	7b3b      	ldrb	r3, [r7, #12]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d001      	beq.n	8006e30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e055      	b.n	8006edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e40:	e01d      	b.n	8006e7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d108      	bne.n	8006e5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d105      	bne.n	8006e5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e4e:	7b7b      	ldrb	r3, [r7, #13]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d102      	bne.n	8006e5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e54:	7b3b      	ldrb	r3, [r7, #12]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d001      	beq.n	8006e5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e03e      	b.n	8006edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2202      	movs	r2, #2
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_TIM_Encoder_Start+0xc4>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d008      	beq.n	8006e9c <HAL_TIM_Encoder_Start+0xd4>
 8006e8a:	e00f      	b.n	8006eac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2201      	movs	r2, #1
 8006e92:	2100      	movs	r1, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 fa77 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8006e9a:	e016      	b.n	8006eca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	2104      	movs	r1, #4
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fa6f 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8006eaa:	e00e      	b.n	8006eca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 fa67 	bl	8008388 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fa60 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8006ec8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0201 	orr.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d026      	beq.n	8006f54 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d021      	beq.n	8006f54 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0202 	mvn.w	r2, #2
 8006f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3
 8006f38:	e009      	b.n	8006f4e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d026      	beq.n	8006fac <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d021      	beq.n	8006fac <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0204 	mvn.w	r2, #4
 8006f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	e009      	b.n	8006fa6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d026      	beq.n	8007004 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d021      	beq.n	8007004 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0208 	mvn.w	r2, #8
 8006fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
 8006fe8:	e009      	b.n	8006ffe <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b00      	cmp	r3, #0
 800700c:	d026      	beq.n	800705c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	2b00      	cmp	r3, #0
 8007016:	d021      	beq.n	800705c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0210 	mvn.w	r2, #16
 8007020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2208      	movs	r2, #8
 8007026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	e009      	b.n	8007056 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00e      	beq.n	8007084 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0201 	mvn.w	r2, #1
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d104      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00e      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80070aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00e      	beq.n	80070de <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d009      	beq.n	80070de <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00e      	beq.n	8007106 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00e      	beq.n	800712e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f06f 0220 	mvn.w	r2, #32
 8007122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00e      	beq.n	8007156 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800714a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00e      	beq.n	800717e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00e      	beq.n	80071a6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00e      	beq.n	80071ce <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80071c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e066      	b.n	80072c4 <HAL_TIM_OC_ConfigChannel+0xec>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b14      	cmp	r3, #20
 8007202:	d857      	bhi.n	80072b4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007204:	a201      	add	r2, pc, #4	@ (adr r2, 800720c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007261 	.word	0x08007261
 8007210:	080072b5 	.word	0x080072b5
 8007214:	080072b5 	.word	0x080072b5
 8007218:	080072b5 	.word	0x080072b5
 800721c:	0800726f 	.word	0x0800726f
 8007220:	080072b5 	.word	0x080072b5
 8007224:	080072b5 	.word	0x080072b5
 8007228:	080072b5 	.word	0x080072b5
 800722c:	0800727d 	.word	0x0800727d
 8007230:	080072b5 	.word	0x080072b5
 8007234:	080072b5 	.word	0x080072b5
 8007238:	080072b5 	.word	0x080072b5
 800723c:	0800728b 	.word	0x0800728b
 8007240:	080072b5 	.word	0x080072b5
 8007244:	080072b5 	.word	0x080072b5
 8007248:	080072b5 	.word	0x080072b5
 800724c:	08007299 	.word	0x08007299
 8007250:	080072b5 	.word	0x080072b5
 8007254:	080072b5 	.word	0x080072b5
 8007258:	080072b5 	.word	0x080072b5
 800725c:	080072a7 	.word	0x080072a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fcc8 	bl	8007bfc <TIM_OC1_SetConfig>
      break;
 800726c:	e025      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fd5b 	bl	8007d30 <TIM_OC2_SetConfig>
      break;
 800727a:	e01e      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fde8 	bl	8007e58 <TIM_OC3_SetConfig>
      break;
 8007288:	e017      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fe73 	bl	8007f7c <TIM_OC4_SetConfig>
      break;
 8007296:	e010      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 ff00 	bl	80080a4 <TIM_OC5_SetConfig>
      break;
 80072a4:	e009      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 ff63 	bl	8008178 <TIM_OC6_SetConfig>
      break;
 80072b2:	e002      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
      break;
 80072b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e0ff      	b.n	80074ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b14      	cmp	r3, #20
 80072f6:	f200 80f0 	bhi.w	80074da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007355 	.word	0x08007355
 8007304:	080074db 	.word	0x080074db
 8007308:	080074db 	.word	0x080074db
 800730c:	080074db 	.word	0x080074db
 8007310:	08007395 	.word	0x08007395
 8007314:	080074db 	.word	0x080074db
 8007318:	080074db 	.word	0x080074db
 800731c:	080074db 	.word	0x080074db
 8007320:	080073d7 	.word	0x080073d7
 8007324:	080074db 	.word	0x080074db
 8007328:	080074db 	.word	0x080074db
 800732c:	080074db 	.word	0x080074db
 8007330:	08007417 	.word	0x08007417
 8007334:	080074db 	.word	0x080074db
 8007338:	080074db 	.word	0x080074db
 800733c:	080074db 	.word	0x080074db
 8007340:	08007459 	.word	0x08007459
 8007344:	080074db 	.word	0x080074db
 8007348:	080074db 	.word	0x080074db
 800734c:	080074db 	.word	0x080074db
 8007350:	08007499 	.word	0x08007499
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fc4e 	bl	8007bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0208 	orr.w	r2, r2, #8
 800736e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0204 	bic.w	r2, r2, #4
 800737e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6999      	ldr	r1, [r3, #24]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	619a      	str	r2, [r3, #24]
      break;
 8007392:	e0a5      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fcc8 	bl	8007d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6999      	ldr	r1, [r3, #24]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	021a      	lsls	r2, r3, #8
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	619a      	str	r2, [r3, #24]
      break;
 80073d4:	e084      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fd3b 	bl	8007e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f042 0208 	orr.w	r2, r2, #8
 80073f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69da      	ldr	r2, [r3, #28]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0204 	bic.w	r2, r2, #4
 8007400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69d9      	ldr	r1, [r3, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	61da      	str	r2, [r3, #28]
      break;
 8007414:	e064      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fdad 	bl	8007f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69d9      	ldr	r1, [r3, #28]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	021a      	lsls	r2, r3, #8
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	61da      	str	r2, [r3, #28]
      break;
 8007456:	e043      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fe20 	bl	80080a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0208 	orr.w	r2, r2, #8
 8007472:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0204 	bic.w	r2, r2, #4
 8007482:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	691a      	ldr	r2, [r3, #16]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007496:	e023      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fe6a 	bl	8008178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	021a      	lsls	r2, r3, #8
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80074d8:	e002      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
      break;
 80074de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop

080074f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIM_ConfigClockSource+0x1c>
 800750c:	2302      	movs	r3, #2
 800750e:	e0f6      	b.n	80076fe <HAL_TIM_ConfigClockSource+0x20a>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800752e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800753a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a6f      	ldr	r2, [pc, #444]	@ (8007708 <HAL_TIM_ConfigClockSource+0x214>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f000 80c1 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 8007550:	4a6d      	ldr	r2, [pc, #436]	@ (8007708 <HAL_TIM_ConfigClockSource+0x214>)
 8007552:	4293      	cmp	r3, r2
 8007554:	f200 80c6 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007558:	4a6c      	ldr	r2, [pc, #432]	@ (800770c <HAL_TIM_ConfigClockSource+0x218>)
 800755a:	4293      	cmp	r3, r2
 800755c:	f000 80b9 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 8007560:	4a6a      	ldr	r2, [pc, #424]	@ (800770c <HAL_TIM_ConfigClockSource+0x218>)
 8007562:	4293      	cmp	r3, r2
 8007564:	f200 80be 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007568:	4a69      	ldr	r2, [pc, #420]	@ (8007710 <HAL_TIM_ConfigClockSource+0x21c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	f000 80b1 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 8007570:	4a67      	ldr	r2, [pc, #412]	@ (8007710 <HAL_TIM_ConfigClockSource+0x21c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	f200 80b6 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007578:	4a66      	ldr	r2, [pc, #408]	@ (8007714 <HAL_TIM_ConfigClockSource+0x220>)
 800757a:	4293      	cmp	r3, r2
 800757c:	f000 80a9 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 8007580:	4a64      	ldr	r2, [pc, #400]	@ (8007714 <HAL_TIM_ConfigClockSource+0x220>)
 8007582:	4293      	cmp	r3, r2
 8007584:	f200 80ae 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007588:	4a63      	ldr	r2, [pc, #396]	@ (8007718 <HAL_TIM_ConfigClockSource+0x224>)
 800758a:	4293      	cmp	r3, r2
 800758c:	f000 80a1 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 8007590:	4a61      	ldr	r2, [pc, #388]	@ (8007718 <HAL_TIM_ConfigClockSource+0x224>)
 8007592:	4293      	cmp	r3, r2
 8007594:	f200 80a6 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007598:	4a60      	ldr	r2, [pc, #384]	@ (800771c <HAL_TIM_ConfigClockSource+0x228>)
 800759a:	4293      	cmp	r3, r2
 800759c:	f000 8099 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 80075a0:	4a5e      	ldr	r2, [pc, #376]	@ (800771c <HAL_TIM_ConfigClockSource+0x228>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	f200 809e 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80075a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80075ac:	f000 8091 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 80075b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80075b4:	f200 8096 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80075b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075bc:	f000 8089 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 80075c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075c4:	f200 808e 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80075c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075cc:	d03e      	beq.n	800764c <HAL_TIM_ConfigClockSource+0x158>
 80075ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075d2:	f200 8087 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80075d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075da:	f000 8086 	beq.w	80076ea <HAL_TIM_ConfigClockSource+0x1f6>
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e2:	d87f      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80075e4:	2b70      	cmp	r3, #112	@ 0x70
 80075e6:	d01a      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x12a>
 80075e8:	2b70      	cmp	r3, #112	@ 0x70
 80075ea:	d87b      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80075ec:	2b60      	cmp	r3, #96	@ 0x60
 80075ee:	d050      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0x19e>
 80075f0:	2b60      	cmp	r3, #96	@ 0x60
 80075f2:	d877      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80075f4:	2b50      	cmp	r3, #80	@ 0x50
 80075f6:	d03c      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x17e>
 80075f8:	2b50      	cmp	r3, #80	@ 0x50
 80075fa:	d873      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80075fc:	2b40      	cmp	r3, #64	@ 0x40
 80075fe:	d058      	beq.n	80076b2 <HAL_TIM_ConfigClockSource+0x1be>
 8007600:	2b40      	cmp	r3, #64	@ 0x40
 8007602:	d86f      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007604:	2b30      	cmp	r3, #48	@ 0x30
 8007606:	d064      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 8007608:	2b30      	cmp	r3, #48	@ 0x30
 800760a:	d86b      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800760c:	2b20      	cmp	r3, #32
 800760e:	d060      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 8007610:	2b20      	cmp	r3, #32
 8007612:	d867      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d05c      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 8007618:	2b10      	cmp	r3, #16
 800761a:	d05a      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x1de>
 800761c:	e062      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800762e:	f000 fe8b 	bl	8008348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	609a      	str	r2, [r3, #8]
      break;
 800764a:	e04f      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800765c:	f000 fe74 	bl	8008348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800766e:	609a      	str	r2, [r3, #8]
      break;
 8007670:	e03c      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800767e:	461a      	mov	r2, r3
 8007680:	f000 fde6 	bl	8008250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2150      	movs	r1, #80	@ 0x50
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fe3f 	bl	800830e <TIM_ITRx_SetConfig>
      break;
 8007690:	e02c      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800769e:	461a      	mov	r2, r3
 80076a0:	f000 fe05 	bl	80082ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2160      	movs	r1, #96	@ 0x60
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fe2f 	bl	800830e <TIM_ITRx_SetConfig>
      break;
 80076b0:	e01c      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076be:	461a      	mov	r2, r3
 80076c0:	f000 fdc6 	bl	8008250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2140      	movs	r1, #64	@ 0x40
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fe1f 	bl	800830e <TIM_ITRx_SetConfig>
      break;
 80076d0:	e00c      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f000 fe16 	bl	800830e <TIM_ITRx_SetConfig>
      break;
 80076e2:	e003      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
      break;
 80076e8:	e000      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80076ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	00100070 	.word	0x00100070
 800770c:	00100060 	.word	0x00100060
 8007710:	00100050 	.word	0x00100050
 8007714:	00100040 	.word	0x00100040
 8007718:	00100030 	.word	0x00100030
 800771c:	00100020 	.word	0x00100020

08007720 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	460b      	mov	r3, r1
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e14a      	b.n	8007a86 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	f040 80dd 	bne.w	80079b8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	2b1f      	cmp	r3, #31
 8007802:	f200 80d6 	bhi.w	80079b2 <HAL_TIM_RegisterCallback+0x1de>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <HAL_TIM_RegisterCallback+0x38>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	0800788d 	.word	0x0800788d
 8007810:	08007895 	.word	0x08007895
 8007814:	0800789d 	.word	0x0800789d
 8007818:	080078a5 	.word	0x080078a5
 800781c:	080078ad 	.word	0x080078ad
 8007820:	080078b5 	.word	0x080078b5
 8007824:	080078bd 	.word	0x080078bd
 8007828:	080078c5 	.word	0x080078c5
 800782c:	080078cd 	.word	0x080078cd
 8007830:	080078d5 	.word	0x080078d5
 8007834:	080078dd 	.word	0x080078dd
 8007838:	080078e5 	.word	0x080078e5
 800783c:	080078ed 	.word	0x080078ed
 8007840:	080078f5 	.word	0x080078f5
 8007844:	080078ff 	.word	0x080078ff
 8007848:	08007909 	.word	0x08007909
 800784c:	08007913 	.word	0x08007913
 8007850:	0800791d 	.word	0x0800791d
 8007854:	08007927 	.word	0x08007927
 8007858:	08007931 	.word	0x08007931
 800785c:	0800793b 	.word	0x0800793b
 8007860:	08007945 	.word	0x08007945
 8007864:	0800794f 	.word	0x0800794f
 8007868:	08007959 	.word	0x08007959
 800786c:	08007963 	.word	0x08007963
 8007870:	0800796d 	.word	0x0800796d
 8007874:	08007977 	.word	0x08007977
 8007878:	08007981 	.word	0x08007981
 800787c:	0800798b 	.word	0x0800798b
 8007880:	08007995 	.word	0x08007995
 8007884:	0800799f 	.word	0x0800799f
 8007888:	080079a9 	.word	0x080079a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007892:	e0f7      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800789a:	e0f3      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80078a2:	e0ef      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80078aa:	e0eb      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80078b2:	e0e7      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80078ba:	e0e3      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80078c2:	e0df      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80078ca:	e0db      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80078d2:	e0d7      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80078da:	e0d3      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80078e2:	e0cf      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80078ea:	e0cb      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80078f2:	e0c7      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80078fc:	e0c2      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007906:	e0bd      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007910:	e0b8      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800791a:	e0b3      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007924:	e0ae      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800792e:	e0a9      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007938:	e0a4      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007942:	e09f      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800794c:	e09a      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007956:	e095      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007960:	e090      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800796a:	e08b      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007974:	e086      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800797e:	e081      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007988:	e07c      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007992:	e077      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800799c:	e072      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80079a6:	e06d      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80079b0:	e068      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
        break;
 80079b6:	e065      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d15d      	bne.n	8007a80 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	2b0d      	cmp	r3, #13
 80079c8:	d857      	bhi.n	8007a7a <HAL_TIM_RegisterCallback+0x2a6>
 80079ca:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <HAL_TIM_RegisterCallback+0x1fc>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a09 	.word	0x08007a09
 80079d4:	08007a11 	.word	0x08007a11
 80079d8:	08007a19 	.word	0x08007a19
 80079dc:	08007a21 	.word	0x08007a21
 80079e0:	08007a29 	.word	0x08007a29
 80079e4:	08007a31 	.word	0x08007a31
 80079e8:	08007a39 	.word	0x08007a39
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	08007a49 	.word	0x08007a49
 80079f4:	08007a51 	.word	0x08007a51
 80079f8:	08007a59 	.word	0x08007a59
 80079fc:	08007a61 	.word	0x08007a61
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	08007a71 	.word	0x08007a71
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007a0e:	e039      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007a16:	e035      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007a1e:	e031      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007a26:	e02d      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007a2e:	e029      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007a36:	e025      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007a3e:	e021      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007a46:	e01d      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007a4e:	e019      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007a56:	e015      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007a5e:	e011      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007a66:	e00d      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007a6e:	e009      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007a78:	e004      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]
        break;
 8007a7e:	e001      	b.n	8007a84 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8007bd8 <TIM_Base_SetConfig+0x144>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d017      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab2:	d013      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a49      	ldr	r2, [pc, #292]	@ (8007bdc <TIM_Base_SetConfig+0x148>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00f      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a48      	ldr	r2, [pc, #288]	@ (8007be0 <TIM_Base_SetConfig+0x14c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00b      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a47      	ldr	r2, [pc, #284]	@ (8007be4 <TIM_Base_SetConfig+0x150>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d007      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a46      	ldr	r2, [pc, #280]	@ (8007be8 <TIM_Base_SetConfig+0x154>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d003      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a45      	ldr	r2, [pc, #276]	@ (8007bec <TIM_Base_SetConfig+0x158>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d108      	bne.n	8007aee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a39      	ldr	r2, [pc, #228]	@ (8007bd8 <TIM_Base_SetConfig+0x144>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d023      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afc:	d01f      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a36      	ldr	r2, [pc, #216]	@ (8007bdc <TIM_Base_SetConfig+0x148>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d01b      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a35      	ldr	r2, [pc, #212]	@ (8007be0 <TIM_Base_SetConfig+0x14c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d017      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a34      	ldr	r2, [pc, #208]	@ (8007be4 <TIM_Base_SetConfig+0x150>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d013      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a33      	ldr	r2, [pc, #204]	@ (8007be8 <TIM_Base_SetConfig+0x154>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00f      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a33      	ldr	r2, [pc, #204]	@ (8007bf0 <TIM_Base_SetConfig+0x15c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00b      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a32      	ldr	r2, [pc, #200]	@ (8007bf4 <TIM_Base_SetConfig+0x160>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a31      	ldr	r2, [pc, #196]	@ (8007bf8 <TIM_Base_SetConfig+0x164>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d003      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	@ (8007bec <TIM_Base_SetConfig+0x158>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d108      	bne.n	8007b50 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a18      	ldr	r2, [pc, #96]	@ (8007bd8 <TIM_Base_SetConfig+0x144>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007be8 <TIM_Base_SetConfig+0x154>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf0 <TIM_Base_SetConfig+0x15c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a19      	ldr	r2, [pc, #100]	@ (8007bf4 <TIM_Base_SetConfig+0x160>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a18      	ldr	r2, [pc, #96]	@ (8007bf8 <TIM_Base_SetConfig+0x164>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a13      	ldr	r2, [pc, #76]	@ (8007bec <TIM_Base_SetConfig+0x158>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d103      	bne.n	8007bac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d105      	bne.n	8007bca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	611a      	str	r2, [r3, #16]
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40013400 	.word	0x40013400
 8007bec:	40015000 	.word	0x40015000
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800

08007bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	f023 0201 	bic.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f023 0302 	bic.w	r3, r3, #2
 8007c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a30      	ldr	r2, [pc, #192]	@ (8007d18 <TIM_OC1_SetConfig+0x11c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d013      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d1c <TIM_OC1_SetConfig+0x120>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00f      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a2e      	ldr	r2, [pc, #184]	@ (8007d20 <TIM_OC1_SetConfig+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8007d24 <TIM_OC1_SetConfig+0x128>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d007      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a2c      	ldr	r2, [pc, #176]	@ (8007d28 <TIM_OC1_SetConfig+0x12c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8007d2c <TIM_OC1_SetConfig+0x130>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d10c      	bne.n	8007c9e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f023 0308 	bic.w	r3, r3, #8
 8007c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f023 0304 	bic.w	r3, r3, #4
 8007c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d18 <TIM_OC1_SetConfig+0x11c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d013      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d1c <TIM_OC1_SetConfig+0x120>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00f      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007d20 <TIM_OC1_SetConfig+0x124>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00b      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d24 <TIM_OC1_SetConfig+0x128>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d007      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a19      	ldr	r2, [pc, #100]	@ (8007d28 <TIM_OC1_SetConfig+0x12c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a18      	ldr	r2, [pc, #96]	@ (8007d2c <TIM_OC1_SetConfig+0x130>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d111      	bne.n	8007cf2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	621a      	str	r2, [r3, #32]
}
 8007d0c:	bf00      	nop
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	40012c00 	.word	0x40012c00
 8007d1c:	40013400 	.word	0x40013400
 8007d20:	40014000 	.word	0x40014000
 8007d24:	40014400 	.word	0x40014400
 8007d28:	40014800 	.word	0x40014800
 8007d2c:	40015000 	.word	0x40015000

08007d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f023 0210 	bic.w	r2, r3, #16
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0320 	bic.w	r3, r3, #32
 8007d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e40 <TIM_OC2_SetConfig+0x110>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d007      	beq.n	8007da4 <TIM_OC2_SetConfig+0x74>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a2b      	ldr	r2, [pc, #172]	@ (8007e44 <TIM_OC2_SetConfig+0x114>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_OC2_SetConfig+0x74>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e48 <TIM_OC2_SetConfig+0x118>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d10d      	bne.n	8007dc0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e40 <TIM_OC2_SetConfig+0x110>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d013      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	@ (8007e44 <TIM_OC2_SetConfig+0x114>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00f      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8007e4c <TIM_OC2_SetConfig+0x11c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a1d      	ldr	r2, [pc, #116]	@ (8007e50 <TIM_OC2_SetConfig+0x120>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d007      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e54 <TIM_OC2_SetConfig+0x124>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a17      	ldr	r2, [pc, #92]	@ (8007e48 <TIM_OC2_SetConfig+0x118>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d113      	bne.n	8007e18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	621a      	str	r2, [r3, #32]
}
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	40013400 	.word	0x40013400
 8007e48:	40015000 	.word	0x40015000
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	40014800 	.word	0x40014800

08007e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8007f64 <TIM_OC3_SetConfig+0x10c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d007      	beq.n	8007eca <TIM_OC3_SetConfig+0x72>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8007f68 <TIM_OC3_SetConfig+0x110>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d003      	beq.n	8007eca <TIM_OC3_SetConfig+0x72>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a29      	ldr	r2, [pc, #164]	@ (8007f6c <TIM_OC3_SetConfig+0x114>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d10d      	bne.n	8007ee6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8007f64 <TIM_OC3_SetConfig+0x10c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f68 <TIM_OC3_SetConfig+0x110>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f70 <TIM_OC3_SetConfig+0x118>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1c      	ldr	r2, [pc, #112]	@ (8007f74 <TIM_OC3_SetConfig+0x11c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d007      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	@ (8007f78 <TIM_OC3_SetConfig+0x120>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a16      	ldr	r2, [pc, #88]	@ (8007f6c <TIM_OC3_SetConfig+0x114>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d113      	bne.n	8007f3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	621a      	str	r2, [r3, #32]
}
 8007f58:	bf00      	nop
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	40013400 	.word	0x40013400
 8007f6c:	40015000 	.word	0x40015000
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a2c      	ldr	r2, [pc, #176]	@ (800808c <TIM_OC4_SetConfig+0x110>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d007      	beq.n	8007ff0 <TIM_OC4_SetConfig+0x74>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8008090 <TIM_OC4_SetConfig+0x114>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_OC4_SetConfig+0x74>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a2a      	ldr	r2, [pc, #168]	@ (8008094 <TIM_OC4_SetConfig+0x118>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10d      	bne.n	800800c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800800a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1f      	ldr	r2, [pc, #124]	@ (800808c <TIM_OC4_SetConfig+0x110>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d013      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a1e      	ldr	r2, [pc, #120]	@ (8008090 <TIM_OC4_SetConfig+0x114>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00f      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a1e      	ldr	r2, [pc, #120]	@ (8008098 <TIM_OC4_SetConfig+0x11c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00b      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a1d      	ldr	r2, [pc, #116]	@ (800809c <TIM_OC4_SetConfig+0x120>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d007      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a1c      	ldr	r2, [pc, #112]	@ (80080a0 <TIM_OC4_SetConfig+0x124>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a17      	ldr	r2, [pc, #92]	@ (8008094 <TIM_OC4_SetConfig+0x118>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d113      	bne.n	8008064 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008042:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800804a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	019b      	lsls	r3, r3, #6
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	019b      	lsls	r3, r3, #6
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	621a      	str	r2, [r3, #32]
}
 800807e:	bf00      	nop
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	40012c00 	.word	0x40012c00
 8008090:	40013400 	.word	0x40013400
 8008094:	40015000 	.word	0x40015000
 8008098:	40014000 	.word	0x40014000
 800809c:	40014400 	.word	0x40014400
 80080a0:	40014800 	.word	0x40014800

080080a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80080e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	041b      	lsls	r3, r3, #16
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a19      	ldr	r2, [pc, #100]	@ (8008160 <TIM_OC5_SetConfig+0xbc>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a18      	ldr	r2, [pc, #96]	@ (8008164 <TIM_OC5_SetConfig+0xc0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00f      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a17      	ldr	r2, [pc, #92]	@ (8008168 <TIM_OC5_SetConfig+0xc4>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00b      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a16      	ldr	r2, [pc, #88]	@ (800816c <TIM_OC5_SetConfig+0xc8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d007      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a15      	ldr	r2, [pc, #84]	@ (8008170 <TIM_OC5_SetConfig+0xcc>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a14      	ldr	r2, [pc, #80]	@ (8008174 <TIM_OC5_SetConfig+0xd0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d109      	bne.n	800813a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800812c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	621a      	str	r2, [r3, #32]
}
 8008154:	bf00      	nop
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	40012c00 	.word	0x40012c00
 8008164:	40013400 	.word	0x40013400
 8008168:	40014000 	.word	0x40014000
 800816c:	40014400 	.word	0x40014400
 8008170:	40014800 	.word	0x40014800
 8008174:	40015000 	.word	0x40015000

08008178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	051b      	lsls	r3, r3, #20
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008238 <TIM_OC6_SetConfig+0xc0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d013      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a19      	ldr	r2, [pc, #100]	@ (800823c <TIM_OC6_SetConfig+0xc4>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00f      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a18      	ldr	r2, [pc, #96]	@ (8008240 <TIM_OC6_SetConfig+0xc8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00b      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a17      	ldr	r2, [pc, #92]	@ (8008244 <TIM_OC6_SetConfig+0xcc>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d007      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a16      	ldr	r2, [pc, #88]	@ (8008248 <TIM_OC6_SetConfig+0xd0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a15      	ldr	r2, [pc, #84]	@ (800824c <TIM_OC6_SetConfig+0xd4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d109      	bne.n	8008210 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	029b      	lsls	r3, r3, #10
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40013400 	.word	0x40013400
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800
 800824c:	40015000 	.word	0x40015000

08008250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f023 0201 	bic.w	r2, r3, #1
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800827a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f023 030a 	bic.w	r3, r3, #10
 800828c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	621a      	str	r2, [r3, #32]
}
 80082a2:	bf00      	nop
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b087      	sub	sp, #28
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	f023 0210 	bic.w	r2, r3, #16
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	031b      	lsls	r3, r3, #12
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4313      	orrs	r3, r2
 8008330:	f043 0307 	orr.w	r3, r3, #7
 8008334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	609a      	str	r2, [r3, #8]
}
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	021a      	lsls	r2, r3, #8
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	431a      	orrs	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4313      	orrs	r3, r2
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	609a      	str	r2, [r3, #8]
}
 800837c:	bf00      	nop
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f003 031f 	and.w	r3, r3, #31
 800839a:	2201      	movs	r2, #1
 800839c:	fa02 f303 	lsl.w	r3, r2, r3
 80083a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a1a      	ldr	r2, [r3, #32]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	43db      	mvns	r3, r3
 80083aa:	401a      	ands	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a1a      	ldr	r2, [r3, #32]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	fa01 f303 	lsl.w	r3, r1, r3
 80083c0:	431a      	orrs	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a26      	ldr	r2, [pc, #152]	@ (8008478 <TIM_ResetCallback+0xa4>)
 80083e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a25      	ldr	r2, [pc, #148]	@ (800847c <TIM_ResetCallback+0xa8>)
 80083e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a24      	ldr	r2, [pc, #144]	@ (8008480 <TIM_ResetCallback+0xac>)
 80083f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a23      	ldr	r2, [pc, #140]	@ (8008484 <TIM_ResetCallback+0xb0>)
 80083f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a22      	ldr	r2, [pc, #136]	@ (8008488 <TIM_ResetCallback+0xb4>)
 8008400:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a21      	ldr	r2, [pc, #132]	@ (800848c <TIM_ResetCallback+0xb8>)
 8008408:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a20      	ldr	r2, [pc, #128]	@ (8008490 <TIM_ResetCallback+0xbc>)
 8008410:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a1f      	ldr	r2, [pc, #124]	@ (8008494 <TIM_ResetCallback+0xc0>)
 8008418:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a1e      	ldr	r2, [pc, #120]	@ (8008498 <TIM_ResetCallback+0xc4>)
 8008420:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a1d      	ldr	r2, [pc, #116]	@ (800849c <TIM_ResetCallback+0xc8>)
 8008428:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a1c      	ldr	r2, [pc, #112]	@ (80084a0 <TIM_ResetCallback+0xcc>)
 8008430:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a1b      	ldr	r2, [pc, #108]	@ (80084a4 <TIM_ResetCallback+0xd0>)
 8008438:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a1a      	ldr	r2, [pc, #104]	@ (80084a8 <TIM_ResetCallback+0xd4>)
 8008440:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a19      	ldr	r2, [pc, #100]	@ (80084ac <TIM_ResetCallback+0xd8>)
 8008448:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a18      	ldr	r2, [pc, #96]	@ (80084b0 <TIM_ResetCallback+0xdc>)
 8008450:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a17      	ldr	r2, [pc, #92]	@ (80084b4 <TIM_ResetCallback+0xe0>)
 8008458:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a16      	ldr	r2, [pc, #88]	@ (80084b8 <TIM_ResetCallback+0xe4>)
 8008460:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a15      	ldr	r2, [pc, #84]	@ (80084bc <TIM_ResetCallback+0xe8>)
 8008468:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	08002685 	.word	0x08002685
 800847c:	08007721 	.word	0x08007721
 8008480:	08007799 	.word	0x08007799
 8008484:	080077ad 	.word	0x080077ad
 8008488:	08007749 	.word	0x08007749
 800848c:	0800775d 	.word	0x0800775d
 8008490:	08007735 	.word	0x08007735
 8008494:	08007771 	.word	0x08007771
 8008498:	08007785 	.word	0x08007785
 800849c:	080077c1 	.word	0x080077c1
 80084a0:	08008715 	.word	0x08008715
 80084a4:	08008729 	.word	0x08008729
 80084a8:	0800873d 	.word	0x0800873d
 80084ac:	08008751 	.word	0x08008751
 80084b0:	08008765 	.word	0x08008765
 80084b4:	08008779 	.word	0x08008779
 80084b8:	0800878d 	.word	0x0800878d
 80084bc:	080087a1 	.word	0x080087a1

080084c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e074      	b.n	80085c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a34      	ldr	r2, [pc, #208]	@ (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d009      	beq.n	8008516 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a33      	ldr	r2, [pc, #204]	@ (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d004      	beq.n	8008516 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a31      	ldr	r2, [pc, #196]	@ (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d108      	bne.n	8008528 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800851c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800852e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a21      	ldr	r2, [pc, #132]	@ (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d022      	beq.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008558:	d01d      	beq.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a1f      	ldr	r2, [pc, #124]	@ (80085dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d018      	beq.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a1d      	ldr	r2, [pc, #116]	@ (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a1c      	ldr	r2, [pc, #112]	@ (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00e      	beq.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a15      	ldr	r2, [pc, #84]	@ (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d009      	beq.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a18      	ldr	r2, [pc, #96]	@ (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d004      	beq.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a11      	ldr	r2, [pc, #68]	@ (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d10c      	bne.n	80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800859c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	40012c00 	.word	0x40012c00
 80085d4:	40013400 	.word	0x40013400
 80085d8:	40015000 	.word	0x40015000
 80085dc:	40000400 	.word	0x40000400
 80085e0:	40000800 	.word	0x40000800
 80085e4:	40000c00 	.word	0x40000c00
 80085e8:	40014000 	.word	0x40014000

080085ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008604:	2302      	movs	r3, #2
 8008606:	e078      	b.n	80086fa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	4313      	orrs	r3, r2
 8008654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	041b      	lsls	r3, r3, #16
 800867e:	4313      	orrs	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1c      	ldr	r2, [pc, #112]	@ (8008708 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d009      	beq.n	80086ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a1b      	ldr	r2, [pc, #108]	@ (800870c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d004      	beq.n	80086ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a19      	ldr	r2, [pc, #100]	@ (8008710 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d11c      	bne.n	80086e8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b8:	051b      	lsls	r3, r3, #20
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	4313      	orrs	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	40012c00 	.word	0x40012c00
 800870c:	40013400 	.word	0x40013400
 8008710:	40015000 	.word	0x40015000

08008714 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e050      	b.n	8008868 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d114      	bne.n	80087fa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fe37 	bl	800944c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d103      	bne.n	80087f0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a21      	ldr	r2, [pc, #132]	@ (8008870 <HAL_UART_Init+0xbc>)
 80087ec:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2224      	movs	r2, #36	@ 0x24
 80087fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 f964 	bl	8009ae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fe65 	bl	80094f0 <UART_SetConfig>
 8008826:	4603      	mov	r3, r0
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e01b      	b.n	8008868 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800883e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800884e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0201 	orr.w	r2, r2, #1
 800885e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 f9e3 	bl	8009c2c <UART_CheckIdleState>
 8008866:	4603      	mov	r3, r0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	08002ea1 	.word	0x08002ea1

08008874 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	460b      	mov	r3, r1
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d109      	bne.n	80088a0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008892:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e09c      	b.n	80089da <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d16c      	bne.n	8008984 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80088aa:	7afb      	ldrb	r3, [r7, #11]
 80088ac:	2b0c      	cmp	r3, #12
 80088ae:	d85e      	bhi.n	800896e <HAL_UART_RegisterCallback+0xfa>
 80088b0:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <HAL_UART_RegisterCallback+0x44>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088ed 	.word	0x080088ed
 80088bc:	080088f7 	.word	0x080088f7
 80088c0:	08008901 	.word	0x08008901
 80088c4:	0800890b 	.word	0x0800890b
 80088c8:	08008915 	.word	0x08008915
 80088cc:	0800891f 	.word	0x0800891f
 80088d0:	08008929 	.word	0x08008929
 80088d4:	08008933 	.word	0x08008933
 80088d8:	0800893d 	.word	0x0800893d
 80088dc:	08008947 	.word	0x08008947
 80088e0:	08008951 	.word	0x08008951
 80088e4:	0800895b 	.word	0x0800895b
 80088e8:	08008965 	.word	0x08008965
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80088f4:	e070      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80088fe:	e06b      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008908:	e066      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008912:	e061      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800891c:	e05c      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008926:	e057      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008930:	e052      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800893a:	e04d      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008944:	e048      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800894e:	e043      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008958:	e03e      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008962:	e039      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800896c:	e034      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008974:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	75fb      	strb	r3, [r7, #23]
        break;
 8008982:	e029      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800898a:	2b00      	cmp	r3, #0
 800898c:	d11a      	bne.n	80089c4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800898e:	7afb      	ldrb	r3, [r7, #11]
 8008990:	2b0b      	cmp	r3, #11
 8008992:	d002      	beq.n	800899a <HAL_UART_RegisterCallback+0x126>
 8008994:	2b0c      	cmp	r3, #12
 8008996:	d005      	beq.n	80089a4 <HAL_UART_RegisterCallback+0x130>
 8008998:	e009      	b.n	80089ae <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80089a2:	e019      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80089ac:	e014      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
        break;
 80089c2:	e009      	b.n	80089d8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop

080089e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	@ 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d137      	bne.n	8008a70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <HAL_UART_Receive_IT+0x24>
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e030      	b.n	8008a72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a18      	ldr	r2, [pc, #96]	@ (8008a7c <HAL_UART_Receive_IT+0x94>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d01f      	beq.n	8008a60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d018      	beq.n	8008a60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	623b      	str	r3, [r7, #32]
 8008a4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	69f9      	ldr	r1, [r7, #28]
 8008a52:	6a3a      	ldr	r2, [r7, #32]
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e6      	bne.n	8008a2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a60:	88fb      	ldrh	r3, [r7, #6]
 8008a62:	461a      	mov	r2, r3
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f001 f9f8 	bl	8009e5c <UART_Start_Receive_IT>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	e000      	b.n	8008a72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a70:	2302      	movs	r3, #2
  }
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3728      	adds	r7, #40	@ 0x28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	40008000 	.word	0x40008000

08008a80 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08a      	sub	sp, #40	@ 0x28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	d167      	bne.n	8008b68 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <HAL_UART_Transmit_DMA+0x24>
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e060      	b.n	8008b6a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	88fa      	ldrh	r2, [r7, #6]
 8008ab2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	88fa      	ldrh	r2, [r7, #6]
 8008aba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2221      	movs	r2, #33	@ 0x21
 8008aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d028      	beq.n	8008b28 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ada:	4a26      	ldr	r2, [pc, #152]	@ (8008b74 <HAL_UART_Transmit_DMA+0xf4>)
 8008adc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ae2:	4a25      	ldr	r2, [pc, #148]	@ (8008b78 <HAL_UART_Transmit_DMA+0xf8>)
 8008ae4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aea:	4a24      	ldr	r2, [pc, #144]	@ (8008b7c <HAL_UART_Transmit_DMA+0xfc>)
 8008aec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008af2:	2200      	movs	r2, #0
 8008af4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008afe:	4619      	mov	r1, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3328      	adds	r3, #40	@ 0x28
 8008b06:	461a      	mov	r2, r3
 8008b08:	88fb      	ldrh	r3, [r7, #6]
 8008b0a:	f7fc f801 	bl	8004b10 <HAL_DMA_Start_IT>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d009      	beq.n	8008b28 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2210      	movs	r2, #16
 8008b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e020      	b.n	8008b6a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2240      	movs	r2, #64	@ 0x40
 8008b2e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3308      	adds	r3, #8
 8008b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b50:	623a      	str	r2, [r7, #32]
 8008b52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	69f9      	ldr	r1, [r7, #28]
 8008b56:	6a3a      	ldr	r2, [r7, #32]
 8008b58:	e841 2300 	strex	r3, r2, [r1]
 8008b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e5      	bne.n	8008b30 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	e000      	b.n	8008b6a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008b68:	2302      	movs	r3, #2
  }
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3728      	adds	r7, #40	@ 0x28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	0800a1ef 	.word	0x0800a1ef
 8008b78:	0800a28d 	.word	0x0800a28d
 8008b7c:	0800a2ad 	.word	0x0800a2ad

08008b80 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b09a      	sub	sp, #104	@ 0x68
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b90:	e853 3f00 	ldrex	r3, [r3]
 8008b94:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ba6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ba8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008bac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e6      	bne.n	8008b88 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bd0:	f023 0301 	bic.w	r3, r3, #1
 8008bd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008bde:	643a      	str	r2, [r7, #64]	@ 0x40
 8008be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e3      	bne.n	8008bba <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d118      	bne.n	8008c2c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	e853 3f00 	ldrex	r3, [r3]
 8008c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f023 0310 	bic.w	r3, r3, #16
 8008c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c1a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e6      	bne.n	8008bfa <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c36:	2b40      	cmp	r3, #64	@ 0x40
 8008c38:	d13b      	bne.n	8008cb2 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c5a:	61ba      	str	r2, [r7, #24]
 8008c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6979      	ldr	r1, [r7, #20]
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	613b      	str	r3, [r7, #16]
   return(result);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e5      	bne.n	8008c3a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01c      	beq.n	8008cb2 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c7e:	2200      	movs	r2, #0
 8008c80:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fb ffbc 	bl	8004c06 <HAL_DMA_Abort>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00e      	beq.n	8008cb2 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fc f922 	bl	8004ee4 <HAL_DMA_GetError>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	d105      	bne.n	8008cb2 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2210      	movs	r2, #16
 8008caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e017      	b.n	8008ce2 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	220f      	movs	r2, #15
 8008cc0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f042 0208 	orr.w	r2, r2, #8
 8008cd0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3768      	adds	r7, #104	@ 0x68
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b0ba      	sub	sp, #232	@ 0xe8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008d16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d11b      	bne.n	8008d60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d015      	beq.n	8008d60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8312 	beq.w	800937a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	4798      	blx	r3
      }
      return;
 8008d5e:	e30c      	b.n	800937a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8129 	beq.w	8008fbc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d6e:	4b90      	ldr	r3, [pc, #576]	@ (8008fb0 <HAL_UART_IRQHandler+0x2c4>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d7a:	4b8e      	ldr	r3, [pc, #568]	@ (8008fb4 <HAL_UART_IRQHandler+0x2c8>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 811c 	beq.w	8008fbc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d011      	beq.n	8008db4 <HAL_UART_IRQHandler+0xc8>
 8008d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2201      	movs	r2, #1
 8008da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008daa:	f043 0201 	orr.w	r2, r3, #1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d011      	beq.n	8008de4 <HAL_UART_IRQHandler+0xf8>
 8008dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dda:	f043 0204 	orr.w	r2, r3, #4
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d011      	beq.n	8008e14 <HAL_UART_IRQHandler+0x128>
 8008df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2204      	movs	r2, #4
 8008e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e0a:	f043 0202 	orr.w	r2, r3, #2
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d017      	beq.n	8008e50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d105      	bne.n	8008e38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e30:	4b5f      	ldr	r3, [pc, #380]	@ (8008fb0 <HAL_UART_IRQHandler+0x2c4>)
 8008e32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e46:	f043 0208 	orr.w	r2, r3, #8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d012      	beq.n	8008e82 <HAL_UART_IRQHandler+0x196>
 8008e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00c      	beq.n	8008e82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e78:	f043 0220 	orr.w	r2, r3, #32
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 8278 	beq.w	800937e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d013      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e9e:	f003 0320 	and.w	r3, r3, #32
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d105      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed6:	2b40      	cmp	r3, #64	@ 0x40
 8008ed8:	d005      	beq.n	8008ee6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ede:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d058      	beq.n	8008f98 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 f91b 	bl	800a122 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef6:	2b40      	cmp	r3, #64	@ 0x40
 8008ef8:	d148      	bne.n	8008f8c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3308      	adds	r3, #8
 8008f00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1d9      	bne.n	8008efa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d017      	beq.n	8008f80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f56:	4a18      	ldr	r2, [pc, #96]	@ (8008fb8 <HAL_UART_IRQHandler+0x2cc>)
 8008f58:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fb fea9 	bl	8004cb8 <HAL_DMA_Abort_IT>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01f      	beq.n	8008fac <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f7e:	e015      	b.n	8008fac <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f8a:	e00f      	b.n	8008fac <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f96:	e009      	b.n	8008fac <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008faa:	e1e8      	b.n	800937e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fac:	bf00      	nop
    return;
 8008fae:	e1e6      	b.n	800937e <HAL_UART_IRQHandler+0x692>
 8008fb0:	10000001 	.word	0x10000001
 8008fb4:	04000120 	.word	0x04000120
 8008fb8:	0800a331 	.word	0x0800a331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	f040 8176 	bne.w	80092b2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fca:	f003 0310 	and.w	r3, r3, #16
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 816f 	beq.w	80092b2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8168 	beq.w	80092b2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2210      	movs	r2, #16
 8008fe8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff4:	2b40      	cmp	r3, #64	@ 0x40
 8008ff6:	f040 80dc 	bne.w	80091b2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80b1 	beq.w	8009174 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009018:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800901c:	429a      	cmp	r2, r3
 800901e:	f080 80a9 	bcs.w	8009174 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009028:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 8087 	bne.w	800914e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009054:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800905c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800906a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800906e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009076:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1da      	bne.n	8009040 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3308      	adds	r3, #8
 8009090:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800909a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800909c:	f023 0301 	bic.w	r3, r3, #1
 80090a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3308      	adds	r3, #8
 80090aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e1      	bne.n	800908a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3308      	adds	r3, #8
 80090cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e3      	bne.n	80090c6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800911a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800911c:	f023 0310 	bic.w	r3, r3, #16
 8009120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	461a      	mov	r2, r3
 800912a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800912e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009130:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009134:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800913c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e4      	bne.n	800910c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009148:	4618      	mov	r0, r3
 800914a:	f7fb fd5c 	bl	8004c06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009166:	b292      	uxth	r2, r2
 8009168:	1a8a      	subs	r2, r1, r2
 800916a:	b292      	uxth	r2, r2
 800916c:	4611      	mov	r1, r2
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009172:	e106      	b.n	8009382 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800917a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800917e:	429a      	cmp	r2, r3
 8009180:	f040 80ff 	bne.w	8009382 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b20      	cmp	r3, #32
 8009194:	f040 80f5 	bne.w	8009382 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80091aa:	4611      	mov	r1, r2
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
      return;
 80091b0:	e0e7      	b.n	8009382 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091be:	b29b      	uxth	r3, r3
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 80d9 	beq.w	8009386 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 80091d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 80d4 	beq.w	8009386 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009200:	647b      	str	r3, [r7, #68]	@ 0x44
 8009202:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800920e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e4      	bne.n	80091de <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3308      	adds	r3, #8
 800921a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	623b      	str	r3, [r7, #32]
   return(result);
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3308      	adds	r3, #8
 8009238:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800923c:	633a      	str	r2, [r7, #48]	@ 0x30
 800923e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009244:	e841 2300 	strex	r3, r2, [r1]
 8009248:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e1      	bne.n	8009214 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2220      	movs	r2, #32
 8009254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	60fb      	str	r3, [r7, #12]
   return(result);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f023 0310 	bic.w	r3, r3, #16
 8009278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009286:	61fb      	str	r3, [r7, #28]
 8009288:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	69b9      	ldr	r1, [r7, #24]
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	617b      	str	r3, [r7, #20]
   return(result);
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e4      	bne.n	8009264 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2202      	movs	r2, #2
 800929e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80092a6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80092aa:	4611      	mov	r1, r2
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092b0:	e069      	b.n	8009386 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d010      	beq.n	80092e0 <HAL_UART_IRQHandler+0x5f4>
 80092be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80092d2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092de:	e055      	b.n	800938c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d014      	beq.n	8009316 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80092ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d105      	bne.n	8009304 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d008      	beq.n	8009316 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009308:	2b00      	cmp	r3, #0
 800930a:	d03e      	beq.n	800938a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	4798      	blx	r3
    }
    return;
 8009314:	e039      	b.n	800938a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800931a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	d009      	beq.n	8009336 <HAL_UART_IRQHandler+0x64a>
 8009322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 f812 	bl	800a358 <UART_EndTransmit_IT>
    return;
 8009334:	e02a      	b.n	800938c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800933a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00b      	beq.n	800935a <HAL_UART_IRQHandler+0x66e>
 8009342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009346:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009358:	e018      	b.n	800938c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800935a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800935e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d012      	beq.n	800938c <HAL_UART_IRQHandler+0x6a0>
 8009366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800936a:	2b00      	cmp	r3, #0
 800936c:	da0e      	bge.n	800938c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009378:	e008      	b.n	800938c <HAL_UART_IRQHandler+0x6a0>
      return;
 800937a:	bf00      	nop
 800937c:	e006      	b.n	800938c <HAL_UART_IRQHandler+0x6a0>
    return;
 800937e:	bf00      	nop
 8009380:	e004      	b.n	800938c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009382:	bf00      	nop
 8009384:	e002      	b.n	800938c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009386:	bf00      	nop
 8009388:	e000      	b.n	800938c <HAL_UART_IRQHandler+0x6a0>
    return;
 800938a:	bf00      	nop
  }
}
 800938c:	37e8      	adds	r7, #232	@ 0xe8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop

08009394 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a1a      	ldr	r2, [pc, #104]	@ (80094c0 <UART_InitCallbacksToDefault+0x74>)
 8009458:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a19      	ldr	r2, [pc, #100]	@ (80094c4 <UART_InitCallbacksToDefault+0x78>)
 8009460:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a18      	ldr	r2, [pc, #96]	@ (80094c8 <UART_InitCallbacksToDefault+0x7c>)
 8009468:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a17      	ldr	r2, [pc, #92]	@ (80094cc <UART_InitCallbacksToDefault+0x80>)
 8009470:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a16      	ldr	r2, [pc, #88]	@ (80094d0 <UART_InitCallbacksToDefault+0x84>)
 8009478:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a15      	ldr	r2, [pc, #84]	@ (80094d4 <UART_InitCallbacksToDefault+0x88>)
 8009480:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a14      	ldr	r2, [pc, #80]	@ (80094d8 <UART_InitCallbacksToDefault+0x8c>)
 8009488:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a13      	ldr	r2, [pc, #76]	@ (80094dc <UART_InitCallbacksToDefault+0x90>)
 8009490:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a12      	ldr	r2, [pc, #72]	@ (80094e0 <UART_InitCallbacksToDefault+0x94>)
 8009498:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a11      	ldr	r2, [pc, #68]	@ (80094e4 <UART_InitCallbacksToDefault+0x98>)
 80094a0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a10      	ldr	r2, [pc, #64]	@ (80094e8 <UART_InitCallbacksToDefault+0x9c>)
 80094a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a0f      	ldr	r2, [pc, #60]	@ (80094ec <UART_InitCallbacksToDefault+0xa0>)
 80094b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	080093a9 	.word	0x080093a9
 80094c4:	08009395 	.word	0x08009395
 80094c8:	080093d1 	.word	0x080093d1
 80094cc:	080093bd 	.word	0x080093bd
 80094d0:	080093e5 	.word	0x080093e5
 80094d4:	080093f9 	.word	0x080093f9
 80094d8:	0800940d 	.word	0x0800940d
 80094dc:	08009421 	.word	0x08009421
 80094e0:	0800ae1d 	.word	0x0800ae1d
 80094e4:	0800ae31 	.word	0x0800ae31
 80094e8:	0800ae45 	.word	0x0800ae45
 80094ec:	08009435 	.word	0x08009435

080094f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094f4:	b08c      	sub	sp, #48	@ 0x30
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	431a      	orrs	r2, r3
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	431a      	orrs	r2, r3
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	4313      	orrs	r3, r2
 8009516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4baa      	ldr	r3, [pc, #680]	@ (80097c8 <UART_SetConfig+0x2d8>)
 8009520:	4013      	ands	r3, r2
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009528:	430b      	orrs	r3, r1
 800952a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a9f      	ldr	r2, [pc, #636]	@ (80097cc <UART_SetConfig+0x2dc>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d004      	beq.n	800955c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009558:	4313      	orrs	r3, r2
 800955a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009566:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009570:	430b      	orrs	r3, r1
 8009572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957a:	f023 010f 	bic.w	r1, r3, #15
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a90      	ldr	r2, [pc, #576]	@ (80097d0 <UART_SetConfig+0x2e0>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d125      	bne.n	80095e0 <UART_SetConfig+0xf0>
 8009594:	4b8f      	ldr	r3, [pc, #572]	@ (80097d4 <UART_SetConfig+0x2e4>)
 8009596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d81a      	bhi.n	80095d8 <UART_SetConfig+0xe8>
 80095a2:	a201      	add	r2, pc, #4	@ (adr r2, 80095a8 <UART_SetConfig+0xb8>)
 80095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a8:	080095b9 	.word	0x080095b9
 80095ac:	080095c9 	.word	0x080095c9
 80095b0:	080095c1 	.word	0x080095c1
 80095b4:	080095d1 	.word	0x080095d1
 80095b8:	2301      	movs	r3, #1
 80095ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095be:	e116      	b.n	80097ee <UART_SetConfig+0x2fe>
 80095c0:	2302      	movs	r3, #2
 80095c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c6:	e112      	b.n	80097ee <UART_SetConfig+0x2fe>
 80095c8:	2304      	movs	r3, #4
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ce:	e10e      	b.n	80097ee <UART_SetConfig+0x2fe>
 80095d0:	2308      	movs	r3, #8
 80095d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095d6:	e10a      	b.n	80097ee <UART_SetConfig+0x2fe>
 80095d8:	2310      	movs	r3, #16
 80095da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095de:	e106      	b.n	80097ee <UART_SetConfig+0x2fe>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a7c      	ldr	r2, [pc, #496]	@ (80097d8 <UART_SetConfig+0x2e8>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d138      	bne.n	800965c <UART_SetConfig+0x16c>
 80095ea:	4b7a      	ldr	r3, [pc, #488]	@ (80097d4 <UART_SetConfig+0x2e4>)
 80095ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f0:	f003 030c 	and.w	r3, r3, #12
 80095f4:	2b0c      	cmp	r3, #12
 80095f6:	d82d      	bhi.n	8009654 <UART_SetConfig+0x164>
 80095f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009600 <UART_SetConfig+0x110>)
 80095fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fe:	bf00      	nop
 8009600:	08009635 	.word	0x08009635
 8009604:	08009655 	.word	0x08009655
 8009608:	08009655 	.word	0x08009655
 800960c:	08009655 	.word	0x08009655
 8009610:	08009645 	.word	0x08009645
 8009614:	08009655 	.word	0x08009655
 8009618:	08009655 	.word	0x08009655
 800961c:	08009655 	.word	0x08009655
 8009620:	0800963d 	.word	0x0800963d
 8009624:	08009655 	.word	0x08009655
 8009628:	08009655 	.word	0x08009655
 800962c:	08009655 	.word	0x08009655
 8009630:	0800964d 	.word	0x0800964d
 8009634:	2300      	movs	r3, #0
 8009636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800963a:	e0d8      	b.n	80097ee <UART_SetConfig+0x2fe>
 800963c:	2302      	movs	r3, #2
 800963e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009642:	e0d4      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009644:	2304      	movs	r3, #4
 8009646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800964a:	e0d0      	b.n	80097ee <UART_SetConfig+0x2fe>
 800964c:	2308      	movs	r3, #8
 800964e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009652:	e0cc      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009654:	2310      	movs	r3, #16
 8009656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800965a:	e0c8      	b.n	80097ee <UART_SetConfig+0x2fe>
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a5e      	ldr	r2, [pc, #376]	@ (80097dc <UART_SetConfig+0x2ec>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d125      	bne.n	80096b2 <UART_SetConfig+0x1c2>
 8009666:	4b5b      	ldr	r3, [pc, #364]	@ (80097d4 <UART_SetConfig+0x2e4>)
 8009668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800966c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009670:	2b30      	cmp	r3, #48	@ 0x30
 8009672:	d016      	beq.n	80096a2 <UART_SetConfig+0x1b2>
 8009674:	2b30      	cmp	r3, #48	@ 0x30
 8009676:	d818      	bhi.n	80096aa <UART_SetConfig+0x1ba>
 8009678:	2b20      	cmp	r3, #32
 800967a:	d00a      	beq.n	8009692 <UART_SetConfig+0x1a2>
 800967c:	2b20      	cmp	r3, #32
 800967e:	d814      	bhi.n	80096aa <UART_SetConfig+0x1ba>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <UART_SetConfig+0x19a>
 8009684:	2b10      	cmp	r3, #16
 8009686:	d008      	beq.n	800969a <UART_SetConfig+0x1aa>
 8009688:	e00f      	b.n	80096aa <UART_SetConfig+0x1ba>
 800968a:	2300      	movs	r3, #0
 800968c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009690:	e0ad      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009692:	2302      	movs	r3, #2
 8009694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009698:	e0a9      	b.n	80097ee <UART_SetConfig+0x2fe>
 800969a:	2304      	movs	r3, #4
 800969c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096a0:	e0a5      	b.n	80097ee <UART_SetConfig+0x2fe>
 80096a2:	2308      	movs	r3, #8
 80096a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096a8:	e0a1      	b.n	80097ee <UART_SetConfig+0x2fe>
 80096aa:	2310      	movs	r3, #16
 80096ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096b0:	e09d      	b.n	80097ee <UART_SetConfig+0x2fe>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a4a      	ldr	r2, [pc, #296]	@ (80097e0 <UART_SetConfig+0x2f0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d125      	bne.n	8009708 <UART_SetConfig+0x218>
 80096bc:	4b45      	ldr	r3, [pc, #276]	@ (80097d4 <UART_SetConfig+0x2e4>)
 80096be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80096c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80096c8:	d016      	beq.n	80096f8 <UART_SetConfig+0x208>
 80096ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80096cc:	d818      	bhi.n	8009700 <UART_SetConfig+0x210>
 80096ce:	2b80      	cmp	r3, #128	@ 0x80
 80096d0:	d00a      	beq.n	80096e8 <UART_SetConfig+0x1f8>
 80096d2:	2b80      	cmp	r3, #128	@ 0x80
 80096d4:	d814      	bhi.n	8009700 <UART_SetConfig+0x210>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <UART_SetConfig+0x1f0>
 80096da:	2b40      	cmp	r3, #64	@ 0x40
 80096dc:	d008      	beq.n	80096f0 <UART_SetConfig+0x200>
 80096de:	e00f      	b.n	8009700 <UART_SetConfig+0x210>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096e6:	e082      	b.n	80097ee <UART_SetConfig+0x2fe>
 80096e8:	2302      	movs	r3, #2
 80096ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ee:	e07e      	b.n	80097ee <UART_SetConfig+0x2fe>
 80096f0:	2304      	movs	r3, #4
 80096f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096f6:	e07a      	b.n	80097ee <UART_SetConfig+0x2fe>
 80096f8:	2308      	movs	r3, #8
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fe:	e076      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009700:	2310      	movs	r3, #16
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009706:	e072      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a35      	ldr	r2, [pc, #212]	@ (80097e4 <UART_SetConfig+0x2f4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d12a      	bne.n	8009768 <UART_SetConfig+0x278>
 8009712:	4b30      	ldr	r3, [pc, #192]	@ (80097d4 <UART_SetConfig+0x2e4>)
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009718:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800971c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009720:	d01a      	beq.n	8009758 <UART_SetConfig+0x268>
 8009722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009726:	d81b      	bhi.n	8009760 <UART_SetConfig+0x270>
 8009728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800972c:	d00c      	beq.n	8009748 <UART_SetConfig+0x258>
 800972e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009732:	d815      	bhi.n	8009760 <UART_SetConfig+0x270>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <UART_SetConfig+0x250>
 8009738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800973c:	d008      	beq.n	8009750 <UART_SetConfig+0x260>
 800973e:	e00f      	b.n	8009760 <UART_SetConfig+0x270>
 8009740:	2300      	movs	r3, #0
 8009742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009746:	e052      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009748:	2302      	movs	r3, #2
 800974a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800974e:	e04e      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009750:	2304      	movs	r3, #4
 8009752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009756:	e04a      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009758:	2308      	movs	r3, #8
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975e:	e046      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009760:	2310      	movs	r3, #16
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009766:	e042      	b.n	80097ee <UART_SetConfig+0x2fe>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a17      	ldr	r2, [pc, #92]	@ (80097cc <UART_SetConfig+0x2dc>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d13a      	bne.n	80097e8 <UART_SetConfig+0x2f8>
 8009772:	4b18      	ldr	r3, [pc, #96]	@ (80097d4 <UART_SetConfig+0x2e4>)
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009778:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800977c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009780:	d01a      	beq.n	80097b8 <UART_SetConfig+0x2c8>
 8009782:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009786:	d81b      	bhi.n	80097c0 <UART_SetConfig+0x2d0>
 8009788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800978c:	d00c      	beq.n	80097a8 <UART_SetConfig+0x2b8>
 800978e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009792:	d815      	bhi.n	80097c0 <UART_SetConfig+0x2d0>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d003      	beq.n	80097a0 <UART_SetConfig+0x2b0>
 8009798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800979c:	d008      	beq.n	80097b0 <UART_SetConfig+0x2c0>
 800979e:	e00f      	b.n	80097c0 <UART_SetConfig+0x2d0>
 80097a0:	2300      	movs	r3, #0
 80097a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097a6:	e022      	b.n	80097ee <UART_SetConfig+0x2fe>
 80097a8:	2302      	movs	r3, #2
 80097aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ae:	e01e      	b.n	80097ee <UART_SetConfig+0x2fe>
 80097b0:	2304      	movs	r3, #4
 80097b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097b6:	e01a      	b.n	80097ee <UART_SetConfig+0x2fe>
 80097b8:	2308      	movs	r3, #8
 80097ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097be:	e016      	b.n	80097ee <UART_SetConfig+0x2fe>
 80097c0:	2310      	movs	r3, #16
 80097c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097c6:	e012      	b.n	80097ee <UART_SetConfig+0x2fe>
 80097c8:	cfff69f3 	.word	0xcfff69f3
 80097cc:	40008000 	.word	0x40008000
 80097d0:	40013800 	.word	0x40013800
 80097d4:	40021000 	.word	0x40021000
 80097d8:	40004400 	.word	0x40004400
 80097dc:	40004800 	.word	0x40004800
 80097e0:	40004c00 	.word	0x40004c00
 80097e4:	40005000 	.word	0x40005000
 80097e8:	2310      	movs	r3, #16
 80097ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4aae      	ldr	r2, [pc, #696]	@ (8009aac <UART_SetConfig+0x5bc>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	f040 8097 	bne.w	8009928 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80097fe:	2b08      	cmp	r3, #8
 8009800:	d823      	bhi.n	800984a <UART_SetConfig+0x35a>
 8009802:	a201      	add	r2, pc, #4	@ (adr r2, 8009808 <UART_SetConfig+0x318>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	0800982d 	.word	0x0800982d
 800980c:	0800984b 	.word	0x0800984b
 8009810:	08009835 	.word	0x08009835
 8009814:	0800984b 	.word	0x0800984b
 8009818:	0800983b 	.word	0x0800983b
 800981c:	0800984b 	.word	0x0800984b
 8009820:	0800984b 	.word	0x0800984b
 8009824:	0800984b 	.word	0x0800984b
 8009828:	08009843 	.word	0x08009843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800982c:	f7fc fb28 	bl	8005e80 <HAL_RCC_GetPCLK1Freq>
 8009830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009832:	e010      	b.n	8009856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009834:	4b9e      	ldr	r3, [pc, #632]	@ (8009ab0 <UART_SetConfig+0x5c0>)
 8009836:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009838:	e00d      	b.n	8009856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800983a:	f7fc fab3 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 800983e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009840:	e009      	b.n	8009856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009848:	e005      	b.n	8009856 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8130 	beq.w	8009abe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009862:	4a94      	ldr	r2, [pc, #592]	@ (8009ab4 <UART_SetConfig+0x5c4>)
 8009864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009868:	461a      	mov	r2, r3
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009870:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	4413      	add	r3, r2
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	429a      	cmp	r2, r3
 8009880:	d305      	bcc.n	800988e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	429a      	cmp	r2, r3
 800988c:	d903      	bls.n	8009896 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009894:	e113      	b.n	8009abe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	2200      	movs	r2, #0
 800989a:	60bb      	str	r3, [r7, #8]
 800989c:	60fa      	str	r2, [r7, #12]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a2:	4a84      	ldr	r2, [pc, #528]	@ (8009ab4 <UART_SetConfig+0x5c4>)
 80098a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2200      	movs	r2, #0
 80098ac:	603b      	str	r3, [r7, #0]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098b8:	f7f6 fcae 	bl	8000218 <__aeabi_uldivmod>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4610      	mov	r0, r2
 80098c2:	4619      	mov	r1, r3
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	020b      	lsls	r3, r1, #8
 80098ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098d2:	0202      	lsls	r2, r0, #8
 80098d4:	6979      	ldr	r1, [r7, #20]
 80098d6:	6849      	ldr	r1, [r1, #4]
 80098d8:	0849      	lsrs	r1, r1, #1
 80098da:	2000      	movs	r0, #0
 80098dc:	460c      	mov	r4, r1
 80098de:	4605      	mov	r5, r0
 80098e0:	eb12 0804 	adds.w	r8, r2, r4
 80098e4:	eb43 0905 	adc.w	r9, r3, r5
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	469a      	mov	sl, r3
 80098f0:	4693      	mov	fp, r2
 80098f2:	4652      	mov	r2, sl
 80098f4:	465b      	mov	r3, fp
 80098f6:	4640      	mov	r0, r8
 80098f8:	4649      	mov	r1, r9
 80098fa:	f7f6 fc8d 	bl	8000218 <__aeabi_uldivmod>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4613      	mov	r3, r2
 8009904:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800990c:	d308      	bcc.n	8009920 <UART_SetConfig+0x430>
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009914:	d204      	bcs.n	8009920 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6a3a      	ldr	r2, [r7, #32]
 800991c:	60da      	str	r2, [r3, #12]
 800991e:	e0ce      	b.n	8009abe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009926:	e0ca      	b.n	8009abe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009930:	d166      	bne.n	8009a00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009932:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009936:	2b08      	cmp	r3, #8
 8009938:	d827      	bhi.n	800998a <UART_SetConfig+0x49a>
 800993a:	a201      	add	r2, pc, #4	@ (adr r2, 8009940 <UART_SetConfig+0x450>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	08009965 	.word	0x08009965
 8009944:	0800996d 	.word	0x0800996d
 8009948:	08009975 	.word	0x08009975
 800994c:	0800998b 	.word	0x0800998b
 8009950:	0800997b 	.word	0x0800997b
 8009954:	0800998b 	.word	0x0800998b
 8009958:	0800998b 	.word	0x0800998b
 800995c:	0800998b 	.word	0x0800998b
 8009960:	08009983 	.word	0x08009983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009964:	f7fc fa8c 	bl	8005e80 <HAL_RCC_GetPCLK1Freq>
 8009968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800996a:	e014      	b.n	8009996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800996c:	f7fc fa9e 	bl	8005eac <HAL_RCC_GetPCLK2Freq>
 8009970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009972:	e010      	b.n	8009996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009974:	4b4e      	ldr	r3, [pc, #312]	@ (8009ab0 <UART_SetConfig+0x5c0>)
 8009976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009978:	e00d      	b.n	8009996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800997a:	f7fc fa13 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 800997e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009980:	e009      	b.n	8009996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009988:	e005      	b.n	8009996 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 8090 	beq.w	8009abe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a2:	4a44      	ldr	r2, [pc, #272]	@ (8009ab4 <UART_SetConfig+0x5c4>)
 80099a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a8:	461a      	mov	r2, r3
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b0:	005a      	lsls	r2, r3, #1
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	441a      	add	r2, r3
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	2b0f      	cmp	r3, #15
 80099c8:	d916      	bls.n	80099f8 <UART_SetConfig+0x508>
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099d0:	d212      	bcs.n	80099f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f023 030f 	bic.w	r3, r3, #15
 80099da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	085b      	lsrs	r3, r3, #1
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	8bfb      	ldrh	r3, [r7, #30]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	8bfa      	ldrh	r2, [r7, #30]
 80099f4:	60da      	str	r2, [r3, #12]
 80099f6:	e062      	b.n	8009abe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80099fe:	e05e      	b.n	8009abe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d828      	bhi.n	8009a5a <UART_SetConfig+0x56a>
 8009a08:	a201      	add	r2, pc, #4	@ (adr r2, 8009a10 <UART_SetConfig+0x520>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009a3d 	.word	0x08009a3d
 8009a18:	08009a45 	.word	0x08009a45
 8009a1c:	08009a5b 	.word	0x08009a5b
 8009a20:	08009a4b 	.word	0x08009a4b
 8009a24:	08009a5b 	.word	0x08009a5b
 8009a28:	08009a5b 	.word	0x08009a5b
 8009a2c:	08009a5b 	.word	0x08009a5b
 8009a30:	08009a53 	.word	0x08009a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a34:	f7fc fa24 	bl	8005e80 <HAL_RCC_GetPCLK1Freq>
 8009a38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a3a:	e014      	b.n	8009a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a3c:	f7fc fa36 	bl	8005eac <HAL_RCC_GetPCLK2Freq>
 8009a40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a42:	e010      	b.n	8009a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a44:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab0 <UART_SetConfig+0x5c0>)
 8009a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a48:	e00d      	b.n	8009a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a4a:	f7fc f9ab 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 8009a4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a50:	e009      	b.n	8009a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a58:	e005      	b.n	8009a66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a64:	bf00      	nop
    }

    if (pclk != 0U)
 8009a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d028      	beq.n	8009abe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a70:	4a10      	ldr	r2, [pc, #64]	@ (8009ab4 <UART_SetConfig+0x5c4>)
 8009a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a76:	461a      	mov	r2, r3
 8009a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	085b      	lsrs	r3, r3, #1
 8009a84:	441a      	add	r2, r3
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	2b0f      	cmp	r3, #15
 8009a94:	d910      	bls.n	8009ab8 <UART_SetConfig+0x5c8>
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a9c:	d20c      	bcs.n	8009ab8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60da      	str	r2, [r3, #12]
 8009aa8:	e009      	b.n	8009abe <UART_SetConfig+0x5ce>
 8009aaa:	bf00      	nop
 8009aac:	40008000 	.word	0x40008000
 8009ab0:	00f42400 	.word	0x00f42400
 8009ab4:	0800b1f0 	.word	0x0800b1f0
      }
      else
      {
        ret = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ada:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3730      	adds	r7, #48	@ 0x30
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af4:	f003 0308 	and.w	r3, r3, #8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00a      	beq.n	8009b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00a      	beq.n	8009b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	430a      	orrs	r2, r1
 8009b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00a      	beq.n	8009b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5a:	f003 0304 	and.w	r3, r3, #4
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00a      	beq.n	8009b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b7c:	f003 0310 	and.w	r3, r3, #16
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00a      	beq.n	8009b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	430a      	orrs	r2, r1
 8009b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9e:	f003 0320 	and.w	r3, r3, #32
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00a      	beq.n	8009bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d01a      	beq.n	8009bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009be6:	d10a      	bne.n	8009bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	605a      	str	r2, [r3, #4]
  }
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b098      	sub	sp, #96	@ 0x60
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c3c:	f7f9 fae6 	bl	800320c <HAL_GetTick>
 8009c40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0308 	and.w	r3, r3, #8
 8009c4c:	2b08      	cmp	r3, #8
 8009c4e:	d12f      	bne.n	8009cb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f88e 	bl	8009d80 <UART_WaitOnFlagUntilTimeout>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d022      	beq.n	8009cb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c72:	e853 3f00 	ldrex	r3, [r3]
 8009c76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	461a      	mov	r2, r3
 8009c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c90:	e841 2300 	strex	r3, r2, [r1]
 8009c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e6      	bne.n	8009c6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e063      	b.n	8009d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0304 	and.w	r3, r3, #4
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	d149      	bne.n	8009d52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f857 	bl	8009d80 <UART_WaitOnFlagUntilTimeout>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d03c      	beq.n	8009d52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	e853 3f00 	ldrex	r3, [r3]
 8009ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e6      	bne.n	8009cd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f023 0301 	bic.w	r3, r3, #1
 8009d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3308      	adds	r3, #8
 8009d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d2a:	61fa      	str	r2, [r7, #28]
 8009d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	69b9      	ldr	r1, [r7, #24]
 8009d30:	69fa      	ldr	r2, [r7, #28]
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	617b      	str	r3, [r7, #20]
   return(result);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1e5      	bne.n	8009d0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2220      	movs	r2, #32
 8009d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e012      	b.n	8009d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2220      	movs	r2, #32
 8009d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3758      	adds	r7, #88	@ 0x58
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d90:	e04f      	b.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d98:	d04b      	beq.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d9a:	f7f9 fa37 	bl	800320c <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d302      	bcc.n	8009db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e04e      	b.n	8009e52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0304 	and.w	r3, r3, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d037      	beq.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b80      	cmp	r3, #128	@ 0x80
 8009dc6:	d034      	beq.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b40      	cmp	r3, #64	@ 0x40
 8009dcc:	d031      	beq.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	f003 0308 	and.w	r3, r3, #8
 8009dd8:	2b08      	cmp	r3, #8
 8009dda:	d110      	bne.n	8009dfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2208      	movs	r2, #8
 8009de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 f99c 	bl	800a122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2208      	movs	r2, #8
 8009dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e029      	b.n	8009e52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e0c:	d111      	bne.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 f982 	bl	800a122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e00f      	b.n	8009e52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	bf0c      	ite	eq
 8009e42:	2301      	moveq	r3, #1
 8009e44:	2300      	movne	r3, #0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	461a      	mov	r2, r3
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d0a0      	beq.n	8009d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b0a3      	sub	sp, #140	@ 0x8c
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	4613      	mov	r3, r2
 8009e68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	88fa      	ldrh	r2, [r7, #6]
 8009e74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	88fa      	ldrh	r2, [r7, #6]
 8009e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e8e:	d10e      	bne.n	8009eae <UART_Start_Receive_IT+0x52>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d105      	bne.n	8009ea4 <UART_Start_Receive_IT+0x48>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ea2:	e02d      	b.n	8009f00 <UART_Start_Receive_IT+0xa4>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	22ff      	movs	r2, #255	@ 0xff
 8009ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009eac:	e028      	b.n	8009f00 <UART_Start_Receive_IT+0xa4>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10d      	bne.n	8009ed2 <UART_Start_Receive_IT+0x76>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d104      	bne.n	8009ec8 <UART_Start_Receive_IT+0x6c>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	22ff      	movs	r2, #255	@ 0xff
 8009ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ec6:	e01b      	b.n	8009f00 <UART_Start_Receive_IT+0xa4>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	227f      	movs	r2, #127	@ 0x7f
 8009ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ed0:	e016      	b.n	8009f00 <UART_Start_Receive_IT+0xa4>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009eda:	d10d      	bne.n	8009ef8 <UART_Start_Receive_IT+0x9c>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d104      	bne.n	8009eee <UART_Start_Receive_IT+0x92>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	227f      	movs	r2, #127	@ 0x7f
 8009ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009eec:	e008      	b.n	8009f00 <UART_Start_Receive_IT+0xa4>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	223f      	movs	r2, #63	@ 0x3f
 8009ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ef6:	e003      	b.n	8009f00 <UART_Start_Receive_IT+0xa4>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2222      	movs	r2, #34	@ 0x22
 8009f0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3308      	adds	r3, #8
 8009f16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009f20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3308      	adds	r3, #8
 8009f30:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009f34:	673a      	str	r2, [r7, #112]	@ 0x70
 8009f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009f3a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009f3c:	e841 2300 	strex	r3, r2, [r1]
 8009f40:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009f42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e3      	bne.n	8009f10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f50:	d14f      	bne.n	8009ff2 <UART_Start_Receive_IT+0x196>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f58:	88fa      	ldrh	r2, [r7, #6]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d349      	bcc.n	8009ff2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f66:	d107      	bne.n	8009f78 <UART_Start_Receive_IT+0x11c>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d103      	bne.n	8009f78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4a47      	ldr	r2, [pc, #284]	@ (800a090 <UART_Start_Receive_IT+0x234>)
 8009f74:	675a      	str	r2, [r3, #116]	@ 0x74
 8009f76:	e002      	b.n	8009f7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4a46      	ldr	r2, [pc, #280]	@ (800a094 <UART_Start_Receive_IT+0x238>)
 8009f7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d01a      	beq.n	8009fbc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009faa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009fae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fb0:	e841 2300 	strex	r3, r2, [r1]
 8009fb4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e4      	bne.n	8009f86 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3308      	adds	r3, #8
 8009fda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009fdc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009fde:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e5      	bne.n	8009fbc <UART_Start_Receive_IT+0x160>
 8009ff0:	e046      	b.n	800a080 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ffa:	d107      	bne.n	800a00c <UART_Start_Receive_IT+0x1b0>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d103      	bne.n	800a00c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4a24      	ldr	r2, [pc, #144]	@ (800a098 <UART_Start_Receive_IT+0x23c>)
 800a008:	675a      	str	r2, [r3, #116]	@ 0x74
 800a00a:	e002      	b.n	800a012 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4a23      	ldr	r2, [pc, #140]	@ (800a09c <UART_Start_Receive_IT+0x240>)
 800a010:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d019      	beq.n	800a04e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	e853 3f00 	ldrex	r3, [r3]
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a02e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a038:	637b      	str	r3, [r7, #52]	@ 0x34
 800a03a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a03e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a040:	e841 2300 	strex	r3, r2, [r1]
 800a044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1e6      	bne.n	800a01a <UART_Start_Receive_IT+0x1be>
 800a04c:	e018      	b.n	800a080 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	e853 3f00 	ldrex	r3, [r3]
 800a05a:	613b      	str	r3, [r7, #16]
   return(result);
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f043 0320 	orr.w	r3, r3, #32
 800a062:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	461a      	mov	r2, r3
 800a06a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a06c:	623b      	str	r3, [r7, #32]
 800a06e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a070:	69f9      	ldr	r1, [r7, #28]
 800a072:	6a3a      	ldr	r2, [r7, #32]
 800a074:	e841 2300 	strex	r3, r2, [r1]
 800a078:	61bb      	str	r3, [r7, #24]
   return(result);
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e6      	bne.n	800a04e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	378c      	adds	r7, #140	@ 0x8c
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	0800aaa5 	.word	0x0800aaa5
 800a094:	0800a735 	.word	0x0800a735
 800a098:	0800a575 	.word	0x0800a575
 800a09c:	0800a3b5 	.word	0x0800a3b5

0800a0a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b08f      	sub	sp, #60	@ 0x3c
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e6      	bne.n	800a0a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3308      	adds	r3, #8
 800a0e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a0f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0fa:	61ba      	str	r2, [r7, #24]
 800a0fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fe:	6979      	ldr	r1, [r7, #20]
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	e841 2300 	strex	r3, r2, [r1]
 800a106:	613b      	str	r3, [r7, #16]
   return(result);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1e5      	bne.n	800a0da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2220      	movs	r2, #32
 800a112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a116:	bf00      	nop
 800a118:	373c      	adds	r7, #60	@ 0x3c
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a122:	b480      	push	{r7}
 800a124:	b095      	sub	sp, #84	@ 0x54
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a13e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a148:	643b      	str	r3, [r7, #64]	@ 0x40
 800a14a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a14e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e6      	bne.n	800a12a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3308      	adds	r3, #8
 800a162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a172:	f023 0301 	bic.w	r3, r3, #1
 800a176:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3308      	adds	r3, #8
 800a17e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e3      	bne.n	800a15c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d118      	bne.n	800a1ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f023 0310 	bic.w	r3, r3, #16
 800a1b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1ba:	61bb      	str	r3, [r7, #24]
 800a1bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	6979      	ldr	r1, [r7, #20]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e6      	bne.n	800a19c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a1e2:	bf00      	nop
 800a1e4:	3754      	adds	r7, #84	@ 0x54
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b090      	sub	sp, #64	@ 0x40
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0320 	and.w	r3, r3, #32
 800a206:	2b00      	cmp	r3, #0
 800a208:	d137      	bne.n	800a27a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3308      	adds	r3, #8
 800a218:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	623b      	str	r3, [r7, #32]
   return(result);
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a228:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3308      	adds	r3, #8
 800a230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a232:	633a      	str	r2, [r7, #48]	@ 0x30
 800a234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e5      	bne.n	800a212 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	60fb      	str	r3, [r7, #12]
   return(result);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a25a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	461a      	mov	r2, r3
 800a262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a264:	61fb      	str	r3, [r7, #28]
 800a266:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	69b9      	ldr	r1, [r7, #24]
 800a26a:	69fa      	ldr	r2, [r7, #28]
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	617b      	str	r3, [r7, #20]
   return(result);
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e6      	bne.n	800a246 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a278:	e004      	b.n	800a284 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a27c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a280:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a282:	4798      	blx	r3
}
 800a284:	bf00      	nop
 800a286:	3740      	adds	r7, #64	@ 0x40
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a298:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a4:	bf00      	nop
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d4:	2b80      	cmp	r3, #128	@ 0x80
 800a2d6:	d109      	bne.n	800a2ec <UART_DMAError+0x40>
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	2b21      	cmp	r3, #33	@ 0x21
 800a2dc:	d106      	bne.n	800a2ec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a2e6:	6978      	ldr	r0, [r7, #20]
 800a2e8:	f7ff feda 	bl	800a0a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f6:	2b40      	cmp	r3, #64	@ 0x40
 800a2f8:	d109      	bne.n	800a30e <UART_DMAError+0x62>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b22      	cmp	r3, #34	@ 0x22
 800a2fe:	d106      	bne.n	800a30e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2200      	movs	r2, #0
 800a304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a308:	6978      	ldr	r0, [r7, #20]
 800a30a:	f7ff ff0a 	bl	800a122 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a314:	f043 0210 	orr.w	r2, r3, #16
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a324:	6978      	ldr	r0, [r7, #20]
 800a326:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a328:	bf00      	nop
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a350:	bf00      	nop
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	e853 3f00 	ldrex	r3, [r3]
 800a36c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a374:	61fb      	str	r3, [r7, #28]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a382:	6979      	ldr	r1, [r7, #20]
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	e841 2300 	strex	r3, r2, [r1]
 800a38a:	613b      	str	r3, [r7, #16]
   return(result);
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1e6      	bne.n	800a360 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2220      	movs	r2, #32
 800a396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3aa:	bf00      	nop
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b09c      	sub	sp, #112	@ 0x70
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a3c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3cc:	2b22      	cmp	r3, #34	@ 0x22
 800a3ce:	f040 80c2 	bne.w	800a556 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a3dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a3e0:	b2d9      	uxtb	r1, r3
 800a3e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ec:	400a      	ands	r2, r1
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a402:	b29b      	uxth	r3, r3
 800a404:	3b01      	subs	r3, #1
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a414:	b29b      	uxth	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	f040 80a5 	bne.w	800a566 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a42a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a42c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a430:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a43a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a43c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a440:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e6      	bne.n	800a41c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3308      	adds	r3, #8
 800a454:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a460:	f023 0301 	bic.w	r3, r3, #1
 800a464:	667b      	str	r3, [r7, #100]	@ 0x64
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3308      	adds	r3, #8
 800a46c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a46e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a470:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a472:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e5      	bne.n	800a44e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2220      	movs	r2, #32
 800a486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a35      	ldr	r2, [pc, #212]	@ (800a570 <UART_RxISR_8BIT+0x1bc>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d01f      	beq.n	800a4e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d018      	beq.n	800a4e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	e853 3f00 	ldrex	r3, [r3]
 800a4ba:	623b      	str	r3, [r7, #32]
   return(result);
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4d4:	e841 2300 	strex	r3, r2, [r1]
 800a4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1e6      	bne.n	800a4ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d130      	bne.n	800a54a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	e853 3f00 	ldrex	r3, [r3]
 800a4fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f023 0310 	bic.w	r3, r3, #16
 800a502:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	461a      	mov	r2, r3
 800a50a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a50c:	61fb      	str	r3, [r7, #28]
 800a50e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a510:	69b9      	ldr	r1, [r7, #24]
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	e841 2300 	strex	r3, r2, [r1]
 800a518:	617b      	str	r3, [r7, #20]
   return(result);
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1e6      	bne.n	800a4ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f003 0310 	and.w	r3, r3, #16
 800a52a:	2b10      	cmp	r3, #16
 800a52c:	d103      	bne.n	800a536 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2210      	movs	r2, #16
 800a534:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a542:	4611      	mov	r1, r2
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a548:	e00d      	b.n	800a566 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	4798      	blx	r3
}
 800a554:	e007      	b.n	800a566 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	699a      	ldr	r2, [r3, #24]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f042 0208 	orr.w	r2, r2, #8
 800a564:	619a      	str	r2, [r3, #24]
}
 800a566:	bf00      	nop
 800a568:	3770      	adds	r7, #112	@ 0x70
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	40008000 	.word	0x40008000

0800a574 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b09c      	sub	sp, #112	@ 0x70
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a582:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a58c:	2b22      	cmp	r3, #34	@ 0x22
 800a58e:	f040 80c2 	bne.w	800a716 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a598:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a5a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a5a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5b6:	1c9a      	adds	r2, r3, #2
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f040 80a5 	bne.w	800a726 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5e4:	e853 3f00 	ldrex	r3, [r3]
 800a5e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a5ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a600:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a602:	e841 2300 	strex	r3, r2, [r1]
 800a606:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e6      	bne.n	800a5dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3308      	adds	r3, #8
 800a614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a620:	f023 0301 	bic.w	r3, r3, #1
 800a624:	663b      	str	r3, [r7, #96]	@ 0x60
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3308      	adds	r3, #8
 800a62c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a62e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e5      	bne.n	800a60e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a35      	ldr	r2, [pc, #212]	@ (800a730 <UART_RxISR_16BIT+0x1bc>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d01f      	beq.n	800a6a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d018      	beq.n	800a6a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	e853 3f00 	ldrex	r3, [r3]
 800a67a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a682:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	461a      	mov	r2, r3
 800a68a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a68e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a694:	e841 2300 	strex	r3, r2, [r1]
 800a698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1e6      	bne.n	800a66e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d130      	bne.n	800a70a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	e853 3f00 	ldrex	r3, [r3]
 800a6ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f023 0310 	bic.w	r3, r3, #16
 800a6c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6cc:	61bb      	str	r3, [r7, #24]
 800a6ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d0:	6979      	ldr	r1, [r7, #20]
 800a6d2:	69ba      	ldr	r2, [r7, #24]
 800a6d4:	e841 2300 	strex	r3, r2, [r1]
 800a6d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1e6      	bne.n	800a6ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	f003 0310 	and.w	r3, r3, #16
 800a6ea:	2b10      	cmp	r3, #16
 800a6ec:	d103      	bne.n	800a6f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2210      	movs	r2, #16
 800a6f4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a702:	4611      	mov	r1, r2
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a708:	e00d      	b.n	800a726 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	4798      	blx	r3
}
 800a714:	e007      	b.n	800a726 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	699a      	ldr	r2, [r3, #24]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f042 0208 	orr.w	r2, r2, #8
 800a724:	619a      	str	r2, [r3, #24]
}
 800a726:	bf00      	nop
 800a728:	3770      	adds	r7, #112	@ 0x70
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	40008000 	.word	0x40008000

0800a734 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b0ac      	sub	sp, #176	@ 0xb0
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a742:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a76a:	2b22      	cmp	r3, #34	@ 0x22
 800a76c:	f040 8189 	bne.w	800aa82 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a776:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a77a:	e12c      	b.n	800a9d6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a782:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a786:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a78a:	b2d9      	uxtb	r1, r3
 800a78c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a790:	b2da      	uxtb	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a796:	400a      	ands	r2, r1
 800a798:	b2d2      	uxtb	r2, r2
 800a79a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d055      	beq.n	800a87a <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d011      	beq.n	800a7fe <UART_RxISR_8BIT_FIFOEN+0xca>
 800a7da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a7de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00b      	beq.n	800a7fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7f4:	f043 0201 	orr.w	r2, r3, #1
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	2b00      	cmp	r3, #0
 800a808:	d011      	beq.n	800a82e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a80a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00b      	beq.n	800a82e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2202      	movs	r2, #2
 800a81c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a824:	f043 0204 	orr.w	r2, r3, #4
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a82e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a832:	f003 0304 	and.w	r3, r3, #4
 800a836:	2b00      	cmp	r3, #0
 800a838:	d011      	beq.n	800a85e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a83a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2204      	movs	r2, #4
 800a84c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a854:	f043 0202 	orr.w	r2, r3, #2
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a864:	2b00      	cmp	r3, #0
 800a866:	d008      	beq.n	800a87a <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a880:	b29b      	uxth	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	f040 80a7 	bne.w	800a9d6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a89c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a8ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a8b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a8b2:	e841 2300 	strex	r3, r2, [r1]
 800a8b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a8b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1e4      	bne.n	800a888 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a8ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8d4:	f023 0301 	bic.w	r3, r3, #1
 800a8d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a8e6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a8e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a8ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a8f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e1      	bne.n	800a8be <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a62      	ldr	r2, [pc, #392]	@ (800aa9c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d021      	beq.n	800a95c <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d01a      	beq.n	800a95c <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a92e:	e853 3f00 	ldrex	r3, [r3]
 800a932:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a936:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a93a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a948:	657b      	str	r3, [r7, #84]	@ 0x54
 800a94a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a94e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a950:	e841 2300 	strex	r3, r2, [r1]
 800a954:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e4      	bne.n	800a926 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a960:	2b01      	cmp	r3, #1
 800a962:	d132      	bne.n	800a9ca <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a972:	e853 3f00 	ldrex	r3, [r3]
 800a976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97a:	f023 0310 	bic.w	r3, r3, #16
 800a97e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a98c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a98e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a992:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a994:	e841 2300 	strex	r3, r2, [r1]
 800a998:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e4      	bne.n	800a96a <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	f003 0310 	and.w	r3, r3, #16
 800a9aa:	2b10      	cmp	r3, #16
 800a9ac:	d103      	bne.n	800a9b6 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2210      	movs	r2, #16
 800a9b4:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a9c8:	e010      	b.n	800a9ec <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	4798      	blx	r3
        break;
 800a9d4:	e00a      	b.n	800a9ec <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9d6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800a9de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f47f aec8 	bne.w	800a77c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a9f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d049      	beq.n	800aa92 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa04:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d242      	bcs.n	800aa92 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3308      	adds	r3, #8
 800aa12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800aa30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e3      	bne.n	800aa0c <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a16      	ldr	r2, [pc, #88]	@ (800aaa0 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800aa48:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f043 0320 	orr.w	r3, r3, #32
 800aa5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa6c:	61bb      	str	r3, [r7, #24]
 800aa6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6979      	ldr	r1, [r7, #20]
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	613b      	str	r3, [r7, #16]
   return(result);
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e4      	bne.n	800aa4a <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa80:	e007      	b.n	800aa92 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	699a      	ldr	r2, [r3, #24]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f042 0208 	orr.w	r2, r2, #8
 800aa90:	619a      	str	r2, [r3, #24]
}
 800aa92:	bf00      	nop
 800aa94:	37b0      	adds	r7, #176	@ 0xb0
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	40008000 	.word	0x40008000
 800aaa0:	0800a3b5 	.word	0x0800a3b5

0800aaa4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b0ae      	sub	sp, #184	@ 0xb8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aab2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	69db      	ldr	r3, [r3, #28]
 800aabc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aada:	2b22      	cmp	r3, #34	@ 0x22
 800aadc:	f040 818d 	bne.w	800adfa <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aae6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aaea:	e130      	b.n	800ad4e <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aafa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800aafe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ab02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ab06:	4013      	ands	r3, r2
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab14:	1c9a      	adds	r2, r3, #2
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	3b01      	subs	r3, #1
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab3a:	f003 0307 	and.w	r3, r3, #7
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d055      	beq.n	800abee <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d011      	beq.n	800ab72 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ab4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00b      	beq.n	800ab72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab68:	f043 0201 	orr.w	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d011      	beq.n	800aba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ab7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00b      	beq.n	800aba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab98:	f043 0204 	orr.w	r2, r3, #4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aba6:	f003 0304 	and.w	r3, r3, #4
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d011      	beq.n	800abd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800abae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00b      	beq.n	800abd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2204      	movs	r2, #4
 800abc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc8:	f043 0202 	orr.w	r2, r3, #2
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d008      	beq.n	800abee <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f040 80a9 	bne.w	800ad4e <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac04:	e853 3f00 	ldrex	r3, [r3]
 800ac08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ac0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac22:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ac26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ac2a:	e841 2300 	strex	r3, r2, [r1]
 800ac2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ac30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e2      	bne.n	800abfc <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ac46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac4c:	f023 0301 	bic.w	r3, r3, #1
 800ac50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3308      	adds	r3, #8
 800ac5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ac5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ac60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ac64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac66:	e841 2300 	strex	r3, r2, [r1]
 800ac6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ac6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e1      	bne.n	800ac36 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2220      	movs	r2, #32
 800ac76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a62      	ldr	r2, [pc, #392]	@ (800ae14 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d021      	beq.n	800acd4 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d01a      	beq.n	800acd4 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aca6:	e853 3f00 	ldrex	r3, [r3]
 800acaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800acac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800acc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acc2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800acc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acc8:	e841 2300 	strex	r3, r2, [r1]
 800accc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800acce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e4      	bne.n	800ac9e <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d132      	bne.n	800ad42 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf2:	f023 0310 	bic.w	r3, r3, #16
 800acf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad04:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad0c:	e841 2300 	strex	r3, r2, [r1]
 800ad10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d1e4      	bne.n	800ace2 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	f003 0310 	and.w	r3, r3, #16
 800ad22:	2b10      	cmp	r3, #16
 800ad24:	d103      	bne.n	800ad2e <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2210      	movs	r2, #16
 800ad2c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ad40:	e010      	b.n	800ad64 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	4798      	blx	r3
        break;
 800ad4c:	e00a      	b.n	800ad64 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad4e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d006      	beq.n	800ad64 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800ad56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad5a:	f003 0320 	and.w	r3, r3, #32
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f47f aec4 	bne.w	800aaec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad6a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad6e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d049      	beq.n	800ae0a <UART_RxISR_16BIT_FIFOEN+0x366>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad7c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d242      	bcs.n	800ae0a <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3308      	adds	r3, #8
 800ad8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	623b      	str	r3, [r7, #32]
   return(result);
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3308      	adds	r3, #8
 800ada4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ada8:	633a      	str	r2, [r7, #48]	@ 0x30
 800adaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e3      	bne.n	800ad84 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a16      	ldr	r2, [pc, #88]	@ (800ae18 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800adc0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	e853 3f00 	ldrex	r3, [r3]
 800adce:	60fb      	str	r3, [r7, #12]
   return(result);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f043 0320 	orr.w	r3, r3, #32
 800add6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ade4:	61fb      	str	r3, [r7, #28]
 800ade6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade8:	69b9      	ldr	r1, [r7, #24]
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	e841 2300 	strex	r3, r2, [r1]
 800adf0:	617b      	str	r3, [r7, #20]
   return(result);
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e4      	bne.n	800adc2 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800adf8:	e007      	b.n	800ae0a <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	699a      	ldr	r2, [r3, #24]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f042 0208 	orr.w	r2, r2, #8
 800ae08:	619a      	str	r2, [r3, #24]
}
 800ae0a:	bf00      	nop
 800ae0c:	37b8      	adds	r7, #184	@ 0xb8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	40008000 	.word	0x40008000
 800ae18:	0800a575 	.word	0x0800a575

0800ae1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d101      	bne.n	800ae6e <HAL_UARTEx_DisableFifoMode+0x16>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e027      	b.n	800aebe <HAL_UARTEx_DisableFifoMode+0x66>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2224      	movs	r2, #36	@ 0x24
 800ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 0201 	bic.w	r2, r2, #1
 800ae94:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2220      	movs	r2, #32
 800aeb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d101      	bne.n	800aee2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aede:	2302      	movs	r3, #2
 800aee0:	e02d      	b.n	800af3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2224      	movs	r2, #36	@ 0x24
 800aeee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f022 0201 	bic.w	r2, r2, #1
 800af08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f850 	bl	800afc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2220      	movs	r2, #32
 800af30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af56:	2b01      	cmp	r3, #1
 800af58:	d101      	bne.n	800af5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af5a:	2302      	movs	r3, #2
 800af5c:	e02d      	b.n	800afba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2201      	movs	r2, #1
 800af62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2224      	movs	r2, #36	@ 0x24
 800af6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f022 0201 	bic.w	r2, r2, #1
 800af84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	430a      	orrs	r2, r1
 800af98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f812 	bl	800afc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2220      	movs	r2, #32
 800afac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d108      	bne.n	800afe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afe4:	e031      	b.n	800b04a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afe6:	2308      	movs	r3, #8
 800afe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afea:	2308      	movs	r3, #8
 800afec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	0e5b      	lsrs	r3, r3, #25
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f003 0307 	and.w	r3, r3, #7
 800affc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	0f5b      	lsrs	r3, r3, #29
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 0307 	and.w	r3, r3, #7
 800b00c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	7b3a      	ldrb	r2, [r7, #12]
 800b012:	4911      	ldr	r1, [pc, #68]	@ (800b058 <UARTEx_SetNbDataToProcess+0x94>)
 800b014:	5c8a      	ldrb	r2, [r1, r2]
 800b016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b01a:	7b3a      	ldrb	r2, [r7, #12]
 800b01c:	490f      	ldr	r1, [pc, #60]	@ (800b05c <UARTEx_SetNbDataToProcess+0x98>)
 800b01e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b020:	fb93 f3f2 	sdiv	r3, r3, r2
 800b024:	b29a      	uxth	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	7b7a      	ldrb	r2, [r7, #13]
 800b030:	4909      	ldr	r1, [pc, #36]	@ (800b058 <UARTEx_SetNbDataToProcess+0x94>)
 800b032:	5c8a      	ldrb	r2, [r1, r2]
 800b034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b038:	7b7a      	ldrb	r2, [r7, #13]
 800b03a:	4908      	ldr	r1, [pc, #32]	@ (800b05c <UARTEx_SetNbDataToProcess+0x98>)
 800b03c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b03e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b04a:	bf00      	nop
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	0800b208 	.word	0x0800b208
 800b05c:	0800b210 	.word	0x0800b210

0800b060 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	edd3 7a07 	vldr	s15, [r3, #28]
 800b076:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	edd3 7a08 	vldr	s15, [r3, #32]
 800b080:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b090:	eeb1 7a67 	vneg.f32	s14, s15
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	edd3 7a08 	vldr	s15, [r3, #32]
 800b09a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b09e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a1a      	ldr	r2, [r3, #32]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	330c      	adds	r3, #12
 800b0ba:	220c      	movs	r2, #12
 800b0bc:	2100      	movs	r1, #0
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 f81c 	bl	800b0fc <memset>
  }

}
 800b0c4:	bf00      	nop
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	607b      	str	r3, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	817b      	strh	r3, [r7, #10]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	897a      	ldrh	r2, [r7, #10]
 800b0e2:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	893a      	ldrh	r2, [r7, #8]
 800b0e8:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	605a      	str	r2, [r3, #4]
}
 800b0f0:	bf00      	nop
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <memset>:
 800b0fc:	4402      	add	r2, r0
 800b0fe:	4603      	mov	r3, r0
 800b100:	4293      	cmp	r3, r2
 800b102:	d100      	bne.n	800b106 <memset+0xa>
 800b104:	4770      	bx	lr
 800b106:	f803 1b01 	strb.w	r1, [r3], #1
 800b10a:	e7f9      	b.n	800b100 <memset+0x4>

0800b10c <__errno>:
 800b10c:	4b01      	ldr	r3, [pc, #4]	@ (800b114 <__errno+0x8>)
 800b10e:	6818      	ldr	r0, [r3, #0]
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	2000020c 	.word	0x2000020c

0800b118 <__libc_init_array>:
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	4d0d      	ldr	r5, [pc, #52]	@ (800b150 <__libc_init_array+0x38>)
 800b11c:	4c0d      	ldr	r4, [pc, #52]	@ (800b154 <__libc_init_array+0x3c>)
 800b11e:	1b64      	subs	r4, r4, r5
 800b120:	10a4      	asrs	r4, r4, #2
 800b122:	2600      	movs	r6, #0
 800b124:	42a6      	cmp	r6, r4
 800b126:	d109      	bne.n	800b13c <__libc_init_array+0x24>
 800b128:	4d0b      	ldr	r5, [pc, #44]	@ (800b158 <__libc_init_array+0x40>)
 800b12a:	4c0c      	ldr	r4, [pc, #48]	@ (800b15c <__libc_init_array+0x44>)
 800b12c:	f000 f848 	bl	800b1c0 <_init>
 800b130:	1b64      	subs	r4, r4, r5
 800b132:	10a4      	asrs	r4, r4, #2
 800b134:	2600      	movs	r6, #0
 800b136:	42a6      	cmp	r6, r4
 800b138:	d105      	bne.n	800b146 <__libc_init_array+0x2e>
 800b13a:	bd70      	pop	{r4, r5, r6, pc}
 800b13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b140:	4798      	blx	r3
 800b142:	3601      	adds	r6, #1
 800b144:	e7ee      	b.n	800b124 <__libc_init_array+0xc>
 800b146:	f855 3b04 	ldr.w	r3, [r5], #4
 800b14a:	4798      	blx	r3
 800b14c:	3601      	adds	r6, #1
 800b14e:	e7f2      	b.n	800b136 <__libc_init_array+0x1e>
 800b150:	0800b220 	.word	0x0800b220
 800b154:	0800b220 	.word	0x0800b220
 800b158:	0800b220 	.word	0x0800b220
 800b15c:	0800b224 	.word	0x0800b224

0800b160 <memcpy>:
 800b160:	440a      	add	r2, r1
 800b162:	4291      	cmp	r1, r2
 800b164:	f100 33ff 	add.w	r3, r0, #4294967295
 800b168:	d100      	bne.n	800b16c <memcpy+0xc>
 800b16a:	4770      	bx	lr
 800b16c:	b510      	push	{r4, lr}
 800b16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b172:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b176:	4291      	cmp	r1, r2
 800b178:	d1f9      	bne.n	800b16e <memcpy+0xe>
 800b17a:	bd10      	pop	{r4, pc}

0800b17c <sqrtf>:
 800b17c:	b508      	push	{r3, lr}
 800b17e:	ed2d 8b02 	vpush	{d8}
 800b182:	eeb0 8a40 	vmov.f32	s16, s0
 800b186:	f000 f817 	bl	800b1b8 <__ieee754_sqrtf>
 800b18a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b192:	d60c      	bvs.n	800b1ae <sqrtf+0x32>
 800b194:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b1b4 <sqrtf+0x38>
 800b198:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a0:	d505      	bpl.n	800b1ae <sqrtf+0x32>
 800b1a2:	f7ff ffb3 	bl	800b10c <__errno>
 800b1a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b1aa:	2321      	movs	r3, #33	@ 0x21
 800b1ac:	6003      	str	r3, [r0, #0]
 800b1ae:	ecbd 8b02 	vpop	{d8}
 800b1b2:	bd08      	pop	{r3, pc}
 800b1b4:	00000000 	.word	0x00000000

0800b1b8 <__ieee754_sqrtf>:
 800b1b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <_init>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	bf00      	nop
 800b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c6:	bc08      	pop	{r3}
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	4770      	bx	lr

0800b1cc <_fini>:
 800b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ce:	bf00      	nop
 800b1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1d2:	bc08      	pop	{r3}
 800b1d4:	469e      	mov	lr, r3
 800b1d6:	4770      	bx	lr
