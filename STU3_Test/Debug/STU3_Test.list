
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a090  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a268  0800a268  0000b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a8  0800a2a8  0000c20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a2a8  0800a2a8  0000b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2b0  0800a2b0  0000c20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2b0  0800a2b0  0000b2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2b4  0800a2b4  0000b2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800a2b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e90  2000020c  0800a4c4  0000c20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000109c  0800a4c4  0000d09c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b382  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000308e  00000000  00000000  000275be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0002a650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001116  00000000  00000000  0002bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b66  00000000  00000000  0002cd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019392  00000000  00000000  0002f8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011557e  00000000  00000000  00048c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e1b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed0  00000000  00000000  0015e1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001640c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a250 	.word	0x0800a250

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	0800a250 	.word	0x0800a250

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000554:	213c      	movs	r1, #60	@ 0x3c
 8000556:	6838      	ldr	r0, [r7, #0]
 8000558:	f005 fcea 	bl	8005f30 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f04f 0200 	mov.w	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ac:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005be:	4293      	cmp	r3, r2
 80005c0:	dd05      	ble.n	80005ce <Encoder_Update+0x36>
        deltaRaw -= 60000;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 80005c8:	3b60      	subs	r3, #96	@ 0x60
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e008      	b.n	80005e0 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4a25      	ldr	r2, [pc, #148]	@ (8000668 <Encoder_Update+0xd0>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	da04      	bge.n	80005e0 <Encoder_Update+0x48>
        deltaRaw += 60000;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80005dc:	3360      	adds	r3, #96	@ 0x60
 80005de:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800066c <Encoder_Update+0xd4>
 80005f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80005f8:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 8000670 <Encoder_Update+0xd8>
 80005fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	edd3 7a05 	vldr	s15, [r3, #20]
 8000616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800061a:	ed97 7a00 	vldr	s14, [r7]
 800061e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	ed93 7a03 	vldr	s14, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a06 	vldr	s15, [r3, #24]
 8000634:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000638:	ed97 7a00 	vldr	s14, [r7]
 800063c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	edc3 7a04 	vstr	s15, [r3, #16]

    enc->lastRawPosition = rawPosition;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = enc->velocity;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68da      	ldr	r2, [r3, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	619a      	str	r2, [r3, #24]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	ffff8ad0 	.word	0xffff8ad0
 800066c:	40c90fda 	.word	0x40c90fda
 8000670:	463b8000 	.word	0x463b8000

08000674 <Encoder_GetPosition>:
void Encoder_setLimit(Encoder *enc, float limit)
{
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    return enc->position;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	ee07 3a90 	vmov	s15, r3
}
 8000684:	eeb0 0a67 	vmov.f32	s0, s15
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	ee07 3a90 	vmov	s15, r3
}
 80006a2:	eeb0 0a67 	vmov.f32	s0, s15
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	ee07 3a90 	vmov	s15, r3
}
 80006c0:	eeb0 0a67 	vmov.f32	s0, s15
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <modbus_1t5_Timeout+0x1c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2201      	movs	r2, #1
 80006de:	751a      	strb	r2, [r3, #20]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	20000228 	.word	0x20000228

080006f0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80006f8:	4b04      	ldr	r3, [pc, #16]	@ (800070c <modbus_3t5_Timeout+0x1c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2201      	movs	r2, #1
 80006fe:	755a      	strb	r2, [r3, #21]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	20000228 	.word	0x20000228

08000710 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <modbus_UART_Recived+0x60>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <modbus_UART_Recived+0x60>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 800072a:	1c59      	adds	r1, r3, #1
 800072c:	b289      	uxth	r1, r1
 800072e:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000732:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000736:	d210      	bcs.n	800075a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <modbus_UART_Recived+0x60>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <modbus_UART_Recived+0x60>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <modbus_UART_Recived+0x60>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	f007 fa05 	bl	8007b64 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800075a:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <modbus_UART_Recived+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000228 	.word	0x20000228

08000774 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800077e:	4a24      	ldr	r2, [pc, #144]	@ (8000810 <Modbus_init+0x9c>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <Modbus_init+0x9c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 800078c:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <Modbus_init+0x9c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4a20      	ldr	r2, [pc, #128]	@ (8000814 <Modbus_init+0xa0>)
 8000794:	2114      	movs	r1, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f006 f8da 	bl	8006950 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <Modbus_init+0x9c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000818 <Modbus_init+0xa4>)
 80007a4:	210e      	movs	r1, #14
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 f8d2 	bl	8006950 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80007ac:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <Modbus_init+0x9c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	4a1a      	ldr	r2, [pc, #104]	@ (800081c <Modbus_init+0xa8>)
 80007b4:	2103      	movs	r1, #3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f007 f91a 	bl	80079f0 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <Modbus_init+0x9c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68d8      	ldr	r0, [r3, #12]
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <Modbus_init+0x9c>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <Modbus_init+0x9c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007ce:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80007d2:	4413      	add	r3, r2
 80007d4:	3302      	adds	r3, #2
 80007d6:	2201      	movs	r2, #1
 80007d8:	4619      	mov	r1, r3
 80007da:	f007 f9c3 	bl	8007b64 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <Modbus_init+0x9c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10c      	bne.n	8000808 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <Modbus_init+0x9c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 ff8b 	bl	8005710 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <Modbus_init+0x9c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fa52 	bl	8005cac <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000228 	.word	0x20000228
 8000814:	080006d1 	.word	0x080006d1
 8000818:	080006f1 	.word	0x080006f1
 800081c:	08000711 	.word	0x08000711

08000820 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800082c:	23ff      	movs	r3, #255	@ 0xff
 800082e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000830:	23ff      	movs	r3, #255	@ 0xff
 8000832:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000834:	e013      	b.n	800085e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	7bbb      	ldrb	r3, [r7, #14]
 8000840:	4053      	eors	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000846:	4a10      	ldr	r2, [pc, #64]	@ (8000888 <CRC16+0x68>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	4053      	eors	r3, r2
 8000852:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <CRC16+0x6c>)
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800085e:	883b      	ldrh	r3, [r7, #0]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	803a      	strh	r2, [r7, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1e6      	bne.n	8000836 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	b21b      	sxth	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21b      	sxth	r3, r3
 8000878:	b29b      	uxth	r3, r3
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000100 	.word	0x20000100
 800088c:	20000000 	.word	0x20000000

08000890 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000896:	4b80      	ldr	r3, [pc, #512]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	7e1b      	ldrb	r3, [r3, #24]
 800089c:	3b01      	subs	r3, #1
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d80a      	bhi.n	80008b8 <Modbus_Protocal_Worker+0x28>
 80008a2:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <Modbus_Protocal_Worker+0x18>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008c3 	.word	0x080008c3
 80008ac:	08000a61 	.word	0x08000a61
 80008b0:	0800094d 	.word	0x0800094d
 80008b4:	08000973 	.word	0x08000973
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80008b8:	4b77      	ldr	r3, [pc, #476]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2201      	movs	r2, #1
 80008be:	761a      	strb	r2, [r3, #24]
		break;
 80008c0:	e0e6      	b.n	8000a90 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80008c2:	4b75      	ldr	r3, [pc, #468]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80008ce:	f000 f9d5 	bl	8000c7c <Modbus_Emission>
 80008d2:	e01c      	b.n	800090e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80008d4:	4b70      	ldr	r3, [pc, #448]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7d9b      	ldrb	r3, [r3, #22]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d017      	beq.n	800090e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80008de:	4b6e      	ldr	r3, [pc, #440]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2200      	movs	r2, #0
 80008e4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80008e6:	4b6c      	ldr	r3, [pc, #432]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80008ee:	4b6a      	ldr	r3, [pc, #424]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b67      	ldr	r3, [pc, #412]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 0201 	orr.w	r2, r2, #1
 8000904:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000906:	4b64      	ldr	r3, [pc, #400]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2203      	movs	r2, #3
 800090c:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800090e:	4b62      	ldr	r3, [pc, #392]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000918:	2b20      	cmp	r3, #32
 800091a:	f040 80b2 	bne.w	8000a82 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800091e:	4b5e      	ldr	r3, [pc, #376]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2200      	movs	r2, #0
 8000924:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000928:	4b5b      	ldr	r3, [pc, #364]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68d8      	ldr	r0, [r3, #12]
 800092e:	4b5a      	ldr	r3, [pc, #360]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b59      	ldr	r3, [pc, #356]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800093a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800093e:	4413      	add	r3, r2
 8000940:	3302      	adds	r3, #2
 8000942:	2201      	movs	r2, #1
 8000944:	4619      	mov	r1, r3
 8000946:	f007 f90d 	bl	8007b64 <HAL_UART_Receive_IT>
		}
		break;
 800094a:	e09a      	b.n	8000a82 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800094c:	4b52      	ldr	r3, [pc, #328]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	7d1b      	ldrb	r3, [r3, #20]
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 8097 	beq.w	8000a86 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000958:	4b4f      	ldr	r3, [pc, #316]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2200      	movs	r2, #0
 800095e:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000960:	4b4d      	ldr	r3, [pc, #308]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	22fe      	movs	r2, #254	@ 0xfe
 8000966:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000968:	4b4b      	ldr	r3, [pc, #300]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2204      	movs	r2, #4
 800096e:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000970:	e089      	b.n	8000a86 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000972:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	7d9b      	ldrb	r3, [r3, #22]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d009      	beq.n	8000990 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 800097c:	4b46      	ldr	r3, [pc, #280]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000988:	4b43      	ldr	r3, [pc, #268]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	22ff      	movs	r2, #255	@ 0xff
 800098e:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000990:	4b41      	ldr	r3, [pc, #260]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000998:	f113 0f02 	cmn.w	r3, #2
 800099c:	d150      	bne.n	8000a40 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800099e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80009a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80009ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80009b6:	3b02      	subs	r3, #2
 80009b8:	4619      	mov	r1, r3
 80009ba:	4610      	mov	r0, r2
 80009bc:	f7ff ff30 	bl	8000820 <CRC16>
 80009c0:	4603      	mov	r3, r0
 80009c2:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80009c4:	793a      	ldrb	r2, [r7, #4]
 80009c6:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80009c8:	6819      	ldr	r1, [r3, #0]
 80009ca:	4b33      	ldr	r3, [pc, #204]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80009d2:	3b02      	subs	r3, #2
 80009d4:	440b      	add	r3, r1
 80009d6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80009da:	429a      	cmp	r2, r3
 80009dc:	d10c      	bne.n	80009f8 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80009de:	797a      	ldrb	r2, [r7, #5]
 80009e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80009ec:	3b01      	subs	r3, #1
 80009ee:	440b      	add	r3, r1
 80009f0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d004      	beq.n	8000a02 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	22ff      	movs	r2, #255	@ 0xff
 80009fe:	75da      	strb	r2, [r3, #23]
				break;
 8000a00:	e046      	b.n	8000a90 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000a02:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000a0a:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d113      	bne.n	8000a3c <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000a14:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000a24:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a2e:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000a30:	461a      	mov	r2, r3
 8000a32:	f009 fbff 	bl	800a234 <memcpy>

			//execute command
			Modbus_frame_response();
 8000a36:	f000 f909 	bl	8000c4c <Modbus_frame_response>
 8000a3a:	e001      	b.n	8000a40 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000a3c:	bf00      	nop
					}
		break;


	}
}
 8000a3e:	e027      	b.n	8000a90 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	7d5b      	ldrb	r3, [r3, #21]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d01f      	beq.n	8000a8a <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 f94f 	bl	8007cfc <HAL_UART_AbortReceive>
		break;
 8000a5e:	e014      	b.n	8000a8a <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a60:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6a:	2b20      	cmp	r3, #32
 8000a6c:	d10f      	bne.n	8000a8e <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <Modbus_Protocal_Worker+0x208>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	761a      	strb	r2, [r3, #24]
		break;
 8000a80:	e005      	b.n	8000a8e <Modbus_Protocal_Worker+0x1fe>
		break;
 8000a82:	bf00      	nop
 8000a84:	e004      	b.n	8000a90 <Modbus_Protocal_Worker+0x200>
		break;
 8000a86:	bf00      	nop
 8000a88:	e002      	b.n	8000a90 <Modbus_Protocal_Worker+0x200>
		break;
 8000a8a:	bf00      	nop
 8000a8c:	e000      	b.n	8000a90 <Modbus_Protocal_Worker+0x200>
		break;
 8000a8e:	bf00      	nop
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000228 	.word	0x20000228

08000a9c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	7e9b      	ldrb	r3, [r3, #26]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4a1a      	ldr	r2, [pc, #104]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	7ed2      	ldrb	r2, [r2, #27]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d903      	bls.n	8000aca <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f000 f8a0 	bl	8000c08 <ModbusErrorReply>
			 return;
 8000ac8:	e023      	b.n	8000b12 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6859      	ldr	r1, [r3, #4]
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	440b      	add	r3, r1
 8000ada:	7f12      	ldrb	r2, [r2, #28]
 8000adc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6859      	ldr	r1, [r3, #4]
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	440b      	add	r3, r1
 8000aee:	7f52      	ldrb	r2, [r2, #29]
 8000af0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000b00:	2208      	movs	r2, #8
 8000b02:	4619      	mov	r1, r3
 8000b04:	f009 fb96 	bl	800a234 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <modbusWrite1Register+0x7c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2205      	movs	r2, #5
 8000b0e:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000228 	.word	0x20000228

08000b1c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000b22:	4b38      	ldr	r3, [pc, #224]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	7f1b      	ldrb	r3, [r3, #28]
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	4a35      	ldr	r2, [pc, #212]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	7f52      	ldrb	r2, [r2, #29]
 8000b32:	4413      	add	r3, r2
 8000b34:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000b36:	4b33      	ldr	r3, [pc, #204]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	7e9b      	ldrb	r3, [r3, #26]
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4a30      	ldr	r2, [pc, #192]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	7ed2      	ldrb	r2, [r2, #27]
 8000b46:	4413      	add	r3, r2
 8000b48:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <modbusRead1Register+0x3a>
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	2b7d      	cmp	r3, #125	@ 0x7d
 8000b54:	d903      	bls.n	8000b5e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000b56:	2003      	movs	r0, #3
 8000b58:	f000 f856 	bl	8000c08 <ModbusErrorReply>
		 return;
 8000b5c:	e04e      	b.n	8000bfc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000b5e:	88ba      	ldrh	r2, [r7, #4]
 8000b60:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d808      	bhi.n	8000b7c <modbusRead1Register+0x60>
 8000b6a:	88ba      	ldrh	r2, [r7, #4]
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4413      	add	r3, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d903      	bls.n	8000b84 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f000 f843 	bl	8000c08 <ModbusErrorReply>
		 return;
 8000b82:	e03b      	b.n	8000bfc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2203      	movs	r2, #3
 8000b8a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	0052      	lsls	r2, r2, #1
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000b9e:	2400      	movs	r4, #0
 8000ba0:	e020      	b.n	8000be4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	4423      	add	r3, r4
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	18d1      	adds	r1, r2, r3
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	1c63      	adds	r3, r4, #1
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	7849      	ldrb	r1, [r1, #1]
 8000bba:	4413      	add	r3, r2
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	4423      	add	r3, r4
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	18d1      	adds	r1, r2, r3
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	0063      	lsls	r3, r4, #1
 8000bd6:	3303      	adds	r3, #3
 8000bd8:	7809      	ldrb	r1, [r1, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	460a      	mov	r2, r1
 8000bde:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000be2:	3401      	adds	r4, #1
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	429c      	cmp	r4, r3
 8000be8:	dbdb      	blt.n	8000ba2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	3301      	adds	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <modbusRead1Register+0xe8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	0052      	lsls	r2, r2, #1
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000228 	.word	0x20000228

08000c08 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <ModbusErrorReply+0x40>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	7e5a      	ldrb	r2, [r3, #25]
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <ModbusErrorReply+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <ModbusErrorReply+0x40>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <ModbusErrorReply+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2202      	movs	r2, #2
 8000c36:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000228 	.word	0x20000228

08000c4c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <Modbus_frame_response+0x2c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	7e5b      	ldrb	r3, [r3, #25]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d004      	beq.n	8000c64 <Modbus_frame_response+0x18>
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d105      	bne.n	8000c6a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000c5e:	f7ff ff1d 	bl	8000a9c <modbusWrite1Register>
		break;
 8000c62:	e006      	b.n	8000c72 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000c64:	f7ff ff5a 	bl	8000b1c <modbusRead1Register>
		break;
 8000c68:	e003      	b.n	8000c72 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ffcc 	bl	8000c08 <ModbusErrorReply>
		break;
 8000c70:	bf00      	nop

	}
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000228 	.word	0x20000228

08000c7c <Modbus_Emission>:

void Modbus_Emission()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000c82:	4b3c      	ldr	r3, [pc, #240]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8c:	2b20      	cmp	r3, #32
 8000c8e:	d15d      	bne.n	8000d4c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000c90:	4b38      	ldr	r3, [pc, #224]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b37      	ldr	r3, [pc, #220]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000c9e:	4b35      	ldr	r3, [pc, #212]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000ca6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ca8:	4b32      	ldr	r3, [pc, #200]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000cb0:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f009 fabb 	bl	800a234 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	3203      	adds	r2, #3
 8000cce:	b292      	uxth	r2, r2
 8000cd0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000cd4:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000cdc:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000ce4:	3b02      	subs	r3, #2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4610      	mov	r0, r2
 8000cea:	f7ff fd99 	bl	8000820 <CRC16>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000cfe:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000d00:	7939      	ldrb	r1, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	460a      	mov	r2, r1
 8000d06:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000d16:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000d18:	7979      	ldrb	r1, [r7, #5]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2c:	2b20      	cmp	r3, #32
 8000d2e:	d10d      	bne.n	8000d4c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000d30:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000d42:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000d46:	461a      	mov	r2, r3
 8000d48:	f006 ff58 	bl	8007bfc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000d54:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <Modbus_Emission+0xf8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2202      	movs	r2, #2
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000228 	.word	0x20000228

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f001 fa94 	bl	80022aa <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f915 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f000 fdef 	bl	8001968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8a:	f000 fdc3 	bl	8001914 <MX_DMA_Init>
  MX_TIM3_Init();
 8000d8e:	f000 fadb 	bl	8001348 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d92:	f000 f959 	bl	8001048 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d96:	f000 fa35 	bl	8001204 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d9a:	f000 fa87 	bl	80012ac <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d9e:	f000 fb29 	bl	80013f4 <MX_TIM4_Init>
  MX_TIM20_Init();
 8000da2:	f000 fcad 	bl	8001700 <MX_TIM20_Init>
  MX_TIM8_Init();
 8000da6:	f000 fb7b 	bl	80014a0 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000daa:	f000 fc29 	bl	8001600 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000dae:	f000 fd63 	bl	8001878 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000db2:	f000 f9c1 	bl	8001138 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8000db6:	4862      	ldr	r0, [pc, #392]	@ (8000f40 <main+0x1c8>)
 8000db8:	f004 fc3a 	bl	8005630 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8000dbc:	4861      	ldr	r0, [pc, #388]	@ (8000f44 <main+0x1cc>)
 8000dbe:	f004 fc37 	bl	8005630 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000dc2:	210c      	movs	r1, #12
 8000dc4:	485f      	ldr	r0, [pc, #380]	@ (8000f44 <main+0x1cc>)
 8000dc6:	f004 fdf7 	bl	80059b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	485c      	ldr	r0, [pc, #368]	@ (8000f40 <main+0x1c8>)
 8000dce:	f004 fdf3 	bl	80059b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	485a      	ldr	r0, [pc, #360]	@ (8000f40 <main+0x1c8>)
 8000dd6:	f004 fdef 	bl	80059b8 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8000dda:	495b      	ldr	r1, [pc, #364]	@ (8000f48 <main+0x1d0>)
 8000ddc:	485b      	ldr	r0, [pc, #364]	@ (8000f4c <main+0x1d4>)
 8000dde:	f7ff fbb1 	bl	8000544 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8000de2:	495b      	ldr	r1, [pc, #364]	@ (8000f50 <main+0x1d8>)
 8000de4:	485b      	ldr	r0, [pc, #364]	@ (8000f54 <main+0x1dc>)
 8000de6:	f7ff fbad 	bl	8000544 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8000dea:	485b      	ldr	r0, [pc, #364]	@ (8000f58 <main+0x1e0>)
 8000dec:	f001 fe96 	bl	8002b1c <HAL_ADC_Start>

	int lastTick = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000df4:	213c      	movs	r1, #60	@ 0x3c
 8000df6:	4856      	ldr	r0, [pc, #344]	@ (8000f50 <main+0x1d8>)
 8000df8:	f005 f89a 	bl	8005f30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000dfc:	213c      	movs	r1, #60	@ 0x3c
 8000dfe:	4852      	ldr	r0, [pc, #328]	@ (8000f48 <main+0x1d0>)
 8000e00:	f005 f896 	bl	8005f30 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8000e04:	4b55      	ldr	r3, [pc, #340]	@ (8000f5c <main+0x1e4>)
 8000e06:	4a56      	ldr	r2, [pc, #344]	@ (8000f60 <main+0x1e8>)
 8000e08:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8000e0a:	4b54      	ldr	r3, [pc, #336]	@ (8000f5c <main+0x1e4>)
 8000e0c:	4a55      	ldr	r2, [pc, #340]	@ (8000f64 <main+0x1ec>)
 8000e0e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8000e10:	4b52      	ldr	r3, [pc, #328]	@ (8000f5c <main+0x1e4>)
 8000e12:	2215      	movs	r2, #21
 8000e14:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8000e16:	4b51      	ldr	r3, [pc, #324]	@ (8000f5c <main+0x1e4>)
 8000e18:	22c8      	movs	r2, #200	@ 0xc8
 8000e1a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8000e1c:	4952      	ldr	r1, [pc, #328]	@ (8000f68 <main+0x1f0>)
 8000e1e:	484f      	ldr	r0, [pc, #316]	@ (8000f5c <main+0x1e4>)
 8000e20:	f7ff fca8 	bl	8000774 <Modbus_init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 8000e24:	4b51      	ldr	r3, [pc, #324]	@ (8000f6c <main+0x1f4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2140      	movs	r1, #64	@ 0x40
 8000e2e:	4850      	ldr	r0, [pc, #320]	@ (8000f70 <main+0x1f8>)
 8000e30:	f003 fb3a 	bl	80044a8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2102      	movs	r1, #2
 8000e38:	484e      	ldr	r0, [pc, #312]	@ (8000f74 <main+0x1fc>)
 8000e3a:	f003 fb35 	bl	80044a8 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f78 <main+0x200>)
 8000e40:	881a      	ldrh	r2, [r3, #0]
 8000e42:	4b3f      	ldr	r3, [pc, #252]	@ (8000f40 <main+0x1c8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_ADC_Start(&hadc1);
 8000e48:	4843      	ldr	r0, [pc, #268]	@ (8000f58 <main+0x1e0>)
 8000e4a:	f001 fe67 	bl	8002b1c <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8000e4e:	484b      	ldr	r0, [pc, #300]	@ (8000f7c <main+0x204>)
 8000e50:	f001 fe64 	bl	8002b1c <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 8000e54:	4840      	ldr	r0, [pc, #256]	@ (8000f58 <main+0x1e0>)
 8000e56:	f001 ff45 	bl	8002ce4 <HAL_ADC_GetValue>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b48      	ldr	r3, [pc, #288]	@ (8000f80 <main+0x208>)
 8000e60:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 8000e62:	4846      	ldr	r0, [pc, #280]	@ (8000f7c <main+0x204>)
 8000e64:	f001 ff3e 	bl	8002ce4 <HAL_ADC_GetValue>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b45      	ldr	r3, [pc, #276]	@ (8000f84 <main+0x20c>)
 8000e6e:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000e70:	4b37      	ldr	r3, [pc, #220]	@ (8000f50 <main+0x1d8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e76:	4a44      	ldr	r2, [pc, #272]	@ (8000f88 <main+0x210>)
 8000e78:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8000e7a:	4b33      	ldr	r3, [pc, #204]	@ (8000f48 <main+0x1d0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e80:	4a42      	ldr	r2, [pc, #264]	@ (8000f8c <main+0x214>)
 8000e82:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8000e84:	f7ff fd04 	bl	8000890 <Modbus_Protocal_Worker>
		//modbus_r_position(&hmodbus,7);
		hmodbus.RegisterAddress[0x00].U16 = 22881;
 8000e88:	4b34      	ldr	r3, [pc, #208]	@ (8000f5c <main+0x1e4>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000e90:	801a      	strh	r2, [r3, #0]
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 8000e92:	f001 fa6f 	bl	8002374 <HAL_GetTick>
 8000e96:	60b8      	str	r0, [r7, #8]
		float dt = (currentTick - lastTick) / 1000.0f;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ea6:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8000f90 <main+0x218>
 8000eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eae:	edc7 7a01 	vstr	s15, [r7, #4]
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.01f) {
 8000eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000f94 <main+0x21c>
 8000eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec2:	db3b      	blt.n	8000f3c <main+0x1c4>
			Encoder_Update(&encoder1, dt);
 8000ec4:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ec8:	4820      	ldr	r0, [pc, #128]	@ (8000f4c <main+0x1d4>)
 8000eca:	f7ff fb65 	bl	8000598 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8000ece:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ed2:	4820      	ldr	r0, [pc, #128]	@ (8000f54 <main+0x1dc>)
 8000ed4:	f7ff fb60 	bl	8000598 <Encoder_Update>
			lastTick = currentTick;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60fb      	str	r3, [r7, #12]

			p1 = Encoder_GetPosition(&encoder1);
 8000edc:	481b      	ldr	r0, [pc, #108]	@ (8000f4c <main+0x1d4>)
 8000ede:	f7ff fbc9 	bl	8000674 <Encoder_GetPosition>
 8000ee2:	eef0 7a40 	vmov.f32	s15, s0
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <main+0x220>)
 8000ee8:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8000eec:	4817      	ldr	r0, [pc, #92]	@ (8000f4c <main+0x1d4>)
 8000eee:	f7ff fbd0 	bl	8000692 <Encoder_GetVelocity>
 8000ef2:	eef0 7a40 	vmov.f32	s15, s0
 8000ef6:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <main+0x224>)
 8000ef8:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8000efc:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <main+0x1d4>)
 8000efe:	f7ff fbd7 	bl	80006b0 <Encoder_GetAcceleration>
 8000f02:	eef0 7a40 	vmov.f32	s15, s0
 8000f06:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <main+0x228>)
 8000f08:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8000f0c:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <main+0x1dc>)
 8000f0e:	f7ff fbb1 	bl	8000674 <Encoder_GetPosition>
 8000f12:	eef0 7a40 	vmov.f32	s15, s0
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <main+0x22c>)
 8000f18:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8000f1c:	480d      	ldr	r0, [pc, #52]	@ (8000f54 <main+0x1dc>)
 8000f1e:	f7ff fbb8 	bl	8000692 <Encoder_GetVelocity>
 8000f22:	eef0 7a40 	vmov.f32	s15, s0
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <main+0x230>)
 8000f28:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <main+0x1dc>)
 8000f2e:	f7ff fbbf 	bl	80006b0 <Encoder_GetAcceleration>
 8000f32:	eef0 7a40 	vmov.f32	s15, s0
 8000f36:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <main+0x234>)
 8000f38:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
 8000f3c:	e772      	b.n	8000e24 <main+0xac>
 8000f3e:	bf00      	nop
 8000f40:	200007cc 	.word	0x200007cc
 8000f44:	20000634 	.word	0x20000634
 8000f48:	20000568 	.word	0x20000568
 8000f4c:	200009c4 	.word	0x200009c4
 8000f50:	2000049c 	.word	0x2000049c
 8000f54:	200009e0 	.word	0x200009e0
 8000f58:	2000022c 	.word	0x2000022c
 8000f5c:	20000a24 	.word	0x20000a24
 8000f60:	20000898 	.word	0x20000898
 8000f64:	20000700 	.word	0x20000700
 8000f68:	20000efc 	.word	0x20000efc
 8000f6c:	20001090 	.word	0x20001090
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000400 	.word	0x48000400
 8000f78:	2000108c 	.word	0x2000108c
 8000f7c:	20000298 	.word	0x20000298
 8000f80:	20000a20 	.word	0x20000a20
 8000f84:	20000a22 	.word	0x20000a22
 8000f88:	200009fc 	.word	0x200009fc
 8000f8c:	20000a00 	.word	0x20000a00
 8000f90:	447a0000 	.word	0x447a0000
 8000f94:	3c23d70a 	.word	0x3c23d70a
 8000f98:	20000a04 	.word	0x20000a04
 8000f9c:	20000a08 	.word	0x20000a08
 8000fa0:	20000a0c 	.word	0x20000a0c
 8000fa4:	20000a10 	.word	0x20000a10
 8000fa8:	20000a14 	.word	0x20000a14
 8000fac:	20000a18 	.word	0x20000a18

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	2238      	movs	r2, #56	@ 0x38
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f009 f90c 	bl	800a1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f003 fa98 	bl	8004508 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe2:	2340      	movs	r3, #64	@ 0x40
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fea:	2302      	movs	r3, #2
 8000fec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ff2:	2355      	movs	r3, #85	@ 0x55
 8000ff4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fb32 	bl	8004670 <HAL_RCC_OscConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001012:	f000 fdc1 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001016:	230f      	movs	r3, #15
 8001018:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101a:	2303      	movs	r3, #3
 800101c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2104      	movs	r1, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fe30 	bl	8004c94 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800103a:	f000 fdad 	bl	8001b98 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3750      	adds	r7, #80	@ 0x50
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	@ 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f009 f8bb 	bl	800a1dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <MX_ADC1_Init+0xe8>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <MX_ADC1_Init+0xe8>)
 8001070:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <MX_ADC1_Init+0xe8>)
 8001090:	2204      	movs	r2, #4
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	4817      	ldr	r0, [pc, #92]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010d2:	f001 fb67 	bl	80027a4 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010dc:	f000 fd5c 	bl	8001b98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	@ (8001130 <MX_ADC1_Init+0xe8>)
 80010ec:	f002 fb04 	bl	80036f8 <HAL_ADCEx_MultiModeConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010f6:	f000 fd4f 	bl	8001b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_ADC1_Init+0xec>)
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	2306      	movs	r3, #6
 8001100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001106:	237f      	movs	r3, #127	@ 0x7f
 8001108:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110a:	2304      	movs	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <MX_ADC1_Init+0xe8>)
 8001118:	f001 fdf2 	bl	8002d00 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001122:	f000 fd39 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	@ 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000022c 	.word	0x2000022c
 8001134:	04300002 	.word	0x04300002

08001138 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f009 f849 	bl	800a1dc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800114a:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 800114c:	4a2b      	ldr	r2, [pc, #172]	@ (80011fc <MX_ADC2_Init+0xc4>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001150:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 8001152:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001156:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001164:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001170:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 8001172:	2204      	movs	r2, #4
 8001174:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 8001184:	2201      	movs	r2, #1
 8001186:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011b2:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 80011b4:	f001 faf6 	bl	80027a4 <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011be:	f000 fceb 	bl	8001b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_ADC2_Init+0xc8>)
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	@ 0x7f
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <MX_ADC2_Init+0xc0>)
 80011e0:	f001 fd8e 	bl	8002d00 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011ea:	f000 fcd5 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000298 	.word	0x20000298
 80011fc:	50000100 	.word	0x50000100
 8001200:	08600004 	.word	0x08600004

08001204 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 8001224:	4a20      	ldr	r2, [pc, #128]	@ (80012a8 <MX_TIM1_Init+0xa4>)
 8001226:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001228:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 8001236:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800123a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800124e:	4815      	ldr	r0, [pc, #84]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 8001250:	f004 f98a 	bl	8005568 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800125a:	f000 fc9d 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	480e      	ldr	r0, [pc, #56]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 800126c:	f005 f9f6 	bl	800665c <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001276:	f000 fc8f 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <MX_TIM1_Init+0xa0>)
 800128c:	f006 f9d6 	bl	800763c <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001296:	f000 fc7f 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000304 	.word	0x20000304
 80012a8:	40012c00 	.word	0x40012c00

080012ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <MX_TIM2_Init+0x98>)
 80012cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_TIM2_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_TIM2_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <MX_TIM2_Init+0x98>)
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_TIM2_Init+0x98>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <MX_TIM2_Init+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f2:	4814      	ldr	r0, [pc, #80]	@ (8001344 <MX_TIM2_Init+0x98>)
 80012f4:	f004 f938 	bl	8005568 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012fe:	f000 fc4b 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <MX_TIM2_Init+0x98>)
 8001310:	f005 f9a4 	bl	800665c <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800131a:	f000 fc3d 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_TIM2_Init+0x98>)
 800132c:	f006 f986 	bl	800763c <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001336:	f000 fc2f 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200003d0 	.word	0x200003d0

08001348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	@ 0x30
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2224      	movs	r2, #36	@ 0x24
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f008 ff40 	bl	800a1dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <MX_TIM3_Init+0xa4>)
 8001368:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <MX_TIM3_Init+0xa8>)
 800136a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_TIM3_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <MX_TIM3_Init+0xa4>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_TIM3_Init+0xa4>)
 800137a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800137e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_TIM3_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_TIM3_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138c:	2303      	movs	r3, #3
 800138e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_TIM3_Init+0xa4>)
 80013b8:	f004 fd06 	bl	8005dc8 <HAL_TIM_Encoder_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013c2:	f000 fbe9 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	@ (80013ec <MX_TIM3_Init+0xa4>)
 80013d4:	f006 f932 	bl	800763c <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013de:	f000 fbdb 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	@ 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000049c 	.word	0x2000049c
 80013f0:	40000400 	.word	0x40000400

080013f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	@ 0x30
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2224      	movs	r2, #36	@ 0x24
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f008 feea 	bl	800a1dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001414:	4a21      	ldr	r2, [pc, #132]	@ (800149c <MX_TIM4_Init+0xa8>)
 8001416:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <MX_TIM4_Init+0xa4>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001426:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800142a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_TIM4_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001438:	2303      	movs	r3, #3
 800143a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001440:	2301      	movs	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001464:	f004 fcb0 	bl	8005dc8 <HAL_TIM_Encoder_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800146e:	f000 fb93 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001480:	f006 f8dc 	bl	800763c <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800148a:	f000 fb85 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	@ 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000568 	.word	0x20000568
 800149c:	40000800 	.word	0x40000800

080014a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09c      	sub	sp, #112	@ 0x70
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2234      	movs	r2, #52	@ 0x34
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f008 fe7e 	bl	800a1dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014e0:	4b45      	ldr	r3, [pc, #276]	@ (80015f8 <MX_TIM8_Init+0x158>)
 80014e2:	4a46      	ldr	r2, [pc, #280]	@ (80015fc <MX_TIM8_Init+0x15c>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014e6:	4b44      	ldr	r3, [pc, #272]	@ (80015f8 <MX_TIM8_Init+0x158>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <MX_TIM8_Init+0x158>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <MX_TIM8_Init+0x158>)
 80014f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b3f      	ldr	r3, [pc, #252]	@ (80015f8 <MX_TIM8_Init+0x158>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001500:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <MX_TIM8_Init+0x158>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <MX_TIM8_Init+0x158>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800150c:	483a      	ldr	r0, [pc, #232]	@ (80015f8 <MX_TIM8_Init+0x158>)
 800150e:	f004 f82b 	bl	8005568 <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001518:	f000 fb3e 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001520:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001526:	4619      	mov	r1, r3
 8001528:	4833      	ldr	r0, [pc, #204]	@ (80015f8 <MX_TIM8_Init+0x158>)
 800152a:	f005 f897 	bl	800665c <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001534:	f000 fb30 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001538:	482f      	ldr	r0, [pc, #188]	@ (80015f8 <MX_TIM8_Init+0x158>)
 800153a:	f004 f9cf 	bl	80058dc <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001544:	f000 fb28 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001554:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001558:	4619      	mov	r1, r3
 800155a:	4827      	ldr	r0, [pc, #156]	@ (80015f8 <MX_TIM8_Init+0x158>)
 800155c:	f006 f86e 	bl	800763c <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001566:	f000 fb17 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156a:	2360      	movs	r3, #96	@ 0x60
 800156c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001572:	2300      	movs	r3, #0
 8001574:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001586:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800158a:	220c      	movs	r2, #12
 800158c:	4619      	mov	r1, r3
 800158e:	481a      	ldr	r0, [pc, #104]	@ (80015f8 <MX_TIM8_Init+0x158>)
 8001590:	f004 ff50 	bl	8006434 <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800159a:	f000 fafd 	bl	8001b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <MX_TIM8_Init+0x158>)
 80015dc:	f006 f8c4 	bl	8007768 <HAL_TIMEx_ConfigBreakDeadTime>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80015e6:	f000 fad7 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015ea:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <MX_TIM8_Init+0x158>)
 80015ec:	f000 fc9a 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 80015f0:	bf00      	nop
 80015f2:	3770      	adds	r7, #112	@ 0x70
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000634 	.word	0x20000634
 80015fc:	40013400 	.word	0x40013400

08001600 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b094      	sub	sp, #80	@ 0x50
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001606:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2234      	movs	r2, #52	@ 0x34
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f008 fddb 	bl	800a1dc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 8001628:	4a34      	ldr	r2, [pc, #208]	@ (80016fc <MX_TIM16_Init+0xfc>)
 800162a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800162c:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 800162e:	22a9      	movs	r2, #169	@ 0xa9
 8001630:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8001638:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 800163a:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 800163e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001646:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001652:	4829      	ldr	r0, [pc, #164]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 8001654:	f003 ff88 	bl	8005568 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800165e:	f000 fa9b 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001662:	4825      	ldr	r0, [pc, #148]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 8001664:	f004 f8cc 	bl	8005800 <HAL_TIM_OC_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800166e:	f000 fa93 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001672:	2108      	movs	r1, #8
 8001674:	4820      	ldr	r0, [pc, #128]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 8001676:	f004 fab1 	bl	8005bdc <HAL_TIM_OnePulse_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001680:	f000 fa8a 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001684:	2310      	movs	r3, #16
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8001688:	f240 5399 	movw	r3, #1433	@ 0x599
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168e:	2300      	movs	r3, #0
 8001690:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001692:	2300      	movs	r3, #0
 8001694:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016a6:	2200      	movs	r2, #0
 80016a8:	4619      	mov	r1, r3
 80016aa:	4813      	ldr	r0, [pc, #76]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 80016ac:	f004 fe48 	bl	8006340 <HAL_TIM_OC_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 80016b6:	f000 fa6f 	bl	8001b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <MX_TIM16_Init+0xf8>)
 80016e2:	f006 f841 	bl	8007768 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 80016ec:	f000 fa54 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3750      	adds	r7, #80	@ 0x50
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000700 	.word	0x20000700
 80016fc:	40014400 	.word	0x40014400

08001700 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b09c      	sub	sp, #112	@ 0x70
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001720:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2234      	movs	r2, #52	@ 0x34
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f008 fd4e 	bl	800a1dc <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001740:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <MX_TIM20_Init+0x170>)
 8001742:	4a4c      	ldr	r2, [pc, #304]	@ (8001874 <MX_TIM20_Init+0x174>)
 8001744:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001746:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <MX_TIM20_Init+0x170>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <MX_TIM20_Init+0x170>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <MX_TIM20_Init+0x170>)
 8001754:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001758:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b45      	ldr	r3, [pc, #276]	@ (8001870 <MX_TIM20_Init+0x170>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001760:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <MX_TIM20_Init+0x170>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b42      	ldr	r3, [pc, #264]	@ (8001870 <MX_TIM20_Init+0x170>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800176c:	4840      	ldr	r0, [pc, #256]	@ (8001870 <MX_TIM20_Init+0x170>)
 800176e:	f003 fefb 	bl	8005568 <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001778:	f000 fa0e 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001780:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001782:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001786:	4619      	mov	r1, r3
 8001788:	4839      	ldr	r0, [pc, #228]	@ (8001870 <MX_TIM20_Init+0x170>)
 800178a:	f004 ff67 	bl	800665c <HAL_TIM_ConfigClockSource>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001794:	f000 fa00 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001798:	4835      	ldr	r0, [pc, #212]	@ (8001870 <MX_TIM20_Init+0x170>)
 800179a:	f004 f89f 	bl	80058dc <HAL_TIM_PWM_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80017a4:	f000 f9f8 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80017b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017b8:	4619      	mov	r1, r3
 80017ba:	482d      	ldr	r0, [pc, #180]	@ (8001870 <MX_TIM20_Init+0x170>)
 80017bc:	f005 ff3e 	bl	800763c <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 80017c6:	f000 f9e7 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ca:	2360      	movs	r3, #96	@ 0x60
 80017cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d6:	2300      	movs	r3, #0
 80017d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4820      	ldr	r0, [pc, #128]	@ (8001870 <MX_TIM20_Init+0x170>)
 80017f0:	f004 fe20 	bl	8006434 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 80017fa:	f000 f9cd 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001802:	2208      	movs	r2, #8
 8001804:	4619      	mov	r1, r3
 8001806:	481a      	ldr	r0, [pc, #104]	@ (8001870 <MX_TIM20_Init+0x170>)
 8001808:	f004 fe14 	bl	8006434 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001812:	f000 f9c1 	bl	8001b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800182a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800182e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800183c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001846:	2300      	movs	r3, #0
 8001848:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4807      	ldr	r0, [pc, #28]	@ (8001870 <MX_TIM20_Init+0x170>)
 8001854:	f005 ff88 	bl	8007768 <HAL_TIMEx_ConfigBreakDeadTime>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 800185e:	f000 f99b 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001862:	4803      	ldr	r0, [pc, #12]	@ (8001870 <MX_TIM20_Init+0x170>)
 8001864:	f000 fb5e 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001868:	bf00      	nop
 800186a:	3770      	adds	r7, #112	@ 0x70
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200007cc 	.word	0x200007cc
 8001874:	40015000 	.word	0x40015000

08001878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800187c:	4b23      	ldr	r3, [pc, #140]	@ (800190c <MX_USART2_UART_Init+0x94>)
 800187e:	4a24      	ldr	r2, [pc, #144]	@ (8001910 <MX_USART2_UART_Init+0x98>)
 8001880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001882:	4b22      	ldr	r3, [pc, #136]	@ (800190c <MX_USART2_UART_Init+0x94>)
 8001884:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800188a:	4b20      	ldr	r3, [pc, #128]	@ (800190c <MX_USART2_UART_Init+0x94>)
 800188c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001890:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_USART2_UART_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_USART2_UART_Init+0x94>)
 800189a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800189e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b19      	ldr	r3, [pc, #100]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b2:	4b16      	ldr	r3, [pc, #88]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018be:	4b13      	ldr	r3, [pc, #76]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c4:	4811      	ldr	r0, [pc, #68]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018c6:	f006 f833 	bl	8007930 <HAL_UART_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80018d0:	f000 f962 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d4:	2100      	movs	r1, #0
 80018d6:	480d      	ldr	r0, [pc, #52]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018d8:	f008 fbb5 	bl	800a046 <HAL_UARTEx_SetTxFifoThreshold>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80018e2:	f000 f959 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4808      	ldr	r0, [pc, #32]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018ea:	f008 fbea 	bl	800a0c2 <HAL_UARTEx_SetRxFifoThreshold>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80018f4:	f000 f950 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_USART2_UART_Init+0x94>)
 80018fa:	f008 fb6b 	bl	8009fd4 <HAL_UARTEx_DisableFifoMode>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001904:	f000 f948 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000898 	.word	0x20000898
 8001910:	40004400 	.word	0x40004400

08001914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <MX_DMA_Init+0x50>)
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	4a11      	ldr	r2, [pc, #68]	@ (8001964 <MX_DMA_Init+0x50>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6493      	str	r3, [r2, #72]	@ 0x48
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <MX_DMA_Init+0x50>)
 8001928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_DMA_Init+0x50>)
 8001934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001936:	4a0b      	ldr	r2, [pc, #44]	@ (8001964 <MX_DMA_Init+0x50>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6493      	str	r3, [r2, #72]	@ 0x48
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_DMA_Init+0x50>)
 8001940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	200b      	movs	r0, #11
 8001950:	f002 f8b5 	bl	8003abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001954:	200b      	movs	r0, #11
 8001956:	f002 f8cc 	bl	8003af2 <HAL_NVIC_EnableIRQ>

}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	4b61      	ldr	r3, [pc, #388]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	4a60      	ldr	r2, [pc, #384]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198a:	4b5e      	ldr	r3, [pc, #376]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001996:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a5a      	ldr	r2, [pc, #360]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 800199c:	f043 0320 	orr.w	r3, r3, #32
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b55      	ldr	r3, [pc, #340]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a54      	ldr	r2, [pc, #336]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b52      	ldr	r3, [pc, #328]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001b04 <MX_GPIO_Init+0x19c>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	2102      	movs	r1, #2
 80019e2:	4849      	ldr	r0, [pc, #292]	@ (8001b08 <MX_GPIO_Init+0x1a0>)
 80019e4:	f002 fd60 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2140      	movs	r1, #64	@ 0x40
 80019ec:	4847      	ldr	r0, [pc, #284]	@ (8001b0c <MX_GPIO_Init+0x1a4>)
 80019ee:	f002 fd5b 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019f2:	2320      	movs	r3, #32
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a02:	2305      	movs	r3, #5
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a10:	f002 fbc8 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8001a14:	2302      	movs	r3, #2
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4837      	ldr	r0, [pc, #220]	@ (8001b08 <MX_GPIO_Init+0x1a0>)
 8001a2c:	f002 fbba 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin
                           Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin
 8001a30:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8001a34:	617b      	str	r3, [r7, #20]
                          |Limit_Switch_pen_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4830      	ldr	r0, [pc, #192]	@ (8001b08 <MX_GPIO_Init+0x1a0>)
 8001a48:	f002 fbac 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8001a4c:	2340      	movs	r3, #64	@ 0x40
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	482a      	ldr	r0, [pc, #168]	@ (8001b0c <MX_GPIO_Init+0x1a4>)
 8001a64:	f002 fb9e 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8001a68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4823      	ldr	r0, [pc, #140]	@ (8001b0c <MX_GPIO_Init+0x1a4>)
 8001a7e:	f002 fb91 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8001a82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	481c      	ldr	r0, [pc, #112]	@ (8001b0c <MX_GPIO_Init+0x1a4>)
 8001a9a:	f002 fb83 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aa4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4815      	ldr	r0, [pc, #84]	@ (8001b0c <MX_GPIO_Init+0x1a4>)
 8001ab6:	f002 fb75 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001aba:	2330      	movs	r3, #48	@ 0x30
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aca:	2305      	movs	r3, #5
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <MX_GPIO_Init+0x1a0>)
 8001ad6:	f002 fb65 	bl	80041a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2017      	movs	r0, #23
 8001ae0:	f001 ffed 	bl	8003abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f002 f804 	bl	8003af2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2028      	movs	r0, #40	@ 0x28
 8001af0:	f001 ffe5 	bl	8003abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001af4:	2028      	movs	r0, #40	@ 0x28
 8001af6:	f001 fffc 	bl	8003af2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	@ 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000800 	.word	0x48000800

08001b10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b20:	d103      	bne.n	8001b2a <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b24:	2209      	movs	r2, #9
 8001b26:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 8001b28:	e02e      	b.n	8001b88 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b30:	d103      	bne.n	8001b3a <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b34:	220a      	movs	r2, #10
 8001b36:	601a      	str	r2, [r3, #0]
}
 8001b38:	e026      	b.n	8001b88 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b40:	d103      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b44:	220b      	movs	r2, #11
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	e01e      	b.n	8001b88 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b50:	d103      	bne.n	8001b5a <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b54:	220c      	movs	r2, #12
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	e016      	b.n	8001b88 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b60:	d103      	bne.n	8001b6a <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b64:	220d      	movs	r2, #13
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	e00e      	b.n	8001b88 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b70:	d103      	bne.n	8001b7a <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b74:	220e      	movs	r2, #14
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b80:	d102      	bne.n	8001b88 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8001b82:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b84:	220f      	movs	r2, #15
 8001b86:	601a      	str	r2, [r3, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20000a1c 	.word	0x20000a1c

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <Error_Handler+0x8>

08001ba4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <HAL_MspInit+0x44>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bae:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <HAL_MspInit+0x44>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_MspInit+0x44>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_MspInit+0x44>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_MspInit+0x44>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_MspInit+0x44>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bda:	f002 fd39 	bl	8004650 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0a0      	sub	sp, #128	@ 0x80
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	2254      	movs	r2, #84	@ 0x54
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f008 fae5 	bl	800a1dc <memset>
  if(hadc->Instance==ADC1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c1a:	d13e      	bne.n	8001c9a <HAL_ADC_MspInit+0xae>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c22:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fa4d 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c38:	f7ff ffae 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d28 <HAL_ADC_MspInit+0x13c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	4a39      	ldr	r2, [pc, #228]	@ (8001d28 <HAL_ADC_MspInit+0x13c>)
 8001c44:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c46:	4b38      	ldr	r3, [pc, #224]	@ (8001d28 <HAL_ADC_MspInit+0x13c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10b      	bne.n	8001c66 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c4e:	4b37      	ldr	r3, [pc, #220]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	4a36      	ldr	r2, [pc, #216]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001c54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5a:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c72:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c82:	2303      	movs	r3, #3
 8001c84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c94:	f002 fa86 	bl	80041a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c98:	e042      	b.n	8001d20 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a24      	ldr	r2, [pc, #144]	@ (8001d30 <HAL_ADC_MspInit+0x144>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d13d      	bne.n	8001d20 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ca8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001caa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fa09 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001cc0:	f7ff ff6a 	bl	8001b98 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <HAL_ADC_MspInit+0x13c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a17      	ldr	r2, [pc, #92]	@ (8001d28 <HAL_ADC_MspInit+0x13c>)
 8001ccc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <HAL_ADC_MspInit+0x13c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10b      	bne.n	8001cee <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001cdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_ADC_MspInit+0x140>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8001d06:	2302      	movs	r3, #2
 8001d08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d16:	4619      	mov	r1, r3
 8001d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d1c:	f002 fa42 	bl	80041a4 <HAL_GPIO_Init>
}
 8001d20:	bf00      	nop
 8001d22:	3780      	adds	r7, #128	@ 0x80
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20001094 	.word	0x20001094
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	50000100 	.word	0x50000100

08001d34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a39      	ldr	r2, [pc, #228]	@ (8001e28 <HAL_TIM_Base_MspInit+0xf4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d11c      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d46:	4b39      	ldr	r3, [pc, #228]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4a:	4a38      	ldr	r2, [pc, #224]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001d4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d52:	4b36      	ldr	r3, [pc, #216]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	2018      	movs	r0, #24
 8001d64:	f001 feab 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d68:	2018      	movs	r0, #24
 8001d6a:	f001 fec2 	bl	8003af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2019      	movs	r0, #25
 8001d74:	f001 fea3 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d78:	2019      	movs	r0, #25
 8001d7a:	f001 feba 	bl	8003af2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 8001d7e:	e04e      	b.n	8001e1e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d88:	d10c      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	4b28      	ldr	r3, [pc, #160]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	4a27      	ldr	r2, [pc, #156]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d96:	4b25      	ldr	r3, [pc, #148]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]
}
 8001da2:	e03c      	b.n	8001e1e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a21      	ldr	r2, [pc, #132]	@ (8001e30 <HAL_TIM_Base_MspInit+0xfc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10c      	bne.n	8001dc8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dae:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001db4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001db8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dba:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
}
 8001dc6:	e02a      	b.n	8001e1e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	@ (8001e34 <HAL_TIM_Base_MspInit+0x100>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d114      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd6:	4a15      	ldr	r2, [pc, #84]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dde:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2019      	movs	r0, #25
 8001df0:	f001 fe65 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001df4:	2019      	movs	r0, #25
 8001df6:	f001 fe7c 	bl	8003af2 <HAL_NVIC_EnableIRQ>
}
 8001dfa:	e010      	b.n	8001e1e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <HAL_TIM_Base_MspInit+0x104>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10b      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0a:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001e0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_TIM_Base_MspInit+0xf8>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
}
 8001e1e:	bf00      	nop
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40013400 	.word	0x40013400
 8001e34:	40014400 	.word	0x40014400
 8001e38:	40015000 	.word	0x40015000

08001e3c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	@ 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2f      	ldr	r2, [pc, #188]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d129      	bne.n	8001eb2 <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	4a2e      	ldr	r2, [pc, #184]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	4a28      	ldr	r2, [pc, #160]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e82:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8001e8e:	23c0      	movs	r3, #192	@ 0xc0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eac:	f002 f97a 	bl	80041a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001eb0:	e02e      	b.n	8001f10 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d129      	bne.n	8001f10 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ebc:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec0:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed8:	4a10      	ldr	r2, [pc, #64]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8001eec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001efe:	230a      	movs	r3, #10
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0c:	f002 f94a 	bl	80041a4 <HAL_GPIO_Init>
}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	@ 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40000800 	.word	0x40000800

08001f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	@ 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <HAL_TIM_MspPostInit+0xe4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d11d      	bne.n	8001f82 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	4b31      	ldr	r3, [pc, #196]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	4a30      	ldr	r2, [pc, #192]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f52:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8001f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001f70:	2304      	movs	r3, #4
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4825      	ldr	r0, [pc, #148]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001f7c:	f002 f912 	bl	80041a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8001f80:	e03d      	b.n	8001ffe <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <HAL_TIM_MspPostInit+0xf0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d138      	bne.n	8001ffe <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f90:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f98:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa8:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb0:	4b16      	ldr	r3, [pc, #88]	@ (800200c <HAL_TIM_MspPostInit+0xe8>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4810      	ldr	r0, [pc, #64]	@ (8002018 <HAL_TIM_MspPostInit+0xf4>)
 8001fd8:	f002 f8e4 	bl	80041a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8001fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8001fee:	2306      	movs	r3, #6
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001ffa:	f002 f8d3 	bl	80041a4 <HAL_GPIO_Init>
}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	@ 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40013400 	.word	0x40013400
 800200c:	40021000 	.word	0x40021000
 8002010:	48000800 	.word	0x48000800
 8002014:	40015000 	.word	0x40015000
 8002018:	48000400 	.word	0x48000400

0800201c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b09e      	sub	sp, #120	@ 0x78
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	2254      	movs	r2, #84	@ 0x54
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f008 f8cd 	bl	800a1dc <memset>
  if(huart->Instance==USART2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a37      	ldr	r2, [pc, #220]	@ (8002124 <HAL_UART_MspInit+0x108>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d167      	bne.n	800211c <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800204c:	2302      	movs	r3, #2
 800204e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4618      	mov	r0, r3
 800205a:	f003 f837 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002064:	f7ff fd98 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002068:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <HAL_UART_MspInit+0x10c>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <HAL_UART_MspInit+0x10c>)
 800206e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002072:	6593      	str	r3, [r2, #88]	@ 0x58
 8002074:	4b2c      	ldr	r3, [pc, #176]	@ (8002128 <HAL_UART_MspInit+0x10c>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b29      	ldr	r3, [pc, #164]	@ (8002128 <HAL_UART_MspInit+0x10c>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002084:	4a28      	ldr	r2, [pc, #160]	@ (8002128 <HAL_UART_MspInit+0x10c>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208c:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <HAL_UART_MspInit+0x10c>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002098:	230c      	movs	r3, #12
 800209a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a8:	2307      	movs	r3, #7
 80020aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b6:	f002 f875 	bl	80041a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <HAL_UART_MspInit+0x114>)
 80020be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020c2:	221b      	movs	r2, #27
 80020c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020c6:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020c8:	2210      	movs	r2, #16
 80020ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020d2:	4b16      	ldr	r3, [pc, #88]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020de:	4b13      	ldr	r3, [pc, #76]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020f0:	480e      	ldr	r0, [pc, #56]	@ (800212c <HAL_UART_MspInit+0x110>)
 80020f2:	f001 fd19 	bl	8003b28 <HAL_DMA_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80020fc:	f7ff fd4c 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <HAL_UART_MspInit+0x110>)
 8002104:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002106:	4a09      	ldr	r2, [pc, #36]	@ (800212c <HAL_UART_MspInit+0x110>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2026      	movs	r0, #38	@ 0x26
 8002112:	f001 fcd4 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002116:	2026      	movs	r0, #38	@ 0x26
 8002118:	f001 fceb 	bl	8003af2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800211c:	bf00      	nop
 800211e:	3778      	adds	r7, #120	@ 0x78
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40004400 	.word	0x40004400
 8002128:	40021000 	.word	0x40021000
 800212c:	20000964 	.word	0x20000964
 8002130:	40020008 	.word	0x40020008

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <NMI_Handler+0x4>

0800213c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <MemManage_Handler+0x4>

0800214c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <UsageFault_Handler+0x4>

0800215c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218a:	f000 f8e1 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <DMA1_Channel1_IRQHandler+0x10>)
 800219a:	f001 fea8 	bl	8003eee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000964 	.word	0x20000964

080021a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 80021ac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021b0:	f002 f992 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80021be:	f003 ff45 	bl	800604c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000304 	.word	0x20000304

080021cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021d0:	4803      	ldr	r0, [pc, #12]	@ (80021e0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80021d2:	f003 ff3b 	bl	800604c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80021d6:	4803      	ldr	r0, [pc, #12]	@ (80021e4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80021d8:	f003 ff38 	bl	800604c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000304 	.word	0x20000304
 80021e4:	20000700 	.word	0x20000700

080021e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <USART2_IRQHandler+0x10>)
 80021ee:	f005 fe3b 	bl	8007e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000898 	.word	0x20000898

080021fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8002200:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002204:	f002 f968 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8002208:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800220c:	f002 f964 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8002210:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002214:	f002 f960 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 8002218:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800221c:	f002 f95c 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8002220:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002224:	f002 f958 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8002228:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800222c:	f002 f954 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <SystemInit+0x20>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <SystemInit+0x20>)
 8002240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002258:	480d      	ldr	r0, [pc, #52]	@ (8002290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800225a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800225c:	f7ff ffea 	bl	8002234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002260:	480c      	ldr	r0, [pc, #48]	@ (8002294 <LoopForever+0x6>)
  ldr r1, =_edata
 8002262:	490d      	ldr	r1, [pc, #52]	@ (8002298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <LoopForever+0xe>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002278:	4c0a      	ldr	r4, [pc, #40]	@ (80022a4 <LoopForever+0x16>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002286:	f007 ffb1 	bl	800a1ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800228a:	f7fe fd75 	bl	8000d78 <main>

0800228e <LoopForever>:

LoopForever:
    b LoopForever
 800228e:	e7fe      	b.n	800228e <LoopForever>
  ldr   r0, =_estack
 8002290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800229c:	0800a2b8 	.word	0x0800a2b8
  ldr r2, =_sbss
 80022a0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80022a4:	2000109c 	.word	0x2000109c

080022a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC1_2_IRQHandler>

080022aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f001 fbf7 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ba:	2000      	movs	r0, #0
 80022bc:	f000 f80e 	bl	80022dc <HAL_InitTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	71fb      	strb	r3, [r7, #7]
 80022ca:	e001      	b.n	80022d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022cc:	f7ff fc6a 	bl	8001ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022d0:	79fb      	ldrb	r3, [r7, #7]

}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022e8:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <HAL_InitTick+0x68>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d022      	beq.n	8002336 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022f0:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_InitTick+0x6c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <HAL_InitTick+0x68>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f001 fc02 	bl	8003b0e <HAL_SYSTICK_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10f      	bne.n	8002330 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b0f      	cmp	r3, #15
 8002314:	d809      	bhi.n	800232a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002316:	2200      	movs	r2, #0
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	f04f 30ff 	mov.w	r0, #4294967295
 800231e:	f001 fbce 	bl	8003abe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_InitTick+0x70>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e007      	b.n	800233a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e004      	b.n	800233a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e001      	b.n	800233a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000208 	.word	0x20000208
 8002348:	20000200 	.word	0x20000200
 800234c:	20000204 	.word	0x20000204

08002350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <HAL_IncTick+0x1c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_IncTick+0x20>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4413      	add	r3, r2
 800235e:	4a03      	ldr	r2, [pc, #12]	@ (800236c <HAL_IncTick+0x1c>)
 8002360:	6013      	str	r3, [r2, #0]
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	20001098 	.word	0x20001098
 8002370:	20000208 	.word	0x20000208

08002374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_GetTick+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20001098 	.word	0x20001098

0800238c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	609a      	str	r2, [r3, #8]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	609a      	str	r2, [r3, #8]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3360      	adds	r3, #96	@ 0x60
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <LL_ADC_SetOffset+0x44>)
 8002416:	4013      	ands	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	4313      	orrs	r3, r2
 8002424:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	03fff000 	.word	0x03fff000

0800243c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3360      	adds	r3, #96	@ 0x60
 800244a:	461a      	mov	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3360      	adds	r3, #96	@ 0x60
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	431a      	orrs	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800249e:	b480      	push	{r7}
 80024a0:	b087      	sub	sp, #28
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3360      	adds	r3, #96	@ 0x60
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3360      	adds	r3, #96	@ 0x60
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	615a      	str	r2, [r3, #20]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3330      	adds	r3, #48	@ 0x30
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	4413      	add	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	211f      	movs	r1, #31
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0e9b      	lsrs	r3, r3, #26
 8002568:	f003 011f 	and.w	r1, r3, #31
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	431a      	orrs	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800257c:	bf00      	nop
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3314      	adds	r3, #20
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	0e5b      	lsrs	r3, r3, #25
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	4413      	add	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	0d1b      	lsrs	r3, r3, #20
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2107      	movs	r1, #7
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	401a      	ands	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0d1b      	lsrs	r3, r3, #20
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	431a      	orrs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0318 	and.w	r3, r3, #24
 8002602:	4908      	ldr	r1, [pc, #32]	@ (8002624 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002604:	40d9      	lsrs	r1, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	400b      	ands	r3, r1
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	0007ffff 	.word	0x0007ffff

08002628 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 031f 	and.w	r3, r3, #31
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6093      	str	r3, [r2, #8]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800267c:	d101      	bne.n	8002682 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026cc:	d101      	bne.n	80026d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <LL_ADC_IsEnabled+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <LL_ADC_IsEnabled+0x1a>
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800273e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002742:	f043 0204 	orr.w	r2, r3, #4
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b04      	cmp	r3, #4
 8002768:	d101      	bne.n	800276e <LL_ADC_REG_IsConversionOngoing+0x18>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b08      	cmp	r3, #8
 800278e:	d101      	bne.n	8002794 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1a9      	b.n	8002b12 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fa0d 	bl	8001bec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff3f 	bl	8002668 <LL_ADC_IsDeepPowerDownEnabled>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff25 	bl	8002644 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff5a 	bl	80026b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d115      	bne.n	8002836 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff3e 	bl	8002690 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002814:	4b9c      	ldr	r3, [pc, #624]	@ (8002a88 <HAL_ADC_Init+0x2e4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	4a9c      	ldr	r2, [pc, #624]	@ (8002a8c <HAL_ADC_Init+0x2e8>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	3301      	adds	r3, #1
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002828:	e002      	b.n	8002830 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b01      	subs	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f9      	bne.n	800282a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff3c 	bl	80026b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff75 	bl	8002756 <LL_ADC_REG_IsConversionOngoing>
 800286c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 8142 	bne.w	8002b00 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 813e 	bne.w	8002b00 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800288c:	f043 0202 	orr.w	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff35 	bl	8002708 <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d141      	bne.n	8002928 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_Init+0x114>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a77      	ldr	r2, [pc, #476]	@ (8002a90 <HAL_ADC_Init+0x2ec>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d10f      	bne.n	80028d8 <HAL_ADC_Init+0x134>
 80028b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028bc:	f7ff ff24 	bl	8002708 <LL_ADC_IsEnabled>
 80028c0:	4604      	mov	r4, r0
 80028c2:	4873      	ldr	r0, [pc, #460]	@ (8002a90 <HAL_ADC_Init+0x2ec>)
 80028c4:	f7ff ff20 	bl	8002708 <LL_ADC_IsEnabled>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4323      	orrs	r3, r4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_ADC_Init+0x15a>
 80028d8:	486e      	ldr	r0, [pc, #440]	@ (8002a94 <HAL_ADC_Init+0x2f0>)
 80028da:	f7ff ff15 	bl	8002708 <LL_ADC_IsEnabled>
 80028de:	4604      	mov	r4, r0
 80028e0:	486d      	ldr	r0, [pc, #436]	@ (8002a98 <HAL_ADC_Init+0x2f4>)
 80028e2:	f7ff ff11 	bl	8002708 <LL_ADC_IsEnabled>
 80028e6:	4603      	mov	r3, r0
 80028e8:	431c      	orrs	r4, r3
 80028ea:	486c      	ldr	r0, [pc, #432]	@ (8002a9c <HAL_ADC_Init+0x2f8>)
 80028ec:	f7ff ff0c 	bl	8002708 <LL_ADC_IsEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4323      	orrs	r3, r4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d012      	beq.n	8002928 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800290a:	d004      	beq.n	8002916 <HAL_ADC_Init+0x172>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5f      	ldr	r2, [pc, #380]	@ (8002a90 <HAL_ADC_Init+0x2ec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_ADC_Init+0x176>
 8002916:	4a62      	ldr	r2, [pc, #392]	@ (8002aa0 <HAL_ADC_Init+0x2fc>)
 8002918:	e000      	b.n	800291c <HAL_ADC_Init+0x178>
 800291a:	4a62      	ldr	r2, [pc, #392]	@ (8002aa4 <HAL_ADC_Init+0x300>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f7ff fd32 	bl	800238c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7f5b      	ldrb	r3, [r3, #29]
 800292c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002932:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002938:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800293e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002946:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002952:	2b01      	cmp	r3, #1
 8002954:	d106      	bne.n	8002964 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	045b      	lsls	r3, r3, #17
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002970:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b48      	ldr	r3, [pc, #288]	@ (8002aa8 <HAL_ADC_Init+0x304>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fee4 	bl	800277c <LL_ADC_INJ_IsConversionOngoing>
 80029b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d17f      	bne.n	8002abc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d17c      	bne.n	8002abc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029de:	f023 0302 	bic.w	r3, r3, #2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d017      	beq.n	8002a24 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a0c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6911      	ldr	r1, [r2, #16]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a22:	e013      	b.n	8002a4c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a48:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d12a      	bne.n	8002aac <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a72:	4311      	orrs	r1, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	e019      	b.n	8002abc <HAL_ADC_Init+0x318>
 8002a88:	20000200 	.word	0x20000200
 8002a8c:	053e2d63 	.word	0x053e2d63
 8002a90:	50000100 	.word	0x50000100
 8002a94:	50000400 	.word	0x50000400
 8002a98:	50000500 	.word	0x50000500
 8002a9c:	50000600 	.word	0x50000600
 8002aa0:	50000300 	.word	0x50000300
 8002aa4:	50000700 	.word	0x50000700
 8002aa8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10c      	bne.n	8002ade <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f023 010f 	bic.w	r1, r3, #15
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
 8002adc:	e007      	b.n	8002aee <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 020f 	bic.w	r2, r2, #15
 8002aec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002afe:	e007      	b.n	8002b10 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b04:	f043 0210 	orr.w	r2, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3724      	adds	r7, #36	@ 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	bf00      	nop

08002b1c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADC_Start+0x1c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a67      	ldr	r2, [pc, #412]	@ (8002cd0 <HAL_ADC_Start+0x1b4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_Start+0x20>
 8002b38:	4b66      	ldr	r3, [pc, #408]	@ (8002cd4 <HAL_ADC_Start+0x1b8>)
 8002b3a:	e000      	b.n	8002b3e <HAL_ADC_Start+0x22>
 8002b3c:	4b66      	ldr	r3, [pc, #408]	@ (8002cd8 <HAL_ADC_Start+0x1bc>)
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fd72 	bl	8002628 <LL_ADC_GetMultimode>
 8002b44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fe03 	bl	8002756 <LL_ADC_REG_IsConversionOngoing>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 80b4 	bne.w	8002cc0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_Start+0x4a>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0af      	b.n	8002cc6 <HAL_ADC_Start+0x1aa>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fd06 	bl	8003580 <ADC_Enable>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 809b 	bne.w	8002cb6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a4d      	ldr	r2, [pc, #308]	@ (8002cd0 <HAL_ADC_Start+0x1b4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_ADC_Start+0x96>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8002cdc <HAL_ADC_Start+0x1c0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d002      	beq.n	8002bae <HAL_ADC_Start+0x92>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	e003      	b.n	8002bb6 <HAL_ADC_Start+0x9a>
 8002bae:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce0 <HAL_ADC_Start+0x1c4>)
 8002bb0:	e001      	b.n	8002bb6 <HAL_ADC_Start+0x9a>
 8002bb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d002      	beq.n	8002bc4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bdc:	d106      	bne.n	8002bec <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be2:	f023 0206 	bic.w	r2, r3, #6
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	661a      	str	r2, [r3, #96]	@ 0x60
 8002bea:	e002      	b.n	8002bf2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	221c      	movs	r2, #28
 8002bf8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a32      	ldr	r2, [pc, #200]	@ (8002cd0 <HAL_ADC_Start+0x1b4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_ADC_Start+0x104>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a32      	ldr	r2, [pc, #200]	@ (8002cdc <HAL_ADC_Start+0x1c0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d002      	beq.n	8002c1c <HAL_ADC_Start+0x100>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_Start+0x108>
 8002c1c:	4b30      	ldr	r3, [pc, #192]	@ (8002ce0 <HAL_ADC_Start+0x1c4>)
 8002c1e:	e001      	b.n	8002c24 <HAL_ADC_Start+0x108>
 8002c20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d008      	beq.n	8002c3e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d002      	beq.n	8002c3e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b09      	cmp	r3, #9
 8002c3c:	d114      	bne.n	8002c68 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fd64 	bl	800272e <LL_ADC_REG_StartConversion>
 8002c66:	e02d      	b.n	8002cc4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a15      	ldr	r2, [pc, #84]	@ (8002cd0 <HAL_ADC_Start+0x1b4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_ADC_Start+0x176>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <HAL_ADC_Start+0x1c0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d002      	beq.n	8002c8e <HAL_ADC_Start+0x172>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	e003      	b.n	8002c96 <HAL_ADC_Start+0x17a>
 8002c8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <HAL_ADC_Start+0x1c4>)
 8002c90:	e001      	b.n	8002c96 <HAL_ADC_Start+0x17a>
 8002c92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c96:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00f      	beq.n	8002cc4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cb4:	e006      	b.n	8002cc4 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002cbe:	e001      	b.n	8002cc4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	50000100 	.word	0x50000100
 8002cd4:	50000300 	.word	0x50000300
 8002cd8:	50000700 	.word	0x50000700
 8002cdc:	50000500 	.word	0x50000500
 8002ce0:	50000400 	.word	0x50000400

08002ce4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0b6      	sub	sp, #216	@ 0xd8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d102      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x24>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f000 bc13 	b.w	800354a <HAL_ADC_ConfigChannel+0x84a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fd10 	bl	8002756 <LL_ADC_REG_IsConversionOngoing>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 83f3 	bne.w	8003524 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f7ff fbf0 	bl	8002530 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fcfe 	bl	8002756 <LL_ADC_REG_IsConversionOngoing>
 8002d5a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fd0a 	bl	800277c <LL_ADC_INJ_IsConversionOngoing>
 8002d68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 81d9 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 81d4 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d88:	d10f      	bne.n	8002daa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	4619      	mov	r1, r3
 8002d96:	f7ff fbf7 	bl	8002588 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fbb1 	bl	800250a <LL_ADC_SetSamplingTimeCommonConfig>
 8002da8:	e00e      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f7ff fbe6 	bl	8002588 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fba1 	bl	800250a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	08db      	lsrs	r3, r3, #3
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d022      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dfa:	f7ff fafb 	bl	80023f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6919      	ldr	r1, [r3, #16]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f7ff fb47 	bl	800249e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x126>
 8002e20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e24:	e000      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x128>
 8002e26:	2300      	movs	r3, #0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f7ff fb53 	bl	80024d4 <LL_ADC_SetOffsetSaturation>
 8002e2e:	e17b      	b.n	8003128 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fb00 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x15c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff faf5 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	f003 021f 	and.w	r2, r3, #31
 8002e5a:	e01e      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x19a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff faea 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e004      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x1b2>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	e018      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x1e4>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e004      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d106      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fab9 	bl	8002468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2101      	movs	r1, #1
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fa9d 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x222>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fa92 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	0e9b      	lsrs	r3, r3, #26
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	e01e      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x260>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2101      	movs	r1, #1
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fa87 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e004      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x278>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	e018      	b.n	8002faa <HAL_ADC_ConfigChannel+0x2aa>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	e004      	b.n	8002faa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d106      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fa56 	bl	8002468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fa3a 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x2e8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fa2f 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	0e9b      	lsrs	r3, r3, #26
 8002fe2:	f003 021f 	and.w	r2, r3, #31
 8002fe6:	e01e      	b.n	8003026 <HAL_ADC_ConfigChannel+0x326>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2102      	movs	r1, #2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fa24 	bl	800243c <LL_ADC_GetOffsetChannel>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003006:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800300a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800300e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003016:	2320      	movs	r3, #32
 8003018:	e004      	b.n	8003024 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800301a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <HAL_ADC_ConfigChannel+0x33e>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	e016      	b.n	800306c <HAL_ADC_ConfigChannel+0x36c>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003050:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003052:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003056:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e004      	b.n	800306c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003062:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800306c:	429a      	cmp	r2, r3
 800306e:	d106      	bne.n	800307e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	2102      	movs	r1, #2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f9f5 	bl	8002468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2103      	movs	r1, #3
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f9d9 	bl	800243c <LL_ADC_GetOffsetChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x3aa>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2103      	movs	r1, #3
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f9ce 	bl	800243c <LL_ADC_GetOffsetChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	0e9b      	lsrs	r3, r3, #26
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	e017      	b.n	80030da <HAL_ADC_ConfigChannel+0x3da>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2103      	movs	r1, #3
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f9c3 	bl	800243c <LL_ADC_GetOffsetChannel>
 80030b6:	4603      	mov	r3, r0
 80030b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80030c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	e003      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80030d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x3f2>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0e9b      	lsrs	r3, r3, #26
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	e011      	b.n	8003116 <HAL_ADC_ConfigChannel+0x416>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003102:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800310a:	2320      	movs	r3, #32
 800310c:	e003      	b.n	8003116 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800310e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003116:	429a      	cmp	r2, r3
 8003118:	d106      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2200      	movs	r2, #0
 8003120:	2103      	movs	r1, #3
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f9a0 	bl	8002468 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff faeb 	bl	8002708 <LL_ADC_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 813d 	bne.w	80033b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	461a      	mov	r2, r3
 8003148:	f7ff fa4a 	bl	80025e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4aa2      	ldr	r2, [pc, #648]	@ (80033dc <HAL_ADC_ConfigChannel+0x6dc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	f040 812e 	bne.w	80033b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x480>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	0e9b      	lsrs	r3, r3, #26
 800316e:	3301      	adds	r3, #1
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2b09      	cmp	r3, #9
 8003176:	bf94      	ite	ls
 8003178:	2301      	movls	r3, #1
 800317a:	2300      	movhi	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e019      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x4b4>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800318e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003190:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003198:	2320      	movs	r3, #32
 800319a:	e003      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800319c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2b09      	cmp	r3, #9
 80031ac:	bf94      	ite	ls
 80031ae:	2301      	movls	r3, #1
 80031b0:	2300      	movhi	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d079      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x4d4>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	3301      	adds	r3, #1
 80031cc:	069b      	lsls	r3, r3, #26
 80031ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031d2:	e015      	b.n	8003200 <HAL_ADC_ConfigChannel+0x500>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e003      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	069b      	lsls	r3, r3, #26
 80031fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x520>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	3301      	adds	r3, #1
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	e017      	b.n	8003250 <HAL_ADC_ConfigChannel+0x550>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800322e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003230:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e003      	b.n	8003244 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800323c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	3301      	adds	r3, #1
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2101      	movs	r1, #1
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	ea42 0103 	orr.w	r1, r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x576>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	3301      	adds	r3, #1
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	051b      	lsls	r3, r3, #20
 8003274:	e018      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x5a8>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800328e:	2320      	movs	r3, #32
 8003290:	e003      	b.n	800329a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	3301      	adds	r3, #1
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032a8:	430b      	orrs	r3, r1
 80032aa:	e07e      	b.n	80033aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d107      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x5c8>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0e9b      	lsrs	r3, r3, #26
 80032be:	3301      	adds	r3, #1
 80032c0:	069b      	lsls	r3, r3, #26
 80032c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032c6:	e015      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x5f4>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80032d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80032da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	e003      	b.n	80032ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80032e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	069b      	lsls	r3, r3, #26
 80032f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x614>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	3301      	adds	r3, #1
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	e017      	b.n	8003344 <HAL_ADC_ConfigChannel+0x644>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	61fb      	str	r3, [r7, #28]
  return result;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3301      	adds	r3, #1
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2101      	movs	r1, #1
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	ea42 0103 	orr.w	r1, r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x670>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0e9b      	lsrs	r3, r3, #26
 800335a:	3301      	adds	r3, #1
 800335c:	f003 021f 	and.w	r2, r3, #31
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	3b1e      	subs	r3, #30
 8003368:	051b      	lsls	r3, r3, #20
 800336a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800336e:	e01b      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x6a8>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	613b      	str	r3, [r7, #16]
  return result;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003388:	2320      	movs	r3, #32
 800338a:	e003      	b.n	8003394 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	3301      	adds	r3, #1
 8003396:	f003 021f 	and.w	r2, r3, #31
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	3b1e      	subs	r3, #30
 80033a2:	051b      	lsls	r3, r3, #20
 80033a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7ff f8ea 	bl	8002588 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80be 	beq.w	800353e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ca:	d004      	beq.n	80033d6 <HAL_ADC_ConfigChannel+0x6d6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a04      	ldr	r2, [pc, #16]	@ (80033e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10a      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x6ec>
 80033d6:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80033d8:	e009      	b.n	80033ee <HAL_ADC_ConfigChannel+0x6ee>
 80033da:	bf00      	nop
 80033dc:	407f0000 	.word	0x407f0000
 80033e0:	80080000 	.word	0x80080000
 80033e4:	50000100 	.word	0x50000100
 80033e8:	50000300 	.word	0x50000300
 80033ec:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <HAL_ADC_ConfigChannel+0x854>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fff2 	bl	80023d8 <LL_ADC_GetCommonPathInternalCh>
 80033f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a56      	ldr	r2, [pc, #344]	@ (8003558 <HAL_ADC_ConfigChannel+0x858>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_ADC_ConfigChannel+0x70c>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a55      	ldr	r2, [pc, #340]	@ (800355c <HAL_ADC_ConfigChannel+0x85c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d13a      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800340c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d134      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003420:	d005      	beq.n	800342e <HAL_ADC_ConfigChannel+0x72e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4e      	ldr	r2, [pc, #312]	@ (8003560 <HAL_ADC_ConfigChannel+0x860>)
 8003428:	4293      	cmp	r3, r2
 800342a:	f040 8085 	bne.w	8003538 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003436:	d004      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x742>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a49      	ldr	r2, [pc, #292]	@ (8003564 <HAL_ADC_ConfigChannel+0x864>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x746>
 8003442:	4a49      	ldr	r2, [pc, #292]	@ (8003568 <HAL_ADC_ConfigChannel+0x868>)
 8003444:	e000      	b.n	8003448 <HAL_ADC_ConfigChannel+0x748>
 8003446:	4a43      	ldr	r2, [pc, #268]	@ (8003554 <HAL_ADC_ConfigChannel+0x854>)
 8003448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800344c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7fe ffad 	bl	80023b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003458:	4b44      	ldr	r3, [pc, #272]	@ (800356c <HAL_ADC_ConfigChannel+0x86c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	4a44      	ldr	r2, [pc, #272]	@ (8003570 <HAL_ADC_ConfigChannel+0x870>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003472:	e002      	b.n	800347a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f9      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003480:	e05a      	b.n	8003538 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3b      	ldr	r2, [pc, #236]	@ (8003574 <HAL_ADC_ConfigChannel+0x874>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d125      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800348c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d11f      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a31      	ldr	r2, [pc, #196]	@ (8003564 <HAL_ADC_ConfigChannel+0x864>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d104      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x7ac>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a34      	ldr	r2, [pc, #208]	@ (8003578 <HAL_ADC_ConfigChannel+0x878>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d047      	beq.n	800353c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b4:	d004      	beq.n	80034c0 <HAL_ADC_ConfigChannel+0x7c0>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003564 <HAL_ADC_ConfigChannel+0x864>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x7c4>
 80034c0:	4a29      	ldr	r2, [pc, #164]	@ (8003568 <HAL_ADC_ConfigChannel+0x868>)
 80034c2:	e000      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x7c6>
 80034c4:	4a23      	ldr	r2, [pc, #140]	@ (8003554 <HAL_ADC_ConfigChannel+0x854>)
 80034c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f7fe ff6e 	bl	80023b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d6:	e031      	b.n	800353c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a27      	ldr	r2, [pc, #156]	@ (800357c <HAL_ADC_ConfigChannel+0x87c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d12d      	bne.n	800353e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d127      	bne.n	800353e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <HAL_ADC_ConfigChannel+0x864>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003500:	d004      	beq.n	800350c <HAL_ADC_ConfigChannel+0x80c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a17      	ldr	r2, [pc, #92]	@ (8003564 <HAL_ADC_ConfigChannel+0x864>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x810>
 800350c:	4a16      	ldr	r2, [pc, #88]	@ (8003568 <HAL_ADC_ConfigChannel+0x868>)
 800350e:	e000      	b.n	8003512 <HAL_ADC_ConfigChannel+0x812>
 8003510:	4a10      	ldr	r2, [pc, #64]	@ (8003554 <HAL_ADC_ConfigChannel+0x854>)
 8003512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003516:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f7fe ff48 	bl	80023b2 <LL_ADC_SetCommonPathInternalCh>
 8003522:	e00c      	b.n	800353e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003536:	e002      	b.n	800353e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800353c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003546:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800354a:	4618      	mov	r0, r3
 800354c:	37d8      	adds	r7, #216	@ 0xd8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	50000700 	.word	0x50000700
 8003558:	c3210000 	.word	0xc3210000
 800355c:	90c00010 	.word	0x90c00010
 8003560:	50000600 	.word	0x50000600
 8003564:	50000100 	.word	0x50000100
 8003568:	50000300 	.word	0x50000300
 800356c:	20000200 	.word	0x20000200
 8003570:	053e2d63 	.word	0x053e2d63
 8003574:	c7520000 	.word	0xc7520000
 8003578:	50000500 	.word	0x50000500
 800357c:	cb840000 	.word	0xcb840000

08003580 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff f8b9 	bl	8002708 <LL_ADC_IsEnabled>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d176      	bne.n	800368a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003694 <ADC_Enable+0x114>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f043 0210 	orr.w	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e062      	b.n	800368c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff f888 	bl	80026e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035d8:	d004      	beq.n	80035e4 <ADC_Enable+0x64>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2e      	ldr	r2, [pc, #184]	@ (8003698 <ADC_Enable+0x118>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <ADC_Enable+0x68>
 80035e4:	4b2d      	ldr	r3, [pc, #180]	@ (800369c <ADC_Enable+0x11c>)
 80035e6:	e000      	b.n	80035ea <ADC_Enable+0x6a>
 80035e8:	4b2d      	ldr	r3, [pc, #180]	@ (80036a0 <ADC_Enable+0x120>)
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fef4 	bl	80023d8 <LL_ADC_GetCommonPathInternalCh>
 80035f0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d013      	beq.n	8003622 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035fa:	4b2a      	ldr	r3, [pc, #168]	@ (80036a4 <ADC_Enable+0x124>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	4a29      	ldr	r2, [pc, #164]	@ (80036a8 <ADC_Enable+0x128>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003614:	e002      	b.n	800361c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3b01      	subs	r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f9      	bne.n	8003616 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003622:	f7fe fea7 	bl	8002374 <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003628:	e028      	b.n	800367c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff f86a 	bl	8002708 <LL_ADC_IsEnabled>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d104      	bne.n	8003644 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f84e 	bl	80026e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003644:	f7fe fe96 	bl	8002374 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d914      	bls.n	800367c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d00d      	beq.n	800367c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e007      	b.n	800368c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d1cf      	bne.n	800362a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	8000003f 	.word	0x8000003f
 8003698:	50000100 	.word	0x50000100
 800369c:	50000300 	.word	0x50000300
 80036a0:	50000700 	.word	0x50000700
 80036a4:	20000200 	.word	0x20000200
 80036a8:	053e2d63 	.word	0x053e2d63

080036ac <LL_ADC_IsEnabled>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <LL_ADC_IsEnabled+0x18>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <LL_ADC_IsEnabled+0x1a>
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d101      	bne.n	80036ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b0a1      	sub	sp, #132	@ 0x84
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003712:	2302      	movs	r3, #2
 8003714:	e0e7      	b.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800371e:	2300      	movs	r3, #0
 8003720:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003722:	2300      	movs	r3, #0
 8003724:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800372e:	d102      	bne.n	8003736 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003730:	4b6f      	ldr	r3, [pc, #444]	@ (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	e009      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6e      	ldr	r2, [pc, #440]	@ (80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d102      	bne.n	8003746 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003740:	4b6d      	ldr	r3, [pc, #436]	@ (80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	e001      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0be      	b.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ffb1 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 8003770:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ffab 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 80a0 	bne.w	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003784:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 809c 	bne.w	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003794:	d004      	beq.n	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a55      	ldr	r2, [pc, #340]	@ (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80037a0:	4b56      	ldr	r3, [pc, #344]	@ (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80037a2:	e000      	b.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80037a4:	4b56      	ldr	r3, [pc, #344]	@ (8003900 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80037a6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d04b      	beq.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037c2:	035b      	lsls	r3, r3, #13
 80037c4:	430b      	orrs	r3, r1
 80037c6:	431a      	orrs	r2, r3
 80037c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d4:	d004      	beq.n	80037e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a45      	ldr	r2, [pc, #276]	@ (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d10f      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80037e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037e4:	f7ff ff62 	bl	80036ac <LL_ADC_IsEnabled>
 80037e8:	4604      	mov	r4, r0
 80037ea:	4841      	ldr	r0, [pc, #260]	@ (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037ec:	f7ff ff5e 	bl	80036ac <LL_ADC_IsEnabled>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4323      	orrs	r3, r4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e012      	b.n	8003826 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003800:	483c      	ldr	r0, [pc, #240]	@ (80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003802:	f7ff ff53 	bl	80036ac <LL_ADC_IsEnabled>
 8003806:	4604      	mov	r4, r0
 8003808:	483b      	ldr	r0, [pc, #236]	@ (80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800380a:	f7ff ff4f 	bl	80036ac <LL_ADC_IsEnabled>
 800380e:	4603      	mov	r3, r0
 8003810:	431c      	orrs	r4, r3
 8003812:	483c      	ldr	r0, [pc, #240]	@ (8003904 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003814:	f7ff ff4a 	bl	80036ac <LL_ADC_IsEnabled>
 8003818:	4603      	mov	r3, r0
 800381a:	4323      	orrs	r3, r4
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d056      	beq.n	80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800382a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003832:	f023 030f 	bic.w	r3, r3, #15
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	6811      	ldr	r1, [r2, #0]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	6892      	ldr	r2, [r2, #8]
 800383e:	430a      	orrs	r2, r1
 8003840:	431a      	orrs	r2, r3
 8003842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003844:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003846:	e047      	b.n	80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003850:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003852:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800385c:	d004      	beq.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a23      	ldr	r2, [pc, #140]	@ (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d10f      	bne.n	8003888 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003868:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800386c:	f7ff ff1e 	bl	80036ac <LL_ADC_IsEnabled>
 8003870:	4604      	mov	r4, r0
 8003872:	481f      	ldr	r0, [pc, #124]	@ (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003874:	f7ff ff1a 	bl	80036ac <LL_ADC_IsEnabled>
 8003878:	4603      	mov	r3, r0
 800387a:	4323      	orrs	r3, r4
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e012      	b.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003888:	481a      	ldr	r0, [pc, #104]	@ (80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800388a:	f7ff ff0f 	bl	80036ac <LL_ADC_IsEnabled>
 800388e:	4604      	mov	r4, r0
 8003890:	4819      	ldr	r0, [pc, #100]	@ (80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003892:	f7ff ff0b 	bl	80036ac <LL_ADC_IsEnabled>
 8003896:	4603      	mov	r3, r0
 8003898:	431c      	orrs	r4, r3
 800389a:	481a      	ldr	r0, [pc, #104]	@ (8003904 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800389c:	f7ff ff06 	bl	80036ac <LL_ADC_IsEnabled>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4323      	orrs	r3, r4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d012      	beq.n	80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038ba:	f023 030f 	bic.w	r3, r3, #15
 80038be:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038c2:	e009      	b.n	80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80038d6:	e000      	b.n	80038da <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3784      	adds	r7, #132	@ 0x84
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	50000100 	.word	0x50000100
 80038f4:	50000400 	.word	0x50000400
 80038f8:	50000500 	.word	0x50000500
 80038fc:	50000300 	.word	0x50000300
 8003900:	50000700 	.word	0x50000700
 8003904:	50000600 	.word	0x50000600

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393a:	4a04      	ldr	r2, [pc, #16]	@ (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	60d3      	str	r3, [r2, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	@ (80039a4 <__NVIC_EnableIRQ+0x38>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	@ (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	@ (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	@ 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	@ 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	f7ff ff8e 	bl	80039a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff29 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff40 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff90 	bl	80039fc <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff5f 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff33 	bl	800396c <__NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffa4 	bl	8003a64 <SysTick_Config>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e08d      	b.n	8003c56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b47      	ldr	r3, [pc, #284]	@ (8003c60 <HAL_DMA_Init+0x138>)
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d80f      	bhi.n	8003b66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b45      	ldr	r3, [pc, #276]	@ (8003c64 <HAL_DMA_Init+0x13c>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a45      	ldr	r2, [pc, #276]	@ (8003c68 <HAL_DMA_Init+0x140>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	009a      	lsls	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a42      	ldr	r2, [pc, #264]	@ (8003c6c <HAL_DMA_Init+0x144>)
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b64:	e00e      	b.n	8003b84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b40      	ldr	r3, [pc, #256]	@ (8003c70 <HAL_DMA_Init+0x148>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a3d      	ldr	r2, [pc, #244]	@ (8003c68 <HAL_DMA_Init+0x140>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a3c      	ldr	r2, [pc, #240]	@ (8003c74 <HAL_DMA_Init+0x14c>)
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fa82 	bl	80040e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003be4:	d102      	bne.n	8003bec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c00:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_DMA_Init+0x104>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d80c      	bhi.n	8003c2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 faa2 	bl	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e008      	b.n	8003c3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40020407 	.word	0x40020407
 8003c64:	bffdfff8 	.word	0xbffdfff8
 8003c68:	cccccccd 	.word	0xcccccccd
 8003c6c:	40020000 	.word	0x40020000
 8003c70:	bffdfbf8 	.word	0xbffdfbf8
 8003c74:	40020400 	.word	0x40020400

08003c78 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_DMA_Start_IT+0x20>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e066      	b.n	8003d66 <HAL_DMA_Start_IT+0xee>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d155      	bne.n	8003d58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f9c7 	bl	8004064 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 020e 	orr.w	r2, r2, #14
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e00f      	b.n	8003d10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 020a 	orr.w	r2, r2, #10
 8003d0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d2c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e005      	b.n	8003d64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
 8003d62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d005      	beq.n	8003d92 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
 8003d90:	e037      	b.n	8003e02 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 020e 	bic.w	r2, r2, #14
 8003da0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003db0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	f003 021f 	and.w	r2, r3, #31
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dde:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00c      	beq.n	8003e02 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003df6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e00:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d00d      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
 8003e52:	e047      	b.n	8003ee4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 020e 	bic.w	r2, r2, #14
 8003e62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f202 	lsl.w	r2, r1, r2
 8003e96:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ea0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ec2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
    }
  }
  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	2204      	movs	r2, #4
 8003f10:	409a      	lsls	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d026      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x7a>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d021      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d107      	bne.n	8003f42 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0204 	bic.w	r2, r2, #4
 8003f40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f003 021f 	and.w	r2, r3, #31
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	2104      	movs	r1, #4
 8003f50:	fa01 f202 	lsl.w	r2, r1, r2
 8003f54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d071      	beq.n	8004042 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f66:	e06c      	b.n	8004042 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2202      	movs	r2, #2
 8003f72:	409a      	lsls	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d02e      	beq.n	8003fda <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d029      	beq.n	8003fda <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 020a 	bic.w	r2, r2, #10
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb0:	f003 021f 	and.w	r2, r3, #31
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	2102      	movs	r1, #2
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d038      	beq.n	8004042 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fd8:	e033      	b.n	8004042 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d02a      	beq.n	8004044 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d025      	beq.n	8004044 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 020e 	bic.w	r2, r2, #14
 8004006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400c:	f003 021f 	and.w	r2, r3, #31
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	2101      	movs	r1, #1
 8004016:	fa01 f202 	lsl.w	r2, r1, r2
 800401a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004042:	bf00      	nop
 8004044:	bf00      	nop
}
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800407a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800408c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f003 021f 	and.w	r2, r3, #31
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	2101      	movs	r1, #1
 800409c:	fa01 f202 	lsl.w	r2, r1, r2
 80040a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d108      	bne.n	80040c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040c2:	e007      	b.n	80040d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	60da      	str	r2, [r3, #12]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b16      	ldr	r3, [pc, #88]	@ (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d802      	bhi.n	80040fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80040f4:	4b15      	ldr	r3, [pc, #84]	@ (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e001      	b.n	80040fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80040fa:	4b15      	ldr	r3, [pc, #84]	@ (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	3b08      	subs	r3, #8
 800410a:	4a12      	ldr	r2, [pc, #72]	@ (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	009a      	lsls	r2, r3, #2
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a0b      	ldr	r2, [pc, #44]	@ (8004158 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800412a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2201      	movs	r2, #1
 8004134:	409a      	lsls	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40020407 	.word	0x40020407
 800414c:	40020800 	.word	0x40020800
 8004150:	40020820 	.word	0x40020820
 8004154:	cccccccd 	.word	0xcccccccd
 8004158:	40020880 	.word	0x40020880

0800415c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4b0b      	ldr	r3, [pc, #44]	@ (800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	461a      	mov	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a08      	ldr	r2, [pc, #32]	@ (80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800417e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3b01      	subs	r3, #1
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2201      	movs	r2, #1
 800418a:	409a      	lsls	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	1000823f 	.word	0x1000823f
 80041a0:	40020940 	.word	0x40020940

080041a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041b2:	e15a      	b.n	800446a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	2101      	movs	r1, #1
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	4013      	ands	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 814c 	beq.w	8004464 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d005      	beq.n	80041e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d130      	bne.n	8004246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	2203      	movs	r2, #3
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800421a:	2201      	movs	r2, #1
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f003 0201 	and.w	r2, r3, #1
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b03      	cmp	r3, #3
 8004250:	d017      	beq.n	8004282 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	2203      	movs	r2, #3
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d123      	bne.n	80042d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	08da      	lsrs	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3208      	adds	r2, #8
 8004296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800429a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	220f      	movs	r2, #15
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	08da      	lsrs	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3208      	adds	r2, #8
 80042d0:	6939      	ldr	r1, [r7, #16]
 80042d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	2203      	movs	r2, #3
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4013      	ands	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 0203 	and.w	r2, r3, #3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80a6 	beq.w	8004464 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004318:	4b5b      	ldr	r3, [pc, #364]	@ (8004488 <HAL_GPIO_Init+0x2e4>)
 800431a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431c:	4a5a      	ldr	r2, [pc, #360]	@ (8004488 <HAL_GPIO_Init+0x2e4>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6613      	str	r3, [r2, #96]	@ 0x60
 8004324:	4b58      	ldr	r3, [pc, #352]	@ (8004488 <HAL_GPIO_Init+0x2e4>)
 8004326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004330:	4a56      	ldr	r2, [pc, #344]	@ (800448c <HAL_GPIO_Init+0x2e8>)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	3302      	adds	r3, #2
 8004338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	220f      	movs	r2, #15
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800435a:	d01f      	beq.n	800439c <HAL_GPIO_Init+0x1f8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a4c      	ldr	r2, [pc, #304]	@ (8004490 <HAL_GPIO_Init+0x2ec>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d019      	beq.n	8004398 <HAL_GPIO_Init+0x1f4>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a4b      	ldr	r2, [pc, #300]	@ (8004494 <HAL_GPIO_Init+0x2f0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_GPIO_Init+0x1f0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a4a      	ldr	r2, [pc, #296]	@ (8004498 <HAL_GPIO_Init+0x2f4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00d      	beq.n	8004390 <HAL_GPIO_Init+0x1ec>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a49      	ldr	r2, [pc, #292]	@ (800449c <HAL_GPIO_Init+0x2f8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <HAL_GPIO_Init+0x1e8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a48      	ldr	r2, [pc, #288]	@ (80044a0 <HAL_GPIO_Init+0x2fc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_GPIO_Init+0x1e4>
 8004384:	2305      	movs	r3, #5
 8004386:	e00a      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 8004388:	2306      	movs	r3, #6
 800438a:	e008      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 800438c:	2304      	movs	r3, #4
 800438e:	e006      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 8004390:	2303      	movs	r3, #3
 8004392:	e004      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 8004394:	2302      	movs	r3, #2
 8004396:	e002      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_GPIO_Init+0x1fa>
 800439c:	2300      	movs	r3, #0
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	f002 0203 	and.w	r2, r2, #3
 80043a4:	0092      	lsls	r2, r2, #2
 80043a6:	4093      	lsls	r3, r2
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ae:	4937      	ldr	r1, [pc, #220]	@ (800448c <HAL_GPIO_Init+0x2e8>)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	3302      	adds	r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043bc:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043e0:	4a30      	ldr	r2, [pc, #192]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043e6:	4b2f      	ldr	r3, [pc, #188]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800440a:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004410:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	43db      	mvns	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004434:	4a1b      	ldr	r2, [pc, #108]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800443a:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800445e:	4a11      	ldr	r2, [pc, #68]	@ (80044a4 <HAL_GPIO_Init+0x300>)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3301      	adds	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f ae9d 	bne.w	80041b4 <HAL_GPIO_Init+0x10>
  }
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40021000 	.word	0x40021000
 800448c:	40010000 	.word	0x40010000
 8004490:	48000400 	.word	0x48000400
 8004494:	48000800 	.word	0x48000800
 8004498:	48000c00 	.word	0x48000c00
 800449c:	48001000 	.word	0x48001000
 80044a0:	48001400 	.word	0x48001400
 80044a4:	40010400 	.word	0x40010400

080044a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
 80044b4:	4613      	mov	r3, r2
 80044b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044b8:	787b      	ldrb	r3, [r7, #1]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044c4:	e002      	b.n	80044cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044e2:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ee:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd fb0a 	bl	8001b10 <HAL_GPIO_EXTI_Callback>
  }
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010400 	.word	0x40010400

08004508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d141      	bne.n	800459a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004516:	4b4b      	ldr	r3, [pc, #300]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004522:	d131      	bne.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004524:	4b47      	ldr	r3, [pc, #284]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800452a:	4a46      	ldr	r2, [pc, #280]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004534:	4b43      	ldr	r3, [pc, #268]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800453c:	4a41      	ldr	r2, [pc, #260]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004542:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004544:	4b40      	ldr	r3, [pc, #256]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2232      	movs	r2, #50	@ 0x32
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	4a3f      	ldr	r2, [pc, #252]	@ (800464c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	0c9b      	lsrs	r3, r3, #18
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800455a:	e002      	b.n	8004562 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3b01      	subs	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004562:	4b38      	ldr	r3, [pc, #224]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456e:	d102      	bne.n	8004576 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f2      	bne.n	800455c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004576:	4b33      	ldr	r3, [pc, #204]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004582:	d158      	bne.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e057      	b.n	8004638 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004588:	4b2e      	ldr	r3, [pc, #184]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800458e:	4a2d      	ldr	r2, [pc, #180]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004594:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004598:	e04d      	b.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a0:	d141      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045a2:	4b28      	ldr	r3, [pc, #160]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ae:	d131      	bne.n	8004614 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045b0:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045b6:	4a23      	ldr	r2, [pc, #140]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045c0:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2232      	movs	r2, #50	@ 0x32
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	4a1c      	ldr	r2, [pc, #112]	@ (800464c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	0c9b      	lsrs	r3, r3, #18
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e6:	e002      	b.n	80045ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ee:	4b15      	ldr	r3, [pc, #84]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fa:	d102      	bne.n	8004602 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f2      	bne.n	80045e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460e:	d112      	bne.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e011      	b.n	8004638 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004614:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461a:	4a0a      	ldr	r2, [pc, #40]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004620:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004624:	e007      	b.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004626:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800462e:	4a05      	ldr	r2, [pc, #20]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004634:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	40007000 	.word	0x40007000
 8004648:	20000200 	.word	0x20000200
 800464c:	431bde83 	.word	0x431bde83

08004650 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a04      	ldr	r2, [pc, #16]	@ (800466c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800465a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800465e:	6093      	str	r3, [r2, #8]
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40007000 	.word	0x40007000

08004670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e2fe      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d075      	beq.n	800477a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800468e:	4b97      	ldr	r3, [pc, #604]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004698:	4b94      	ldr	r3, [pc, #592]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d102      	bne.n	80046ae <HAL_RCC_OscConfig+0x3e>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d002      	beq.n	80046b4 <HAL_RCC_OscConfig+0x44>
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d10b      	bne.n	80046cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	4b8d      	ldr	r3, [pc, #564]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d05b      	beq.n	8004778 <HAL_RCC_OscConfig+0x108>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d157      	bne.n	8004778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e2d9      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d4:	d106      	bne.n	80046e4 <HAL_RCC_OscConfig+0x74>
 80046d6:	4b85      	ldr	r3, [pc, #532]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a84      	ldr	r2, [pc, #528]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e01d      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x98>
 80046ee:	4b7f      	ldr	r3, [pc, #508]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7e      	ldr	r2, [pc, #504]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b7c      	ldr	r3, [pc, #496]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7b      	ldr	r2, [pc, #492]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e00b      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 8004708:	4b78      	ldr	r3, [pc, #480]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a77      	ldr	r2, [pc, #476]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800470e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4b75      	ldr	r3, [pc, #468]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a74      	ldr	r2, [pc, #464]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800471a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d013      	beq.n	8004750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd fe24 	bl	8002374 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004730:	f7fd fe20 	bl	8002374 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	@ 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e29e      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004742:	4b6a      	ldr	r3, [pc, #424]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0xc0>
 800474e:	e014      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd fe10 	bl	8002374 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004758:	f7fd fe0c 	bl	8002374 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	@ 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e28a      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476a:	4b60      	ldr	r3, [pc, #384]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0xe8>
 8004776:	e000      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d075      	beq.n	8004872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004786:	4b59      	ldr	r3, [pc, #356]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004790:	4b56      	ldr	r3, [pc, #344]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d102      	bne.n	80047a6 <HAL_RCC_OscConfig+0x136>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d002      	beq.n	80047ac <HAL_RCC_OscConfig+0x13c>
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d11f      	bne.n	80047ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ac:	4b4f      	ldr	r3, [pc, #316]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_OscConfig+0x154>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e25d      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c4:	4b49      	ldr	r3, [pc, #292]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	4946      	ldr	r1, [pc, #280]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047d8:	4b45      	ldr	r3, [pc, #276]	@ (80048f0 <HAL_RCC_OscConfig+0x280>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fd fd7d 	bl	80022dc <HAL_InitTick>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d043      	beq.n	8004870 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e249      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d023      	beq.n	800483c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f4:	4b3d      	ldr	r3, [pc, #244]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3c      	ldr	r2, [pc, #240]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd fdb8 	bl	8002374 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004808:	f7fd fdb4 	bl	8002374 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e232      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481a:	4b34      	ldr	r3, [pc, #208]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004826:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	061b      	lsls	r3, r3, #24
 8004834:	492d      	ldr	r1, [pc, #180]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
 800483a:	e01a      	b.n	8004872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483c:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a2a      	ldr	r2, [pc, #168]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004842:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fd94 	bl	8002374 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004850:	f7fd fd90 	bl	8002374 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e20e      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004862:	4b22      	ldr	r3, [pc, #136]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x1e0>
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d041      	beq.n	8004902 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01c      	beq.n	80048c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004886:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800488c:	4a17      	ldr	r2, [pc, #92]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fd fd6d 	bl	8002374 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489e:	f7fd fd69 	bl	8002374 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e1e7      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b0:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80048b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ef      	beq.n	800489e <HAL_RCC_OscConfig+0x22e>
 80048be:	e020      	b.n	8004902 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c0:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80048c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048c6:	4a09      	ldr	r2, [pc, #36]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fd fd50 	bl	8002374 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d6:	e00d      	b.n	80048f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fd fd4c 	bl	8002374 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d906      	bls.n	80048f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e1ca      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000
 80048f0:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ea      	bne.n	80048d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 80a6 	beq.w	8004a5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004910:	2300      	movs	r3, #0
 8004912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004914:	4b84      	ldr	r3, [pc, #528]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_OscConfig+0x2b4>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x2b6>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00d      	beq.n	8004946 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004934:	6593      	str	r3, [r2, #88]	@ 0x58
 8004936:	4b7c      	ldr	r3, [pc, #496]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004942:	2301      	movs	r3, #1
 8004944:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004946:	4b79      	ldr	r3, [pc, #484]	@ (8004b2c <HAL_RCC_OscConfig+0x4bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004952:	4b76      	ldr	r3, [pc, #472]	@ (8004b2c <HAL_RCC_OscConfig+0x4bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a75      	ldr	r2, [pc, #468]	@ (8004b2c <HAL_RCC_OscConfig+0x4bc>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495e:	f7fd fd09 	bl	8002374 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fd fd05 	bl	8002374 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e183      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004978:	4b6c      	ldr	r3, [pc, #432]	@ (8004b2c <HAL_RCC_OscConfig+0x4bc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d108      	bne.n	800499e <HAL_RCC_OscConfig+0x32e>
 800498c:	4b66      	ldr	r3, [pc, #408]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	4a65      	ldr	r2, [pc, #404]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800499c:	e024      	b.n	80049e8 <HAL_RCC_OscConfig+0x378>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b05      	cmp	r3, #5
 80049a4:	d110      	bne.n	80049c8 <HAL_RCC_OscConfig+0x358>
 80049a6:	4b60      	ldr	r3, [pc, #384]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c6:	e00f      	b.n	80049e8 <HAL_RCC_OscConfig+0x378>
 80049c8:	4b57      	ldr	r3, [pc, #348]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ce:	4a56      	ldr	r2, [pc, #344]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d8:	4b53      	ldr	r3, [pc, #332]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	4a52      	ldr	r2, [pc, #328]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fd fcc0 	bl	8002374 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fd fcbc 	bl	8002374 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e138      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	4b46      	ldr	r3, [pc, #280]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ed      	beq.n	80049f8 <HAL_RCC_OscConfig+0x388>
 8004a1c:	e015      	b.n	8004a4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fd fca9 	bl	8002374 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fd fca5 	bl	8002374 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e121      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ed      	bne.n	8004a26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a50:	4b35      	ldr	r3, [pc, #212]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	4a34      	ldr	r2, [pc, #208]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d03c      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a70:	4b2d      	ldr	r3, [pc, #180]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a76:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fd fc78 	bl	8002374 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a88:	f7fd fc74 	bl	8002374 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e0f2      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a9a:	4b23      	ldr	r3, [pc, #140]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0ef      	beq.n	8004a88 <HAL_RCC_OscConfig+0x418>
 8004aa8:	e01b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aba:	f7fd fc5b 	bl	8002374 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac2:	f7fd fc57 	bl	8002374 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e0d5      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ad4:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1ef      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80c9 	beq.w	8004c7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aec:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	f000 8083 	beq.w	8004c00 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d15e      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a08      	ldr	r2, [pc, #32]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004b08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fd fc31 	bl	8002374 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b14:	e00c      	b.n	8004b30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fd fc2d 	bl	8002374 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d905      	bls.n	8004b30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0ab      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	4b55      	ldr	r3, [pc, #340]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1ec      	bne.n	8004b16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b3c:	4b52      	ldr	r3, [pc, #328]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	4b52      	ldr	r3, [pc, #328]	@ (8004c8c <HAL_RCC_OscConfig+0x61c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6a11      	ldr	r1, [r2, #32]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	0112      	lsls	r2, r2, #4
 8004b50:	4311      	orrs	r1, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b56:	0212      	lsls	r2, r2, #8
 8004b58:	4311      	orrs	r1, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b5e:	0852      	lsrs	r2, r2, #1
 8004b60:	3a01      	subs	r2, #1
 8004b62:	0552      	lsls	r2, r2, #21
 8004b64:	4311      	orrs	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b6a:	0852      	lsrs	r2, r2, #1
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	0652      	lsls	r2, r2, #25
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b76:	06d2      	lsls	r2, r2, #27
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	4943      	ldr	r1, [pc, #268]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b80:	4b41      	ldr	r3, [pc, #260]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a40      	ldr	r2, [pc, #256]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a3d      	ldr	r2, [pc, #244]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fbec 	bl	8002374 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd fbe8 	bl	8002374 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e066      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb2:	4b35      	ldr	r3, [pc, #212]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x530>
 8004bbe:	e05e      	b.n	8004c7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc0:	4b31      	ldr	r3, [pc, #196]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fbd2 	bl	8002374 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fd fbce 	bl	8002374 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e04c      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be6:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004bf2:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	4924      	ldr	r1, [pc, #144]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bf8:	4b25      	ldr	r3, [pc, #148]	@ (8004c90 <HAL_RCC_OscConfig+0x620>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	60cb      	str	r3, [r1, #12]
 8004bfe:	e03e      	b.n	8004c7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e039      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0203 	and.w	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d12c      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d123      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11b      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d113      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d109      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	3b01      	subs	r3, #1
 8004c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d001      	beq.n	8004c7e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	019f800c 	.word	0x019f800c
 8004c90:	feeefffc 	.word	0xfeeefffc

08004c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e11e      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b91      	ldr	r3, [pc, #580]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d910      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 020f 	bic.w	r2, r3, #15
 8004cc2:	498c      	ldr	r1, [pc, #560]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b8a      	ldr	r3, [pc, #552]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e106      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d073      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d129      	bne.n	8004d44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf0:	4b81      	ldr	r3, [pc, #516]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0f4      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d00:	f000 f99e 	bl	8005040 <RCC_GetSysClockFreqFromPLLSource>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4a7c      	ldr	r2, [pc, #496]	@ (8004efc <HAL_RCC_ClockConfig+0x268>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d93f      	bls.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d033      	beq.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d12f      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d2e:	4b72      	ldr	r3, [pc, #456]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d36:	4a70      	ldr	r2, [pc, #448]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e024      	b.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0c6      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d5c:	4b66      	ldr	r3, [pc, #408]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0be      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d6c:	f000 f8ce 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4a61      	ldr	r2, [pc, #388]	@ (8004efc <HAL_RCC_ClockConfig+0x268>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d909      	bls.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d82:	4a5d      	ldr	r2, [pc, #372]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d8a:	2380      	movs	r3, #128	@ 0x80
 8004d8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4957      	ldr	r1, [pc, #348]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fd fae8 	bl	8002374 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da8:	f7fd fae4 	bl	8002374 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e095      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1eb      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d023      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de8:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a42      	ldr	r2, [pc, #264]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004dee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004df2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e00:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e08:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4936      	ldr	r1, [pc, #216]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b80      	cmp	r3, #128	@ 0x80
 8004e28:	d105      	bne.n	8004e36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e2a:	4b33      	ldr	r3, [pc, #204]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e36:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d21d      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e44:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 020f 	bic.w	r2, r3, #15
 8004e4c:	4929      	ldr	r1, [pc, #164]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e54:	f7fd fa8e 	bl	8002374 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5c:	f7fd fa8a 	bl	8002374 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e03b      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d1ed      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4917      	ldr	r1, [pc, #92]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eaa:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	490f      	ldr	r1, [pc, #60]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ebe:	f000 f825 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	490c      	ldr	r1, [pc, #48]	@ (8004f00 <HAL_RCC_ClockConfig+0x26c>)
 8004ed0:	5ccb      	ldrb	r3, [r1, r3]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eda:	4a0a      	ldr	r2, [pc, #40]	@ (8004f04 <HAL_RCC_ClockConfig+0x270>)
 8004edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <HAL_RCC_ClockConfig+0x274>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd f9fa 	bl	80022dc <HAL_InitTick>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40022000 	.word	0x40022000
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	04c4b400 	.word	0x04c4b400
 8004f00:	0800a268 	.word	0x0800a268
 8004f04:	20000200 	.word	0x20000200
 8004f08:	20000204 	.word	0x20000204

08004f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f12:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e047      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f24:	4b27      	ldr	r3, [pc, #156]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d102      	bne.n	8004f36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f30:	4b26      	ldr	r3, [pc, #152]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e03e      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f36:	4b23      	ldr	r3, [pc, #140]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d136      	bne.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f42:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	3301      	adds	r3, #1
 8004f58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d10c      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f60:	4a1a      	ldr	r2, [pc, #104]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	4a16      	ldr	r2, [pc, #88]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6a:	68d2      	ldr	r2, [r2, #12]
 8004f6c:	0a12      	lsrs	r2, r2, #8
 8004f6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	617b      	str	r3, [r7, #20]
      break;
 8004f78:	e00c      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f7a:	4a13      	ldr	r2, [pc, #76]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	4a10      	ldr	r2, [pc, #64]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f84:	68d2      	ldr	r2, [r2, #12]
 8004f86:	0a12      	lsrs	r2, r2, #8
 8004f88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f8c:	fb02 f303 	mul.w	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]
      break;
 8004f92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	0e5b      	lsrs	r3, r3, #25
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	e001      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fb4:	693b      	ldr	r3, [r7, #16]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	016e3600 	.word	0x016e3600

08004fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000200 	.word	0x20000200

08004fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fec:	f7ff fff0 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4904      	ldr	r1, [pc, #16]	@ (8005010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000
 8005010:	0800a278 	.word	0x0800a278

08005014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005018:	f7ff ffda 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	0adb      	lsrs	r3, r3, #11
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	4904      	ldr	r1, [pc, #16]	@ (800503c <HAL_RCC_GetPCLK2Freq+0x28>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	0800a278 	.word	0x0800a278

08005040 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005046:	4b1e      	ldr	r3, [pc, #120]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005050:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d10c      	bne.n	800507e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005064:	4a17      	ldr	r2, [pc, #92]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	4a14      	ldr	r2, [pc, #80]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800506e:	68d2      	ldr	r2, [r2, #12]
 8005070:	0a12      	lsrs	r2, r2, #8
 8005072:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	617b      	str	r3, [r7, #20]
    break;
 800507c:	e00c      	b.n	8005098 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800507e:	4a12      	ldr	r2, [pc, #72]	@ (80050c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	4a0e      	ldr	r2, [pc, #56]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005088:	68d2      	ldr	r2, [r2, #12]
 800508a:	0a12      	lsrs	r2, r2, #8
 800508c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
    break;
 8005096:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005098:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	0e5b      	lsrs	r3, r3, #25
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	3301      	adds	r3, #1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050b2:	687b      	ldr	r3, [r7, #4]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40021000 	.word	0x40021000
 80050c4:	016e3600 	.word	0x016e3600
 80050c8:	00f42400 	.word	0x00f42400

080050cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050d4:	2300      	movs	r3, #0
 80050d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050d8:	2300      	movs	r3, #0
 80050da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8098 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ee:	4b43      	ldr	r3, [pc, #268]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10d      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	4b40      	ldr	r3, [pc, #256]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fe:	4a3f      	ldr	r2, [pc, #252]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005104:	6593      	str	r3, [r2, #88]	@ 0x58
 8005106:	4b3d      	ldr	r3, [pc, #244]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005112:	2301      	movs	r3, #1
 8005114:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005116:	4b3a      	ldr	r3, [pc, #232]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a39      	ldr	r2, [pc, #228]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005120:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005122:	f7fd f927 	bl	8002374 <HAL_GetTick>
 8005126:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005128:	e009      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512a:	f7fd f923 	bl	8002374 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d902      	bls.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	74fb      	strb	r3, [r7, #19]
        break;
 800513c:	e005      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800513e:	4b30      	ldr	r3, [pc, #192]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ef      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d159      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01e      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	429a      	cmp	r2, r3
 800516a:	d019      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800516c:	4b23      	ldr	r3, [pc, #140]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005178:	4b20      	ldr	r3, [pc, #128]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517e:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005188:	4b1c      	ldr	r3, [pc, #112]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	4a1b      	ldr	r2, [pc, #108]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005198:	4a18      	ldr	r2, [pc, #96]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d016      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fd f8e3 	bl	8002374 <HAL_GetTick>
 80051ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b0:	e00b      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fd f8df 	bl	8002374 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d902      	bls.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	74fb      	strb	r3, [r7, #19]
            break;
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ca:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ec      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80051d8:	7cfb      	ldrb	r3, [r7, #19]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051de:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ec:	4903      	ldr	r1, [pc, #12]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051f4:	e008      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	74bb      	strb	r3, [r7, #18]
 80051fa:	e005      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80051fc:	40021000 	.word	0x40021000
 8005200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005208:	7c7b      	ldrb	r3, [r7, #17]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520e:	4ba7      	ldr	r3, [pc, #668]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	4aa6      	ldr	r2, [pc, #664]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005226:	4ba1      	ldr	r3, [pc, #644]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522c:	f023 0203 	bic.w	r2, r3, #3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	499d      	ldr	r1, [pc, #628]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005248:	4b98      	ldr	r3, [pc, #608]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	f023 020c 	bic.w	r2, r3, #12
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4995      	ldr	r1, [pc, #596]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800526a:	4b90      	ldr	r3, [pc, #576]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005270:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	498c      	ldr	r1, [pc, #560]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800528c:	4b87      	ldr	r3, [pc, #540]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005292:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	4984      	ldr	r1, [pc, #528]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ae:	4b7f      	ldr	r3, [pc, #508]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	497b      	ldr	r1, [pc, #492]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052d0:	4b76      	ldr	r3, [pc, #472]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	4973      	ldr	r1, [pc, #460]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052f2:	4b6e      	ldr	r3, [pc, #440]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	496a      	ldr	r1, [pc, #424]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005314:	4b65      	ldr	r3, [pc, #404]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4962      	ldr	r1, [pc, #392]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005336:	4b5d      	ldr	r3, [pc, #372]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005344:	4959      	ldr	r1, [pc, #356]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005358:	4b54      	ldr	r3, [pc, #336]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	4951      	ldr	r1, [pc, #324]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800537a:	4b4c      	ldr	r3, [pc, #304]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005380:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4948      	ldr	r1, [pc, #288]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005398:	2b00      	cmp	r3, #0
 800539a:	d015      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800539c:	4b43      	ldr	r3, [pc, #268]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053aa:	4940      	ldr	r1, [pc, #256]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ba:	d105      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053bc:	4b3b      	ldr	r3, [pc, #236]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4a3a      	ldr	r2, [pc, #232]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d015      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053d4:	4b35      	ldr	r3, [pc, #212]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e2:	4932      	ldr	r1, [pc, #200]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053f2:	d105      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f4:	4b2d      	ldr	r3, [pc, #180]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800540c:	4b27      	ldr	r3, [pc, #156]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005412:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	4924      	ldr	r1, [pc, #144]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800542a:	d105      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542c:	4b1f      	ldr	r3, [pc, #124]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005436:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d015      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005444:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	4916      	ldr	r1, [pc, #88]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005462:	d105      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005464:	4b11      	ldr	r3, [pc, #68]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4a10      	ldr	r2, [pc, #64]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800546e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d019      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005482:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	4908      	ldr	r1, [pc, #32]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800549a:	d109      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800549c:	4b03      	ldr	r3, [pc, #12]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a02      	ldr	r2, [pc, #8]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a6:	60d3      	str	r3, [r2, #12]
 80054a8:	e002      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054bc:	4b29      	ldr	r3, [pc, #164]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	4926      	ldr	r1, [pc, #152]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054dc:	4b21      	ldr	r3, [pc, #132]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a20      	ldr	r2, [pc, #128]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80054f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005502:	4918      	ldr	r1, [pc, #96]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005514:	4b13      	ldr	r3, [pc, #76]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a12      	ldr	r2, [pc, #72]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800551a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800552c:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800552e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005532:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553a:	490a      	ldr	r1, [pc, #40]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a04      	ldr	r2, [pc, #16]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005556:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005558:	7cbb      	ldrb	r3, [r7, #18]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40021000 	.word	0x40021000

08005568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e054      	b.n	8005624 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d111      	bne.n	80055aa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 ffde 	bl	8007550 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a23      	ldr	r2, [pc, #140]	@ (800562c <HAL_TIM_Base_Init+0xc4>)
 80055a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f001 fb27 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	08001d35 	.word	0x08001d35

08005630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e04c      	b.n	80056e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a26      	ldr	r2, [pc, #152]	@ (80056f0 <HAL_TIM_Base_Start+0xc0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005662:	d01d      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a22      	ldr	r2, [pc, #136]	@ (80056f4 <HAL_TIM_Base_Start+0xc4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a21      	ldr	r2, [pc, #132]	@ (80056f8 <HAL_TIM_Base_Start+0xc8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1f      	ldr	r2, [pc, #124]	@ (80056fc <HAL_TIM_Base_Start+0xcc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1e      	ldr	r2, [pc, #120]	@ (8005700 <HAL_TIM_Base_Start+0xd0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <HAL_TIM_Base_Start+0xd4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1b      	ldr	r2, [pc, #108]	@ (8005708 <HAL_TIM_Base_Start+0xd8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d115      	bne.n	80056cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	4b19      	ldr	r3, [pc, #100]	@ (800570c <HAL_TIM_Base_Start+0xdc>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d015      	beq.n	80056de <HAL_TIM_Base_Start+0xae>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b8:	d011      	beq.n	80056de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ca:	e008      	b.n	80056de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e000      	b.n	80056e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40013400 	.word	0x40013400
 8005704:	40014000 	.word	0x40014000
 8005708:	40015000 	.word	0x40015000
 800570c:	00010007 	.word	0x00010007

08005710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d001      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e054      	b.n	80057d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a26      	ldr	r2, [pc, #152]	@ (80057e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x80>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005752:	d01d      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x80>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a22      	ldr	r2, [pc, #136]	@ (80057e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x80>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a21      	ldr	r2, [pc, #132]	@ (80057e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x80>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1f      	ldr	r2, [pc, #124]	@ (80057ec <HAL_TIM_Base_Start_IT+0xdc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x80>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1e      	ldr	r2, [pc, #120]	@ (80057f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x80>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1c      	ldr	r2, [pc, #112]	@ (80057f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x80>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1b      	ldr	r2, [pc, #108]	@ (80057f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d115      	bne.n	80057bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	4b19      	ldr	r3, [pc, #100]	@ (80057fc <HAL_TIM_Base_Start_IT+0xec>)
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d015      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0xbe>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d011      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	e008      	b.n	80057ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e000      	b.n	80057d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40015000 	.word	0x40015000
 80057fc:	00010007 	.word	0x00010007

08005800 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e054      	b.n	80058bc <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d111      	bne.n	8005842 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fe92 	bl	8007550 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d102      	bne.n	800583a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a23      	ldr	r2, [pc, #140]	@ (80058c4 <HAL_TIM_OC_Init+0xc4>)
 8005838:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3304      	adds	r3, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f001 f9db 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	080058c9 	.word	0x080058c9

080058c8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e054      	b.n	8005998 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d111      	bne.n	800591e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 fe24 	bl	8007550 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a23      	ldr	r2, [pc, #140]	@ (80059a0 <HAL_TIM_PWM_Init+0xc4>)
 8005914:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f001 f96d 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	080059a5 	.word	0x080059a5

080059a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <HAL_TIM_PWM_Start+0x24>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	bf14      	ite	ne
 80059d4:	2301      	movne	r3, #1
 80059d6:	2300      	moveq	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	e03c      	b.n	8005a56 <HAL_TIM_PWM_Start+0x9e>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d109      	bne.n	80059f6 <HAL_TIM_PWM_Start+0x3e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	bf14      	ite	ne
 80059ee:	2301      	movne	r3, #1
 80059f0:	2300      	moveq	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	e02f      	b.n	8005a56 <HAL_TIM_PWM_Start+0x9e>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d109      	bne.n	8005a10 <HAL_TIM_PWM_Start+0x58>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	bf14      	ite	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	2300      	moveq	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	e022      	b.n	8005a56 <HAL_TIM_PWM_Start+0x9e>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b0c      	cmp	r3, #12
 8005a14:	d109      	bne.n	8005a2a <HAL_TIM_PWM_Start+0x72>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	bf14      	ite	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	2300      	moveq	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	e015      	b.n	8005a56 <HAL_TIM_PWM_Start+0x9e>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d109      	bne.n	8005a44 <HAL_TIM_PWM_Start+0x8c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	e008      	b.n	8005a56 <HAL_TIM_PWM_Start+0x9e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e0a6      	b.n	8005bac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_PWM_Start+0xb6>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a6c:	e023      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xfe>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_PWM_Start+0xc6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a7c:	e01b      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xfe>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_PWM_Start+0xd6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a8c:	e013      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xfe>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_PWM_Start+0xe6>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a9c:	e00b      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xfe>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_PWM_Start+0xf6>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aac:	e003      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xfe>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2201      	movs	r2, #1
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 fd20 	bl	8007504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a3a      	ldr	r2, [pc, #232]	@ (8005bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d018      	beq.n	8005b00 <HAL_TIM_PWM_Start+0x148>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a39      	ldr	r2, [pc, #228]	@ (8005bb8 <HAL_TIM_PWM_Start+0x200>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <HAL_TIM_PWM_Start+0x148>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a37      	ldr	r2, [pc, #220]	@ (8005bbc <HAL_TIM_PWM_Start+0x204>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00e      	beq.n	8005b00 <HAL_TIM_PWM_Start+0x148>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a36      	ldr	r2, [pc, #216]	@ (8005bc0 <HAL_TIM_PWM_Start+0x208>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d009      	beq.n	8005b00 <HAL_TIM_PWM_Start+0x148>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a34      	ldr	r2, [pc, #208]	@ (8005bc4 <HAL_TIM_PWM_Start+0x20c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_TIM_PWM_Start+0x148>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a33      	ldr	r2, [pc, #204]	@ (8005bc8 <HAL_TIM_PWM_Start+0x210>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <HAL_TIM_PWM_Start+0x14c>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <HAL_TIM_PWM_Start+0x14e>
 8005b04:	2300      	movs	r3, #0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a25      	ldr	r2, [pc, #148]	@ (8005bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d022      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x1b2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2c:	d01d      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x1b2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a26      	ldr	r2, [pc, #152]	@ (8005bcc <HAL_TIM_PWM_Start+0x214>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d018      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x1b2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a24      	ldr	r2, [pc, #144]	@ (8005bd0 <HAL_TIM_PWM_Start+0x218>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x1b2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a23      	ldr	r2, [pc, #140]	@ (8005bd4 <HAL_TIM_PWM_Start+0x21c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00e      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x1b2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a19      	ldr	r2, [pc, #100]	@ (8005bb8 <HAL_TIM_PWM_Start+0x200>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x1b2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <HAL_TIM_PWM_Start+0x204>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x1b2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <HAL_TIM_PWM_Start+0x210>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d115      	bne.n	8005b96 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	4b19      	ldr	r3, [pc, #100]	@ (8005bd8 <HAL_TIM_PWM_Start+0x220>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b06      	cmp	r3, #6
 8005b7a:	d015      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0x1f0>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b82:	d011      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b94:	e008      	b.n	8005ba8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e000      	b.n	8005baa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800
 8005bc8:	40015000 	.word	0x40015000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	00010007 	.word	0x00010007

08005bdc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e04c      	b.n	8005c8a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d111      	bne.n	8005c20 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 fca3 	bl	8007550 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1f      	ldr	r2, [pc, #124]	@ (8005c94 <HAL_TIM_OnePulse_Init+0xb8>)
 8005c16:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f000 ffec 	bl	8006c10 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0208 	bic.w	r2, r2, #8
 8005c46:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	08005c99 	.word	0x08005c99

08005c98 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ccc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cd4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d108      	bne.n	8005cee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d105      	bne.n	8005cee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ce2:	7b7b      	ldrb	r3, [r7, #13]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ce8:	7b3b      	ldrb	r3, [r7, #12]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e059      	b.n	8005da6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0202 	orr.w	r2, r2, #2
 8005d20:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0204 	orr.w	r2, r2, #4
 8005d30:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fbe2 	bl	8007504 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2201      	movs	r2, #1
 8005d46:	2104      	movs	r1, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 fbdb 	bl	8007504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	@ (8005db4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a14      	ldr	r2, [pc, #80]	@ (8005db8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a12      	ldr	r2, [pc, #72]	@ (8005dbc <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a11      	ldr	r2, [pc, #68]	@ (8005dc0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0f      	ldr	r2, [pc, #60]	@ (8005dc4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005da2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	40014800 	.word	0x40014800
 8005dc4:	40015000 	.word	0x40015000

08005dc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0a2      	b.n	8005f22 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d111      	bne.n	8005e0c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fbad 	bl	8007550 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a4a      	ldr	r2, [pc, #296]	@ (8005f2c <HAL_TIM_Encoder_Init+0x164>)
 8005e02:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005e22:	f023 0307 	bic.w	r3, r3, #7
 8005e26:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f000 feec 	bl	8006c10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e60:	f023 0303 	bic.w	r3, r3, #3
 8005e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	4313      	orrs	r3, r2
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e7e:	f023 030c 	bic.w	r3, r3, #12
 8005e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	011a      	lsls	r2, r3, #4
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	031b      	lsls	r3, r3, #12
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ebc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ec4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	08001e3d 	.word	0x08001e3d

08005f30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d110      	bne.n	8005f82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d102      	bne.n	8005f6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f66:	7b7b      	ldrb	r3, [r7, #13]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d001      	beq.n	8005f70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e069      	b.n	8006044 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f80:	e031      	b.n	8005fe6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d110      	bne.n	8005faa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d102      	bne.n	8005f94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f8e:	7b3b      	ldrb	r3, [r7, #12]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d001      	beq.n	8005f98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e055      	b.n	8006044 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fa8:	e01d      	b.n	8005fe6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d108      	bne.n	8005fc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d105      	bne.n	8005fc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb6:	7b7b      	ldrb	r3, [r7, #13]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d102      	bne.n	8005fc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fbc:	7b3b      	ldrb	r3, [r7, #12]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d001      	beq.n	8005fc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e03e      	b.n	8006044 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_TIM_Encoder_Start+0xc4>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d008      	beq.n	8006004 <HAL_TIM_Encoder_Start+0xd4>
 8005ff2:	e00f      	b.n	8006014 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fa81 	bl	8007504 <TIM_CCxChannelCmd>
      break;
 8006002:	e016      	b.n	8006032 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2201      	movs	r2, #1
 800600a:	2104      	movs	r1, #4
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fa79 	bl	8007504 <TIM_CCxChannelCmd>
      break;
 8006012:	e00e      	b.n	8006032 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2201      	movs	r2, #1
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f001 fa71 	bl	8007504 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	2104      	movs	r1, #4
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fa6a 	bl	8007504 <TIM_CCxChannelCmd>
      break;
 8006030:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0201 	orr.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d026      	beq.n	80060bc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d021      	beq.n	80060bc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0202 	mvn.w	r2, #2
 8006080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
 80060a0:	e009      	b.n	80060b6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d026      	beq.n	8006114 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d021      	beq.n	8006114 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0204 	mvn.w	r2, #4
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
 80060f8:	e009      	b.n	800610e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d026      	beq.n	800616c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d021      	beq.n	800616c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0208 	mvn.w	r2, #8
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2204      	movs	r2, #4
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
 8006150:	e009      	b.n	8006166 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	2b00      	cmp	r3, #0
 8006174:	d026      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	d021      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0210 	mvn.w	r2, #16
 8006188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2208      	movs	r2, #8
 800618e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
 80061a8:	e009      	b.n	80061be <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00e      	beq.n	80061ec <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0201 	mvn.w	r2, #1
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00e      	beq.n	800621e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800623a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00e      	beq.n	800626e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00e      	beq.n	8006296 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f06f 0220 	mvn.w	r2, #32
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00e      	beq.n	80062be <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80062b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00e      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00e      	beq.n	8006336 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800632a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_TIM_OC_ConfigChannel+0x1e>
 800635a:	2302      	movs	r3, #2
 800635c:	e066      	b.n	800642c <HAL_TIM_OC_ConfigChannel+0xec>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b14      	cmp	r3, #20
 800636a:	d857      	bhi.n	800641c <HAL_TIM_OC_ConfigChannel+0xdc>
 800636c:	a201      	add	r2, pc, #4	@ (adr r2, 8006374 <HAL_TIM_OC_ConfigChannel+0x34>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	080063c9 	.word	0x080063c9
 8006378:	0800641d 	.word	0x0800641d
 800637c:	0800641d 	.word	0x0800641d
 8006380:	0800641d 	.word	0x0800641d
 8006384:	080063d7 	.word	0x080063d7
 8006388:	0800641d 	.word	0x0800641d
 800638c:	0800641d 	.word	0x0800641d
 8006390:	0800641d 	.word	0x0800641d
 8006394:	080063e5 	.word	0x080063e5
 8006398:	0800641d 	.word	0x0800641d
 800639c:	0800641d 	.word	0x0800641d
 80063a0:	0800641d 	.word	0x0800641d
 80063a4:	080063f3 	.word	0x080063f3
 80063a8:	0800641d 	.word	0x0800641d
 80063ac:	0800641d 	.word	0x0800641d
 80063b0:	0800641d 	.word	0x0800641d
 80063b4:	08006401 	.word	0x08006401
 80063b8:	0800641d 	.word	0x0800641d
 80063bc:	0800641d 	.word	0x0800641d
 80063c0:	0800641d 	.word	0x0800641d
 80063c4:	0800640f 	.word	0x0800640f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fcd2 	bl	8006d78 <TIM_OC1_SetConfig>
      break;
 80063d4:	e025      	b.n	8006422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fd65 	bl	8006eac <TIM_OC2_SetConfig>
      break;
 80063e2:	e01e      	b.n	8006422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fdf2 	bl	8006fd4 <TIM_OC3_SetConfig>
      break;
 80063f0:	e017      	b.n	8006422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fe7d 	bl	80070f8 <TIM_OC4_SetConfig>
      break;
 80063fe:	e010      	b.n	8006422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 ff0a 	bl	8007220 <TIM_OC5_SetConfig>
      break;
 800640c:	e009      	b.n	8006422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 ff6d 	bl	80072f4 <TIM_OC6_SetConfig>
      break;
 800641a:	e002      	b.n	8006422 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
      break;
 8006420:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800644e:	2302      	movs	r3, #2
 8006450:	e0ff      	b.n	8006652 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b14      	cmp	r3, #20
 800645e:	f200 80f0 	bhi.w	8006642 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006462:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	080064bd 	.word	0x080064bd
 800646c:	08006643 	.word	0x08006643
 8006470:	08006643 	.word	0x08006643
 8006474:	08006643 	.word	0x08006643
 8006478:	080064fd 	.word	0x080064fd
 800647c:	08006643 	.word	0x08006643
 8006480:	08006643 	.word	0x08006643
 8006484:	08006643 	.word	0x08006643
 8006488:	0800653f 	.word	0x0800653f
 800648c:	08006643 	.word	0x08006643
 8006490:	08006643 	.word	0x08006643
 8006494:	08006643 	.word	0x08006643
 8006498:	0800657f 	.word	0x0800657f
 800649c:	08006643 	.word	0x08006643
 80064a0:	08006643 	.word	0x08006643
 80064a4:	08006643 	.word	0x08006643
 80064a8:	080065c1 	.word	0x080065c1
 80064ac:	08006643 	.word	0x08006643
 80064b0:	08006643 	.word	0x08006643
 80064b4:	08006643 	.word	0x08006643
 80064b8:	08006601 	.word	0x08006601
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fc58 	bl	8006d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0208 	orr.w	r2, r2, #8
 80064d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6999      	ldr	r1, [r3, #24]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	619a      	str	r2, [r3, #24]
      break;
 80064fa:	e0a5      	b.n	8006648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fcd2 	bl	8006eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699a      	ldr	r2, [r3, #24]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6999      	ldr	r1, [r3, #24]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	021a      	lsls	r2, r3, #8
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	619a      	str	r2, [r3, #24]
      break;
 800653c:	e084      	b.n	8006648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fd45 	bl	8006fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0208 	orr.w	r2, r2, #8
 8006558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0204 	bic.w	r2, r2, #4
 8006568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69d9      	ldr	r1, [r3, #28]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	61da      	str	r2, [r3, #28]
      break;
 800657c:	e064      	b.n	8006648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fdb7 	bl	80070f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69d9      	ldr	r1, [r3, #28]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	021a      	lsls	r2, r3, #8
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	61da      	str	r2, [r3, #28]
      break;
 80065be:	e043      	b.n	8006648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fe2a 	bl	8007220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0208 	orr.w	r2, r2, #8
 80065da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0204 	bic.w	r2, r2, #4
 80065ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80065fe:	e023      	b.n	8006648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fe74 	bl	80072f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800661a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800662a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	021a      	lsls	r2, r3, #8
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006640:	e002      	b.n	8006648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	75fb      	strb	r3, [r7, #23]
      break;
 8006646:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop

0800665c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_TIM_ConfigClockSource+0x1c>
 8006674:	2302      	movs	r3, #2
 8006676:	e0f6      	b.n	8006866 <HAL_TIM_ConfigClockSource+0x20a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006696:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800669a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a6f      	ldr	r2, [pc, #444]	@ (8006870 <HAL_TIM_ConfigClockSource+0x214>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	f000 80c1 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1de>
 80066b8:	4a6d      	ldr	r2, [pc, #436]	@ (8006870 <HAL_TIM_ConfigClockSource+0x214>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f200 80c6 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 80066c0:	4a6c      	ldr	r2, [pc, #432]	@ (8006874 <HAL_TIM_ConfigClockSource+0x218>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	f000 80b9 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1de>
 80066c8:	4a6a      	ldr	r2, [pc, #424]	@ (8006874 <HAL_TIM_ConfigClockSource+0x218>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	f200 80be 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 80066d0:	4a69      	ldr	r2, [pc, #420]	@ (8006878 <HAL_TIM_ConfigClockSource+0x21c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	f000 80b1 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1de>
 80066d8:	4a67      	ldr	r2, [pc, #412]	@ (8006878 <HAL_TIM_ConfigClockSource+0x21c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	f200 80b6 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 80066e0:	4a66      	ldr	r2, [pc, #408]	@ (800687c <HAL_TIM_ConfigClockSource+0x220>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	f000 80a9 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1de>
 80066e8:	4a64      	ldr	r2, [pc, #400]	@ (800687c <HAL_TIM_ConfigClockSource+0x220>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	f200 80ae 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 80066f0:	4a63      	ldr	r2, [pc, #396]	@ (8006880 <HAL_TIM_ConfigClockSource+0x224>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f000 80a1 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1de>
 80066f8:	4a61      	ldr	r2, [pc, #388]	@ (8006880 <HAL_TIM_ConfigClockSource+0x224>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	f200 80a6 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 8006700:	4a60      	ldr	r2, [pc, #384]	@ (8006884 <HAL_TIM_ConfigClockSource+0x228>)
 8006702:	4293      	cmp	r3, r2
 8006704:	f000 8099 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1de>
 8006708:	4a5e      	ldr	r2, [pc, #376]	@ (8006884 <HAL_TIM_ConfigClockSource+0x228>)
 800670a:	4293      	cmp	r3, r2
 800670c:	f200 809e 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 8006710:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006714:	f000 8091 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1de>
 8006718:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800671c:	f200 8096 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 8006720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006724:	f000 8089 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1de>
 8006728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800672c:	f200 808e 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 8006730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006734:	d03e      	beq.n	80067b4 <HAL_TIM_ConfigClockSource+0x158>
 8006736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800673a:	f200 8087 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006742:	f000 8086 	beq.w	8006852 <HAL_TIM_ConfigClockSource+0x1f6>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674a:	d87f      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 800674c:	2b70      	cmp	r3, #112	@ 0x70
 800674e:	d01a      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x12a>
 8006750:	2b70      	cmp	r3, #112	@ 0x70
 8006752:	d87b      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 8006754:	2b60      	cmp	r3, #96	@ 0x60
 8006756:	d050      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x19e>
 8006758:	2b60      	cmp	r3, #96	@ 0x60
 800675a:	d877      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 800675c:	2b50      	cmp	r3, #80	@ 0x50
 800675e:	d03c      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x17e>
 8006760:	2b50      	cmp	r3, #80	@ 0x50
 8006762:	d873      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 8006764:	2b40      	cmp	r3, #64	@ 0x40
 8006766:	d058      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x1be>
 8006768:	2b40      	cmp	r3, #64	@ 0x40
 800676a:	d86f      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 800676c:	2b30      	cmp	r3, #48	@ 0x30
 800676e:	d064      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x1de>
 8006770:	2b30      	cmp	r3, #48	@ 0x30
 8006772:	d86b      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 8006774:	2b20      	cmp	r3, #32
 8006776:	d060      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x1de>
 8006778:	2b20      	cmp	r3, #32
 800677a:	d867      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1f0>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d05c      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x1de>
 8006780:	2b10      	cmp	r3, #16
 8006782:	d05a      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x1de>
 8006784:	e062      	b.n	800684c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006796:	f000 fe95 	bl	80074c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	609a      	str	r2, [r3, #8]
      break;
 80067b2:	e04f      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067c4:	f000 fe7e 	bl	80074c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067d6:	609a      	str	r2, [r3, #8]
      break;
 80067d8:	e03c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e6:	461a      	mov	r2, r3
 80067e8:	f000 fdf0 	bl	80073cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2150      	movs	r1, #80	@ 0x50
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fe49 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 80067f8:	e02c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006806:	461a      	mov	r2, r3
 8006808:	f000 fe0f 	bl	800742a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2160      	movs	r1, #96	@ 0x60
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fe39 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006818:	e01c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006826:	461a      	mov	r2, r3
 8006828:	f000 fdd0 	bl	80073cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2140      	movs	r1, #64	@ 0x40
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fe29 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006838:	e00c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f000 fe20 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 800684a:	e003      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
      break;
 8006850:	e000      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	00100070 	.word	0x00100070
 8006874:	00100060 	.word	0x00100060
 8006878:	00100050 	.word	0x00100050
 800687c:	00100040 	.word	0x00100040
 8006880:	00100030 	.word	0x00100030
 8006884:	00100020 	.word	0x00100020

08006888 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	460b      	mov	r3, r1
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e14a      	b.n	8006c02 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	f040 80dd 	bne.w	8006b34 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	2b1f      	cmp	r3, #31
 800697e:	f200 80d6 	bhi.w	8006b2e <HAL_TIM_RegisterCallback+0x1de>
 8006982:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <HAL_TIM_RegisterCallback+0x38>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	08006a09 	.word	0x08006a09
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a19 	.word	0x08006a19
 8006994:	08006a21 	.word	0x08006a21
 8006998:	08006a29 	.word	0x08006a29
 800699c:	08006a31 	.word	0x08006a31
 80069a0:	08006a39 	.word	0x08006a39
 80069a4:	08006a41 	.word	0x08006a41
 80069a8:	08006a49 	.word	0x08006a49
 80069ac:	08006a51 	.word	0x08006a51
 80069b0:	08006a59 	.word	0x08006a59
 80069b4:	08006a61 	.word	0x08006a61
 80069b8:	08006a69 	.word	0x08006a69
 80069bc:	08006a71 	.word	0x08006a71
 80069c0:	08006a7b 	.word	0x08006a7b
 80069c4:	08006a85 	.word	0x08006a85
 80069c8:	08006a8f 	.word	0x08006a8f
 80069cc:	08006a99 	.word	0x08006a99
 80069d0:	08006aa3 	.word	0x08006aa3
 80069d4:	08006aad 	.word	0x08006aad
 80069d8:	08006ab7 	.word	0x08006ab7
 80069dc:	08006ac1 	.word	0x08006ac1
 80069e0:	08006acb 	.word	0x08006acb
 80069e4:	08006ad5 	.word	0x08006ad5
 80069e8:	08006adf 	.word	0x08006adf
 80069ec:	08006ae9 	.word	0x08006ae9
 80069f0:	08006af3 	.word	0x08006af3
 80069f4:	08006afd 	.word	0x08006afd
 80069f8:	08006b07 	.word	0x08006b07
 80069fc:	08006b11 	.word	0x08006b11
 8006a00:	08006b1b 	.word	0x08006b1b
 8006a04:	08006b25 	.word	0x08006b25
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006a0e:	e0f7      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006a16:	e0f3      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006a1e:	e0ef      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006a26:	e0eb      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006a2e:	e0e7      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006a36:	e0e3      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006a3e:	e0df      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006a46:	e0db      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006a4e:	e0d7      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006a56:	e0d3      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006a5e:	e0cf      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006a66:	e0cb      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006a6e:	e0c7      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006a78:	e0c2      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8006a82:	e0bd      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006a8c:	e0b8      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8006a96:	e0b3      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8006aa0:	e0ae      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006aaa:	e0a9      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006ab4:	e0a4      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006abe:	e09f      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006ac8:	e09a      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8006ad2:	e095      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006adc:	e090      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8006ae6:	e08b      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8006af0:	e086      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8006afa:	e081      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8006b04:	e07c      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8006b0e:	e077      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8006b18:	e072      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8006b22:	e06d      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006b2c:	e068      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
        break;
 8006b32:	e065      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d15d      	bne.n	8006bfc <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006b40:	7afb      	ldrb	r3, [r7, #11]
 8006b42:	2b0d      	cmp	r3, #13
 8006b44:	d857      	bhi.n	8006bf6 <HAL_TIM_RegisterCallback+0x2a6>
 8006b46:	a201      	add	r2, pc, #4	@ (adr r2, 8006b4c <HAL_TIM_RegisterCallback+0x1fc>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b85 	.word	0x08006b85
 8006b50:	08006b8d 	.word	0x08006b8d
 8006b54:	08006b95 	.word	0x08006b95
 8006b58:	08006b9d 	.word	0x08006b9d
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006bad 	.word	0x08006bad
 8006b64:	08006bb5 	.word	0x08006bb5
 8006b68:	08006bbd 	.word	0x08006bbd
 8006b6c:	08006bc5 	.word	0x08006bc5
 8006b70:	08006bcd 	.word	0x08006bcd
 8006b74:	08006bd5 	.word	0x08006bd5
 8006b78:	08006bdd 	.word	0x08006bdd
 8006b7c:	08006be5 	.word	0x08006be5
 8006b80:	08006bed 	.word	0x08006bed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006b8a:	e039      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006b92:	e035      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006b9a:	e031      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006ba2:	e02d      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006baa:	e029      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006bb2:	e025      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006bba:	e021      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006bc2:	e01d      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006bca:	e019      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006bd2:	e015      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006bda:	e011      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006be2:	e00d      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006bea:	e009      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006bf4:	e004      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
        break;
 8006bfa:	e001      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop

08006c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a4c      	ldr	r2, [pc, #304]	@ (8006d54 <TIM_Base_SetConfig+0x144>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d017      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c2e:	d013      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a49      	ldr	r2, [pc, #292]	@ (8006d58 <TIM_Base_SetConfig+0x148>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00f      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a48      	ldr	r2, [pc, #288]	@ (8006d5c <TIM_Base_SetConfig+0x14c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00b      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a47      	ldr	r2, [pc, #284]	@ (8006d60 <TIM_Base_SetConfig+0x150>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d007      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a46      	ldr	r2, [pc, #280]	@ (8006d64 <TIM_Base_SetConfig+0x154>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a45      	ldr	r2, [pc, #276]	@ (8006d68 <TIM_Base_SetConfig+0x158>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d108      	bne.n	8006c6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a39      	ldr	r2, [pc, #228]	@ (8006d54 <TIM_Base_SetConfig+0x144>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d023      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c78:	d01f      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a36      	ldr	r2, [pc, #216]	@ (8006d58 <TIM_Base_SetConfig+0x148>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d01b      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a35      	ldr	r2, [pc, #212]	@ (8006d5c <TIM_Base_SetConfig+0x14c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d017      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a34      	ldr	r2, [pc, #208]	@ (8006d60 <TIM_Base_SetConfig+0x150>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a33      	ldr	r2, [pc, #204]	@ (8006d64 <TIM_Base_SetConfig+0x154>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00f      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a33      	ldr	r2, [pc, #204]	@ (8006d6c <TIM_Base_SetConfig+0x15c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a32      	ldr	r2, [pc, #200]	@ (8006d70 <TIM_Base_SetConfig+0x160>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d007      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a31      	ldr	r2, [pc, #196]	@ (8006d74 <TIM_Base_SetConfig+0x164>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d68 <TIM_Base_SetConfig+0x158>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d108      	bne.n	8006ccc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a18      	ldr	r2, [pc, #96]	@ (8006d54 <TIM_Base_SetConfig+0x144>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8006d64 <TIM_Base_SetConfig+0x154>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00f      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1a      	ldr	r2, [pc, #104]	@ (8006d6c <TIM_Base_SetConfig+0x15c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00b      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a19      	ldr	r2, [pc, #100]	@ (8006d70 <TIM_Base_SetConfig+0x160>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d007      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a18      	ldr	r2, [pc, #96]	@ (8006d74 <TIM_Base_SetConfig+0x164>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a13      	ldr	r2, [pc, #76]	@ (8006d68 <TIM_Base_SetConfig+0x158>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d103      	bne.n	8006d28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f023 0201 	bic.w	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	611a      	str	r2, [r3, #16]
  }
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40015000 	.word	0x40015000
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800

08006d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f023 0201 	bic.w	r2, r3, #1
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f023 0302 	bic.w	r3, r3, #2
 8006dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a30      	ldr	r2, [pc, #192]	@ (8006e94 <TIM_OC1_SetConfig+0x11c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d013      	beq.n	8006e00 <TIM_OC1_SetConfig+0x88>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a2f      	ldr	r2, [pc, #188]	@ (8006e98 <TIM_OC1_SetConfig+0x120>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00f      	beq.n	8006e00 <TIM_OC1_SetConfig+0x88>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a2e      	ldr	r2, [pc, #184]	@ (8006e9c <TIM_OC1_SetConfig+0x124>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00b      	beq.n	8006e00 <TIM_OC1_SetConfig+0x88>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a2d      	ldr	r2, [pc, #180]	@ (8006ea0 <TIM_OC1_SetConfig+0x128>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d007      	beq.n	8006e00 <TIM_OC1_SetConfig+0x88>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a2c      	ldr	r2, [pc, #176]	@ (8006ea4 <TIM_OC1_SetConfig+0x12c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_OC1_SetConfig+0x88>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8006ea8 <TIM_OC1_SetConfig+0x130>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d10c      	bne.n	8006e1a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f023 0308 	bic.w	r3, r3, #8
 8006e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f023 0304 	bic.w	r3, r3, #4
 8006e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e94 <TIM_OC1_SetConfig+0x11c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <TIM_OC1_SetConfig+0xd2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1c      	ldr	r2, [pc, #112]	@ (8006e98 <TIM_OC1_SetConfig+0x120>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00f      	beq.n	8006e4a <TIM_OC1_SetConfig+0xd2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e9c <TIM_OC1_SetConfig+0x124>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <TIM_OC1_SetConfig+0xd2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea0 <TIM_OC1_SetConfig+0x128>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_OC1_SetConfig+0xd2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ea4 <TIM_OC1_SetConfig+0x12c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_OC1_SetConfig+0xd2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a18      	ldr	r2, [pc, #96]	@ (8006ea8 <TIM_OC1_SetConfig+0x130>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d111      	bne.n	8006e6e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	621a      	str	r2, [r3, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40013400 	.word	0x40013400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800
 8006ea8:	40015000 	.word	0x40015000

08006eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	f023 0210 	bic.w	r2, r3, #16
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f023 0320 	bic.w	r3, r3, #32
 8006efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006fbc <TIM_OC2_SetConfig+0x110>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_OC2_SetConfig+0x74>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a2b      	ldr	r2, [pc, #172]	@ (8006fc0 <TIM_OC2_SetConfig+0x114>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_OC2_SetConfig+0x74>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc4 <TIM_OC2_SetConfig+0x118>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10d      	bne.n	8006f3c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006fbc <TIM_OC2_SetConfig+0x110>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d013      	beq.n	8006f6c <TIM_OC2_SetConfig+0xc0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a1e      	ldr	r2, [pc, #120]	@ (8006fc0 <TIM_OC2_SetConfig+0x114>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00f      	beq.n	8006f6c <TIM_OC2_SetConfig+0xc0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fc8 <TIM_OC2_SetConfig+0x11c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00b      	beq.n	8006f6c <TIM_OC2_SetConfig+0xc0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1d      	ldr	r2, [pc, #116]	@ (8006fcc <TIM_OC2_SetConfig+0x120>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d007      	beq.n	8006f6c <TIM_OC2_SetConfig+0xc0>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8006fd0 <TIM_OC2_SetConfig+0x124>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC2_SetConfig+0xc0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a17      	ldr	r2, [pc, #92]	@ (8006fc4 <TIM_OC2_SetConfig+0x118>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d113      	bne.n	8006f94 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40013400 	.word	0x40013400
 8006fc4:	40015000 	.word	0x40015000
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40014400 	.word	0x40014400
 8006fd0:	40014800 	.word	0x40014800

08006fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a2b      	ldr	r2, [pc, #172]	@ (80070e0 <TIM_OC3_SetConfig+0x10c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d007      	beq.n	8007046 <TIM_OC3_SetConfig+0x72>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2a      	ldr	r2, [pc, #168]	@ (80070e4 <TIM_OC3_SetConfig+0x110>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d003      	beq.n	8007046 <TIM_OC3_SetConfig+0x72>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a29      	ldr	r2, [pc, #164]	@ (80070e8 <TIM_OC3_SetConfig+0x114>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d10d      	bne.n	8007062 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800704c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	4313      	orrs	r3, r2
 8007058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a1e      	ldr	r2, [pc, #120]	@ (80070e0 <TIM_OC3_SetConfig+0x10c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d013      	beq.n	8007092 <TIM_OC3_SetConfig+0xbe>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1d      	ldr	r2, [pc, #116]	@ (80070e4 <TIM_OC3_SetConfig+0x110>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00f      	beq.n	8007092 <TIM_OC3_SetConfig+0xbe>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1d      	ldr	r2, [pc, #116]	@ (80070ec <TIM_OC3_SetConfig+0x118>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00b      	beq.n	8007092 <TIM_OC3_SetConfig+0xbe>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1c      	ldr	r2, [pc, #112]	@ (80070f0 <TIM_OC3_SetConfig+0x11c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d007      	beq.n	8007092 <TIM_OC3_SetConfig+0xbe>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1b      	ldr	r2, [pc, #108]	@ (80070f4 <TIM_OC3_SetConfig+0x120>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d003      	beq.n	8007092 <TIM_OC3_SetConfig+0xbe>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a16      	ldr	r2, [pc, #88]	@ (80070e8 <TIM_OC3_SetConfig+0x114>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d113      	bne.n	80070ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	621a      	str	r2, [r3, #32]
}
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40013400 	.word	0x40013400
 80070e8:	40015000 	.word	0x40015000
 80070ec:	40014000 	.word	0x40014000
 80070f0:	40014400 	.word	0x40014400
 80070f4:	40014800 	.word	0x40014800

080070f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800712a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	031b      	lsls	r3, r3, #12
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a2c      	ldr	r2, [pc, #176]	@ (8007208 <TIM_OC4_SetConfig+0x110>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d007      	beq.n	800716c <TIM_OC4_SetConfig+0x74>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a2b      	ldr	r2, [pc, #172]	@ (800720c <TIM_OC4_SetConfig+0x114>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d003      	beq.n	800716c <TIM_OC4_SetConfig+0x74>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a2a      	ldr	r2, [pc, #168]	@ (8007210 <TIM_OC4_SetConfig+0x118>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d10d      	bne.n	8007188 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	031b      	lsls	r3, r3, #12
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007186:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a1f      	ldr	r2, [pc, #124]	@ (8007208 <TIM_OC4_SetConfig+0x110>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d013      	beq.n	80071b8 <TIM_OC4_SetConfig+0xc0>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a1e      	ldr	r2, [pc, #120]	@ (800720c <TIM_OC4_SetConfig+0x114>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00f      	beq.n	80071b8 <TIM_OC4_SetConfig+0xc0>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1e      	ldr	r2, [pc, #120]	@ (8007214 <TIM_OC4_SetConfig+0x11c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00b      	beq.n	80071b8 <TIM_OC4_SetConfig+0xc0>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007218 <TIM_OC4_SetConfig+0x120>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d007      	beq.n	80071b8 <TIM_OC4_SetConfig+0xc0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a1c      	ldr	r2, [pc, #112]	@ (800721c <TIM_OC4_SetConfig+0x124>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_OC4_SetConfig+0xc0>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a17      	ldr	r2, [pc, #92]	@ (8007210 <TIM_OC4_SetConfig+0x118>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d113      	bne.n	80071e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	019b      	lsls	r3, r3, #6
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	019b      	lsls	r3, r3, #6
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40013400 	.word	0x40013400
 8007210:	40015000 	.word	0x40015000
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800

08007220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800724e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007264:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	041b      	lsls	r3, r3, #16
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a19      	ldr	r2, [pc, #100]	@ (80072dc <TIM_OC5_SetConfig+0xbc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <TIM_OC5_SetConfig+0x82>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a18      	ldr	r2, [pc, #96]	@ (80072e0 <TIM_OC5_SetConfig+0xc0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00f      	beq.n	80072a2 <TIM_OC5_SetConfig+0x82>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a17      	ldr	r2, [pc, #92]	@ (80072e4 <TIM_OC5_SetConfig+0xc4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00b      	beq.n	80072a2 <TIM_OC5_SetConfig+0x82>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a16      	ldr	r2, [pc, #88]	@ (80072e8 <TIM_OC5_SetConfig+0xc8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d007      	beq.n	80072a2 <TIM_OC5_SetConfig+0x82>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a15      	ldr	r2, [pc, #84]	@ (80072ec <TIM_OC5_SetConfig+0xcc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_OC5_SetConfig+0x82>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a14      	ldr	r2, [pc, #80]	@ (80072f0 <TIM_OC5_SetConfig+0xd0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d109      	bne.n	80072b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	621a      	str	r2, [r3, #32]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	40012c00 	.word	0x40012c00
 80072e0:	40013400 	.word	0x40013400
 80072e4:	40014000 	.word	0x40014000
 80072e8:	40014400 	.word	0x40014400
 80072ec:	40014800 	.word	0x40014800
 80072f0:	40015000 	.word	0x40015000

080072f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800733a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	051b      	lsls	r3, r3, #20
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1a      	ldr	r2, [pc, #104]	@ (80073b4 <TIM_OC6_SetConfig+0xc0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d013      	beq.n	8007378 <TIM_OC6_SetConfig+0x84>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a19      	ldr	r2, [pc, #100]	@ (80073b8 <TIM_OC6_SetConfig+0xc4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00f      	beq.n	8007378 <TIM_OC6_SetConfig+0x84>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a18      	ldr	r2, [pc, #96]	@ (80073bc <TIM_OC6_SetConfig+0xc8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00b      	beq.n	8007378 <TIM_OC6_SetConfig+0x84>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a17      	ldr	r2, [pc, #92]	@ (80073c0 <TIM_OC6_SetConfig+0xcc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d007      	beq.n	8007378 <TIM_OC6_SetConfig+0x84>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a16      	ldr	r2, [pc, #88]	@ (80073c4 <TIM_OC6_SetConfig+0xd0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_OC6_SetConfig+0x84>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a15      	ldr	r2, [pc, #84]	@ (80073c8 <TIM_OC6_SetConfig+0xd4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d109      	bne.n	800738c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800737e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	029b      	lsls	r3, r3, #10
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	40012c00 	.word	0x40012c00
 80073b8:	40013400 	.word	0x40013400
 80073bc:	40014000 	.word	0x40014000
 80073c0:	40014400 	.word	0x40014400
 80073c4:	40014800 	.word	0x40014800
 80073c8:	40015000 	.word	0x40015000

080073cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0201 	bic.w	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 030a 	bic.w	r3, r3, #10
 8007408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800742a:	b480      	push	{r7}
 800742c:	b087      	sub	sp, #28
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	f023 0210 	bic.w	r2, r3, #16
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	031b      	lsls	r3, r3, #12
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007466:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80074a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f043 0307 	orr.w	r3, r3, #7
 80074b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	609a      	str	r2, [r3, #8]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	021a      	lsls	r2, r3, #8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	609a      	str	r2, [r3, #8]
}
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 031f 	and.w	r3, r3, #31
 8007516:	2201      	movs	r2, #1
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	43db      	mvns	r3, r3
 8007526:	401a      	ands	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1a      	ldr	r2, [r3, #32]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	fa01 f303 	lsl.w	r3, r1, r3
 800753c:	431a      	orrs	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a26      	ldr	r2, [pc, #152]	@ (80075f4 <TIM_ResetCallback+0xa4>)
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a25      	ldr	r2, [pc, #148]	@ (80075f8 <TIM_ResetCallback+0xa8>)
 8007564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a24      	ldr	r2, [pc, #144]	@ (80075fc <TIM_ResetCallback+0xac>)
 800756c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a23      	ldr	r2, [pc, #140]	@ (8007600 <TIM_ResetCallback+0xb0>)
 8007574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a22      	ldr	r2, [pc, #136]	@ (8007604 <TIM_ResetCallback+0xb4>)
 800757c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a21      	ldr	r2, [pc, #132]	@ (8007608 <TIM_ResetCallback+0xb8>)
 8007584:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a20      	ldr	r2, [pc, #128]	@ (800760c <TIM_ResetCallback+0xbc>)
 800758c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a1f      	ldr	r2, [pc, #124]	@ (8007610 <TIM_ResetCallback+0xc0>)
 8007594:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1e      	ldr	r2, [pc, #120]	@ (8007614 <TIM_ResetCallback+0xc4>)
 800759c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007618 <TIM_ResetCallback+0xc8>)
 80075a4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a1c      	ldr	r2, [pc, #112]	@ (800761c <TIM_ResetCallback+0xcc>)
 80075ac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007620 <TIM_ResetCallback+0xd0>)
 80075b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007624 <TIM_ResetCallback+0xd4>)
 80075bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a19      	ldr	r2, [pc, #100]	@ (8007628 <TIM_ResetCallback+0xd8>)
 80075c4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a18      	ldr	r2, [pc, #96]	@ (800762c <TIM_ResetCallback+0xdc>)
 80075cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a17      	ldr	r2, [pc, #92]	@ (8007630 <TIM_ResetCallback+0xe0>)
 80075d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a16      	ldr	r2, [pc, #88]	@ (8007634 <TIM_ResetCallback+0xe4>)
 80075dc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a15      	ldr	r2, [pc, #84]	@ (8007638 <TIM_ResetCallback+0xe8>)
 80075e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	08006889 	.word	0x08006889
 80075f8:	0800689d 	.word	0x0800689d
 80075fc:	08006915 	.word	0x08006915
 8007600:	08006929 	.word	0x08006929
 8007604:	080068c5 	.word	0x080068c5
 8007608:	080068d9 	.word	0x080068d9
 800760c:	080068b1 	.word	0x080068b1
 8007610:	080068ed 	.word	0x080068ed
 8007614:	08006901 	.word	0x08006901
 8007618:	0800693d 	.word	0x0800693d
 800761c:	08007891 	.word	0x08007891
 8007620:	080078a5 	.word	0x080078a5
 8007624:	080078b9 	.word	0x080078b9
 8007628:	080078cd 	.word	0x080078cd
 800762c:	080078e1 	.word	0x080078e1
 8007630:	080078f5 	.word	0x080078f5
 8007634:	08007909 	.word	0x08007909
 8007638:	0800791d 	.word	0x0800791d

0800763c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800764c:	2b01      	cmp	r3, #1
 800764e:	d101      	bne.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007650:	2302      	movs	r3, #2
 8007652:	e074      	b.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a34      	ldr	r2, [pc, #208]	@ (800774c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a33      	ldr	r2, [pc, #204]	@ (8007750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a31      	ldr	r2, [pc, #196]	@ (8007754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d108      	bne.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007698:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a21      	ldr	r2, [pc, #132]	@ (800774c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d022      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d4:	d01d      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a1f      	ldr	r2, [pc, #124]	@ (8007758 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d018      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1d      	ldr	r2, [pc, #116]	@ (800775c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007760 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a15      	ldr	r2, [pc, #84]	@ (8007750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d009      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a18      	ldr	r2, [pc, #96]	@ (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d004      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a11      	ldr	r2, [pc, #68]	@ (8007754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d10c      	bne.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4313      	orrs	r3, r2
 8007722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40013400 	.word	0x40013400
 8007754:	40015000 	.word	0x40015000
 8007758:	40000400 	.word	0x40000400
 800775c:	40000800 	.word	0x40000800
 8007760:	40000c00 	.word	0x40000c00
 8007764:	40014000 	.word	0x40014000

08007768 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007780:	2302      	movs	r3, #2
 8007782:	e078      	b.n	8007876 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	041b      	lsls	r3, r3, #16
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1c      	ldr	r2, [pc, #112]	@ (8007884 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a19      	ldr	r2, [pc, #100]	@ (800788c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d11c      	bne.n	8007864 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	051b      	lsls	r3, r3, #20
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40012c00 	.word	0x40012c00
 8007888:	40013400 	.word	0x40013400
 800788c:	40015000 	.word	0x40015000

08007890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e050      	b.n	80079e4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007948:	2b00      	cmp	r3, #0
 800794a:	d114      	bne.n	8007976 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fe37 	bl	80085c8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d103      	bne.n	800796c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a21      	ldr	r2, [pc, #132]	@ (80079ec <HAL_UART_Init+0xbc>)
 8007968:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2224      	movs	r2, #36	@ 0x24
 800797a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 0201 	bic.w	r2, r2, #1
 800798c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 f964 	bl	8008c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fe65 	bl	800866c <UART_SetConfig>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e01b      	b.n	80079e4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f9e3 	bl	8008da8 <UART_CheckIdleState>
 80079e2:	4603      	mov	r3, r0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	0800201d 	.word	0x0800201d

080079f0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	460b      	mov	r3, r1
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e09c      	b.n	8007b56 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d16c      	bne.n	8007b00 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8007a26:	7afb      	ldrb	r3, [r7, #11]
 8007a28:	2b0c      	cmp	r3, #12
 8007a2a:	d85e      	bhi.n	8007aea <HAL_UART_RegisterCallback+0xfa>
 8007a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a34 <HAL_UART_RegisterCallback+0x44>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a69 	.word	0x08007a69
 8007a38:	08007a73 	.word	0x08007a73
 8007a3c:	08007a7d 	.word	0x08007a7d
 8007a40:	08007a87 	.word	0x08007a87
 8007a44:	08007a91 	.word	0x08007a91
 8007a48:	08007a9b 	.word	0x08007a9b
 8007a4c:	08007aa5 	.word	0x08007aa5
 8007a50:	08007aaf 	.word	0x08007aaf
 8007a54:	08007ab9 	.word	0x08007ab9
 8007a58:	08007ac3 	.word	0x08007ac3
 8007a5c:	08007acd 	.word	0x08007acd
 8007a60:	08007ad7 	.word	0x08007ad7
 8007a64:	08007ae1 	.word	0x08007ae1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007a70:	e070      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007a7a:	e06b      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007a84:	e066      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007a8e:	e061      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007a98:	e05c      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007aa2:	e057      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007aac:	e052      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007ab6:	e04d      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007ac0:	e048      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007aca:	e043      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007ad4:	e03e      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007ade:	e039      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007ae8:	e034      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	75fb      	strb	r3, [r7, #23]
        break;
 8007afe:	e029      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d11a      	bne.n	8007b40 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8007b0a:	7afb      	ldrb	r3, [r7, #11]
 8007b0c:	2b0b      	cmp	r3, #11
 8007b0e:	d002      	beq.n	8007b16 <HAL_UART_RegisterCallback+0x126>
 8007b10:	2b0c      	cmp	r3, #12
 8007b12:	d005      	beq.n	8007b20 <HAL_UART_RegisterCallback+0x130>
 8007b14:	e009      	b.n	8007b2a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007b1e:	e019      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007b28:	e014      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	75fb      	strb	r3, [r7, #23]
        break;
 8007b3e:	e009      	b.n	8007b54 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop

08007b64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08a      	sub	sp, #40	@ 0x28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d137      	bne.n	8007bec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_UART_Receive_IT+0x24>
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e030      	b.n	8007bee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a18      	ldr	r2, [pc, #96]	@ (8007bf8 <HAL_UART_Receive_IT+0x94>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d01f      	beq.n	8007bdc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d018      	beq.n	8007bdc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	623b      	str	r3, [r7, #32]
 8007bca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	69f9      	ldr	r1, [r7, #28]
 8007bce:	6a3a      	ldr	r2, [r7, #32]
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e6      	bne.n	8007baa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	461a      	mov	r2, r3
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f001 f9f8 	bl	8008fd8 <UART_Start_Receive_IT>
 8007be8:	4603      	mov	r3, r0
 8007bea:	e000      	b.n	8007bee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3728      	adds	r7, #40	@ 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40008000 	.word	0x40008000

08007bfc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	@ 0x28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	4613      	mov	r3, r2
 8007c08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d167      	bne.n	8007ce4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_UART_Transmit_DMA+0x24>
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e060      	b.n	8007ce6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2221      	movs	r2, #33	@ 0x21
 8007c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d028      	beq.n	8007ca4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c56:	4a26      	ldr	r2, [pc, #152]	@ (8007cf0 <HAL_UART_Transmit_DMA+0xf4>)
 8007c58:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c5e:	4a25      	ldr	r2, [pc, #148]	@ (8007cf4 <HAL_UART_Transmit_DMA+0xf8>)
 8007c60:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c66:	4a24      	ldr	r2, [pc, #144]	@ (8007cf8 <HAL_UART_Transmit_DMA+0xfc>)
 8007c68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c6e:	2200      	movs	r2, #0
 8007c70:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3328      	adds	r3, #40	@ 0x28
 8007c82:	461a      	mov	r2, r3
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	f7fb fff7 	bl	8003c78 <HAL_DMA_Start_IT>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d009      	beq.n	8007ca4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2210      	movs	r2, #16
 8007c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e020      	b.n	8007ce6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2240      	movs	r2, #64	@ 0x40
 8007caa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	613b      	str	r3, [r7, #16]
   return(result);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ccc:	623a      	str	r2, [r7, #32]
 8007cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	69f9      	ldr	r1, [r7, #28]
 8007cd2:	6a3a      	ldr	r2, [r7, #32]
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e5      	bne.n	8007cac <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e000      	b.n	8007ce6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007ce4:	2302      	movs	r3, #2
  }
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3728      	adds	r7, #40	@ 0x28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	0800936b 	.word	0x0800936b
 8007cf4:	08009409 	.word	0x08009409
 8007cf8:	08009429 	.word	0x08009429

08007cfc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b09a      	sub	sp, #104	@ 0x68
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d18:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e6      	bne.n	8007d04 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e3      	bne.n	8007d36 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d118      	bne.n	8007da8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	f023 0310 	bic.w	r3, r3, #16
 8007d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d96:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e6      	bne.n	8007d76 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db2:	2b40      	cmp	r3, #64	@ 0x40
 8007db4:	d13b      	bne.n	8007e2e <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dd6:	61ba      	str	r2, [r7, #24]
 8007dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6979      	ldr	r1, [r7, #20]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	613b      	str	r3, [r7, #16]
   return(result);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e5      	bne.n	8007db6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01c      	beq.n	8007e2e <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fb ffb2 	bl	8003d6e <HAL_DMA_Abort>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fc f918 	bl	800404c <HAL_DMA_GetError>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d105      	bne.n	8007e2e <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2210      	movs	r2, #16
 8007e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e017      	b.n	8007e5e <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	220f      	movs	r2, #15
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0208 	orr.w	r2, r2, #8
 8007e4c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3768      	adds	r7, #104	@ 0x68
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e96:	4013      	ands	r3, r2
 8007e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d11b      	bne.n	8007edc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d015      	beq.n	8007edc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d105      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d009      	beq.n	8007edc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8312 	beq.w	80084f6 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
      }
      return;
 8007eda:	e30c      	b.n	80084f6 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8129 	beq.w	8008138 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ee6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007eea:	4b90      	ldr	r3, [pc, #576]	@ (800812c <HAL_UART_IRQHandler+0x2c4>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ef2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ef6:	4b8e      	ldr	r3, [pc, #568]	@ (8008130 <HAL_UART_IRQHandler+0x2c8>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 811c 	beq.w	8008138 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d011      	beq.n	8007f30 <HAL_UART_IRQHandler+0xc8>
 8007f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f26:	f043 0201 	orr.w	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d011      	beq.n	8007f60 <HAL_UART_IRQHandler+0xf8>
 8007f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f56:	f043 0204 	orr.w	r2, r3, #4
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d011      	beq.n	8007f90 <HAL_UART_IRQHandler+0x128>
 8007f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00b      	beq.n	8007f90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f86:	f043 0202 	orr.w	r2, r3, #2
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f94:	f003 0308 	and.w	r3, r3, #8
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d017      	beq.n	8007fcc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d105      	bne.n	8007fb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007fa8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007fac:	4b5f      	ldr	r3, [pc, #380]	@ (800812c <HAL_UART_IRQHandler+0x2c4>)
 8007fae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2208      	movs	r2, #8
 8007fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc2:	f043 0208 	orr.w	r2, r3, #8
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d012      	beq.n	8007ffe <HAL_UART_IRQHandler+0x196>
 8007fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00c      	beq.n	8007ffe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff4:	f043 0220 	orr.w	r2, r3, #32
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8278 	beq.w	80084fa <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800800a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b00      	cmp	r3, #0
 8008014:	d013      	beq.n	800803e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d105      	bne.n	800802e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d007      	beq.n	800803e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008044:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008052:	2b40      	cmp	r3, #64	@ 0x40
 8008054:	d005      	beq.n	8008062 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800805a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800805e:	2b00      	cmp	r3, #0
 8008060:	d058      	beq.n	8008114 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 f91b 	bl	800929e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008072:	2b40      	cmp	r3, #64	@ 0x40
 8008074:	d148      	bne.n	8008108 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800808c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3308      	adds	r3, #8
 800809e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80080a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80080a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80080ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1d9      	bne.n	8008076 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d017      	beq.n	80080fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d2:	4a18      	ldr	r2, [pc, #96]	@ (8008134 <HAL_UART_IRQHandler+0x2cc>)
 80080d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fb fe9f 	bl	8003e20 <HAL_DMA_Abort_IT>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01f      	beq.n	8008128 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80080f6:	4610      	mov	r0, r2
 80080f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080fa:	e015      	b.n	8008128 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008106:	e00f      	b.n	8008128 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008112:	e009      	b.n	8008128 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008126:	e1e8      	b.n	80084fa <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008128:	bf00      	nop
    return;
 800812a:	e1e6      	b.n	80084fa <HAL_UART_IRQHandler+0x692>
 800812c:	10000001 	.word	0x10000001
 8008130:	04000120 	.word	0x04000120
 8008134:	080094ad 	.word	0x080094ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800813c:	2b01      	cmp	r3, #1
 800813e:	f040 8176 	bne.w	800842e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008146:	f003 0310 	and.w	r3, r3, #16
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 816f 	beq.w	800842e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8168 	beq.w	800842e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2210      	movs	r2, #16
 8008164:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008170:	2b40      	cmp	r3, #64	@ 0x40
 8008172:	f040 80dc 	bne.w	800832e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008184:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 80b1 	beq.w	80082f0 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008198:	429a      	cmp	r2, r3
 800819a:	f080 80a9 	bcs.w	80082f0 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 8087 	bne.w	80082ca <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1da      	bne.n	80081bc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3308      	adds	r3, #8
 8008226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800822a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800822e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008232:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800823c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e1      	bne.n	8008206 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3308      	adds	r3, #8
 8008262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008266:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008268:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800826c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e3      	bne.n	8008242 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008298:	f023 0310 	bic.w	r3, r3, #16
 800829c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e4      	bne.n	8008288 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fb fd52 	bl	8003d6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2202      	movs	r2, #2
 80082ce:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80082e2:	b292      	uxth	r2, r2
 80082e4:	1a8a      	subs	r2, r1, r2
 80082e6:	b292      	uxth	r2, r2
 80082e8:	4611      	mov	r1, r2
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80082ee:	e106      	b.n	80084fe <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082fa:	429a      	cmp	r2, r3
 80082fc:	f040 80ff 	bne.w	80084fe <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b20      	cmp	r3, #32
 8008310:	f040 80f5 	bne.w	80084fe <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008326:	4611      	mov	r1, r2
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
      return;
 800832c:	e0e7      	b.n	80084fe <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800833a:	b29b      	uxth	r3, r3
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80d9 	beq.w	8008502 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80d4 	beq.w	8008502 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800836e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800837c:	647b      	str	r3, [r7, #68]	@ 0x44
 800837e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008384:	e841 2300 	strex	r3, r2, [r1]
 8008388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800838a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e4      	bne.n	800835a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3308      	adds	r3, #8
 8008396:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	623b      	str	r3, [r7, #32]
   return(result);
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083a6:	f023 0301 	bic.w	r3, r3, #1
 80083aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3308      	adds	r3, #8
 80083b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80083ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083c0:	e841 2300 	strex	r3, r2, [r1]
 80083c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e1      	bne.n	8008390 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f023 0310 	bic.w	r3, r3, #16
 80083f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	69b9      	ldr	r1, [r7, #24]
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	617b      	str	r3, [r7, #20]
   return(result);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e4      	bne.n	80083e0 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2202      	movs	r2, #2
 800841a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008422:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008426:	4611      	mov	r1, r2
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800842c:	e069      	b.n	8008502 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800842e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d010      	beq.n	800845c <HAL_UART_IRQHandler+0x5f4>
 800843a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800843e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800844e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800845a:	e055      	b.n	8008508 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800845c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008464:	2b00      	cmp	r3, #0
 8008466:	d014      	beq.n	8008492 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008470:	2b00      	cmp	r3, #0
 8008472:	d105      	bne.n	8008480 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d008      	beq.n	8008492 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008484:	2b00      	cmp	r3, #0
 8008486:	d03e      	beq.n	8008506 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4798      	blx	r3
    }
    return;
 8008490:	e039      	b.n	8008506 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <HAL_UART_IRQHandler+0x64a>
 800849e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 f812 	bl	80094d4 <UART_EndTransmit_IT>
    return;
 80084b0:	e02a      	b.n	8008508 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <HAL_UART_IRQHandler+0x66e>
 80084be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084d4:	e018      	b.n	8008508 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d012      	beq.n	8008508 <HAL_UART_IRQHandler+0x6a0>
 80084e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	da0e      	bge.n	8008508 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084f4:	e008      	b.n	8008508 <HAL_UART_IRQHandler+0x6a0>
      return;
 80084f6:	bf00      	nop
 80084f8:	e006      	b.n	8008508 <HAL_UART_IRQHandler+0x6a0>
    return;
 80084fa:	bf00      	nop
 80084fc:	e004      	b.n	8008508 <HAL_UART_IRQHandler+0x6a0>
      return;
 80084fe:	bf00      	nop
 8008500:	e002      	b.n	8008508 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008502:	bf00      	nop
 8008504:	e000      	b.n	8008508 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008506:	bf00      	nop
  }
}
 8008508:	37e8      	adds	r7, #232	@ 0xe8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a1a      	ldr	r2, [pc, #104]	@ (800863c <UART_InitCallbacksToDefault+0x74>)
 80085d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a19      	ldr	r2, [pc, #100]	@ (8008640 <UART_InitCallbacksToDefault+0x78>)
 80085dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a18      	ldr	r2, [pc, #96]	@ (8008644 <UART_InitCallbacksToDefault+0x7c>)
 80085e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a17      	ldr	r2, [pc, #92]	@ (8008648 <UART_InitCallbacksToDefault+0x80>)
 80085ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a16      	ldr	r2, [pc, #88]	@ (800864c <UART_InitCallbacksToDefault+0x84>)
 80085f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a15      	ldr	r2, [pc, #84]	@ (8008650 <UART_InitCallbacksToDefault+0x88>)
 80085fc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a14      	ldr	r2, [pc, #80]	@ (8008654 <UART_InitCallbacksToDefault+0x8c>)
 8008604:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a13      	ldr	r2, [pc, #76]	@ (8008658 <UART_InitCallbacksToDefault+0x90>)
 800860c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a12      	ldr	r2, [pc, #72]	@ (800865c <UART_InitCallbacksToDefault+0x94>)
 8008614:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a11      	ldr	r2, [pc, #68]	@ (8008660 <UART_InitCallbacksToDefault+0x98>)
 800861c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a10      	ldr	r2, [pc, #64]	@ (8008664 <UART_InitCallbacksToDefault+0x9c>)
 8008624:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a0f      	ldr	r2, [pc, #60]	@ (8008668 <UART_InitCallbacksToDefault+0xa0>)
 800862c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	08008525 	.word	0x08008525
 8008640:	08008511 	.word	0x08008511
 8008644:	0800854d 	.word	0x0800854d
 8008648:	08008539 	.word	0x08008539
 800864c:	08008561 	.word	0x08008561
 8008650:	08008575 	.word	0x08008575
 8008654:	08008589 	.word	0x08008589
 8008658:	0800859d 	.word	0x0800859d
 800865c:	08009f99 	.word	0x08009f99
 8008660:	08009fad 	.word	0x08009fad
 8008664:	08009fc1 	.word	0x08009fc1
 8008668:	080085b1 	.word	0x080085b1

0800866c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800866c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008670:	b08c      	sub	sp, #48	@ 0x30
 8008672:	af00      	add	r7, sp, #0
 8008674:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	431a      	orrs	r2, r3
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	431a      	orrs	r2, r3
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	4313      	orrs	r3, r2
 8008692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	4baa      	ldr	r3, [pc, #680]	@ (8008944 <UART_SetConfig+0x2d8>)
 800869c:	4013      	ands	r3, r2
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086a4:	430b      	orrs	r3, r1
 80086a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a9f      	ldr	r2, [pc, #636]	@ (8008948 <UART_SetConfig+0x2dc>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d004      	beq.n	80086d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086d4:	4313      	orrs	r3, r2
 80086d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80086e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	6812      	ldr	r2, [r2, #0]
 80086ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ec:	430b      	orrs	r3, r1
 80086ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f6:	f023 010f 	bic.w	r1, r3, #15
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a90      	ldr	r2, [pc, #576]	@ (800894c <UART_SetConfig+0x2e0>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d125      	bne.n	800875c <UART_SetConfig+0xf0>
 8008710:	4b8f      	ldr	r3, [pc, #572]	@ (8008950 <UART_SetConfig+0x2e4>)
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b03      	cmp	r3, #3
 800871c:	d81a      	bhi.n	8008754 <UART_SetConfig+0xe8>
 800871e:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <UART_SetConfig+0xb8>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008735 	.word	0x08008735
 8008728:	08008745 	.word	0x08008745
 800872c:	0800873d 	.word	0x0800873d
 8008730:	0800874d 	.word	0x0800874d
 8008734:	2301      	movs	r3, #1
 8008736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800873a:	e116      	b.n	800896a <UART_SetConfig+0x2fe>
 800873c:	2302      	movs	r3, #2
 800873e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008742:	e112      	b.n	800896a <UART_SetConfig+0x2fe>
 8008744:	2304      	movs	r3, #4
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874a:	e10e      	b.n	800896a <UART_SetConfig+0x2fe>
 800874c:	2308      	movs	r3, #8
 800874e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008752:	e10a      	b.n	800896a <UART_SetConfig+0x2fe>
 8008754:	2310      	movs	r3, #16
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800875a:	e106      	b.n	800896a <UART_SetConfig+0x2fe>
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a7c      	ldr	r2, [pc, #496]	@ (8008954 <UART_SetConfig+0x2e8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d138      	bne.n	80087d8 <UART_SetConfig+0x16c>
 8008766:	4b7a      	ldr	r3, [pc, #488]	@ (8008950 <UART_SetConfig+0x2e4>)
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876c:	f003 030c 	and.w	r3, r3, #12
 8008770:	2b0c      	cmp	r3, #12
 8008772:	d82d      	bhi.n	80087d0 <UART_SetConfig+0x164>
 8008774:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <UART_SetConfig+0x110>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	080087b1 	.word	0x080087b1
 8008780:	080087d1 	.word	0x080087d1
 8008784:	080087d1 	.word	0x080087d1
 8008788:	080087d1 	.word	0x080087d1
 800878c:	080087c1 	.word	0x080087c1
 8008790:	080087d1 	.word	0x080087d1
 8008794:	080087d1 	.word	0x080087d1
 8008798:	080087d1 	.word	0x080087d1
 800879c:	080087b9 	.word	0x080087b9
 80087a0:	080087d1 	.word	0x080087d1
 80087a4:	080087d1 	.word	0x080087d1
 80087a8:	080087d1 	.word	0x080087d1
 80087ac:	080087c9 	.word	0x080087c9
 80087b0:	2300      	movs	r3, #0
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b6:	e0d8      	b.n	800896a <UART_SetConfig+0x2fe>
 80087b8:	2302      	movs	r3, #2
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087be:	e0d4      	b.n	800896a <UART_SetConfig+0x2fe>
 80087c0:	2304      	movs	r3, #4
 80087c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c6:	e0d0      	b.n	800896a <UART_SetConfig+0x2fe>
 80087c8:	2308      	movs	r3, #8
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ce:	e0cc      	b.n	800896a <UART_SetConfig+0x2fe>
 80087d0:	2310      	movs	r3, #16
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d6:	e0c8      	b.n	800896a <UART_SetConfig+0x2fe>
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a5e      	ldr	r2, [pc, #376]	@ (8008958 <UART_SetConfig+0x2ec>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d125      	bne.n	800882e <UART_SetConfig+0x1c2>
 80087e2:	4b5b      	ldr	r3, [pc, #364]	@ (8008950 <UART_SetConfig+0x2e4>)
 80087e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80087ec:	2b30      	cmp	r3, #48	@ 0x30
 80087ee:	d016      	beq.n	800881e <UART_SetConfig+0x1b2>
 80087f0:	2b30      	cmp	r3, #48	@ 0x30
 80087f2:	d818      	bhi.n	8008826 <UART_SetConfig+0x1ba>
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d00a      	beq.n	800880e <UART_SetConfig+0x1a2>
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d814      	bhi.n	8008826 <UART_SetConfig+0x1ba>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <UART_SetConfig+0x19a>
 8008800:	2b10      	cmp	r3, #16
 8008802:	d008      	beq.n	8008816 <UART_SetConfig+0x1aa>
 8008804:	e00f      	b.n	8008826 <UART_SetConfig+0x1ba>
 8008806:	2300      	movs	r3, #0
 8008808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800880c:	e0ad      	b.n	800896a <UART_SetConfig+0x2fe>
 800880e:	2302      	movs	r3, #2
 8008810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008814:	e0a9      	b.n	800896a <UART_SetConfig+0x2fe>
 8008816:	2304      	movs	r3, #4
 8008818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800881c:	e0a5      	b.n	800896a <UART_SetConfig+0x2fe>
 800881e:	2308      	movs	r3, #8
 8008820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008824:	e0a1      	b.n	800896a <UART_SetConfig+0x2fe>
 8008826:	2310      	movs	r3, #16
 8008828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882c:	e09d      	b.n	800896a <UART_SetConfig+0x2fe>
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a4a      	ldr	r2, [pc, #296]	@ (800895c <UART_SetConfig+0x2f0>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d125      	bne.n	8008884 <UART_SetConfig+0x218>
 8008838:	4b45      	ldr	r3, [pc, #276]	@ (8008950 <UART_SetConfig+0x2e4>)
 800883a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800883e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008842:	2bc0      	cmp	r3, #192	@ 0xc0
 8008844:	d016      	beq.n	8008874 <UART_SetConfig+0x208>
 8008846:	2bc0      	cmp	r3, #192	@ 0xc0
 8008848:	d818      	bhi.n	800887c <UART_SetConfig+0x210>
 800884a:	2b80      	cmp	r3, #128	@ 0x80
 800884c:	d00a      	beq.n	8008864 <UART_SetConfig+0x1f8>
 800884e:	2b80      	cmp	r3, #128	@ 0x80
 8008850:	d814      	bhi.n	800887c <UART_SetConfig+0x210>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <UART_SetConfig+0x1f0>
 8008856:	2b40      	cmp	r3, #64	@ 0x40
 8008858:	d008      	beq.n	800886c <UART_SetConfig+0x200>
 800885a:	e00f      	b.n	800887c <UART_SetConfig+0x210>
 800885c:	2300      	movs	r3, #0
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008862:	e082      	b.n	800896a <UART_SetConfig+0x2fe>
 8008864:	2302      	movs	r3, #2
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800886a:	e07e      	b.n	800896a <UART_SetConfig+0x2fe>
 800886c:	2304      	movs	r3, #4
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008872:	e07a      	b.n	800896a <UART_SetConfig+0x2fe>
 8008874:	2308      	movs	r3, #8
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800887a:	e076      	b.n	800896a <UART_SetConfig+0x2fe>
 800887c:	2310      	movs	r3, #16
 800887e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008882:	e072      	b.n	800896a <UART_SetConfig+0x2fe>
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a35      	ldr	r2, [pc, #212]	@ (8008960 <UART_SetConfig+0x2f4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d12a      	bne.n	80088e4 <UART_SetConfig+0x278>
 800888e:	4b30      	ldr	r3, [pc, #192]	@ (8008950 <UART_SetConfig+0x2e4>)
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800889c:	d01a      	beq.n	80088d4 <UART_SetConfig+0x268>
 800889e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088a2:	d81b      	bhi.n	80088dc <UART_SetConfig+0x270>
 80088a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088a8:	d00c      	beq.n	80088c4 <UART_SetConfig+0x258>
 80088aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ae:	d815      	bhi.n	80088dc <UART_SetConfig+0x270>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <UART_SetConfig+0x250>
 80088b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088b8:	d008      	beq.n	80088cc <UART_SetConfig+0x260>
 80088ba:	e00f      	b.n	80088dc <UART_SetConfig+0x270>
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c2:	e052      	b.n	800896a <UART_SetConfig+0x2fe>
 80088c4:	2302      	movs	r3, #2
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ca:	e04e      	b.n	800896a <UART_SetConfig+0x2fe>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d2:	e04a      	b.n	800896a <UART_SetConfig+0x2fe>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088da:	e046      	b.n	800896a <UART_SetConfig+0x2fe>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e2:	e042      	b.n	800896a <UART_SetConfig+0x2fe>
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a17      	ldr	r2, [pc, #92]	@ (8008948 <UART_SetConfig+0x2dc>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d13a      	bne.n	8008964 <UART_SetConfig+0x2f8>
 80088ee:	4b18      	ldr	r3, [pc, #96]	@ (8008950 <UART_SetConfig+0x2e4>)
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80088f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088fc:	d01a      	beq.n	8008934 <UART_SetConfig+0x2c8>
 80088fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008902:	d81b      	bhi.n	800893c <UART_SetConfig+0x2d0>
 8008904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008908:	d00c      	beq.n	8008924 <UART_SetConfig+0x2b8>
 800890a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800890e:	d815      	bhi.n	800893c <UART_SetConfig+0x2d0>
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <UART_SetConfig+0x2b0>
 8008914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008918:	d008      	beq.n	800892c <UART_SetConfig+0x2c0>
 800891a:	e00f      	b.n	800893c <UART_SetConfig+0x2d0>
 800891c:	2300      	movs	r3, #0
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008922:	e022      	b.n	800896a <UART_SetConfig+0x2fe>
 8008924:	2302      	movs	r3, #2
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892a:	e01e      	b.n	800896a <UART_SetConfig+0x2fe>
 800892c:	2304      	movs	r3, #4
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008932:	e01a      	b.n	800896a <UART_SetConfig+0x2fe>
 8008934:	2308      	movs	r3, #8
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893a:	e016      	b.n	800896a <UART_SetConfig+0x2fe>
 800893c:	2310      	movs	r3, #16
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008942:	e012      	b.n	800896a <UART_SetConfig+0x2fe>
 8008944:	cfff69f3 	.word	0xcfff69f3
 8008948:	40008000 	.word	0x40008000
 800894c:	40013800 	.word	0x40013800
 8008950:	40021000 	.word	0x40021000
 8008954:	40004400 	.word	0x40004400
 8008958:	40004800 	.word	0x40004800
 800895c:	40004c00 	.word	0x40004c00
 8008960:	40005000 	.word	0x40005000
 8008964:	2310      	movs	r3, #16
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4aae      	ldr	r2, [pc, #696]	@ (8008c28 <UART_SetConfig+0x5bc>)
 8008970:	4293      	cmp	r3, r2
 8008972:	f040 8097 	bne.w	8008aa4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008976:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800897a:	2b08      	cmp	r3, #8
 800897c:	d823      	bhi.n	80089c6 <UART_SetConfig+0x35a>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <UART_SetConfig+0x318>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089a9 	.word	0x080089a9
 8008988:	080089c7 	.word	0x080089c7
 800898c:	080089b1 	.word	0x080089b1
 8008990:	080089c7 	.word	0x080089c7
 8008994:	080089b7 	.word	0x080089b7
 8008998:	080089c7 	.word	0x080089c7
 800899c:	080089c7 	.word	0x080089c7
 80089a0:	080089c7 	.word	0x080089c7
 80089a4:	080089bf 	.word	0x080089bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089a8:	f7fc fb1e 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 80089ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089ae:	e010      	b.n	80089d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089b0:	4b9e      	ldr	r3, [pc, #632]	@ (8008c2c <UART_SetConfig+0x5c0>)
 80089b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089b4:	e00d      	b.n	80089d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089b6:	f7fc faa9 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 80089ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089bc:	e009      	b.n	80089d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089c4:	e005      	b.n	80089d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8130 	beq.w	8008c3a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089de:	4a94      	ldr	r2, [pc, #592]	@ (8008c30 <UART_SetConfig+0x5c4>)
 80089e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	4413      	add	r3, r2
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d305      	bcc.n	8008a0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d903      	bls.n	8008a12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a10:	e113      	b.n	8008c3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	2200      	movs	r2, #0
 8008a16:	60bb      	str	r3, [r7, #8]
 8008a18:	60fa      	str	r2, [r7, #12]
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	4a84      	ldr	r2, [pc, #528]	@ (8008c30 <UART_SetConfig+0x5c4>)
 8008a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2200      	movs	r2, #0
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a34:	f7f7 fbf0 	bl	8000218 <__aeabi_uldivmod>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4619      	mov	r1, r3
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	f04f 0300 	mov.w	r3, #0
 8008a48:	020b      	lsls	r3, r1, #8
 8008a4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a4e:	0202      	lsls	r2, r0, #8
 8008a50:	6979      	ldr	r1, [r7, #20]
 8008a52:	6849      	ldr	r1, [r1, #4]
 8008a54:	0849      	lsrs	r1, r1, #1
 8008a56:	2000      	movs	r0, #0
 8008a58:	460c      	mov	r4, r1
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	eb12 0804 	adds.w	r8, r2, r4
 8008a60:	eb43 0905 	adc.w	r9, r3, r5
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	469a      	mov	sl, r3
 8008a6c:	4693      	mov	fp, r2
 8008a6e:	4652      	mov	r2, sl
 8008a70:	465b      	mov	r3, fp
 8008a72:	4640      	mov	r0, r8
 8008a74:	4649      	mov	r1, r9
 8008a76:	f7f7 fbcf 	bl	8000218 <__aeabi_uldivmod>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4613      	mov	r3, r2
 8008a80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a88:	d308      	bcc.n	8008a9c <UART_SetConfig+0x430>
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a90:	d204      	bcs.n	8008a9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6a3a      	ldr	r2, [r7, #32]
 8008a98:	60da      	str	r2, [r3, #12]
 8008a9a:	e0ce      	b.n	8008c3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008aa2:	e0ca      	b.n	8008c3a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aac:	d166      	bne.n	8008b7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008aae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d827      	bhi.n	8008b06 <UART_SetConfig+0x49a>
 8008ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8008abc <UART_SetConfig+0x450>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008ae1 	.word	0x08008ae1
 8008ac0:	08008ae9 	.word	0x08008ae9
 8008ac4:	08008af1 	.word	0x08008af1
 8008ac8:	08008b07 	.word	0x08008b07
 8008acc:	08008af7 	.word	0x08008af7
 8008ad0:	08008b07 	.word	0x08008b07
 8008ad4:	08008b07 	.word	0x08008b07
 8008ad8:	08008b07 	.word	0x08008b07
 8008adc:	08008aff 	.word	0x08008aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae0:	f7fc fa82 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8008ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ae6:	e014      	b.n	8008b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ae8:	f7fc fa94 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 8008aec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aee:	e010      	b.n	8008b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af0:	4b4e      	ldr	r3, [pc, #312]	@ (8008c2c <UART_SetConfig+0x5c0>)
 8008af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008af4:	e00d      	b.n	8008b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008af6:	f7fc fa09 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8008afa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008afc:	e009      	b.n	8008b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b04:	e005      	b.n	8008b12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 8090 	beq.w	8008c3a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1e:	4a44      	ldr	r2, [pc, #272]	@ (8008c30 <UART_SetConfig+0x5c4>)
 8008b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b2c:	005a      	lsls	r2, r3, #1
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	441a      	add	r2, r3
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	2b0f      	cmp	r3, #15
 8008b44:	d916      	bls.n	8008b74 <UART_SetConfig+0x508>
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b4c:	d212      	bcs.n	8008b74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f023 030f 	bic.w	r3, r3, #15
 8008b56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	085b      	lsrs	r3, r3, #1
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	8bfb      	ldrh	r3, [r7, #30]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	8bfa      	ldrh	r2, [r7, #30]
 8008b70:	60da      	str	r2, [r3, #12]
 8008b72:	e062      	b.n	8008c3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b7a:	e05e      	b.n	8008c3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d828      	bhi.n	8008bd6 <UART_SetConfig+0x56a>
 8008b84:	a201      	add	r2, pc, #4	@ (adr r2, 8008b8c <UART_SetConfig+0x520>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008bb1 	.word	0x08008bb1
 8008b90:	08008bb9 	.word	0x08008bb9
 8008b94:	08008bc1 	.word	0x08008bc1
 8008b98:	08008bd7 	.word	0x08008bd7
 8008b9c:	08008bc7 	.word	0x08008bc7
 8008ba0:	08008bd7 	.word	0x08008bd7
 8008ba4:	08008bd7 	.word	0x08008bd7
 8008ba8:	08008bd7 	.word	0x08008bd7
 8008bac:	08008bcf 	.word	0x08008bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bb0:	f7fc fa1a 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8008bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bb6:	e014      	b.n	8008be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb8:	f7fc fa2c 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 8008bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bbe:	e010      	b.n	8008be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c2c <UART_SetConfig+0x5c0>)
 8008bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bc4:	e00d      	b.n	8008be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bc6:	f7fc f9a1 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8008bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bcc:	e009      	b.n	8008be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bd4:	e005      	b.n	8008be2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008be0:	bf00      	nop
    }

    if (pclk != 0U)
 8008be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d028      	beq.n	8008c3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bec:	4a10      	ldr	r2, [pc, #64]	@ (8008c30 <UART_SetConfig+0x5c4>)
 8008bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	441a      	add	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	2b0f      	cmp	r3, #15
 8008c10:	d910      	bls.n	8008c34 <UART_SetConfig+0x5c8>
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c18:	d20c      	bcs.n	8008c34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60da      	str	r2, [r3, #12]
 8008c24:	e009      	b.n	8008c3a <UART_SetConfig+0x5ce>
 8008c26:	bf00      	nop
 8008c28:	40008000 	.word	0x40008000
 8008c2c:	00f42400 	.word	0x00f42400
 8008c30:	0800a280 	.word	0x0800a280
      }
      else
      {
        ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2200      	movs	r2, #0
 8008c54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c56:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3730      	adds	r7, #48	@ 0x30
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00a      	beq.n	8008cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf8:	f003 0310 	and.w	r3, r3, #16
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00a      	beq.n	8008d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00a      	beq.n	8008d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	430a      	orrs	r2, r1
 8008d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d01a      	beq.n	8008d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d62:	d10a      	bne.n	8008d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	605a      	str	r2, [r3, #4]
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b098      	sub	sp, #96	@ 0x60
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008db8:	f7f9 fadc 	bl	8002374 <HAL_GetTick>
 8008dbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	2b08      	cmp	r3, #8
 8008dca:	d12f      	bne.n	8008e2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f88e 	bl	8008efc <UART_WaitOnFlagUntilTimeout>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d022      	beq.n	8008e2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e6      	bne.n	8008de6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e063      	b.n	8008ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d149      	bne.n	8008ece <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e42:	2200      	movs	r2, #0
 8008e44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f857 	bl	8008efc <UART_WaitOnFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d03c      	beq.n	8008ece <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	623b      	str	r3, [r7, #32]
   return(result);
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e6      	bne.n	8008e54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f023 0301 	bic.w	r3, r3, #1
 8008e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ea6:	61fa      	str	r2, [r7, #28]
 8008ea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eaa:	69b9      	ldr	r1, [r7, #24]
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e5      	bne.n	8008e86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e012      	b.n	8008ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3758      	adds	r7, #88	@ 0x58
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f0c:	e04f      	b.n	8008fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f14:	d04b      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f16:	f7f9 fa2d 	bl	8002374 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d302      	bcc.n	8008f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e04e      	b.n	8008fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d037      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b80      	cmp	r3, #128	@ 0x80
 8008f42:	d034      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b40      	cmp	r3, #64	@ 0x40
 8008f48:	d031      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d110      	bne.n	8008f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2208      	movs	r2, #8
 8008f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f99c 	bl	800929e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2208      	movs	r2, #8
 8008f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e029      	b.n	8008fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f88:	d111      	bne.n	8008fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f982 	bl	800929e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e00f      	b.n	8008fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69da      	ldr	r2, [r3, #28]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	bf0c      	ite	eq
 8008fbe:	2301      	moveq	r3, #1
 8008fc0:	2300      	movne	r3, #0
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d0a0      	beq.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b0a3      	sub	sp, #140	@ 0x8c
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	88fa      	ldrh	r2, [r7, #6]
 8008ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	88fa      	ldrh	r2, [r7, #6]
 8008ff8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800900a:	d10e      	bne.n	800902a <UART_Start_Receive_IT+0x52>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <UART_Start_Receive_IT+0x48>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800901a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800901e:	e02d      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	22ff      	movs	r2, #255	@ 0xff
 8009024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009028:	e028      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10d      	bne.n	800904e <UART_Start_Receive_IT+0x76>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <UART_Start_Receive_IT+0x6c>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	22ff      	movs	r2, #255	@ 0xff
 800903e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009042:	e01b      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	227f      	movs	r2, #127	@ 0x7f
 8009048:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800904c:	e016      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009056:	d10d      	bne.n	8009074 <UART_Start_Receive_IT+0x9c>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <UART_Start_Receive_IT+0x92>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	227f      	movs	r2, #127	@ 0x7f
 8009064:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009068:	e008      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	223f      	movs	r2, #63	@ 0x3f
 800906e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009072:	e003      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2222      	movs	r2, #34	@ 0x22
 8009088:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3308      	adds	r3, #8
 8009092:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800909c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3308      	adds	r3, #8
 80090ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80090b0:	673a      	str	r2, [r7, #112]	@ 0x70
 80090b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80090b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80090be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e3      	bne.n	800908c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090cc:	d14f      	bne.n	800916e <UART_Start_Receive_IT+0x196>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090d4:	88fa      	ldrh	r2, [r7, #6]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d349      	bcc.n	800916e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090e2:	d107      	bne.n	80090f4 <UART_Start_Receive_IT+0x11c>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4a47      	ldr	r2, [pc, #284]	@ (800920c <UART_Start_Receive_IT+0x234>)
 80090f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80090f2:	e002      	b.n	80090fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4a46      	ldr	r2, [pc, #280]	@ (8009210 <UART_Start_Receive_IT+0x238>)
 80090f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d01a      	beq.n	8009138 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009116:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009126:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800912a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800912c:	e841 2300 	strex	r3, r2, [r1]
 8009130:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e4      	bne.n	8009102 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3308      	adds	r3, #8
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800914e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3308      	adds	r3, #8
 8009156:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009158:	64ba      	str	r2, [r7, #72]	@ 0x48
 800915a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800915e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009160:	e841 2300 	strex	r3, r2, [r1]
 8009164:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e5      	bne.n	8009138 <UART_Start_Receive_IT+0x160>
 800916c:	e046      	b.n	80091fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009176:	d107      	bne.n	8009188 <UART_Start_Receive_IT+0x1b0>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d103      	bne.n	8009188 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4a24      	ldr	r2, [pc, #144]	@ (8009214 <UART_Start_Receive_IT+0x23c>)
 8009184:	675a      	str	r2, [r3, #116]	@ 0x74
 8009186:	e002      	b.n	800918e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4a23      	ldr	r2, [pc, #140]	@ (8009218 <UART_Start_Receive_IT+0x240>)
 800918c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d019      	beq.n	80091ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80091aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80091c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e6      	bne.n	8009196 <UART_Start_Receive_IT+0x1be>
 80091c8:	e018      	b.n	80091fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	613b      	str	r3, [r7, #16]
   return(result);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f043 0320 	orr.w	r3, r3, #32
 80091de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091e8:	623b      	str	r3, [r7, #32]
 80091ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	69f9      	ldr	r1, [r7, #28]
 80091ee:	6a3a      	ldr	r2, [r7, #32]
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e6      	bne.n	80091ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	378c      	adds	r7, #140	@ 0x8c
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	08009c21 	.word	0x08009c21
 8009210:	080098b1 	.word	0x080098b1
 8009214:	080096f1 	.word	0x080096f1
 8009218:	08009531 	.word	0x08009531

0800921c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b08f      	sub	sp, #60	@ 0x3c
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	61fb      	str	r3, [r7, #28]
   return(result);
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009244:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e6      	bne.n	8009224 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3308      	adds	r3, #8
 800925c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	60bb      	str	r3, [r7, #8]
   return(result);
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800926c:	633b      	str	r3, [r7, #48]	@ 0x30
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3308      	adds	r3, #8
 8009274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009276:	61ba      	str	r2, [r7, #24]
 8009278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	6979      	ldr	r1, [r7, #20]
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	e841 2300 	strex	r3, r2, [r1]
 8009282:	613b      	str	r3, [r7, #16]
   return(result);
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e5      	bne.n	8009256 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2220      	movs	r2, #32
 800928e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009292:	bf00      	nop
 8009294:	373c      	adds	r7, #60	@ 0x3c
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800929e:	b480      	push	{r7}
 80092a0:	b095      	sub	sp, #84	@ 0x54
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80092c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e6      	bne.n	80092a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3308      	adds	r3, #8
 80092de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092ee:	f023 0301 	bic.w	r3, r3, #1
 80092f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800930a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e3      	bne.n	80092d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009314:	2b01      	cmp	r3, #1
 8009316:	d118      	bne.n	800934a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	60bb      	str	r3, [r7, #8]
   return(result);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f023 0310 	bic.w	r3, r3, #16
 800932c:	647b      	str	r3, [r7, #68]	@ 0x44
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009336:	61bb      	str	r3, [r7, #24]
 8009338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6979      	ldr	r1, [r7, #20]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	613b      	str	r3, [r7, #16]
   return(result);
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2220      	movs	r2, #32
 800934e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800935e:	bf00      	nop
 8009360:	3754      	adds	r7, #84	@ 0x54
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b090      	sub	sp, #64	@ 0x40
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d137      	bne.n	80093f6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009388:	2200      	movs	r2, #0
 800938a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	623b      	str	r3, [r7, #32]
   return(result);
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3308      	adds	r3, #8
 80093ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80093b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e5      	bne.n	800938e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e0:	61fb      	str	r3, [r7, #28]
 80093e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	69b9      	ldr	r1, [r7, #24]
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	617b      	str	r3, [r7, #20]
   return(result);
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e6      	bne.n	80093c2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093f4:	e004      	b.n	8009400 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80093f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80093fe:	4798      	blx	r3
}
 8009400:	bf00      	nop
 8009402:	3740      	adds	r7, #64	@ 0x40
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009414:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009434:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009444:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009450:	2b80      	cmp	r3, #128	@ 0x80
 8009452:	d109      	bne.n	8009468 <UART_DMAError+0x40>
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b21      	cmp	r3, #33	@ 0x21
 8009458:	d106      	bne.n	8009468 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2200      	movs	r2, #0
 800945e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009462:	6978      	ldr	r0, [r7, #20]
 8009464:	f7ff feda 	bl	800921c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009472:	2b40      	cmp	r3, #64	@ 0x40
 8009474:	d109      	bne.n	800948a <UART_DMAError+0x62>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b22      	cmp	r3, #34	@ 0x22
 800947a:	d106      	bne.n	800948a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2200      	movs	r2, #0
 8009480:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009484:	6978      	ldr	r0, [r7, #20]
 8009486:	f7ff ff0a 	bl	800929e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009490:	f043 0210 	orr.w	r2, r3, #16
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094a0:	6978      	ldr	r0, [r7, #20]
 80094a2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094a4:	bf00      	nop
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f0:	61fb      	str	r3, [r7, #28]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6979      	ldr	r1, [r7, #20]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	613b      	str	r3, [r7, #16]
   return(result);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e6      	bne.n	80094dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009526:	bf00      	nop
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b09c      	sub	sp, #112	@ 0x70
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800953e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009548:	2b22      	cmp	r3, #34	@ 0x22
 800954a:	f040 80c2 	bne.w	80096d2 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009554:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009558:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800955c:	b2d9      	uxtb	r1, r3
 800955e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009562:	b2da      	uxtb	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009568:	400a      	ands	r2, r1
 800956a:	b2d2      	uxtb	r2, r2
 800956c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800957e:	b29b      	uxth	r3, r3
 8009580:	3b01      	subs	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009590:	b29b      	uxth	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	f040 80a5 	bne.w	80096e2 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e6      	bne.n	8009598 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3308      	adds	r3, #8
 80095d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d4:	e853 3f00 	ldrex	r3, [r3]
 80095d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095dc:	f023 0301 	bic.w	r3, r3, #1
 80095e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3308      	adds	r3, #8
 80095e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80095ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80095ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1e5      	bne.n	80095ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2220      	movs	r2, #32
 8009602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a35      	ldr	r2, [pc, #212]	@ (80096ec <UART_RxISR_8BIT+0x1bc>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d01f      	beq.n	800965c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d018      	beq.n	800965c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	623b      	str	r3, [r7, #32]
   return(result);
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800963e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009648:	633b      	str	r3, [r7, #48]	@ 0x30
 800964a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800964e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e6      	bne.n	800962a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009660:	2b01      	cmp	r3, #1
 8009662:	d130      	bne.n	80096c6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	60fb      	str	r3, [r7, #12]
   return(result);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0310 	bic.w	r3, r3, #16
 800967e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009688:	61fb      	str	r3, [r7, #28]
 800968a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	69b9      	ldr	r1, [r7, #24]
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	617b      	str	r3, [r7, #20]
   return(result);
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e6      	bne.n	800966a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	f003 0310 	and.w	r3, r3, #16
 80096a6:	2b10      	cmp	r3, #16
 80096a8:	d103      	bne.n	80096b2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2210      	movs	r2, #16
 80096b0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80096be:	4611      	mov	r1, r2
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096c4:	e00d      	b.n	80096e2 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
}
 80096d0:	e007      	b.n	80096e2 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	699a      	ldr	r2, [r3, #24]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0208 	orr.w	r2, r2, #8
 80096e0:	619a      	str	r2, [r3, #24]
}
 80096e2:	bf00      	nop
 80096e4:	3770      	adds	r7, #112	@ 0x70
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	40008000 	.word	0x40008000

080096f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b09c      	sub	sp, #112	@ 0x70
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009708:	2b22      	cmp	r3, #34	@ 0x22
 800970a:	f040 80c2 	bne.w	8009892 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009714:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800971c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800971e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009722:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009726:	4013      	ands	r3, r2
 8009728:	b29a      	uxth	r2, r3
 800972a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800972c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009732:	1c9a      	adds	r2, r3, #2
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800973e:	b29b      	uxth	r3, r3
 8009740:	3b01      	subs	r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009750:	b29b      	uxth	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	f040 80a5 	bne.w	80098a2 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800976c:	667b      	str	r3, [r7, #100]	@ 0x64
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009776:	657b      	str	r3, [r7, #84]	@ 0x54
 8009778:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800977c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e6      	bne.n	8009758 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	f023 0301 	bic.w	r3, r3, #1
 80097a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80097aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80097ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e5      	bne.n	800978a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a35      	ldr	r2, [pc, #212]	@ (80098ac <UART_RxISR_16BIT+0x1bc>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d01f      	beq.n	800981c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d018      	beq.n	800981c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800980a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800980e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e6      	bne.n	80097ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009820:	2b01      	cmp	r3, #1
 8009822:	d130      	bne.n	8009886 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	60bb      	str	r3, [r7, #8]
   return(result);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f023 0310 	bic.w	r3, r3, #16
 800983e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6979      	ldr	r1, [r7, #20]
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	613b      	str	r3, [r7, #16]
   return(result);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e6      	bne.n	800982a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	2b10      	cmp	r3, #16
 8009868:	d103      	bne.n	8009872 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2210      	movs	r2, #16
 8009870:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800987e:	4611      	mov	r1, r2
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009884:	e00d      	b.n	80098a2 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
}
 8009890:	e007      	b.n	80098a2 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	699a      	ldr	r2, [r3, #24]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f042 0208 	orr.w	r2, r2, #8
 80098a0:	619a      	str	r2, [r3, #24]
}
 80098a2:	bf00      	nop
 80098a4:	3770      	adds	r7, #112	@ 0x70
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	40008000 	.word	0x40008000

080098b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b0ac      	sub	sp, #176	@ 0xb0
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098be:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098e6:	2b22      	cmp	r3, #34	@ 0x22
 80098e8:	f040 8189 	bne.w	8009bfe <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80098f2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098f6:	e12c      	b.n	8009b52 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fe:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009902:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009906:	b2d9      	uxtb	r1, r3
 8009908:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800990c:	b2da      	uxtb	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009912:	400a      	ands	r2, r1
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009928:	b29b      	uxth	r3, r3
 800992a:	3b01      	subs	r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800993e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009942:	f003 0307 	and.w	r3, r3, #7
 8009946:	2b00      	cmp	r3, #0
 8009948:	d055      	beq.n	80099f6 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800994a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d011      	beq.n	800997a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800995a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2201      	movs	r2, #1
 8009968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009970:	f043 0201 	orr.w	r2, r3, #1
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800997a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d011      	beq.n	80099aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2202      	movs	r2, #2
 8009998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a0:	f043 0204 	orr.w	r2, r3, #4
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d011      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80099b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00b      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2204      	movs	r2, #4
 80099c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d0:	f043 0202 	orr.w	r2, r3, #2
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d008      	beq.n	80099f6 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f040 80a7 	bne.w	8009b52 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a28:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009a2c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e4      	bne.n	8009a04 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3308      	adds	r3, #8
 8009a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a44:	e853 3f00 	ldrex	r3, [r3]
 8009a48:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a50:	f023 0301 	bic.w	r3, r3, #1
 8009a54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a62:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009a64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a66:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009a68:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009a6a:	e841 2300 	strex	r3, r2, [r1]
 8009a6e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009a70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e1      	bne.n	8009a3a <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2220      	movs	r2, #32
 8009a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a62      	ldr	r2, [pc, #392]	@ (8009c18 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d021      	beq.n	8009ad8 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01a      	beq.n	8009ad8 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ab2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ab6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ac6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009aca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e4      	bne.n	8009aa2 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d132      	bne.n	8009b46 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af6:	f023 0310 	bic.w	r3, r3, #16
 8009afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e4      	bne.n	8009ae6 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	f003 0310 	and.w	r3, r3, #16
 8009b26:	2b10      	cmp	r3, #16
 8009b28:	d103      	bne.n	8009b32 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2210      	movs	r2, #16
 8009b30:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009b3e:	4611      	mov	r1, r2
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009b44:	e010      	b.n	8009b68 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	4798      	blx	r3
        break;
 8009b50:	e00a      	b.n	8009b68 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b52:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d006      	beq.n	8009b68 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 8009b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f47f aec8 	bne.w	80098f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b6e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d049      	beq.n	8009c0e <UART_RxISR_8BIT_FIFOEN+0x35e>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b80:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d242      	bcs.n	8009c0e <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e3      	bne.n	8009b88 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a16      	ldr	r2, [pc, #88]	@ (8009c1c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009bc4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f043 0320 	orr.w	r3, r3, #32
 8009bda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009be8:	61bb      	str	r3, [r7, #24]
 8009bea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	6979      	ldr	r1, [r7, #20]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e4      	bne.n	8009bc6 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bfc:	e007      	b.n	8009c0e <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0208 	orr.w	r2, r2, #8
 8009c0c:	619a      	str	r2, [r3, #24]
}
 8009c0e:	bf00      	nop
 8009c10:	37b0      	adds	r7, #176	@ 0xb0
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	40008000 	.word	0x40008000
 8009c1c:	08009531 	.word	0x08009531

08009c20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b0ae      	sub	sp, #184	@ 0xb8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c2e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c56:	2b22      	cmp	r3, #34	@ 0x22
 8009c58:	f040 818d 	bne.w	8009f76 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c62:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c66:	e130      	b.n	8009eca <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009c7a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009c7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009c82:	4013      	ands	r3, r2
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c90:	1c9a      	adds	r2, r3, #2
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d055      	beq.n	8009d6a <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d011      	beq.n	8009cee <UART_RxISR_16BIT_FIFOEN+0xce>
 8009cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00b      	beq.n	8009cee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce4:	f043 0201 	orr.w	r2, r3, #1
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d011      	beq.n	8009d1e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00b      	beq.n	8009d1e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d14:	f043 0204 	orr.w	r2, r3, #4
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d011      	beq.n	8009d4e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2204      	movs	r2, #4
 8009d3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d44:	f043 0202 	orr.w	r2, r3, #2
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d008      	beq.n	8009d6a <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f040 80a9 	bne.w	8009eca <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	461a      	mov	r2, r3
 8009d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e2      	bne.n	8009d78 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3308      	adds	r3, #8
 8009db8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009dda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009de0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e1      	bne.n	8009db2 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a62      	ldr	r2, [pc, #392]	@ (8009f90 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d021      	beq.n	8009e50 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d01a      	beq.n	8009e50 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e22:	e853 3f00 	ldrex	r3, [r3]
 8009e26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e3e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e44:	e841 2300 	strex	r3, r2, [r1]
 8009e48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1e4      	bne.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d132      	bne.n	8009ebe <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6e:	f023 0310 	bic.w	r3, r3, #16
 8009e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e88:	e841 2300 	strex	r3, r2, [r1]
 8009e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e4      	bne.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	f003 0310 	and.w	r3, r3, #16
 8009e9e:	2b10      	cmp	r3, #16
 8009ea0:	d103      	bne.n	8009eaa <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2210      	movs	r2, #16
 8009ea8:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009ebc:	e010      	b.n	8009ee0 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	4798      	blx	r3
        break;
 8009ec8:	e00a      	b.n	8009ee0 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d006      	beq.n	8009ee0 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 8009ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f47f aec4 	bne.w	8009c68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ee6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009eea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d049      	beq.n	8009f86 <UART_RxISR_16BIT_FIFOEN+0x366>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ef8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d242      	bcs.n	8009f86 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3308      	adds	r3, #8
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f24:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f2c:	e841 2300 	strex	r3, r2, [r1]
 8009f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e3      	bne.n	8009f00 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a16      	ldr	r2, [pc, #88]	@ (8009f94 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009f3c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	e853 3f00 	ldrex	r3, [r3]
 8009f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f043 0320 	orr.w	r3, r3, #32
 8009f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f60:	61fb      	str	r3, [r7, #28]
 8009f62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	69b9      	ldr	r1, [r7, #24]
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e4      	bne.n	8009f3e <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f74:	e007      	b.n	8009f86 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f042 0208 	orr.w	r2, r2, #8
 8009f84:	619a      	str	r2, [r3, #24]
}
 8009f86:	bf00      	nop
 8009f88:	37b8      	adds	r7, #184	@ 0xb8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	40008000 	.word	0x40008000
 8009f94:	080096f1 	.word	0x080096f1

08009f98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_UARTEx_DisableFifoMode+0x16>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e027      	b.n	800a03a <HAL_UARTEx_DisableFifoMode+0x66>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2224      	movs	r2, #36	@ 0x24
 8009ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a018:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2220      	movs	r2, #32
 800a02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a056:	2b01      	cmp	r3, #1
 800a058:	d101      	bne.n	800a05e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e02d      	b.n	800a0ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2224      	movs	r2, #36	@ 0x24
 800a06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 0201 	bic.w	r2, r2, #1
 800a084:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f850 	bl	800a140 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d101      	bne.n	800a0da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e02d      	b.n	800a136 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2224      	movs	r2, #36	@ 0x24
 800a0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f812 	bl	800a140 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2220      	movs	r2, #32
 800a128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d108      	bne.n	800a162 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a160:	e031      	b.n	800a1c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a162:	2308      	movs	r3, #8
 800a164:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a166:	2308      	movs	r3, #8
 800a168:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	0e5b      	lsrs	r3, r3, #25
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f003 0307 	and.w	r3, r3, #7
 800a178:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	0f5b      	lsrs	r3, r3, #29
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 0307 	and.w	r3, r3, #7
 800a188:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
 800a18c:	7b3a      	ldrb	r2, [r7, #12]
 800a18e:	4911      	ldr	r1, [pc, #68]	@ (800a1d4 <UARTEx_SetNbDataToProcess+0x94>)
 800a190:	5c8a      	ldrb	r2, [r1, r2]
 800a192:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a196:	7b3a      	ldrb	r2, [r7, #12]
 800a198:	490f      	ldr	r1, [pc, #60]	@ (800a1d8 <UARTEx_SetNbDataToProcess+0x98>)
 800a19a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a19c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	7b7a      	ldrb	r2, [r7, #13]
 800a1ac:	4909      	ldr	r1, [pc, #36]	@ (800a1d4 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ae:	5c8a      	ldrb	r2, [r1, r2]
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1b4:	7b7a      	ldrb	r2, [r7, #13]
 800a1b6:	4908      	ldr	r1, [pc, #32]	@ (800a1d8 <UARTEx_SetNbDataToProcess+0x98>)
 800a1b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	0800a298 	.word	0x0800a298
 800a1d8:	0800a2a0 	.word	0x0800a2a0

0800a1dc <memset>:
 800a1dc:	4402      	add	r2, r0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d100      	bne.n	800a1e6 <memset+0xa>
 800a1e4:	4770      	bx	lr
 800a1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ea:	e7f9      	b.n	800a1e0 <memset+0x4>

0800a1ec <__libc_init_array>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a224 <__libc_init_array+0x38>)
 800a1f0:	4c0d      	ldr	r4, [pc, #52]	@ (800a228 <__libc_init_array+0x3c>)
 800a1f2:	1b64      	subs	r4, r4, r5
 800a1f4:	10a4      	asrs	r4, r4, #2
 800a1f6:	2600      	movs	r6, #0
 800a1f8:	42a6      	cmp	r6, r4
 800a1fa:	d109      	bne.n	800a210 <__libc_init_array+0x24>
 800a1fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a22c <__libc_init_array+0x40>)
 800a1fe:	4c0c      	ldr	r4, [pc, #48]	@ (800a230 <__libc_init_array+0x44>)
 800a200:	f000 f826 	bl	800a250 <_init>
 800a204:	1b64      	subs	r4, r4, r5
 800a206:	10a4      	asrs	r4, r4, #2
 800a208:	2600      	movs	r6, #0
 800a20a:	42a6      	cmp	r6, r4
 800a20c:	d105      	bne.n	800a21a <__libc_init_array+0x2e>
 800a20e:	bd70      	pop	{r4, r5, r6, pc}
 800a210:	f855 3b04 	ldr.w	r3, [r5], #4
 800a214:	4798      	blx	r3
 800a216:	3601      	adds	r6, #1
 800a218:	e7ee      	b.n	800a1f8 <__libc_init_array+0xc>
 800a21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a21e:	4798      	blx	r3
 800a220:	3601      	adds	r6, #1
 800a222:	e7f2      	b.n	800a20a <__libc_init_array+0x1e>
 800a224:	0800a2b0 	.word	0x0800a2b0
 800a228:	0800a2b0 	.word	0x0800a2b0
 800a22c:	0800a2b0 	.word	0x0800a2b0
 800a230:	0800a2b4 	.word	0x0800a2b4

0800a234 <memcpy>:
 800a234:	440a      	add	r2, r1
 800a236:	4291      	cmp	r1, r2
 800a238:	f100 33ff 	add.w	r3, r0, #4294967295
 800a23c:	d100      	bne.n	800a240 <memcpy+0xc>
 800a23e:	4770      	bx	lr
 800a240:	b510      	push	{r4, lr}
 800a242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a24a:	4291      	cmp	r1, r2
 800a24c:	d1f9      	bne.n	800a242 <memcpy+0xe>
 800a24e:	bd10      	pop	{r4, pc}

0800a250 <_init>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr

0800a25c <_fini>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	bf00      	nop
 800a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a262:	bc08      	pop	{r3}
 800a264:	469e      	mov	lr, r3
 800a266:	4770      	bx	lr
