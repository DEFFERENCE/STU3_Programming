
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800509c  0800509c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  0800509c  0800509c  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800509c  0800509c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800509c  0800509c  0000609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000000c  080050b0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080050b0  000072b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e0b  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002365  00000000  00000000  00017e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d59  00000000  00000000  0001b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f45  00000000  00000000  0001c059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012335  00000000  00000000  00042f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d27  00000000  00000000  000552d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dffa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a58  00000000  00000000  0015e040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00162a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005074 	.word	0x08005074

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005074 	.word	0x08005074

08000218 <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000228:	213c      	movs	r1, #60	@ 0x3c
 800022a:	6838      	ldr	r0, [r7, #0]
 800022c:	f003 fe74 	bl	8003f18 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000236:	461a      	mov	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f04f 0200 	mov.w	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f04f 0200 	mov.w	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f04f 0200 	mov.w	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f04f 0200 	mov.w	r2, #0
 800025a:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f04f 0200 	mov.w	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000280:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000292:	4293      	cmp	r3, r2
 8000294:	dd05      	ble.n	80002a2 <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 800029c:	3b60      	subs	r3, #96	@ 0x60
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e008      	b.n	80002b4 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	4a25      	ldr	r2, [pc, #148]	@ (800033c <Encoder_Update+0xd0>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	da04      	bge.n	80002b4 <Encoder_Update+0x48>
        deltaRaw += 60000;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80002b0:	3360      	adds	r3, #96	@ 0x60
 80002b2:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	ee07 3a90 	vmov	s15, r3
 80002c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000340 <Encoder_Update+0xd4>
 80002c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80002cc:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 8000344 <Encoder_Update+0xd8>
 80002d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80002d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80002ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80002ee:	ed97 7a00 	vldr	s14, [r7]
 80002f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	edd3 7a06 	vldr	s15, [r3, #24]
 8000308:	ee77 6a67 	vsub.f32	s13, s14, s15
 800030c:	ed97 7a00 	vldr	s14, [r7]
 8000310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	edc3 7a04 	vstr	s15, [r3, #16]

    enc->lastRawPosition = rawPosition;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = enc->velocity;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	68da      	ldr	r2, [r3, #12]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	619a      	str	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	ffff8ad0 	.word	0xffff8ad0
 8000340:	40c90fda 	.word	0x40c90fda
 8000344:	463b8000 	.word	0x463b8000

08000348 <Encoder_setLimit>:

void Encoder_setLimit(Encoder *enc, float limit)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	ed87 0a00 	vstr	s0, [r7]
		enc->position = limit;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	609a      	str	r2, [r3, #8]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <Encoder_GetPosition>:

float Encoder_GetPosition(Encoder *enc) {
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    return enc->position;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	ee07 3a90 	vmov	s15, r3
}
 8000376:	eeb0 0a67 	vmov.f32	s0, s15
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	ee07 3a90 	vmov	s15, r3
}
 8000394:	eeb0 0a67 	vmov.f32	s0, s15
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	ee07 3a90 	vmov	s15, r3
}
 80003b2:	eeb0 0a67 	vmov.f32	s0, s15
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c6:	f001 f81e 	bl	8001406 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ca:	f000 f897 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ce:	f000 fc65 	bl	8000c9c <MX_GPIO_Init>
  MX_TIM3_Init();
 80003d2:	f000 fa57 	bl	8000884 <MX_TIM3_Init>
  MX_ADC1_Init();
 80003d6:	f000 f8dd 	bl	8000594 <MX_ADC1_Init>
  MX_TIM1_Init();
 80003da:	f000 f955 	bl	8000688 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003de:	f000 fa03 	bl	80007e8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80003e2:	f000 faa5 	bl	8000930 <MX_TIM4_Init>
  MX_TIM20_Init();
 80003e6:	f000 fba9 	bl	8000b3c <MX_TIM20_Init>
  MX_TIM8_Init();
 80003ea:	f000 faf7 	bl	80009dc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init(&encoder1, &htim4);
 80003ee:	4936      	ldr	r1, [pc, #216]	@ (80004c8 <main+0x108>)
 80003f0:	4836      	ldr	r0, [pc, #216]	@ (80004cc <main+0x10c>)
 80003f2:	f7ff ff11 	bl	8000218 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80003f6:	4936      	ldr	r1, [pc, #216]	@ (80004d0 <main+0x110>)
 80003f8:	4836      	ldr	r0, [pc, #216]	@ (80004d4 <main+0x114>)
 80003fa:	f7ff ff0d 	bl	8000218 <Encoder_Init>
	int lastTick = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000402:	213c      	movs	r1, #60	@ 0x3c
 8000404:	4832      	ldr	r0, [pc, #200]	@ (80004d0 <main+0x110>)
 8000406:	f003 fd87 	bl	8003f18 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800040a:	213c      	movs	r1, #60	@ 0x3c
 800040c:	482e      	ldr	r0, [pc, #184]	@ (80004c8 <main+0x108>)
 800040e:	f003 fd83 	bl	8003f18 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint32_t currentTick = HAL_GetTick();
 8000412:	f001 f85d 	bl	80014d0 <HAL_GetTick>
 8000416:	60b8      	str	r0, [r7, #8]
		float dt = (currentTick - lastTick) / 1000.0f;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	ee07 3a90 	vmov	s15, r3
 8000422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000426:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80004d8 <main+0x118>
 800042a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800042e:	edc7 7a01 	vstr	s15, [r7, #4]
		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8000432:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <main+0x108>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000438:	4a28      	ldr	r2, [pc, #160]	@ (80004dc <main+0x11c>)
 800043a:	6013      	str	r3, [r2, #0]
		if (dt >= 0.01f) {
 800043c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000440:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80004e0 <main+0x120>
 8000444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800044c:	db3b      	blt.n	80004c6 <main+0x106>
			Encoder_Update(&encoder1, dt);
 800044e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000452:	481e      	ldr	r0, [pc, #120]	@ (80004cc <main+0x10c>)
 8000454:	f7ff ff0a 	bl	800026c <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8000458:	ed97 0a01 	vldr	s0, [r7, #4]
 800045c:	481d      	ldr	r0, [pc, #116]	@ (80004d4 <main+0x114>)
 800045e:	f7ff ff05 	bl	800026c <Encoder_Update>
			lastTick = currentTick;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	60fb      	str	r3, [r7, #12]

			p1 = Encoder_GetPosition(&encoder1);
 8000466:	4819      	ldr	r0, [pc, #100]	@ (80004cc <main+0x10c>)
 8000468:	f7ff ff7d 	bl	8000366 <Encoder_GetPosition>
 800046c:	eef0 7a40 	vmov.f32	s15, s0
 8000470:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <main+0x124>)
 8000472:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8000476:	4815      	ldr	r0, [pc, #84]	@ (80004cc <main+0x10c>)
 8000478:	f7ff ff84 	bl	8000384 <Encoder_GetVelocity>
 800047c:	eef0 7a40 	vmov.f32	s15, s0
 8000480:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <main+0x128>)
 8000482:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8000486:	4811      	ldr	r0, [pc, #68]	@ (80004cc <main+0x10c>)
 8000488:	f7ff ff8b 	bl	80003a2 <Encoder_GetAcceleration>
 800048c:	eef0 7a40 	vmov.f32	s15, s0
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <main+0x12c>)
 8000492:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8000496:	480f      	ldr	r0, [pc, #60]	@ (80004d4 <main+0x114>)
 8000498:	f7ff ff65 	bl	8000366 <Encoder_GetPosition>
 800049c:	eef0 7a40 	vmov.f32	s15, s0
 80004a0:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <main+0x130>)
 80004a2:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 80004a6:	480b      	ldr	r0, [pc, #44]	@ (80004d4 <main+0x114>)
 80004a8:	f7ff ff6c 	bl	8000384 <Encoder_GetVelocity>
 80004ac:	eef0 7a40 	vmov.f32	s15, s0
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <main+0x134>)
 80004b2:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 80004b6:	4807      	ldr	r0, [pc, #28]	@ (80004d4 <main+0x114>)
 80004b8:	f7ff ff73 	bl	80003a2 <Encoder_GetAcceleration>
 80004bc:	eef0 7a40 	vmov.f32	s15, s0
 80004c0:	4b0d      	ldr	r3, [pc, #52]	@ (80004f8 <main+0x138>)
 80004c2:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
 80004c6:	e7a4      	b.n	8000412 <main+0x52>
 80004c8:	20000178 	.word	0x20000178
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000012c 	.word	0x2000012c
 80004d4:	20000278 	.word	0x20000278
 80004d8:	447a0000 	.word	0x447a0000
 80004dc:	20000294 	.word	0x20000294
 80004e0:	3c23d70a 	.word	0x3c23d70a
 80004e4:	20000298 	.word	0x20000298
 80004e8:	2000029c 	.word	0x2000029c
 80004ec:	200002a0 	.word	0x200002a0
 80004f0:	200002a4 	.word	0x200002a4
 80004f4:	200002a8 	.word	0x200002a8
 80004f8:	200002ac 	.word	0x200002ac

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	2238      	movs	r2, #56	@ 0x38
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 fd86 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800051e:	2000      	movs	r0, #0
 8000520:	f002 fba4 	bl	8002c6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	2302      	movs	r3, #2
 8000526:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800052c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	2340      	movs	r3, #64	@ 0x40
 8000530:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800053a:	2304      	movs	r3, #4
 800053c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800053e:	2355      	movs	r3, #85	@ 0x55
 8000540:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000546:	2302      	movs	r3, #2
 8000548:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054a:	2302      	movs	r3, #2
 800054c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fc3e 	bl	8002dd4 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055e:	f000 fcb9 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2303      	movs	r3, #3
 8000568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2104      	movs	r1, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f002 ff3c 	bl	80033f8 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000586:	f000 fca5 	bl	8000ed4 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3750      	adds	r7, #80	@ 0x50
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	@ 0x30
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2220      	movs	r2, #32
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fd35 	bl	800501c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ba:	4b30      	ldr	r3, [pc, #192]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d4:	4b29      	ldr	r3, [pc, #164]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005da:	4b28      	ldr	r3, [pc, #160]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005dc:	2204      	movs	r2, #4
 80005de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b23      	ldr	r3, [pc, #140]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000600:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	4817      	ldr	r0, [pc, #92]	@ (800067c <MX_ADC1_Init+0xe8>)
 800061e:	f001 f939 	bl	8001894 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000628:	f000 fc54 	bl	8000ed4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000634:	4619      	mov	r1, r3
 8000636:	4811      	ldr	r0, [pc, #68]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000638:	f001 ff4e 	bl	80024d8 <HAL_ADCEx_MultiModeConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000642:	f000 fc47 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_ADC1_Init+0xec>)
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064a:	2306      	movs	r3, #6
 800064c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_ADC1_Init+0xf0>)
 8000654:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000656:	2304      	movs	r3, #4
 8000658:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000664:	f001 fad2 	bl	8001c0c <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800066e:	f000 fc31 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	@ 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	04300002 	.word	0x04300002
 8000684:	407f0000 	.word	0x407f0000

08000688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	@ 0x70
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]
 80006ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2234      	movs	r2, #52	@ 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fcaa 	bl	800501c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c8:	4b45      	ldr	r3, [pc, #276]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006ca:	4a46      	ldr	r2, [pc, #280]	@ (80007e4 <MX_TIM1_Init+0x15c>)
 80006cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ce:	4b44      	ldr	r3, [pc, #272]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b42      	ldr	r3, [pc, #264]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80006da:	4b41      	ldr	r3, [pc, #260]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006dc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80006e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e2:	4b3f      	ldr	r3, [pc, #252]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ee:	4b3c      	ldr	r3, [pc, #240]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f4:	483a      	ldr	r0, [pc, #232]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006f6:	f003 fab1 	bl	8003c5c <HAL_TIM_Base_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000700:	f000 fbe8 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800070a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800070e:	4619      	mov	r1, r3
 8000710:	4833      	ldr	r0, [pc, #204]	@ (80007e0 <MX_TIM1_Init+0x158>)
 8000712:	f003 fda3 	bl	800425c <HAL_TIM_ConfigClockSource>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800071c:	f000 fbda 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000720:	482f      	ldr	r0, [pc, #188]	@ (80007e0 <MX_TIM1_Init+0x158>)
 8000722:	f003 faf2 	bl	8003d0a <HAL_TIM_PWM_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800072c:	f000 fbd2 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000740:	4619      	mov	r1, r3
 8000742:	4827      	ldr	r0, [pc, #156]	@ (80007e0 <MX_TIM1_Init+0x158>)
 8000744:	f004 fb40 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800074e:	f000 fbc1 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	@ 0x60
 8000754:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075e:	2300      	movs	r3, #0
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800076e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000772:	2208      	movs	r2, #8
 8000774:	4619      	mov	r1, r3
 8000776:	481a      	ldr	r0, [pc, #104]	@ (80007e0 <MX_TIM1_Init+0x158>)
 8000778:	f003 fc5c 	bl	8004034 <HAL_TIM_PWM_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000782:	f000 fba7 	bl	8000ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800079a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80007c4:	f004 fb96 	bl	8004ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80007ce:	f000 fb81 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d2:	4803      	ldr	r0, [pc, #12]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80007d4:	f000 fd06 	bl	80011e4 <HAL_TIM_MspPostInit>

}
 80007d8:	bf00      	nop
 80007da:	3770      	adds	r7, #112	@ 0x70
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000094 	.word	0x20000094
 80007e4:	40012c00 	.word	0x40012c00

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800080c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_TIM2_Init+0x98>)
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_TIM2_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082e:	4814      	ldr	r0, [pc, #80]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000830:	f003 fa14 	bl	8003c5c <HAL_TIM_Base_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800083a:	f000 fb4b 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_TIM2_Init+0x98>)
 800084c:	f003 fd06 	bl	800425c <HAL_TIM_ConfigClockSource>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000856:	f000 fb3d 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000868:	f004 faae 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000872:	f000 fb2f 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000e0 	.word	0x200000e0

08000884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	@ 0x30
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2224      	movs	r2, #36	@ 0x24
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fbc2 	bl	800501c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008a4:	4a21      	ldr	r2, [pc, #132]	@ (800092c <MX_TIM3_Init+0xa8>)
 80008a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008b6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80008ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008c8:	2303      	movs	r3, #3
 80008ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e0:	2301      	movs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008f4:	f003 fa6a 	bl	8003dcc <HAL_TIM_Encoder_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008fe:	f000 fae9 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <MX_TIM3_Init+0xa4>)
 8000910:	f004 fa5a 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800091a:	f000 fadb 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000012c 	.word	0x2000012c
 800092c:	40000400 	.word	0x40000400

08000930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2224      	movs	r2, #36	@ 0x24
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f004 fb6c 	bl	800501c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000950:	4a21      	ldr	r2, [pc, #132]	@ (80009d8 <MX_TIM4_Init+0xa8>)
 8000952:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000962:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000974:	2301      	movs	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800097c:	2301      	movs	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 80009a0:	f003 fa14 	bl	8003dcc <HAL_TIM_Encoder_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009aa:	f000 fa93 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 80009bc:	f004 fa04 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009c6:	f000 fa85 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	@ 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000178 	.word	0x20000178
 80009d8:	40000800 	.word	0x40000800

080009dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	@ 0x70
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2234      	movs	r2, #52	@ 0x34
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 fb00 	bl	800501c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a1c:	4b45      	ldr	r3, [pc, #276]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a1e:	4a46      	ldr	r2, [pc, #280]	@ (8000b38 <MX_TIM8_Init+0x15c>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a22:	4b44      	ldr	r3, [pc, #272]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b42      	ldr	r3, [pc, #264]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a2e:	4b41      	ldr	r3, [pc, #260]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b3f      	ldr	r3, [pc, #252]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b3c      	ldr	r3, [pc, #240]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a48:	483a      	ldr	r0, [pc, #232]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a4a:	f003 f907 	bl	8003c5c <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 fa3e 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a62:	4619      	mov	r1, r3
 8000a64:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a66:	f003 fbf9 	bl	800425c <HAL_TIM_ConfigClockSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000a70:	f000 fa30 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a74:	482f      	ldr	r0, [pc, #188]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a76:	f003 f948 	bl	8003d0a <HAL_TIM_PWM_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000a80:	f000 fa28 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a94:	4619      	mov	r1, r3
 8000a96:	4827      	ldr	r0, [pc, #156]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a98:	f004 f996 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000aa2:	f000 fa17 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa6:	2360      	movs	r3, #96	@ 0x60
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481a      	ldr	r0, [pc, #104]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000acc:	f003 fab2 	bl	8004034 <HAL_TIM_PWM_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000ad6:	f000 f9fd 	bl	8000ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000b18:	f004 f9ec 	bl	8004ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8000b22:	f000 f9d7 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b26:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000b28:	f000 fb5c 	bl	80011e4 <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3770      	adds	r7, #112	@ 0x70
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001c4 	.word	0x200001c4
 8000b38:	40013400 	.word	0x40013400

08000b3c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	@ 0x70
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2234      	movs	r2, #52	@ 0x34
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 fa50 	bl	800501c <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8000b7c:	4b45      	ldr	r3, [pc, #276]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b7e:	4a46      	ldr	r2, [pc, #280]	@ (8000c98 <MX_TIM20_Init+0x15c>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8000b82:	4b44      	ldr	r3, [pc, #272]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b42      	ldr	r3, [pc, #264]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8000b8e:	4b41      	ldr	r3, [pc, #260]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b94:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b3f      	ldr	r3, [pc, #252]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8000b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8000ba8:	483a      	ldr	r0, [pc, #232]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000baa:	f003 f857 	bl	8003c5c <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 f98e 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bbc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4833      	ldr	r0, [pc, #204]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000bc6:	f003 fb49 	bl	800425c <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8000bd0:	f000 f980 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8000bd4:	482f      	ldr	r0, [pc, #188]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000bd6:	f003 f898 	bl	8003d0a <HAL_TIM_PWM_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8000be0:	f000 f978 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8000bf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4827      	ldr	r0, [pc, #156]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000bf8:	f004 f8e6 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8000c02:	f000 f967 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c06:	2360      	movs	r3, #96	@ 0x60
 8000c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c26:	2200      	movs	r2, #0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481a      	ldr	r0, [pc, #104]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000c2c:	f003 fa02 	bl	8004034 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8000c36:	f000 f94d 	bl	8000ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000c78:	f004 f93c 	bl	8004ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM20_Init+0x14a>
  {
    Error_Handler();
 8000c82:	f000 f927 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8000c86:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000c88:	f000 faac 	bl	80011e4 <HAL_TIM_MspPostInit>

}
 8000c8c:	bf00      	nop
 8000c8e:	3770      	adds	r7, #112	@ 0x70
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000210 	.word	0x20000210
 8000c98:	40015000 	.word	0x40015000

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b73      	ldr	r3, [pc, #460]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	4a72      	ldr	r2, [pc, #456]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cbe:	4b70      	ldr	r3, [pc, #448]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4b6d      	ldr	r3, [pc, #436]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a6c      	ldr	r2, [pc, #432]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b67      	ldr	r3, [pc, #412]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a66      	ldr	r2, [pc, #408]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b64      	ldr	r3, [pc, #400]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b61      	ldr	r3, [pc, #388]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a60      	ldr	r2, [pc, #384]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b5e      	ldr	r3, [pc, #376]	@ (8000e80 <MX_GPIO_Init+0x1e4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f001 ff77 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2102      	movs	r1, #2
 8000d22:	4858      	ldr	r0, [pc, #352]	@ (8000e84 <MX_GPIO_Init+0x1e8>)
 8000d24:	f001 ff72 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d38:	230c      	movs	r3, #12
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f001 fddf 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f001 fdce 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d86:	f001 fdbf 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d8a:	2330      	movs	r3, #48	@ 0x30
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4838      	ldr	r0, [pc, #224]	@ (8000e88 <MX_GPIO_Init+0x1ec>)
 8000da6:	f001 fdaf 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4830      	ldr	r0, [pc, #192]	@ (8000e84 <MX_GPIO_Init+0x1e8>)
 8000dc2:	f001 fda1 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 8000dc6:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4829      	ldr	r0, [pc, #164]	@ (8000e84 <MX_GPIO_Init+0x1e8>)
 8000dde:	f001 fd93 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_sensor_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin|Limit_Switch_Prismatic2_Pin;
 8000de2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000de8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfc:	f001 fd84 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8000e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	481c      	ldr	r0, [pc, #112]	@ (8000e88 <MX_GPIO_Init+0x1ec>)
 8000e16:	f001 fd77 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8000e1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4815      	ldr	r0, [pc, #84]	@ (8000e88 <MX_GPIO_Init+0x1ec>)
 8000e32:	f001 fd69 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e36:	2330      	movs	r3, #48	@ 0x30
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e46:	2305      	movs	r3, #5
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <MX_GPIO_Init+0x1e8>)
 8000e52:	f001 fd59 	bl	8002908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2017      	movs	r0, #23
 8000e5c:	f001 fd1f 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e60:	2017      	movs	r0, #23
 8000e62:	f001 fd36 	bl	80028d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2028      	movs	r0, #40	@ 0x28
 8000e6c:	f001 fd17 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e70:	2028      	movs	r0, #40	@ 0x28
 8000e72:	f001 fd2e 	bl	80028d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400
 8000e88:	48000800 	.word	0x48000800

08000e8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10)
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e9c:	d10e      	bne.n	8000ebc <HAL_GPIO_EXTI_Callback+0x30>
	{
		Encoder_setLimit(&encoder1,180);
 8000e9e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000ec4 <HAL_GPIO_EXTI_Callback+0x38>
 8000ea2:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ea4:	f7ff fa50 	bl	8000348 <Encoder_setLimit>
		Encoder_setLimit(&encoder2,180);
 8000ea8:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000ec4 <HAL_GPIO_EXTI_Callback+0x38>
 8000eac:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <HAL_GPIO_EXTI_Callback+0x40>)
 8000eae:	f7ff fa4b 	bl	8000348 <Encoder_setLimit>
		check += 1;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000eba:	6013      	str	r3, [r2, #0]
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	43340000 	.word	0x43340000
 8000ec8:	2000025c 	.word	0x2000025c
 8000ecc:	20000278 	.word	0x20000278
 8000ed0:	200002b0 	.word	0x200002b0

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <Error_Handler+0x8>

08000ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <HAL_MspInit+0x44>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eea:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <HAL_MspInit+0x44>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <HAL_MspInit+0x44>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f02:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <HAL_MspInit+0x44>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f16:	f001 ff4d 	bl	8002db4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b09e      	sub	sp, #120	@ 0x78
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2254      	movs	r2, #84	@ 0x54
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 f867 	bl	800501c <memset>
  if(hadc->Instance==ADC1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f56:	d134      	bne.n	8000fc2 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f5e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f62:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 fc29 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f74:	f7ff ffae 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_ADC_MspInit+0xa4>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7c:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <HAL_ADC_MspInit+0xa4>)
 8000f7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_ADC_MspInit+0xa4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_ADC_MspInit+0xa4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <HAL_ADC_MspInit+0xa4>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_ADC_MspInit+0xa4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fac:	2303      	movs	r3, #3
 8000fae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbe:	f001 fca3 	bl	8002908 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3778      	adds	r7, #120	@ 0x78
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a25      	ldr	r2, [pc, #148]	@ (8001074 <HAL_TIM_Base_MspInit+0xa4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10c      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	4a24      	ldr	r2, [pc, #144]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8000fe8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fee:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8000ffa:	e034      	b.n	8001066 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001004:	d10c      	bne.n	8001020 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100a:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6593      	str	r3, [r2, #88]	@ 0x58
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
}
 800101e:	e022      	b.n	8001066 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a15      	ldr	r2, [pc, #84]	@ (800107c <HAL_TIM_Base_MspInit+0xac>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d10c      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8001030:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001034:	6613      	str	r3, [r2, #96]	@ 0x60
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
}
 8001042:	e010      	b.n	8001066 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM20)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <HAL_TIM_Base_MspInit+0xb0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d10b      	bne.n	8001066 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001052:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8001054:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001058:	6613      	str	r3, [r2, #96]	@ 0x60
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40012c00 	.word	0x40012c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40013400 	.word	0x40013400
 8001080:	40015000 	.word	0x40015000

08001084 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	@ 0x38
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a4b      	ldr	r2, [pc, #300]	@ (80011d0 <HAL_TIM_Encoder_MspInit+0x14c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d145      	bne.n	8001132 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a6:	4b4b      	ldr	r3, [pc, #300]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010aa:	4a4a      	ldr	r2, [pc, #296]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b2:	4b48      	ldr	r3, [pc, #288]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b45      	ldr	r3, [pc, #276]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a44      	ldr	r2, [pc, #272]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b42      	ldr	r3, [pc, #264]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	4a3e      	ldr	r2, [pc, #248]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e2:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 80010ee:	2340      	movs	r3, #64	@ 0x40
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010fe:	2302      	movs	r3, #2
 8001100:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110c:	f001 fbfc 	bl	8002908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001120:	2302      	movs	r3, #2
 8001122:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	482b      	ldr	r0, [pc, #172]	@ (80011d8 <HAL_TIM_Encoder_MspInit+0x154>)
 800112c:	f001 fbec 	bl	8002908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001130:	e04a      	b.n	80011c8 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a29      	ldr	r2, [pc, #164]	@ (80011dc <HAL_TIM_Encoder_MspInit+0x158>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d145      	bne.n	80011c8 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001140:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6593      	str	r3, [r2, #88]	@ 0x58
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	4a1e      	ldr	r2, [pc, #120]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0x150>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8001184:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001196:	230a      	movs	r3, #10
 8001198:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a4:	f001 fbb0 	bl	8002908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011b8:	2302      	movs	r3, #2
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80011c4:	f001 fba0 	bl	8002908 <HAL_GPIO_Init>
}
 80011c8:	bf00      	nop
 80011ca:	3738      	adds	r7, #56	@ 0x38
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40000400 	.word	0x40000400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000800 	.word	0x48000800
 80011dc:	40000800 	.word	0x40000800
 80011e0:	48000400 	.word	0x48000400

080011e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a33      	ldr	r2, [pc, #204]	@ (80012d0 <HAL_TIM_MspPostInit+0xec>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d11c      	bne.n	8001240 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a32      	ldr	r2, [pc, #200]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 800121e:	2304      	movs	r3, #4
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800122e:	2302      	movs	r3, #2
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4827      	ldr	r0, [pc, #156]	@ (80012d8 <HAL_TIM_MspPostInit+0xf4>)
 800123a:	f001 fb65 	bl	8002908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800123e:	e042      	b.n	80012c6 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM8)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a25      	ldr	r2, [pc, #148]	@ (80012dc <HAL_TIM_MspPostInit+0xf8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d11c      	bne.n	8001284 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Pin;
 8001262:	2340      	movs	r3, #64	@ 0x40
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001272:	2304      	movs	r3, #4
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4816      	ldr	r0, [pc, #88]	@ (80012d8 <HAL_TIM_MspPostInit+0xf4>)
 800127e:	f001 fb43 	bl	8002908 <HAL_GPIO_Init>
}
 8001282:	e020      	b.n	80012c6 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM20)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <HAL_TIM_MspPostInit+0xfc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11b      	bne.n	80012c6 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 80012a6:	2304      	movs	r3, #4
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80012b6:	2303      	movs	r3, #3
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4808      	ldr	r0, [pc, #32]	@ (80012e4 <HAL_TIM_MspPostInit+0x100>)
 80012c2:	f001 fb21 	bl	8002908 <HAL_GPIO_Init>
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	@ 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	48000800 	.word	0x48000800
 80012dc:	40013400 	.word	0x40013400
 80012e0:	40015000 	.word	0x40015000
 80012e4:	48000400 	.word	0x48000400

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <NMI_Handler+0x4>

080012f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <MemManage_Handler+0x4>

08001300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <UsageFault_Handler+0x4>

08001310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133e:	f000 f8b5 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}

08001346 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 800134a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800134e:	f001 fc75 	bl	8002c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 800135a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800135e:	f001 fc6d 	bl	8002c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8001362:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001366:	f001 fc69 	bl	8002c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 800136a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800136e:	f001 fc65 	bl	8002c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 8001372:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001376:	f001 fc61 	bl	8002c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 800137a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800137e:	f001 fc5d 	bl	8002c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8001382:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001386:	f001 fc59 	bl	8002c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b4:	480d      	ldr	r0, [pc, #52]	@ (80013ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b8:	f7ff ffea 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <LoopForever+0xe>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001400 <LoopForever+0x16>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e2:	f003 fe23 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e6:	f7fe ffeb 	bl	80003c0 <main>

080013ea <LoopForever>:

LoopForever:
    b LoopForever
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
  ldr   r0, =_estack
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013f8:	080050a4 	.word	0x080050a4
  ldr r2, =_sbss
 80013fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001400:	200002b8 	.word	0x200002b8

08001404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_2_IRQHandler>

08001406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f001 fa39 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f80e 	bl	8001438 <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	e001      	b.n	800142c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001428:	f7ff fd5a 	bl	8000ee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142c:	79fb      	ldrb	r3, [r7, #7]

}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_InitTick+0x68>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d022      	beq.n	8001492 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_InitTick+0x6c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_InitTick+0x68>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001458:	fbb1 f3f3 	udiv	r3, r1, r3
 800145c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fa44 	bl	80028ee <HAL_SYSTICK_Config>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10f      	bne.n	800148c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	d809      	bhi.n	8001486 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001472:	2200      	movs	r2, #0
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	f04f 30ff 	mov.w	r0, #4294967295
 800147a:	f001 fa10 	bl	800289e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_InitTick+0x70>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e007      	b.n	8001496 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e004      	b.n	8001496 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e001      	b.n	8001496 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x20>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a03      	ldr	r2, [pc, #12]	@ (80014c8 <HAL_IncTick+0x1c>)
 80014bc:	6013      	str	r3, [r2, #0]
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	200002b4 	.word	0x200002b4
 80014cc:	20000008 	.word	0x20000008

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200002b4 	.word	0x200002b4

080014e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	609a      	str	r2, [r3, #8]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3360      	adds	r3, #96	@ 0x60
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <LL_ADC_SetOffset+0x44>)
 8001572:	4013      	ands	r3, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	4313      	orrs	r3, r2
 8001580:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001588:	bf00      	nop
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	03fff000 	.word	0x03fff000

08001598 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3360      	adds	r3, #96	@ 0x60
 80015a6:	461a      	mov	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3360      	adds	r3, #96	@ 0x60
 80015d4:	461a      	mov	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ee:	bf00      	nop
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b087      	sub	sp, #28
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3360      	adds	r3, #96	@ 0x60
 800160a:	461a      	mov	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	431a      	orrs	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3360      	adds	r3, #96	@ 0x60
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	615a      	str	r2, [r3, #20]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3330      	adds	r3, #48	@ 0x30
 800169c:	461a      	mov	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	4413      	add	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	211f      	movs	r1, #31
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	0e9b      	lsrs	r3, r3, #26
 80016c4:	f003 011f 	and.w	r1, r3, #31
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	431a      	orrs	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d8:	bf00      	nop
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3314      	adds	r3, #20
 80016f4:	461a      	mov	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	0e5b      	lsrs	r3, r3, #25
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	0d1b      	lsrs	r3, r3, #20
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2107      	movs	r1, #7
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	401a      	ands	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0d1b      	lsrs	r3, r3, #20
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0318 	and.w	r3, r3, #24
 800175e:	4908      	ldr	r1, [pc, #32]	@ (8001780 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001760:	40d9      	lsrs	r1, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	400b      	ands	r3, r1
 8001766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176a:	431a      	orrs	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	0007ffff 	.word	0x0007ffff

08001784 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001794:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6093      	str	r3, [r2, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800180c:	d101      	bne.n	8001812 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <LL_ADC_IsEnabled+0x18>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <LL_ADC_IsEnabled+0x1a>
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b04      	cmp	r3, #4
 8001858:	d101      	bne.n	800185e <LL_ADC_REG_IsConversionOngoing+0x18>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b08      	cmp	r3, #8
 800187e:	d101      	bne.n	8001884 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e1a9      	b.n	8001c02 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fb33 	bl	8000f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff67 	bl	80017a8 <LL_ADC_IsDeepPowerDownEnabled>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff4d 	bl	8001784 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff82 	bl	80017f8 <LL_ADC_IsInternalRegulatorEnabled>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d115      	bne.n	8001926 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff66 	bl	80017d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001904:	4b9c      	ldr	r3, [pc, #624]	@ (8001b78 <HAL_ADC_Init+0x2e4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	4a9c      	ldr	r2, [pc, #624]	@ (8001b7c <HAL_ADC_Init+0x2e8>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	3301      	adds	r3, #1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001918:	e002      	b.n	8001920 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3b01      	subs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f9      	bne.n	800191a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff64 	bl	80017f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff75 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 800195c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 8142 	bne.w	8001bf0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 813e 	bne.w	8001bf0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001978:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800197c:	f043 0202 	orr.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff49 	bl	8001820 <LL_ADC_IsEnabled>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d141      	bne.n	8001a18 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800199c:	d004      	beq.n	80019a8 <HAL_ADC_Init+0x114>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a77      	ldr	r2, [pc, #476]	@ (8001b80 <HAL_ADC_Init+0x2ec>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d10f      	bne.n	80019c8 <HAL_ADC_Init+0x134>
 80019a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80019ac:	f7ff ff38 	bl	8001820 <LL_ADC_IsEnabled>
 80019b0:	4604      	mov	r4, r0
 80019b2:	4873      	ldr	r0, [pc, #460]	@ (8001b80 <HAL_ADC_Init+0x2ec>)
 80019b4:	f7ff ff34 	bl	8001820 <LL_ADC_IsEnabled>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4323      	orrs	r3, r4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e012      	b.n	80019ee <HAL_ADC_Init+0x15a>
 80019c8:	486e      	ldr	r0, [pc, #440]	@ (8001b84 <HAL_ADC_Init+0x2f0>)
 80019ca:	f7ff ff29 	bl	8001820 <LL_ADC_IsEnabled>
 80019ce:	4604      	mov	r4, r0
 80019d0:	486d      	ldr	r0, [pc, #436]	@ (8001b88 <HAL_ADC_Init+0x2f4>)
 80019d2:	f7ff ff25 	bl	8001820 <LL_ADC_IsEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	431c      	orrs	r4, r3
 80019da:	486c      	ldr	r0, [pc, #432]	@ (8001b8c <HAL_ADC_Init+0x2f8>)
 80019dc:	f7ff ff20 	bl	8001820 <LL_ADC_IsEnabled>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4323      	orrs	r3, r4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_Init+0x172>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a5f      	ldr	r2, [pc, #380]	@ (8001b80 <HAL_ADC_Init+0x2ec>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Init+0x176>
 8001a06:	4a62      	ldr	r2, [pc, #392]	@ (8001b90 <HAL_ADC_Init+0x2fc>)
 8001a08:	e000      	b.n	8001a0c <HAL_ADC_Init+0x178>
 8001a0a:	4a62      	ldr	r2, [pc, #392]	@ (8001b94 <HAL_ADC_Init+0x300>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7ff fd68 	bl	80014e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7f5b      	ldrb	r3, [r3, #29]
 8001a1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d106      	bne.n	8001a54 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	045b      	lsls	r3, r3, #17
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	4b48      	ldr	r3, [pc, #288]	@ (8001b98 <HAL_ADC_Init+0x304>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fee4 	bl	800186c <LL_ADC_INJ_IsConversionOngoing>
 8001aa4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d17f      	bne.n	8001bac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d17c      	bne.n	8001bac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ab6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001abe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ace:	f023 0302 	bic.w	r3, r3, #2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d017      	beq.n	8001b14 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001af2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001afc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6911      	ldr	r1, [r2, #16]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001b12:	e013      	b.n	8001b3c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d12a      	bne.n	8001b9c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b62:	4311      	orrs	r1, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	e019      	b.n	8001bac <HAL_ADC_Init+0x318>
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	053e2d63 	.word	0x053e2d63
 8001b80:	50000100 	.word	0x50000100
 8001b84:	50000400 	.word	0x50000400
 8001b88:	50000500 	.word	0x50000500
 8001b8c:	50000600 	.word	0x50000600
 8001b90:	50000300 	.word	0x50000300
 8001b94:	50000700 	.word	0x50000700
 8001b98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10c      	bne.n	8001bce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f023 010f 	bic.w	r1, r3, #15
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	1e5a      	subs	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bcc:	e007      	b.n	8001bde <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020f 	bic.w	r2, r2, #15
 8001bdc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bee:	e007      	b.n	8001c00 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	bf00      	nop

08001c0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0b6      	sub	sp, #216	@ 0xd8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x24>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f000 bc13 	b.w	8002456 <HAL_ADC_ConfigChannel+0x84a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fe02 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 83f3 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f7ff fd18 	bl	800168c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fdf0 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001c66:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fdfc 	bl	800186c <LL_ADC_INJ_IsConversionOngoing>
 8001c74:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 81d9 	bne.w	8002034 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 81d4 	bne.w	8002034 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c94:	d10f      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7ff fd1f 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fcd9 	bl	8001666 <LL_ADC_SetSamplingTimeCommonConfig>
 8001cb4:	e00e      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f7ff fd0e 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fcc9 	bl	8001666 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	08db      	lsrs	r3, r3, #3
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d022      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6919      	ldr	r1, [r3, #16]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d06:	f7ff fc23 	bl	8001550 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6919      	ldr	r1, [r3, #16]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f7ff fc6f 	bl	80015fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d102      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x126>
 8001d2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x128>
 8001d32:	2300      	movs	r3, #0
 8001d34:	461a      	mov	r2, r3
 8001d36:	f7ff fc7b 	bl	8001630 <LL_ADC_SetOffsetSaturation>
 8001d3a:	e17b      	b.n	8002034 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fc28 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x15c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fc1d 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	f003 021f 	and.w	r2, r3, #31
 8001d66:	e01e      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x19a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fc12 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e004      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d105      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x1b2>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0e9b      	lsrs	r3, r3, #26
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	e018      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x1e4>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001de2:	2320      	movs	r3, #32
 8001de4:	e004      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d106      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fbe1 	bl	80015c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fbc5 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10a      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x222>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fbba 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	e01e      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x260>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fbaf 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001e4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e004      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x278>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	e018      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x2aa>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001e98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	e004      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d106      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb7e 	bl	80015c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fb62 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x2e8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fb57 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	0e9b      	lsrs	r3, r3, #26
 8001eee:	f003 021f 	and.w	r2, r3, #31
 8001ef2:	e01e      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x326>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fb4c 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001f22:	2320      	movs	r3, #32
 8001f24:	e004      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x33e>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	e016      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x36c>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001f5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e004      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2102      	movs	r1, #2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fb1d 	bl	80015c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2103      	movs	r1, #3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fb01 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x3aa>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2103      	movs	r1, #3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff faf6 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	e017      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x3da>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2103      	movs	r1, #3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff faeb 	bl	8001598 <LL_ADC_GetOffsetChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fd0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	e003      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001fdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x3f2>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	e011      	b.n	8002022 <HAL_ADC_ConfigChannel+0x416>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800200c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800200e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002016:	2320      	movs	r3, #32
 8002018:	e003      	b.n	8002022 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800201a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002022:	429a      	cmp	r2, r3
 8002024:	d106      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	2103      	movs	r1, #3
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fac8 	bl	80015c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fbf1 	bl	8001820 <LL_ADC_IsEnabled>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	f040 813d 	bne.w	80022c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	461a      	mov	r2, r3
 8002054:	f7ff fb72 	bl	800173c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4aa2      	ldr	r2, [pc, #648]	@ (80022e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	f040 812e 	bne.w	80022c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <HAL_ADC_ConfigChannel+0x480>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	3301      	adds	r3, #1
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2b09      	cmp	r3, #9
 8002082:	bf94      	ite	ls
 8002084:	2301      	movls	r3, #1
 8002086:	2300      	movhi	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e019      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x4b4>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800209a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800209c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800209e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80020a4:	2320      	movs	r3, #32
 80020a6:	e003      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80020a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2b09      	cmp	r3, #9
 80020b8:	bf94      	ite	ls
 80020ba:	2301      	movls	r3, #1
 80020bc:	2300      	movhi	r3, #0
 80020be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d079      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x4d4>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	3301      	adds	r3, #1
 80020d8:	069b      	lsls	r3, r3, #26
 80020da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020de:	e015      	b.n	800210c <HAL_ADC_ConfigChannel+0x500>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80020f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80020f8:	2320      	movs	r3, #32
 80020fa:	e003      	b.n	8002104 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3301      	adds	r3, #1
 8002106:	069b      	lsls	r3, r3, #26
 8002108:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <HAL_ADC_ConfigChannel+0x520>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0e9b      	lsrs	r3, r3, #26
 800211e:	3301      	adds	r3, #1
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	e017      	b.n	800215c <HAL_ADC_ConfigChannel+0x550>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800213a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800213e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002144:	2320      	movs	r3, #32
 8002146:	e003      	b.n	8002150 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	3301      	adds	r3, #1
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	ea42 0103 	orr.w	r1, r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x576>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	3301      	adds	r3, #1
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	051b      	lsls	r3, r3, #20
 8002180:	e018      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x5a8>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800219a:	2320      	movs	r3, #32
 800219c:	e003      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800219e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b4:	430b      	orrs	r3, r1
 80021b6:	e07e      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x5c8>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	3301      	adds	r3, #1
 80021cc:	069b      	lsls	r3, r3, #26
 80021ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021d2:	e015      	b.n	8002200 <HAL_ADC_ConfigChannel+0x5f4>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80021e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e003      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80021f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	069b      	lsls	r3, r3, #26
 80021fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x614>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0e9b      	lsrs	r3, r3, #26
 8002212:	3301      	adds	r3, #1
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	e017      	b.n	8002250 <HAL_ADC_ConfigChannel+0x644>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	61fb      	str	r3, [r7, #28]
  return result;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e003      	b.n	8002244 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	ea42 0103 	orr.w	r1, r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10d      	bne.n	800227c <HAL_ADC_ConfigChannel+0x670>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	3301      	adds	r3, #1
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	3b1e      	subs	r3, #30
 8002274:	051b      	lsls	r3, r3, #20
 8002276:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800227a:	e01b      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x6a8>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	613b      	str	r3, [r7, #16]
  return result;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	f003 021f 	and.w	r2, r3, #31
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	3b1e      	subs	r3, #30
 80022ae:	051b      	lsls	r3, r3, #20
 80022b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7ff fa12 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <HAL_ADC_ConfigChannel+0x6e0>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80be 	beq.w	800244a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022d6:	d004      	beq.n	80022e2 <HAL_ADC_ConfigChannel+0x6d6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10a      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x6ec>
 80022e2:	4b04      	ldr	r3, [pc, #16]	@ (80022f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80022e4:	e009      	b.n	80022fa <HAL_ADC_ConfigChannel+0x6ee>
 80022e6:	bf00      	nop
 80022e8:	407f0000 	.word	0x407f0000
 80022ec:	80080000 	.word	0x80080000
 80022f0:	50000100 	.word	0x50000100
 80022f4:	50000300 	.word	0x50000300
 80022f8:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <HAL_ADC_ConfigChannel+0x854>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f91a 	bl	8001534 <LL_ADC_GetCommonPathInternalCh>
 8002300:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a56      	ldr	r2, [pc, #344]	@ (8002464 <HAL_ADC_ConfigChannel+0x858>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_ADC_ConfigChannel+0x70c>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a55      	ldr	r2, [pc, #340]	@ (8002468 <HAL_ADC_ConfigChannel+0x85c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d13a      	bne.n	800238e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800231c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d134      	bne.n	800238e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800232c:	d005      	beq.n	800233a <HAL_ADC_ConfigChannel+0x72e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a4e      	ldr	r2, [pc, #312]	@ (800246c <HAL_ADC_ConfigChannel+0x860>)
 8002334:	4293      	cmp	r3, r2
 8002336:	f040 8085 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002342:	d004      	beq.n	800234e <HAL_ADC_ConfigChannel+0x742>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a49      	ldr	r2, [pc, #292]	@ (8002470 <HAL_ADC_ConfigChannel+0x864>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x746>
 800234e:	4a49      	ldr	r2, [pc, #292]	@ (8002474 <HAL_ADC_ConfigChannel+0x868>)
 8002350:	e000      	b.n	8002354 <HAL_ADC_ConfigChannel+0x748>
 8002352:	4a43      	ldr	r2, [pc, #268]	@ (8002460 <HAL_ADC_ConfigChannel+0x854>)
 8002354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002358:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f7ff f8d5 	bl	800150e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002364:	4b44      	ldr	r3, [pc, #272]	@ (8002478 <HAL_ADC_ConfigChannel+0x86c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	4a44      	ldr	r2, [pc, #272]	@ (800247c <HAL_ADC_ConfigChannel+0x870>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800237e:	e002      	b.n	8002386 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3b01      	subs	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f9      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800238c:	e05a      	b.n	8002444 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a3b      	ldr	r2, [pc, #236]	@ (8002480 <HAL_ADC_ConfigChannel+0x874>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d125      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800239c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11f      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a31      	ldr	r2, [pc, #196]	@ (8002470 <HAL_ADC_ConfigChannel+0x864>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d104      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x7ac>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a34      	ldr	r2, [pc, #208]	@ (8002484 <HAL_ADC_ConfigChannel+0x878>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d047      	beq.n	8002448 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c0:	d004      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x7c0>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002470 <HAL_ADC_ConfigChannel+0x864>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7c4>
 80023cc:	4a29      	ldr	r2, [pc, #164]	@ (8002474 <HAL_ADC_ConfigChannel+0x868>)
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7c6>
 80023d0:	4a23      	ldr	r2, [pc, #140]	@ (8002460 <HAL_ADC_ConfigChannel+0x854>)
 80023d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7ff f896 	bl	800150e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e2:	e031      	b.n	8002448 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a27      	ldr	r2, [pc, #156]	@ (8002488 <HAL_ADC_ConfigChannel+0x87c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d12d      	bne.n	800244a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d127      	bne.n	800244a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <HAL_ADC_ConfigChannel+0x864>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d022      	beq.n	800244a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800240c:	d004      	beq.n	8002418 <HAL_ADC_ConfigChannel+0x80c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a17      	ldr	r2, [pc, #92]	@ (8002470 <HAL_ADC_ConfigChannel+0x864>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x810>
 8002418:	4a16      	ldr	r2, [pc, #88]	@ (8002474 <HAL_ADC_ConfigChannel+0x868>)
 800241a:	e000      	b.n	800241e <HAL_ADC_ConfigChannel+0x812>
 800241c:	4a10      	ldr	r2, [pc, #64]	@ (8002460 <HAL_ADC_ConfigChannel+0x854>)
 800241e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002422:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f7ff f870 	bl	800150e <LL_ADC_SetCommonPathInternalCh>
 800242e:	e00c      	b.n	800244a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002442:	e002      	b.n	800244a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002444:	bf00      	nop
 8002446:	e000      	b.n	800244a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002448:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002452:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002456:	4618      	mov	r0, r3
 8002458:	37d8      	adds	r7, #216	@ 0xd8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	50000700 	.word	0x50000700
 8002464:	c3210000 	.word	0xc3210000
 8002468:	90c00010 	.word	0x90c00010
 800246c:	50000600 	.word	0x50000600
 8002470:	50000100 	.word	0x50000100
 8002474:	50000300 	.word	0x50000300
 8002478:	20000000 	.word	0x20000000
 800247c:	053e2d63 	.word	0x053e2d63
 8002480:	c7520000 	.word	0xc7520000
 8002484:	50000500 	.word	0x50000500
 8002488:	cb840000 	.word	0xcb840000

0800248c <LL_ADC_IsEnabled>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <LL_ADC_IsEnabled+0x18>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <LL_ADC_IsEnabled+0x1a>
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d101      	bne.n	80024ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b0a1      	sub	sp, #132	@ 0x84
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e0e7      	b.n	80026c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024fe:	2300      	movs	r3, #0
 8002500:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002502:	2300      	movs	r3, #0
 8002504:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800250e:	d102      	bne.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002510:	4b6f      	ldr	r3, [pc, #444]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	e009      	b.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6e      	ldr	r2, [pc, #440]	@ (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d102      	bne.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002520:	4b6d      	ldr	r3, [pc, #436]	@ (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	e001      	b.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0be      	b.n	80026c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ffb1 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 8002550:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ffab 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80a0 	bne.w	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 809c 	bne.w	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002574:	d004      	beq.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a55      	ldr	r2, [pc, #340]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002580:	4b56      	ldr	r3, [pc, #344]	@ (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002582:	e000      	b.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002584:	4b56      	ldr	r3, [pc, #344]	@ (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002586:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d04b      	beq.n	8002628 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025a2:	035b      	lsls	r3, r3, #13
 80025a4:	430b      	orrs	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b4:	d004      	beq.n	80025c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a45      	ldr	r2, [pc, #276]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10f      	bne.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80025c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025c4:	f7ff ff62 	bl	800248c <LL_ADC_IsEnabled>
 80025c8:	4604      	mov	r4, r0
 80025ca:	4841      	ldr	r0, [pc, #260]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025cc:	f7ff ff5e 	bl	800248c <LL_ADC_IsEnabled>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4323      	orrs	r3, r4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e012      	b.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80025e0:	483c      	ldr	r0, [pc, #240]	@ (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025e2:	f7ff ff53 	bl	800248c <LL_ADC_IsEnabled>
 80025e6:	4604      	mov	r4, r0
 80025e8:	483b      	ldr	r0, [pc, #236]	@ (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025ea:	f7ff ff4f 	bl	800248c <LL_ADC_IsEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	431c      	orrs	r4, r3
 80025f2:	483c      	ldr	r0, [pc, #240]	@ (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80025f4:	f7ff ff4a 	bl	800248c <LL_ADC_IsEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4323      	orrs	r3, r4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d056      	beq.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800260a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002612:	f023 030f 	bic.w	r3, r3, #15
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	6811      	ldr	r1, [r2, #0]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	6892      	ldr	r2, [r2, #8]
 800261e:	430a      	orrs	r2, r1
 8002620:	431a      	orrs	r2, r3
 8002622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002624:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002626:	e047      	b.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002630:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002632:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800263c:	d004      	beq.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a23      	ldr	r2, [pc, #140]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d10f      	bne.n	8002668 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002648:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800264c:	f7ff ff1e 	bl	800248c <LL_ADC_IsEnabled>
 8002650:	4604      	mov	r4, r0
 8002652:	481f      	ldr	r0, [pc, #124]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002654:	f7ff ff1a 	bl	800248c <LL_ADC_IsEnabled>
 8002658:	4603      	mov	r3, r0
 800265a:	4323      	orrs	r3, r4
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e012      	b.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002668:	481a      	ldr	r0, [pc, #104]	@ (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800266a:	f7ff ff0f 	bl	800248c <LL_ADC_IsEnabled>
 800266e:	4604      	mov	r4, r0
 8002670:	4819      	ldr	r0, [pc, #100]	@ (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002672:	f7ff ff0b 	bl	800248c <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	431c      	orrs	r4, r3
 800267a:	481a      	ldr	r0, [pc, #104]	@ (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800267c:	f7ff ff06 	bl	800248c <LL_ADC_IsEnabled>
 8002680:	4603      	mov	r3, r0
 8002682:	4323      	orrs	r3, r4
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d012      	beq.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800269a:	f023 030f 	bic.w	r3, r3, #15
 800269e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80026a0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026a2:	e009      	b.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026b6:	e000      	b.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3784      	adds	r7, #132	@ 0x84
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	50000100 	.word	0x50000100
 80026d4:	50000400 	.word	0x50000400
 80026d8:	50000500 	.word	0x50000500
 80026dc:	50000300 	.word	0x50000300
 80026e0:	50000700 	.word	0x50000700
 80026e4:	50000600 	.word	0x50000600

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	@ (800272c <__NVIC_SetPriorityGrouping+0x44>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	2b00      	cmp	r3, #0
 800275c:	db0b      	blt.n	8002776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4907      	ldr	r1, [pc, #28]	@ (8002784 <__NVIC_EnableIRQ+0x38>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2001      	movs	r0, #1
 800276e:	fa00 f202 	lsl.w	r2, r0, r2
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	@ (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	@ (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	@ 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002854:	d301      	bcc.n	800285a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285a:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <SysTick_Config+0x40>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002862:	210f      	movs	r1, #15
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f7ff ff8e 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <SysTick_Config+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <SysTick_Config+0x40>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff29 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff40 	bl	8002730 <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff90 	bl	80027dc <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5f 	bl	8002788 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff33 	bl	800274c <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa4 	bl	8002844 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002916:	e15a      	b.n	8002bce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 814c 	beq.w	8002bc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d005      	beq.n	8002948 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002944:	2b02      	cmp	r3, #2
 8002946:	d130      	bne.n	80029aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800297e:	2201      	movs	r2, #1
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f003 0201 	and.w	r2, r3, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d017      	beq.n	80029e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2203      	movs	r2, #3
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d123      	bne.n	8002a3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	08da      	lsrs	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3208      	adds	r2, #8
 80029fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	6939      	ldr	r1, [r7, #16]
 8002a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0203 	and.w	r2, r3, #3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80a6 	beq.w	8002bc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bec <HAL_GPIO_Init+0x2e4>)
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a80:	4a5a      	ldr	r2, [pc, #360]	@ (8002bec <HAL_GPIO_Init+0x2e4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a88:	4b58      	ldr	r3, [pc, #352]	@ (8002bec <HAL_GPIO_Init+0x2e4>)
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a94:	4a56      	ldr	r2, [pc, #344]	@ (8002bf0 <HAL_GPIO_Init+0x2e8>)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002abe:	d01f      	beq.n	8002b00 <HAL_GPIO_Init+0x1f8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf4 <HAL_GPIO_Init+0x2ec>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d019      	beq.n	8002afc <HAL_GPIO_Init+0x1f4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a4b      	ldr	r2, [pc, #300]	@ (8002bf8 <HAL_GPIO_Init+0x2f0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d013      	beq.n	8002af8 <HAL_GPIO_Init+0x1f0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a4a      	ldr	r2, [pc, #296]	@ (8002bfc <HAL_GPIO_Init+0x2f4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00d      	beq.n	8002af4 <HAL_GPIO_Init+0x1ec>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a49      	ldr	r2, [pc, #292]	@ (8002c00 <HAL_GPIO_Init+0x2f8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d007      	beq.n	8002af0 <HAL_GPIO_Init+0x1e8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a48      	ldr	r2, [pc, #288]	@ (8002c04 <HAL_GPIO_Init+0x2fc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_GPIO_Init+0x1e4>
 8002ae8:	2305      	movs	r3, #5
 8002aea:	e00a      	b.n	8002b02 <HAL_GPIO_Init+0x1fa>
 8002aec:	2306      	movs	r3, #6
 8002aee:	e008      	b.n	8002b02 <HAL_GPIO_Init+0x1fa>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x1fa>
 8002af4:	2303      	movs	r3, #3
 8002af6:	e004      	b.n	8002b02 <HAL_GPIO_Init+0x1fa>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e002      	b.n	8002b02 <HAL_GPIO_Init+0x1fa>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_GPIO_Init+0x1fa>
 8002b00:	2300      	movs	r3, #0
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	f002 0203 	and.w	r2, r2, #3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4093      	lsls	r3, r2
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b12:	4937      	ldr	r1, [pc, #220]	@ (8002bf0 <HAL_GPIO_Init+0x2e8>)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b20:	4b39      	ldr	r3, [pc, #228]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b44:	4a30      	ldr	r2, [pc, #192]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b6e:	4a26      	ldr	r2, [pc, #152]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b74:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b98:	4a1b      	ldr	r2, [pc, #108]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bc2:	4a11      	ldr	r2, [pc, #68]	@ (8002c08 <HAL_GPIO_Init+0x300>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f47f ae9d 	bne.w	8002918 <HAL_GPIO_Init+0x10>
  }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	48000400 	.word	0x48000400
 8002bf8:	48000800 	.word	0x48000800
 8002bfc:	48000c00 	.word	0x48000c00
 8002c00:	48001000 	.word	0x48001000
 8002c04:	48001400 	.word	0x48001400
 8002c08:	40010400 	.word	0x40010400

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c28:	e002      	b.n	8002c30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c46:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d006      	beq.n	8002c60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c52:	4a05      	ldr	r2, [pc, #20]	@ (8002c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe f916 	bl	8000e8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40010400 	.word	0x40010400

08002c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d141      	bne.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c86:	d131      	bne.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c88:	4b47      	ldr	r3, [pc, #284]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c8e:	4a46      	ldr	r2, [pc, #280]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c98:	4b43      	ldr	r3, [pc, #268]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ca0:	4a41      	ldr	r2, [pc, #260]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ca8:	4b40      	ldr	r3, [pc, #256]	@ (8002dac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2232      	movs	r2, #50	@ 0x32
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8002db0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cbe:	e002      	b.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc6:	4b38      	ldr	r3, [pc, #224]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd2:	d102      	bne.n	8002cda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f2      	bne.n	8002cc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cda:	4b33      	ldr	r3, [pc, #204]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce6:	d158      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e057      	b.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cec:	4b2e      	ldr	r3, [pc, #184]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cfc:	e04d      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d04:	d141      	bne.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d06:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d12:	d131      	bne.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d14:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d1a:	4a23      	ldr	r2, [pc, #140]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d24:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2232      	movs	r2, #50	@ 0x32
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	0c9b      	lsrs	r3, r3, #18
 8002d46:	3301      	adds	r3, #1
 8002d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d4a:	e002      	b.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5e:	d102      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f2      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d66:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d72:	d112      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e011      	b.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d88:	e007      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d92:	4a05      	ldr	r2, [pc, #20]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40007000 	.word	0x40007000
 8002dac:	20000000 	.word	0x20000000
 8002db0:	431bde83 	.word	0x431bde83

08002db4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dc2:	6093      	str	r3, [r2, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40007000 	.word	0x40007000

08002dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e2fe      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d075      	beq.n	8002ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df2:	4b97      	ldr	r3, [pc, #604]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dfc:	4b94      	ldr	r3, [pc, #592]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3e>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_OscConfig+0x44>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	4b8d      	ldr	r3, [pc, #564]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d05b      	beq.n	8002edc <HAL_RCC_OscConfig+0x108>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d157      	bne.n	8002edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e2d9      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x74>
 8002e3a:	4b85      	ldr	r3, [pc, #532]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a84      	ldr	r2, [pc, #528]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e01d      	b.n	8002e84 <HAL_RCC_OscConfig+0xb0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x98>
 8002e52:	4b7f      	ldr	r3, [pc, #508]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7e      	ldr	r2, [pc, #504]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7b      	ldr	r2, [pc, #492]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0xb0>
 8002e6c:	4b78      	ldr	r3, [pc, #480]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a77      	ldr	r2, [pc, #476]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b75      	ldr	r3, [pc, #468]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a74      	ldr	r2, [pc, #464]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fb20 	bl	80014d0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fb1c 	bl	80014d0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e29e      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0xc0>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fb0c 	bl	80014d0 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fb08 	bl	80014d0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	@ 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e28a      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ece:	4b60      	ldr	r3, [pc, #384]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0xe8>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d075      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eea:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef4:	4b56      	ldr	r3, [pc, #344]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_OscConfig+0x136>
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_OscConfig+0x13c>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11f      	bne.n	8002f50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f10:	4b4f      	ldr	r3, [pc, #316]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_OscConfig+0x154>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e25d      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	4946      	ldr	r1, [pc, #280]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f3c:	4b45      	ldr	r3, [pc, #276]	@ (8003054 <HAL_RCC_OscConfig+0x280>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fa79 	bl	8001438 <HAL_InitTick>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d043      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e249      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b3d      	ldr	r3, [pc, #244]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fab4 	bl	80014d0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fab0 	bl	80014d0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e232      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	492d      	ldr	r1, [pc, #180]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	e01a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fa90 	bl	80014d0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fa8c 	bl	80014d0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e20e      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc6:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1e0>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d041      	beq.n	8003066 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01c      	beq.n	8003024 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff0:	4a17      	ldr	r2, [pc, #92]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fa69 	bl	80014d0 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003002:	f7fe fa65 	bl	80014d0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1e7      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003014:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ef      	beq.n	8003002 <HAL_RCC_OscConfig+0x22e>
 8003022:	e020      	b.n	8003066 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003024:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800302a:	4a09      	ldr	r2, [pc, #36]	@ (8003050 <HAL_RCC_OscConfig+0x27c>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe fa4c 	bl	80014d0 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303a:	e00d      	b.n	8003058 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe fa48 	bl	80014d0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d906      	bls.n	8003058 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e1ca      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003058:	4b8c      	ldr	r3, [pc, #560]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ea      	bne.n	800303c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80a6 	beq.w	80031c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003078:	4b84      	ldr	r3, [pc, #528]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x2b4>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x2b6>
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b7f      	ldr	r3, [pc, #508]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	4a7e      	ldr	r2, [pc, #504]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003098:	6593      	str	r3, [r2, #88]	@ 0x58
 800309a:	4b7c      	ldr	r3, [pc, #496]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030a6:	2301      	movs	r3, #1
 80030a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030aa:	4b79      	ldr	r3, [pc, #484]	@ (8003290 <HAL_RCC_OscConfig+0x4bc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b6:	4b76      	ldr	r3, [pc, #472]	@ (8003290 <HAL_RCC_OscConfig+0x4bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	@ (8003290 <HAL_RCC_OscConfig+0x4bc>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fa05 	bl	80014d0 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fe fa01 	bl	80014d0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e183      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003290 <HAL_RCC_OscConfig+0x4bc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d108      	bne.n	8003102 <HAL_RCC_OscConfig+0x32e>
 80030f0:	4b66      	ldr	r3, [pc, #408]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f6:	4a65      	ldr	r2, [pc, #404]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003100:	e024      	b.n	800314c <HAL_RCC_OscConfig+0x378>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b05      	cmp	r3, #5
 8003108:	d110      	bne.n	800312c <HAL_RCC_OscConfig+0x358>
 800310a:	4b60      	ldr	r3, [pc, #384]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003110:	4a5e      	ldr	r2, [pc, #376]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800311a:	4b5c      	ldr	r3, [pc, #368]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003120:	4a5a      	ldr	r2, [pc, #360]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800312a:	e00f      	b.n	800314c <HAL_RCC_OscConfig+0x378>
 800312c:	4b57      	ldr	r3, [pc, #348]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003132:	4a56      	ldr	r2, [pc, #344]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003142:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d016      	beq.n	8003182 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe f9bc 	bl	80014d0 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fe f9b8 	bl	80014d0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e138      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003172:	4b46      	ldr	r3, [pc, #280]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ed      	beq.n	800315c <HAL_RCC_OscConfig+0x388>
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fe f9a5 	bl	80014d0 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe f9a1 	bl	80014d0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e121      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a0:	4b3a      	ldr	r3, [pc, #232]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ed      	bne.n	800318a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b4:	4b35      	ldr	r3, [pc, #212]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	4a34      	ldr	r2, [pc, #208]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d03c      	beq.n	8003246 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01c      	beq.n	800320e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031d4:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031da:	4a2c      	ldr	r2, [pc, #176]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe f974 	bl	80014d0 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ec:	f7fe f970 	bl	80014d0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0f2      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031fe:	4b23      	ldr	r3, [pc, #140]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003200:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ef      	beq.n	80031ec <HAL_RCC_OscConfig+0x418>
 800320c:	e01b      	b.n	8003246 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800320e:	4b1f      	ldr	r3, [pc, #124]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003210:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003214:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe f957 	bl	80014d0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003226:	f7fe f953 	bl	80014d0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0d5      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003238:	4b14      	ldr	r3, [pc, #80]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800323a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1ef      	bne.n	8003226 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80c9 	beq.w	80033e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003250:	4b0e      	ldr	r3, [pc, #56]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b0c      	cmp	r3, #12
 800325a:	f000 8083 	beq.w	8003364 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d15e      	bne.n	8003324 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a08      	ldr	r2, [pc, #32]	@ (800328c <HAL_RCC_OscConfig+0x4b8>)
 800326c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe f92d 	bl	80014d0 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	e00c      	b.n	8003294 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe f929 	bl	80014d0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d905      	bls.n	8003294 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0ab      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003294:	4b55      	ldr	r3, [pc, #340]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ec      	bne.n	800327a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a0:	4b52      	ldr	r3, [pc, #328]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	4b52      	ldr	r3, [pc, #328]	@ (80033f0 <HAL_RCC_OscConfig+0x61c>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6a11      	ldr	r1, [r2, #32]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032b0:	3a01      	subs	r2, #1
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80032ba:	0212      	lsls	r2, r2, #8
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032c2:	0852      	lsrs	r2, r2, #1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	0552      	lsls	r2, r2, #21
 80032c8:	4311      	orrs	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032ce:	0852      	lsrs	r2, r2, #1
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0652      	lsls	r2, r2, #25
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032da:	06d2      	lsls	r2, r2, #27
 80032dc:	430a      	orrs	r2, r1
 80032de:	4943      	ldr	r1, [pc, #268]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b41      	ldr	r3, [pc, #260]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a40      	ldr	r2, [pc, #256]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f0:	4b3e      	ldr	r3, [pc, #248]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a3d      	ldr	r2, [pc, #244]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe f8e8 	bl	80014d0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f8e4 	bl	80014d0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e066      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003316:	4b35      	ldr	r3, [pc, #212]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x530>
 8003322:	e05e      	b.n	80033e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003324:	4b31      	ldr	r3, [pc, #196]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a30      	ldr	r2, [pc, #192]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 800332a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe f8ce 	bl	80014d0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe f8ca 	bl	80014d0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e04c      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334a:	4b28      	ldr	r3, [pc, #160]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003356:	4b25      	ldr	r3, [pc, #148]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4924      	ldr	r1, [pc, #144]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 800335c:	4b25      	ldr	r3, [pc, #148]	@ (80033f4 <HAL_RCC_OscConfig+0x620>)
 800335e:	4013      	ands	r3, r2
 8003360:	60cb      	str	r3, [r1, #12]
 8003362:	e03e      	b.n	80033e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e039      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003370:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <HAL_RCC_OscConfig+0x618>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	429a      	cmp	r2, r3
 8003382:	d12c      	bne.n	80033de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	3b01      	subs	r3, #1
 8003390:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d123      	bne.n	80033de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d11b      	bne.n	80033de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d113      	bne.n	80033de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	3b01      	subs	r3, #1
 80033c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d109      	bne.n	80033de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	019f800c 	.word	0x019f800c
 80033f4:	feeefffc 	.word	0xfeeefffc

080033f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e11e      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b91      	ldr	r3, [pc, #580]	@ (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d910      	bls.n	8003440 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b8e      	ldr	r3, [pc, #568]	@ (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 020f 	bic.w	r2, r3, #15
 8003426:	498c      	ldr	r1, [pc, #560]	@ (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b8a      	ldr	r3, [pc, #552]	@ (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e106      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d073      	beq.n	8003534 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d129      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003454:	4b81      	ldr	r3, [pc, #516]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0f4      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003464:	f000 f966 	bl	8003734 <RCC_GetSysClockFreqFromPLLSource>
 8003468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4a7c      	ldr	r2, [pc, #496]	@ (8003660 <HAL_RCC_ClockConfig+0x268>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d93f      	bls.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003472:	4b7a      	ldr	r3, [pc, #488]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003486:	2b00      	cmp	r3, #0
 8003488:	d033      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800348e:	2b00      	cmp	r3, #0
 8003490:	d12f      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003492:	4b72      	ldr	r3, [pc, #456]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800349a:	4a70      	ldr	r2, [pc, #448]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 800349c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034a2:	2380      	movs	r3, #128	@ 0x80
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e024      	b.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b0:	4b6a      	ldr	r3, [pc, #424]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0c6      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c0:	4b66      	ldr	r3, [pc, #408]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0be      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034d0:	f000 f8ce 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4a61      	ldr	r2, [pc, #388]	@ (8003660 <HAL_RCC_ClockConfig+0x268>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d909      	bls.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034de:	4b5f      	ldr	r3, [pc, #380]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034e6:	4a5d      	ldr	r2, [pc, #372]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 80034e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034ee:	2380      	movs	r3, #128	@ 0x80
 80034f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b5a      	ldr	r3, [pc, #360]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4957      	ldr	r1, [pc, #348]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fd ffe4 	bl	80014d0 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fd ffe0 	bl	80014d0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e095      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b4e      	ldr	r3, [pc, #312]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b43      	ldr	r3, [pc, #268]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a42      	ldr	r2, [pc, #264]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003552:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003556:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003564:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800356c:	4a3b      	ldr	r2, [pc, #236]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 800356e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b39      	ldr	r3, [pc, #228]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4936      	ldr	r1, [pc, #216]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
 8003586:	e008      	b.n	800359a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b80      	cmp	r3, #128	@ 0x80
 800358c:	d105      	bne.n	800359a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800358e:	4b33      	ldr	r3, [pc, #204]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a32      	ldr	r2, [pc, #200]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003594:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003598:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800359a:	4b2f      	ldr	r3, [pc, #188]	@ (8003658 <HAL_RCC_ClockConfig+0x260>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d21d      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 020f 	bic.w	r2, r3, #15
 80035b0:	4929      	ldr	r1, [pc, #164]	@ (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035b8:	f7fd ff8a 	bl	80014d0 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7fd ff86 	bl	80014d0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e03b      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b20      	ldr	r3, [pc, #128]	@ (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1ed      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4917      	ldr	r1, [pc, #92]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b13      	ldr	r3, [pc, #76]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490f      	ldr	r1, [pc, #60]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003622:	f000 f825 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <HAL_RCC_ClockConfig+0x264>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	490c      	ldr	r1, [pc, #48]	@ (8003664 <HAL_RCC_ClockConfig+0x26c>)
 8003634:	5ccb      	ldrb	r3, [r1, r3]
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <HAL_RCC_ClockConfig+0x270>)
 8003640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_RCC_ClockConfig+0x274>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd fef6 	bl	8001438 <HAL_InitTick>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40022000 	.word	0x40022000
 800365c:	40021000 	.word	0x40021000
 8003660:	04c4b400 	.word	0x04c4b400
 8003664:	0800508c 	.word	0x0800508c
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003676:	4b2c      	ldr	r3, [pc, #176]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b04      	cmp	r3, #4
 8003680:	d102      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003682:	4b2a      	ldr	r3, [pc, #168]	@ (800372c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e047      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003688:	4b27      	ldr	r3, [pc, #156]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d102      	bne.n	800369a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003694:	4b26      	ldr	r3, [pc, #152]	@ (8003730 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e03e      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800369a:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d136      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036a6:	4b20      	ldr	r3, [pc, #128]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3301      	adds	r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003730 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	4a16      	ldr	r2, [pc, #88]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ce:	68d2      	ldr	r2, [r2, #12]
 80036d0:	0a12      	lsrs	r2, r2, #8
 80036d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	617b      	str	r3, [r7, #20]
      break;
 80036dc:	e00c      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036de:	4a13      	ldr	r2, [pc, #76]	@ (800372c <HAL_RCC_GetSysClockFreq+0xbc>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	4a10      	ldr	r2, [pc, #64]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e8:	68d2      	ldr	r2, [r2, #12]
 80036ea:	0a12      	lsrs	r2, r2, #8
 80036ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]
      break;
 80036f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0e5b      	lsrs	r3, r3, #25
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e001      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003718:	693b      	ldr	r3, [r7, #16]
}
 800371a:	4618      	mov	r0, r3
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	00f42400 	.word	0x00f42400
 8003730:	016e3600 	.word	0x016e3600

08003734 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800373a:	4b1e      	ldr	r3, [pc, #120]	@ (80037b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003744:	4b1b      	ldr	r3, [pc, #108]	@ (80037b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d10c      	bne.n	8003772 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003758:	4a17      	ldr	r2, [pc, #92]	@ (80037b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	4a14      	ldr	r2, [pc, #80]	@ (80037b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003762:	68d2      	ldr	r2, [r2, #12]
 8003764:	0a12      	lsrs	r2, r2, #8
 8003766:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	617b      	str	r3, [r7, #20]
    break;
 8003770:	e00c      	b.n	800378c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003772:	4a12      	ldr	r2, [pc, #72]	@ (80037bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	4a0e      	ldr	r2, [pc, #56]	@ (80037b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800377c:	68d2      	ldr	r2, [r2, #12]
 800377e:	0a12      	lsrs	r2, r2, #8
 8003780:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
    break;
 800378a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800378c:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	0e5b      	lsrs	r3, r3, #25
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	3301      	adds	r3, #1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037a6:	687b      	ldr	r3, [r7, #4]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40021000 	.word	0x40021000
 80037b8:	016e3600 	.word	0x016e3600
 80037bc:	00f42400 	.word	0x00f42400

080037c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037c8:	2300      	movs	r3, #0
 80037ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037cc:	2300      	movs	r3, #0
 80037ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8098 	beq.w	800390e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e2:	4b43      	ldr	r3, [pc, #268]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10d      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	4b40      	ldr	r3, [pc, #256]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	4a3f      	ldr	r2, [pc, #252]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037fa:	4b3d      	ldr	r3, [pc, #244]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380a:	4b3a      	ldr	r3, [pc, #232]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a39      	ldr	r2, [pc, #228]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003814:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003816:	f7fd fe5b 	bl	80014d0 <HAL_GetTick>
 800381a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800381c:	e009      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381e:	f7fd fe57 	bl	80014d0 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d902      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	74fb      	strb	r3, [r7, #19]
        break;
 8003830:	e005      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003832:	4b30      	ldr	r3, [pc, #192]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0ef      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d159      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003844:	4b2a      	ldr	r3, [pc, #168]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01e      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	d019      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003860:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800386c:	4b20      	ldr	r3, [pc, #128]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003872:	4a1f      	ldr	r2, [pc, #124]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800387c:	4b1c      	ldr	r3, [pc, #112]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003882:	4a1b      	ldr	r2, [pc, #108]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800388c:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd fe17 	bl	80014d0 <HAL_GetTick>
 80038a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a4:	e00b      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd fe13 	bl	80014d0 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d902      	bls.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	74fb      	strb	r3, [r7, #19]
            break;
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038be:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ec      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	4903      	ldr	r1, [pc, #12]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038e8:	e008      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ea:	7cfb      	ldrb	r3, [r7, #19]
 80038ec:	74bb      	strb	r3, [r7, #18]
 80038ee:	e005      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fc:	7c7b      	ldrb	r3, [r7, #17]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4ba7      	ldr	r3, [pc, #668]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	4aa6      	ldr	r2, [pc, #664]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800390c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800391a:	4ba1      	ldr	r3, [pc, #644]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003920:	f023 0203 	bic.w	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	499d      	ldr	r1, [pc, #628]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800393c:	4b98      	ldr	r3, [pc, #608]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003942:	f023 020c 	bic.w	r2, r3, #12
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	4995      	ldr	r1, [pc, #596]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800395e:	4b90      	ldr	r3, [pc, #576]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003964:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	498c      	ldr	r1, [pc, #560]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003980:	4b87      	ldr	r3, [pc, #540]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	4984      	ldr	r1, [pc, #528]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039a2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	497b      	ldr	r1, [pc, #492]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039c4:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	4973      	ldr	r1, [pc, #460]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039e6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	496a      	ldr	r1, [pc, #424]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a08:	4b65      	ldr	r3, [pc, #404]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4962      	ldr	r1, [pc, #392]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	4959      	ldr	r1, [pc, #356]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a4c:	4b54      	ldr	r3, [pc, #336]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5a:	4951      	ldr	r1, [pc, #324]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	4948      	ldr	r1, [pc, #288]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a90:	4b43      	ldr	r3, [pc, #268]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	4940      	ldr	r1, [pc, #256]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aae:	d105      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ac8:	4b35      	ldr	r3, [pc, #212]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad6:	4932      	ldr	r1, [pc, #200]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003af2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b00:	4b27      	ldr	r3, [pc, #156]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0e:	4924      	ldr	r1, [pc, #144]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b20:	4b1f      	ldr	r3, [pc, #124]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b38:	4b19      	ldr	r3, [pc, #100]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b46:	4916      	ldr	r1, [pc, #88]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b56:	d105      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b58:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a10      	ldr	r2, [pc, #64]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d019      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	4908      	ldr	r1, [pc, #32]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b8e:	d109      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b90:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a02      	ldr	r2, [pc, #8]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b9a:	60d3      	str	r3, [r2, #12]
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bb0:	4b29      	ldr	r3, [pc, #164]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbe:	4926      	ldr	r1, [pc, #152]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bd0:	4b21      	ldr	r3, [pc, #132]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bda:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf6:	4918      	ldr	r1, [pc, #96]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c08:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a12      	ldr	r2, [pc, #72]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c12:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c20:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2e:	490a      	ldr	r1, [pc, #40]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e049      	b.n	8003d02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd f9a4 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f000 fbf4 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e049      	b.n	8003db0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f841 	bl	8003db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f000 fb9d 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e097      	b.n	8003f10 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fd f945 	bl	8001084 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003e10:	f023 0307 	bic.w	r3, r3, #7
 8003e14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f000 fb31 	bl	8004488 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e6c:	f023 030c 	bic.w	r3, r3, #12
 8003e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	011a      	lsls	r2, r3, #4
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	031b      	lsls	r3, r3, #12
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d110      	bne.n	8003f6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d102      	bne.n	8003f54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f4e:	7b7b      	ldrb	r3, [r7, #13]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d001      	beq.n	8003f58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e069      	b.n	800402c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f68:	e031      	b.n	8003fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d110      	bne.n	8003f92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f70:	7bbb      	ldrb	r3, [r7, #14]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d102      	bne.n	8003f7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f76:	7b3b      	ldrb	r3, [r7, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d001      	beq.n	8003f80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e055      	b.n	800402c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f90:	e01d      	b.n	8003fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d108      	bne.n	8003faa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f98:	7bbb      	ldrb	r3, [r7, #14]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f9e:	7b7b      	ldrb	r3, [r7, #13]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d102      	bne.n	8003faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa4:	7b3b      	ldrb	r3, [r7, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d001      	beq.n	8003fae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e03e      	b.n	800402c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_TIM_Encoder_Start+0xc4>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d008      	beq.n	8003fec <HAL_TIM_Encoder_Start+0xd4>
 8003fda:	e00f      	b.n	8003ffc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fec9 	bl	8004d7c <TIM_CCxChannelCmd>
      break;
 8003fea:	e016      	b.n	800401a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	2104      	movs	r1, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fec1 	bl	8004d7c <TIM_CCxChannelCmd>
      break;
 8003ffa:	e00e      	b.n	800401a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 feb9 	bl	8004d7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2201      	movs	r2, #1
 8004010:	2104      	movs	r1, #4
 8004012:	4618      	mov	r0, r3
 8004014:	f000 feb2 	bl	8004d7c <TIM_CCxChannelCmd>
      break;
 8004018:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800404e:	2302      	movs	r3, #2
 8004050:	e0ff      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b14      	cmp	r3, #20
 800405e:	f200 80f0 	bhi.w	8004242 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004062:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	080040bd 	.word	0x080040bd
 800406c:	08004243 	.word	0x08004243
 8004070:	08004243 	.word	0x08004243
 8004074:	08004243 	.word	0x08004243
 8004078:	080040fd 	.word	0x080040fd
 800407c:	08004243 	.word	0x08004243
 8004080:	08004243 	.word	0x08004243
 8004084:	08004243 	.word	0x08004243
 8004088:	0800413f 	.word	0x0800413f
 800408c:	08004243 	.word	0x08004243
 8004090:	08004243 	.word	0x08004243
 8004094:	08004243 	.word	0x08004243
 8004098:	0800417f 	.word	0x0800417f
 800409c:	08004243 	.word	0x08004243
 80040a0:	08004243 	.word	0x08004243
 80040a4:	08004243 	.word	0x08004243
 80040a8:	080041c1 	.word	0x080041c1
 80040ac:	08004243 	.word	0x08004243
 80040b0:	08004243 	.word	0x08004243
 80040b4:	08004243 	.word	0x08004243
 80040b8:	08004201 	.word	0x08004201
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fa94 	bl	80045f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0208 	orr.w	r2, r2, #8
 80040d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0204 	bic.w	r2, r2, #4
 80040e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6999      	ldr	r1, [r3, #24]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	619a      	str	r2, [r3, #24]
      break;
 80040fa:	e0a5      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fb0e 	bl	8004724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6999      	ldr	r1, [r3, #24]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	021a      	lsls	r2, r3, #8
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	619a      	str	r2, [r3, #24]
      break;
 800413c:	e084      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fb81 	bl	800484c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0208 	orr.w	r2, r2, #8
 8004158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0204 	bic.w	r2, r2, #4
 8004168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69d9      	ldr	r1, [r3, #28]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	61da      	str	r2, [r3, #28]
      break;
 800417c:	e064      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fbf3 	bl	8004970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69d9      	ldr	r1, [r3, #28]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	021a      	lsls	r2, r3, #8
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	61da      	str	r2, [r3, #28]
      break;
 80041be:	e043      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fc66 	bl	8004a98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0208 	orr.w	r2, r2, #8
 80041da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0204 	bic.w	r2, r2, #4
 80041ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80041fe:	e023      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fcb0 	bl	8004b6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800421a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	021a      	lsls	r2, r3, #8
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004240:	e002      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	75fb      	strb	r3, [r7, #23]
      break;
 8004246:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004250:	7dfb      	ldrb	r3, [r7, #23]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop

0800425c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_TIM_ConfigClockSource+0x1c>
 8004274:	2302      	movs	r3, #2
 8004276:	e0f6      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x20a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004296:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800429a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a6f      	ldr	r2, [pc, #444]	@ (8004470 <HAL_TIM_ConfigClockSource+0x214>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f000 80c1 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x1de>
 80042b8:	4a6d      	ldr	r2, [pc, #436]	@ (8004470 <HAL_TIM_ConfigClockSource+0x214>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f200 80c6 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 80042c0:	4a6c      	ldr	r2, [pc, #432]	@ (8004474 <HAL_TIM_ConfigClockSource+0x218>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f000 80b9 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x1de>
 80042c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004474 <HAL_TIM_ConfigClockSource+0x218>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f200 80be 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 80042d0:	4a69      	ldr	r2, [pc, #420]	@ (8004478 <HAL_TIM_ConfigClockSource+0x21c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f000 80b1 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x1de>
 80042d8:	4a67      	ldr	r2, [pc, #412]	@ (8004478 <HAL_TIM_ConfigClockSource+0x21c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f200 80b6 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 80042e0:	4a66      	ldr	r2, [pc, #408]	@ (800447c <HAL_TIM_ConfigClockSource+0x220>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f000 80a9 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x1de>
 80042e8:	4a64      	ldr	r2, [pc, #400]	@ (800447c <HAL_TIM_ConfigClockSource+0x220>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	f200 80ae 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 80042f0:	4a63      	ldr	r2, [pc, #396]	@ (8004480 <HAL_TIM_ConfigClockSource+0x224>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	f000 80a1 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x1de>
 80042f8:	4a61      	ldr	r2, [pc, #388]	@ (8004480 <HAL_TIM_ConfigClockSource+0x224>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	f200 80a6 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 8004300:	4a60      	ldr	r2, [pc, #384]	@ (8004484 <HAL_TIM_ConfigClockSource+0x228>)
 8004302:	4293      	cmp	r3, r2
 8004304:	f000 8099 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x1de>
 8004308:	4a5e      	ldr	r2, [pc, #376]	@ (8004484 <HAL_TIM_ConfigClockSource+0x228>)
 800430a:	4293      	cmp	r3, r2
 800430c:	f200 809e 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 8004310:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004314:	f000 8091 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x1de>
 8004318:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800431c:	f200 8096 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 8004320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004324:	f000 8089 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x1de>
 8004328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800432c:	f200 808e 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004334:	d03e      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0x158>
 8004336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800433a:	f200 8087 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004342:	f000 8086 	beq.w	8004452 <HAL_TIM_ConfigClockSource+0x1f6>
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434a:	d87f      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 800434c:	2b70      	cmp	r3, #112	@ 0x70
 800434e:	d01a      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x12a>
 8004350:	2b70      	cmp	r3, #112	@ 0x70
 8004352:	d87b      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 8004354:	2b60      	cmp	r3, #96	@ 0x60
 8004356:	d050      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x19e>
 8004358:	2b60      	cmp	r3, #96	@ 0x60
 800435a:	d877      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 800435c:	2b50      	cmp	r3, #80	@ 0x50
 800435e:	d03c      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x17e>
 8004360:	2b50      	cmp	r3, #80	@ 0x50
 8004362:	d873      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 8004364:	2b40      	cmp	r3, #64	@ 0x40
 8004366:	d058      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x1be>
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d86f      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 800436c:	2b30      	cmp	r3, #48	@ 0x30
 800436e:	d064      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x1de>
 8004370:	2b30      	cmp	r3, #48	@ 0x30
 8004372:	d86b      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d060      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x1de>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d867      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x1f0>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05c      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x1de>
 8004380:	2b10      	cmp	r3, #16
 8004382:	d05a      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x1de>
 8004384:	e062      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004396:	f000 fcd1 	bl	8004d3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	609a      	str	r2, [r3, #8]
      break;
 80043b2:	e04f      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043c4:	f000 fcba 	bl	8004d3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043d6:	609a      	str	r2, [r3, #8]
      break;
 80043d8:	e03c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 fc2c 	bl	8004c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2150      	movs	r1, #80	@ 0x50
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fc85 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 80043f8:	e02c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004406:	461a      	mov	r2, r3
 8004408:	f000 fc4b 	bl	8004ca2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2160      	movs	r1, #96	@ 0x60
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fc75 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 8004418:	e01c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004426:	461a      	mov	r2, r3
 8004428:	f000 fc0c 	bl	8004c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2140      	movs	r1, #64	@ 0x40
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fc65 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 8004438:	e00c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f000 fc5c 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 800444a:	e003      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      break;
 8004450:	e000      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	00100070 	.word	0x00100070
 8004474:	00100060 	.word	0x00100060
 8004478:	00100050 	.word	0x00100050
 800447c:	00100040 	.word	0x00100040
 8004480:	00100030 	.word	0x00100030
 8004484:	00100020 	.word	0x00100020

08004488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a4c      	ldr	r2, [pc, #304]	@ (80045cc <TIM_Base_SetConfig+0x144>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d017      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a6:	d013      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a49      	ldr	r2, [pc, #292]	@ (80045d0 <TIM_Base_SetConfig+0x148>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00f      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a48      	ldr	r2, [pc, #288]	@ (80045d4 <TIM_Base_SetConfig+0x14c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a47      	ldr	r2, [pc, #284]	@ (80045d8 <TIM_Base_SetConfig+0x150>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a46      	ldr	r2, [pc, #280]	@ (80045dc <TIM_Base_SetConfig+0x154>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a45      	ldr	r2, [pc, #276]	@ (80045e0 <TIM_Base_SetConfig+0x158>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d108      	bne.n	80044e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a39      	ldr	r2, [pc, #228]	@ (80045cc <TIM_Base_SetConfig+0x144>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d023      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f0:	d01f      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a36      	ldr	r2, [pc, #216]	@ (80045d0 <TIM_Base_SetConfig+0x148>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a35      	ldr	r2, [pc, #212]	@ (80045d4 <TIM_Base_SetConfig+0x14c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a34      	ldr	r2, [pc, #208]	@ (80045d8 <TIM_Base_SetConfig+0x150>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a33      	ldr	r2, [pc, #204]	@ (80045dc <TIM_Base_SetConfig+0x154>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a33      	ldr	r2, [pc, #204]	@ (80045e4 <TIM_Base_SetConfig+0x15c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a32      	ldr	r2, [pc, #200]	@ (80045e8 <TIM_Base_SetConfig+0x160>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a31      	ldr	r2, [pc, #196]	@ (80045ec <TIM_Base_SetConfig+0x164>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2c      	ldr	r2, [pc, #176]	@ (80045e0 <TIM_Base_SetConfig+0x158>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a18      	ldr	r2, [pc, #96]	@ (80045cc <TIM_Base_SetConfig+0x144>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a1a      	ldr	r2, [pc, #104]	@ (80045dc <TIM_Base_SetConfig+0x154>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00f      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a1a      	ldr	r2, [pc, #104]	@ (80045e4 <TIM_Base_SetConfig+0x15c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a19      	ldr	r2, [pc, #100]	@ (80045e8 <TIM_Base_SetConfig+0x160>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d007      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <TIM_Base_SetConfig+0x164>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <TIM_Base_SetConfig+0x158>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f023 0201 	bic.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	611a      	str	r2, [r3, #16]
  }
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40015000 	.word	0x40015000
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f023 0201 	bic.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800461e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0303 	bic.w	r3, r3, #3
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 0302 	bic.w	r3, r3, #2
 800463c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a30      	ldr	r2, [pc, #192]	@ (800470c <TIM_OC1_SetConfig+0x11c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <TIM_OC1_SetConfig+0x88>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a2f      	ldr	r2, [pc, #188]	@ (8004710 <TIM_OC1_SetConfig+0x120>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00f      	beq.n	8004678 <TIM_OC1_SetConfig+0x88>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a2e      	ldr	r2, [pc, #184]	@ (8004714 <TIM_OC1_SetConfig+0x124>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00b      	beq.n	8004678 <TIM_OC1_SetConfig+0x88>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a2d      	ldr	r2, [pc, #180]	@ (8004718 <TIM_OC1_SetConfig+0x128>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d007      	beq.n	8004678 <TIM_OC1_SetConfig+0x88>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a2c      	ldr	r2, [pc, #176]	@ (800471c <TIM_OC1_SetConfig+0x12c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_OC1_SetConfig+0x88>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a2b      	ldr	r2, [pc, #172]	@ (8004720 <TIM_OC1_SetConfig+0x130>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10c      	bne.n	8004692 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0308 	bic.w	r3, r3, #8
 800467e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 0304 	bic.w	r3, r3, #4
 8004690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a1d      	ldr	r2, [pc, #116]	@ (800470c <TIM_OC1_SetConfig+0x11c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <TIM_OC1_SetConfig+0xd2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a1c      	ldr	r2, [pc, #112]	@ (8004710 <TIM_OC1_SetConfig+0x120>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00f      	beq.n	80046c2 <TIM_OC1_SetConfig+0xd2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <TIM_OC1_SetConfig+0x124>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <TIM_OC1_SetConfig+0xd2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004718 <TIM_OC1_SetConfig+0x128>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <TIM_OC1_SetConfig+0xd2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a19      	ldr	r2, [pc, #100]	@ (800471c <TIM_OC1_SetConfig+0x12c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_OC1_SetConfig+0xd2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a18      	ldr	r2, [pc, #96]	@ (8004720 <TIM_OC1_SetConfig+0x130>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d111      	bne.n	80046e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	621a      	str	r2, [r3, #32]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40013400 	.word	0x40013400
 8004714:	40014000 	.word	0x40014000
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800
 8004720:	40015000 	.word	0x40015000

08004724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f023 0210 	bic.w	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800475e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0320 	bic.w	r3, r3, #32
 8004772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a2c      	ldr	r2, [pc, #176]	@ (8004834 <TIM_OC2_SetConfig+0x110>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <TIM_OC2_SetConfig+0x74>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a2b      	ldr	r2, [pc, #172]	@ (8004838 <TIM_OC2_SetConfig+0x114>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_OC2_SetConfig+0x74>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a2a      	ldr	r2, [pc, #168]	@ (800483c <TIM_OC2_SetConfig+0x118>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10d      	bne.n	80047b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800479e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004834 <TIM_OC2_SetConfig+0x110>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <TIM_OC2_SetConfig+0xc0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a1e      	ldr	r2, [pc, #120]	@ (8004838 <TIM_OC2_SetConfig+0x114>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00f      	beq.n	80047e4 <TIM_OC2_SetConfig+0xc0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004840 <TIM_OC2_SetConfig+0x11c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00b      	beq.n	80047e4 <TIM_OC2_SetConfig+0xc0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004844 <TIM_OC2_SetConfig+0x120>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d007      	beq.n	80047e4 <TIM_OC2_SetConfig+0xc0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <TIM_OC2_SetConfig+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <TIM_OC2_SetConfig+0xc0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a17      	ldr	r2, [pc, #92]	@ (800483c <TIM_OC2_SetConfig+0x118>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d113      	bne.n	800480c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	621a      	str	r2, [r3, #32]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40012c00 	.word	0x40012c00
 8004838:	40013400 	.word	0x40013400
 800483c:	40015000 	.word	0x40015000
 8004840:	40014000 	.word	0x40014000
 8004844:	40014400 	.word	0x40014400
 8004848:	40014800 	.word	0x40014800

0800484c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004958 <TIM_OC3_SetConfig+0x10c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <TIM_OC3_SetConfig+0x72>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	@ (800495c <TIM_OC3_SetConfig+0x110>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_OC3_SetConfig+0x72>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a29      	ldr	r2, [pc, #164]	@ (8004960 <TIM_OC3_SetConfig+0x114>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d10d      	bne.n	80048da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <TIM_OC3_SetConfig+0x10c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <TIM_OC3_SetConfig+0xbe>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1d      	ldr	r2, [pc, #116]	@ (800495c <TIM_OC3_SetConfig+0x110>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00f      	beq.n	800490a <TIM_OC3_SetConfig+0xbe>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004964 <TIM_OC3_SetConfig+0x118>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00b      	beq.n	800490a <TIM_OC3_SetConfig+0xbe>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004968 <TIM_OC3_SetConfig+0x11c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <TIM_OC3_SetConfig+0xbe>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	@ (800496c <TIM_OC3_SetConfig+0x120>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <TIM_OC3_SetConfig+0xbe>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a16      	ldr	r2, [pc, #88]	@ (8004960 <TIM_OC3_SetConfig+0x114>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d113      	bne.n	8004932 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40013400 	.word	0x40013400
 8004960:	40015000 	.word	0x40015000
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800

08004970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	031b      	lsls	r3, r3, #12
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004a80 <TIM_OC4_SetConfig+0x110>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d007      	beq.n	80049e4 <TIM_OC4_SetConfig+0x74>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a84 <TIM_OC4_SetConfig+0x114>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC4_SetConfig+0x74>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a2a      	ldr	r2, [pc, #168]	@ (8004a88 <TIM_OC4_SetConfig+0x118>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10d      	bne.n	8004a00 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	031b      	lsls	r3, r3, #12
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1f      	ldr	r2, [pc, #124]	@ (8004a80 <TIM_OC4_SetConfig+0x110>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <TIM_OC4_SetConfig+0xc0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004a84 <TIM_OC4_SetConfig+0x114>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00f      	beq.n	8004a30 <TIM_OC4_SetConfig+0xc0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a1e      	ldr	r2, [pc, #120]	@ (8004a8c <TIM_OC4_SetConfig+0x11c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <TIM_OC4_SetConfig+0xc0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a90 <TIM_OC4_SetConfig+0x120>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d007      	beq.n	8004a30 <TIM_OC4_SetConfig+0xc0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1c      	ldr	r2, [pc, #112]	@ (8004a94 <TIM_OC4_SetConfig+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_OC4_SetConfig+0xc0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	@ (8004a88 <TIM_OC4_SetConfig+0x118>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d113      	bne.n	8004a58 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a36:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a3e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	019b      	lsls	r3, r3, #6
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40013400 	.word	0x40013400
 8004a88:	40015000 	.word	0x40015000
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40014400 	.word	0x40014400
 8004a94:	40014800 	.word	0x40014800

08004a98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004adc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <TIM_OC5_SetConfig+0xbc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <TIM_OC5_SetConfig+0x82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a18      	ldr	r2, [pc, #96]	@ (8004b58 <TIM_OC5_SetConfig+0xc0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00f      	beq.n	8004b1a <TIM_OC5_SetConfig+0x82>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a17      	ldr	r2, [pc, #92]	@ (8004b5c <TIM_OC5_SetConfig+0xc4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00b      	beq.n	8004b1a <TIM_OC5_SetConfig+0x82>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a16      	ldr	r2, [pc, #88]	@ (8004b60 <TIM_OC5_SetConfig+0xc8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <TIM_OC5_SetConfig+0x82>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a15      	ldr	r2, [pc, #84]	@ (8004b64 <TIM_OC5_SetConfig+0xcc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_OC5_SetConfig+0x82>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a14      	ldr	r2, [pc, #80]	@ (8004b68 <TIM_OC5_SetConfig+0xd0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d109      	bne.n	8004b2e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	621a      	str	r2, [r3, #32]
}
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40013400 	.word	0x40013400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40014400 	.word	0x40014400
 8004b64:	40014800 	.word	0x40014800
 8004b68:	40015000 	.word	0x40015000

08004b6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	051b      	lsls	r3, r3, #20
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c2c <TIM_OC6_SetConfig+0xc0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <TIM_OC6_SetConfig+0x84>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <TIM_OC6_SetConfig+0xc4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00f      	beq.n	8004bf0 <TIM_OC6_SetConfig+0x84>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	@ (8004c34 <TIM_OC6_SetConfig+0xc8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_OC6_SetConfig+0x84>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <TIM_OC6_SetConfig+0xcc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_OC6_SetConfig+0x84>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a16      	ldr	r2, [pc, #88]	@ (8004c3c <TIM_OC6_SetConfig+0xd0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_OC6_SetConfig+0x84>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a15      	ldr	r2, [pc, #84]	@ (8004c40 <TIM_OC6_SetConfig+0xd4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d109      	bne.n	8004c04 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40013400 	.word	0x40013400
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800
 8004c40:	40015000 	.word	0x40015000

08004c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f023 030a 	bic.w	r3, r3, #10
 8004c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f023 0210 	bic.w	r2, r3, #16
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f043 0307 	orr.w	r3, r3, #7
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	021a      	lsls	r2, r3, #8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	609a      	str	r2, [r3, #8]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2201      	movs	r2, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	401a      	ands	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	fa01 f303 	lsl.w	r3, r1, r3
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e074      	b.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a34      	ldr	r2, [pc, #208]	@ (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a33      	ldr	r2, [pc, #204]	@ (8004edc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a31      	ldr	r2, [pc, #196]	@ (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d108      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d022      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e60:	d01d      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a15      	ldr	r2, [pc, #84]	@ (8004edc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a18      	ldr	r2, [pc, #96]	@ (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a11      	ldr	r2, [pc, #68]	@ (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40013400 	.word	0x40013400
 8004ee0:	40015000 	.word	0x40015000
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40014000 	.word	0x40014000

08004ef4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e078      	b.n	8005002 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	@ (8005018 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d11c      	bne.n	8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	051b      	lsls	r3, r3, #20
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40013400 	.word	0x40013400
 8005018:	40015000 	.word	0x40015000

0800501c <memset>:
 800501c:	4402      	add	r2, r0
 800501e:	4603      	mov	r3, r0
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	f803 1b01 	strb.w	r1, [r3], #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4d0d      	ldr	r5, [pc, #52]	@ (8005064 <__libc_init_array+0x38>)
 8005030:	4c0d      	ldr	r4, [pc, #52]	@ (8005068 <__libc_init_array+0x3c>)
 8005032:	1b64      	subs	r4, r4, r5
 8005034:	10a4      	asrs	r4, r4, #2
 8005036:	2600      	movs	r6, #0
 8005038:	42a6      	cmp	r6, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	4d0b      	ldr	r5, [pc, #44]	@ (800506c <__libc_init_array+0x40>)
 800503e:	4c0c      	ldr	r4, [pc, #48]	@ (8005070 <__libc_init_array+0x44>)
 8005040:	f000 f818 	bl	8005074 <_init>
 8005044:	1b64      	subs	r4, r4, r5
 8005046:	10a4      	asrs	r4, r4, #2
 8005048:	2600      	movs	r6, #0
 800504a:	42a6      	cmp	r6, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f855 3b04 	ldr.w	r3, [r5], #4
 8005054:	4798      	blx	r3
 8005056:	3601      	adds	r6, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f855 3b04 	ldr.w	r3, [r5], #4
 800505e:	4798      	blx	r3
 8005060:	3601      	adds	r6, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	0800509c 	.word	0x0800509c
 8005068:	0800509c 	.word	0x0800509c
 800506c:	0800509c 	.word	0x0800509c
 8005070:	080050a0 	.word	0x080050a0

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
