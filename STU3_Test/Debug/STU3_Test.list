
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f78  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008150  08008150  00009150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008190  08008190  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008190  08008190  00009190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008198  08008198  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008198  08008198  00009198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800819c  0800819c  0000919c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080081a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  20000014  080081b4  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  080081b4  0000a7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6ff  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f58  00000000  00000000  00025743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  000286a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001249  00000000  00000000  00029df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a8c  00000000  00000000  0002b041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a738  00000000  00000000  0002dacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011582c  00000000  00000000  00048205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015da31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006584  00000000  00000000  0015da74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00163ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008138 	.word	0x08008138

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08008138 	.word	0x08008138

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <PS2_ReadData>:
uint8_t Position_Revolute[10];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
<<<<<<< Updated upstream
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af02      	add	r7, sp, #8
	HAL_Delay(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f002 f988 	bl	8002a44 <HAL_Delay>
=======
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af02      	add	r7, sp, #8
	HAL_Delay(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f001 fad8 	bl	8001b00 <HAL_Delay>
>>>>>>> Stashed changes
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000556:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <PS2_ReadData+0x64>)
 8000558:	f003 f900 	bl	800375c <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	e012      	b.n	8000588 <PS2_ReadData+0x44>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
<<<<<<< Updated upstream
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a11      	ldr	r2, [pc, #68]	@ (8000790 <PS2_ReadData+0x68>)
 800074a:	1899      	adds	r1, r3, r2
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <PS2_ReadData+0x6c>)
 8000750:	441a      	add	r2, r3
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	480f      	ldr	r0, [pc, #60]	@ (8000798 <PS2_ReadData+0x70>)
 800075c:	f005 f96f 	bl	8005a3e <HAL_SPI_TransmitReceive>
		HAL_Delay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f002 f96f 	bl	8002a44 <HAL_Delay>
=======
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a11      	ldr	r2, [pc, #68]	@ (80005ac <PS2_ReadData+0x68>)
 8000566:	1899      	adds	r1, r3, r2
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a11      	ldr	r2, [pc, #68]	@ (80005b0 <PS2_ReadData+0x6c>)
 800056c:	441a      	add	r2, r3
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <PS2_ReadData+0x70>)
 8000578:	f004 fa07 	bl	800498a <HAL_SPI_TransmitReceive>
		HAL_Delay(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f001 fabf 	bl	8001b00 <HAL_Delay>
>>>>>>> Stashed changes
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3301      	adds	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b07      	cmp	r3, #7
 800058c:	dde9      	ble.n	8000562 <PS2_ReadData+0x1e>
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
<<<<<<< Updated upstream
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <PS2_ReadData+0x64>)
 800077a:	f004 f855 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f002 f960 	bl	8002a44 <HAL_Delay>
=======
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000594:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <PS2_ReadData+0x64>)
 8000596:	f003 f8e1 	bl	800375c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f001 fab0 	bl	8001b00 <HAL_Delay>
>>>>>>> Stashed changes
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	48000800 	.word	0x48000800
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000030 	.word	0x20000030
 80005b4:	200000a4 	.word	0x200000a4

080005b8 <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <PS2_ButtonCircle+0x20>)
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	f003 0320 	and.w	r3, r3, #32
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf0c      	ite	eq
 80005c8:	2301      	moveq	r3, #1
 80005ca:	2300      	movne	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000030 	.word	0x20000030

080005dc <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <PS2_ButtonSquare+0x1c>)
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	43db      	mvns	r3, r3
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	09db      	lsrs	r3, r3, #7
 80005ec:	b2db      	uxtb	r3, r3
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	20000030 	.word	0x20000030

080005fc <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <PS2_ButtonTriangle+0x20>)
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf0c      	ite	eq
 800060c:	2301      	moveq	r3, #1
 800060e:	2300      	movne	r3, #0
 8000610:	b2db      	uxtb	r3, r3
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000030 	.word	0x20000030

08000620 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <PS2_ButtonCross+0x20>)
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf0c      	ite	eq
 8000630:	2301      	moveq	r3, #1
 8000632:	2300      	movne	r3, #0
 8000634:	b2db      	uxtb	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000030 	.word	0x20000030

08000644 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <PS2_ButtonR1+0x20>)
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000030 	.word	0x20000030

08000668 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <PS2_ButtonR2+0x20>)
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	2b00      	cmp	r3, #0
 8000676:	bf0c      	ite	eq
 8000678:	2301      	moveq	r3, #1
 800067a:	2300      	movne	r3, #0
 800067c:	b2db      	uxtb	r3, r3
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	20000030 	.word	0x20000030

0800068c <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <PS2_ButtonSelect+0x20>)
 8000692:	78db      	ldrb	r3, [r3, #3]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	bf0c      	ite	eq
 800069c:	2301      	moveq	r3, #1
 800069e:	2300      	movne	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	20000030 	.word	0x20000030

080006b0 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <PS2_ButtonStart+0x20>)
 80006b6:	78db      	ldrb	r3, [r3, #3]
 80006b8:	f003 0308 	and.w	r3, r3, #8
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf0c      	ite	eq
 80006c0:	2301      	moveq	r3, #1
 80006c2:	2300      	movne	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000030 	.word	0x20000030

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f001 f9a1 	bl	8001a1e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f85c 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 fd10 	bl	8001104 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e4:	f000 fce4 	bl	80010b0 <MX_DMA_Init>
  MX_TIM3_Init();
 80006e8:	f000 f9fc 	bl	8000ae4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80006ec:	f000 f8a0 	bl	8000830 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006f0:	f000 f956 	bl	80009a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006f4:	f000 f9a8 	bl	8000a48 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006f8:	f000 fa4a 	bl	8000b90 <MX_TIM4_Init>
  MX_TIM20_Init();
 80006fc:	f000 fbce 	bl	8000e9c <MX_TIM20_Init>
  MX_TIM8_Init();
 8000700:	f000 fa9c 	bl	8000c3c <MX_TIM8_Init>
  MX_TIM16_Init();
 8000704:	f000 fb4a 	bl	8000d9c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000708:	f000 fc84 	bl	8001014 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800070c:	f000 f90a 	bl	8000924 <MX_SPI1_Init>
//			if (current_segment < MAX_SEGMENTS - 1) {
//				current_segment++;
//			}
//		}

		PS2_ReadData();
 8000710:	f7ff ff18 	bl	8000544 <PS2_ReadData>
		Circle = PS2_ButtonCircle();
 8000714:	f7ff ff50 	bl	80005b8 <PS2_ButtonCircle>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <main+0xa4>)
 800071e:	601a      	str	r2, [r3, #0]
		Square = PS2_ButtonSquare();
 8000720:	f7ff ff5c 	bl	80005dc <PS2_ButtonSquare>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <main+0xa8>)
 800072a:	601a      	str	r2, [r3, #0]
		Triangle = PS2_ButtonTriangle();
 800072c:	f7ff ff66 	bl	80005fc <PS2_ButtonTriangle>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <main+0xac>)
 8000736:	601a      	str	r2, [r3, #0]
		Cross = PS2_ButtonCross();
 8000738:	f7ff ff72 	bl	8000620 <PS2_ButtonCross>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <main+0xb0>)
 8000742:	601a      	str	r2, [r3, #0]
		R1 = PS2_ButtonR1();
 8000744:	f7ff ff7e 	bl	8000644 <PS2_ButtonR1>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <main+0xb4>)
 800074e:	601a      	str	r2, [r3, #0]
		R2 = PS2_ButtonR2();
 8000750:	f7ff ff8a 	bl	8000668 <PS2_ButtonR2>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <main+0xb8>)
 800075a:	601a      	str	r2, [r3, #0]
		Select = PS2_ButtonSelect();
 800075c:	f7ff ff96 	bl	800068c <PS2_ButtonSelect>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <main+0xbc>)
 8000766:	601a      	str	r2, [r3, #0]
		Start = PS2_ButtonStart();
 8000768:	f7ff ffa2 	bl	80006b0 <PS2_ButtonStart>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <main+0xc0>)
 8000772:	601a      	str	r2, [r3, #0]
		PS2_ReadData();
 8000774:	bf00      	nop
 8000776:	e7cb      	b.n	8000710 <main+0x3c>
 8000778:	200007c8 	.word	0x200007c8
 800077c:	200007cc 	.word	0x200007cc
 8000780:	200007d0 	.word	0x200007d0
 8000784:	200007d4 	.word	0x200007d4
 8000788:	200007d8 	.word	0x200007d8
 800078c:	200007dc 	.word	0x200007dc
 8000790:	200007e0 	.word	0x200007e0
 8000794:	200007e4 	.word	0x200007e4

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2238      	movs	r2, #56	@ 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fc9a 	bl	80080e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f003 f80a 	bl	80037d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007da:	2355      	movs	r3, #85	@ 0x55
 80007dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f8a4 	bl	800393c <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007fa:	f000 fd3b 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2104      	movs	r1, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fba2 	bl	8003f60 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000822:	f000 fd27 	bl	8001274 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	@ 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	@ 0x30
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2220      	movs	r2, #32
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f007 fc49 	bl	80080e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800084e:	4b32      	ldr	r3, [pc, #200]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000850:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000854:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000856:	4b30      	ldr	r3, [pc, #192]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000858:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800085e:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000864:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_ADC1_Init+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000870:	4b29      	ldr	r3, [pc, #164]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000878:	2204      	movs	r2, #4
 800087a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087c:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <MX_ADC1_Init+0xe8>)
 800087e:	2200      	movs	r2, #0
 8000880:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000884:	2200      	movs	r2, #0
 8000886:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000888:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <MX_ADC1_Init+0xe8>)
 800088a:	2201      	movs	r2, #1
 800088c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089c:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_ADC1_Init+0xe8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_ADC1_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_ADC1_Init+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_ADC1_Init+0xe8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b8:	4817      	ldr	r0, [pc, #92]	@ (8000918 <MX_ADC1_Init+0xe8>)
 80008ba:	f001 fb19 	bl	8001ef0 <HAL_ADC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008c4:	f000 fcd6 	bl	8001274 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_ADC1_Init+0xe8>)
 80008d4:	f002 f92e 	bl	8002b34 <HAL_ADCEx_MultiModeConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008de:	f000 fcc9 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_ADC1_Init+0xec>)
 80008e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e6:	2306      	movs	r3, #6
 80008e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_ADC1_Init+0xf0>)
 80008f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f2:	2304      	movs	r3, #4
 80008f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <MX_ADC1_Init+0xe8>)
 8000900:	f001 fcb2 	bl	8002268 <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800090a:	f000 fcb3 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	@ 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000038 	.word	0x20000038
 800091c:	04300002 	.word	0x04300002
 8000920:	407f0000 	.word	0x407f0000

08000924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_SPI1_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <MX_SPI1_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000930:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_SPI1_Init+0x74>)
 800093e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000942:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000946:	2202      	movs	r2, #2
 8000948:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_SPI1_Init+0x74>)
 800094c:	2201      	movs	r2, #1
 800094e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000956:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_SPI1_Init+0x74>)
 800095a:	2238      	movs	r2, #56	@ 0x38
 800095c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000960:	2280      	movs	r2, #128	@ 0x80
 8000962:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_SPI1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000972:	2207      	movs	r2, #7
 8000974:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_SPI1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_SPI1_Init+0x74>)
 8000984:	f003 ff56 	bl	8004834 <HAL_SPI_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 fc71 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000a4 	.word	0x200000a4
 800099c:	40013000 	.word	0x40013000

080009a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 80009c0:	4a20      	ldr	r2, [pc, #128]	@ (8000a44 <MX_TIM1_Init+0xa4>)
 80009c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 80009d2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80009d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ea:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 80009ec:	f004 fb50 	bl	8005090 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009f6:	f000 fc3d 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 8000a08:	f005 f8a6 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a12:	f000 fc2f 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <MX_TIM1_Init+0xa0>)
 8000a28:	f005 ff00 	bl	800682c <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a32:	f000 fc1f 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000108 	.word	0x20000108
 8000a44:	40012c00 	.word	0x40012c00

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000a68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8e:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000a90:	f004 fafe 	bl	8005090 <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a9a:	f000 fbeb 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000aac:	f005 f854 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ab6:	f000 fbdd 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <MX_TIM2_Init+0x98>)
 8000ac8:	f005 feb0 	bl	800682c <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ad2:	f000 fbcf 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200001d4 	.word	0x200001d4

08000ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	@ 0x30
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	2224      	movs	r2, #36	@ 0x24
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f007 faf4 	bl	80080e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b02:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <MX_TIM3_Init+0xa4>)
 8000b04:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <MX_TIM3_Init+0xa8>)
 8000b06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <MX_TIM3_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <MX_TIM3_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <MX_TIM3_Init+0xa4>)
 8000b16:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_TIM3_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <MX_TIM3_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b40:	2301      	movs	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <MX_TIM3_Init+0xa4>)
 8000b54:	f004 fc44 	bl	80053e0 <HAL_TIM_Encoder_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b5e:	f000 fb89 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <MX_TIM3_Init+0xa4>)
 8000b70:	f005 fe5c 	bl	800682c <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b7a:	f000 fb7b 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3730      	adds	r7, #48	@ 0x30
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002a0 	.word	0x200002a0
 8000b8c:	40000400 	.word	0x40000400

08000b90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	@ 0x30
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2224      	movs	r2, #36	@ 0x24
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 fa9e 	bl	80080e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <MX_TIM4_Init+0xa4>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <MX_TIM4_Init+0xa8>)
 8000bb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_TIM4_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MX_TIM4_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_TIM4_Init+0xa4>)
 8000bc2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000bc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_TIM4_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_TIM4_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_TIM4_Init+0xa4>)
 8000c00:	f004 fbee 	bl	80053e0 <HAL_TIM_Encoder_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c0a:	f000 fb33 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <MX_TIM4_Init+0xa4>)
 8000c1c:	f005 fe06 	bl	800682c <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c26:	f000 fb25 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	@ 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000036c 	.word	0x2000036c
 8000c38:	40000800 	.word	0x40000800

08000c3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b09c      	sub	sp, #112	@ 0x70
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2234      	movs	r2, #52	@ 0x34
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f007 fa32 	bl	80080e0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c7c:	4b45      	ldr	r3, [pc, #276]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000c7e:	4a46      	ldr	r2, [pc, #280]	@ (8000d98 <MX_TIM8_Init+0x15c>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c82:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b42      	ldr	r3, [pc, #264]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c8e:	4b41      	ldr	r3, [pc, #260]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c94:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b3f      	ldr	r3, [pc, #252]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ca8:	483a      	ldr	r0, [pc, #232]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000caa:	f004 f9f1 	bl	8005090 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000cb4:	f000 fade 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cbc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4833      	ldr	r0, [pc, #204]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000cc6:	f004 ff47 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000cd0:	f000 fad0 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000cd4:	482f      	ldr	r0, [pc, #188]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000cd6:	f004 faad 	bl	8005234 <HAL_TIM_PWM_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000ce0:	f000 fac8 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000cf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4827      	ldr	r0, [pc, #156]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000cf8:	f005 fd98 	bl	800682c <HAL_TIMEx_MasterConfigSynchronization>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000d02:	f000 fab7 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d06:	2360      	movs	r3, #96	@ 0x60
 8000d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d12:	2300      	movs	r3, #0
 8000d14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d26:	220c      	movs	r2, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000d2c:	f004 fe00 	bl	8005930 <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000d36:	f000 fa9d 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000d78:	f005 fdee 	bl	8006958 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8000d82:	f000 fa77 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d86:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <MX_TIM8_Init+0x158>)
 8000d88:	f000 fc86 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8000d8c:	bf00      	nop
 8000d8e:	3770      	adds	r7, #112	@ 0x70
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000438 	.word	0x20000438
 8000d98:	40013400 	.word	0x40013400

08000d9c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	@ 0x50
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2234      	movs	r2, #52	@ 0x34
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f007 f98f 	bl	80080e0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000dc2:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000dc4:	4a34      	ldr	r2, [pc, #208]	@ (8000e98 <MX_TIM16_Init+0xfc>)
 8000dc6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000dc8:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000dca:	22a9      	movs	r2, #169	@ 0xa9
 8000dcc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000dd6:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8000dda:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000de2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dee:	4829      	ldr	r0, [pc, #164]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000df0:	f004 f94e 	bl	8005090 <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000dfa:	f000 fa3b 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000dfe:	4825      	ldr	r0, [pc, #148]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000e00:	f004 f9aa 	bl	8005158 <HAL_TIM_OC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000e0a:	f000 fa33 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e0e:	2108      	movs	r1, #8
 8000e10:	4820      	ldr	r0, [pc, #128]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000e12:	f004 fa7d 	bl	8005310 <HAL_TIM_OnePulse_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000e1c:	f000 fa2a 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000e20:	2310      	movs	r3, #16
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8000e24:	f240 5399 	movw	r3, #1433	@ 0x599
 8000e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e42:	2200      	movs	r2, #0
 8000e44:	4619      	mov	r1, r3
 8000e46:	4813      	ldr	r0, [pc, #76]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000e48:	f004 fcf8 	bl	800583c <HAL_TIM_OC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8000e52:	f000 fa0f 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_TIM16_Init+0xf8>)
 8000e7e:	f005 fd6b 	bl	8006958 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8000e88:	f000 f9f4 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3750      	adds	r7, #80	@ 0x50
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000504 	.word	0x20000504
 8000e98:	40014400 	.word	0x40014400

08000e9c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09c      	sub	sp, #112	@ 0x70
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ebc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2234      	movs	r2, #52	@ 0x34
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f007 f902 	bl	80080e0 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8000edc:	4b4b      	ldr	r3, [pc, #300]	@ (800100c <MX_TIM20_Init+0x170>)
 8000ede:	4a4c      	ldr	r2, [pc, #304]	@ (8001010 <MX_TIM20_Init+0x174>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8000ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800100c <MX_TIM20_Init+0x170>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b48      	ldr	r3, [pc, #288]	@ (800100c <MX_TIM20_Init+0x170>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8000eee:	4b47      	ldr	r3, [pc, #284]	@ (800100c <MX_TIM20_Init+0x170>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ef4:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b45      	ldr	r3, [pc, #276]	@ (800100c <MX_TIM20_Init+0x170>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8000efc:	4b43      	ldr	r3, [pc, #268]	@ (800100c <MX_TIM20_Init+0x170>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b42      	ldr	r3, [pc, #264]	@ (800100c <MX_TIM20_Init+0x170>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8000f08:	4840      	ldr	r0, [pc, #256]	@ (800100c <MX_TIM20_Init+0x170>)
 8000f0a:	f004 f8c1 	bl	8005090 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8000f14:	f000 f9ae 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f22:	4619      	mov	r1, r3
 8000f24:	4839      	ldr	r0, [pc, #228]	@ (800100c <MX_TIM20_Init+0x170>)
 8000f26:	f004 fe17 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8000f30:	f000 f9a0 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8000f34:	4835      	ldr	r0, [pc, #212]	@ (800100c <MX_TIM20_Init+0x170>)
 8000f36:	f004 f97d 	bl	8005234 <HAL_TIM_PWM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8000f40:	f000 f998 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8000f50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f54:	4619      	mov	r1, r3
 8000f56:	482d      	ldr	r0, [pc, #180]	@ (800100c <MX_TIM20_Init+0x170>)
 8000f58:	f005 fc68 	bl	800682c <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8000f62:	f000 f987 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f66:	2360      	movs	r3, #96	@ 0x60
 8000f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f72:	2300      	movs	r3, #0
 8000f74:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f86:	2200      	movs	r2, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4820      	ldr	r0, [pc, #128]	@ (800100c <MX_TIM20_Init+0x170>)
 8000f8c:	f004 fcd0 	bl	8005930 <HAL_TIM_PWM_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8000f96:	f000 f96d 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	481a      	ldr	r0, [pc, #104]	@ (800100c <MX_TIM20_Init+0x170>)
 8000fa4:	f004 fcc4 	bl	8005930 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8000fae:	f000 f961 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	4807      	ldr	r0, [pc, #28]	@ (800100c <MX_TIM20_Init+0x170>)
 8000ff0:	f005 fcb2 	bl	8006958 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8000ffa:	f000 f93b 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8000ffe:	4803      	ldr	r0, [pc, #12]	@ (800100c <MX_TIM20_Init+0x170>)
 8001000:	f000 fb4a 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8001004:	bf00      	nop
 8001006:	3770      	adds	r7, #112	@ 0x70
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200005d0 	.word	0x200005d0
 8001010:	40015000 	.word	0x40015000

08001014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 800101a:	4a24      	ldr	r2, [pc, #144]	@ (80010ac <MX_USART2_UART_Init+0x98>)
 800101c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001020:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001026:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001028:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800102c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001036:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800103a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001060:	4811      	ldr	r0, [pc, #68]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001062:	f005 fd5d 	bl	8006b20 <HAL_UART_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800106c:	f000 f902 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001074:	f006 ff69 	bl	8007f4a <HAL_UARTEx_SetTxFifoThreshold>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 f8f9 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001082:	2100      	movs	r1, #0
 8001084:	4808      	ldr	r0, [pc, #32]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001086:	f006 ff9e 	bl	8007fc6 <HAL_UARTEx_SetRxFifoThreshold>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001090:	f000 f8f0 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_USART2_UART_Init+0x94>)
 8001096:	f006 ff1f 	bl	8007ed8 <HAL_UARTEx_DisableFifoMode>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80010a0:	f000 f8e8 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000069c 	.word	0x2000069c
 80010ac:	40004400 	.word	0x40004400

080010b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_DMA_Init+0x50>)
 80010b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ba:	4a11      	ldr	r2, [pc, #68]	@ (8001100 <MX_DMA_Init+0x50>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_DMA_Init+0x50>)
 80010c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_DMA_Init+0x50>)
 80010d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001100 <MX_DMA_Init+0x50>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_DMA_Init+0x50>)
 80010dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	200b      	movs	r0, #11
 80010ec:	f001 ff05 	bl	8002efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010f0:	200b      	movs	r0, #11
 80010f2:	f001 ff1c 	bl	8002f2e <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b53      	ldr	r3, [pc, #332]	@ (8001268 <MX_GPIO_Init+0x164>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a52      	ldr	r2, [pc, #328]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b50      	ldr	r3, [pc, #320]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	4b4d      	ldr	r3, [pc, #308]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a4c      	ldr	r2, [pc, #304]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b4a      	ldr	r3, [pc, #296]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b47      	ldr	r3, [pc, #284]	@ (8001268 <MX_GPIO_Init+0x164>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a46      	ldr	r2, [pc, #280]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b44      	ldr	r3, [pc, #272]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b41      	ldr	r3, [pc, #260]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a40      	ldr	r2, [pc, #256]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b3e      	ldr	r3, [pc, #248]	@ (8001268 <MX_GPIO_Init+0x164>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f241 0102 	movw	r1, #4098	@ 0x1002
 8001180:	483a      	ldr	r0, [pc, #232]	@ (800126c <MX_GPIO_Init+0x168>)
 8001182:	f002 faeb 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800118c:	4838      	ldr	r0, [pc, #224]	@ (8001270 <MX_GPIO_Init+0x16c>)
 800118e:	f002 fae5 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_MD20A_24V_Pin DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin;
 8001192:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4830      	ldr	r0, [pc, #192]	@ (800126c <MX_GPIO_Init+0x168>)
 80011ac:	f002 f954 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80011b0:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4829      	ldr	r0, [pc, #164]	@ (800126c <MX_GPIO_Init+0x168>)
 80011c8:	f002 f946 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Prismatic2_Pin;
 80011cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_Switch_Prismatic2_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4822      	ldr	r0, [pc, #136]	@ (800126c <MX_GPIO_Init+0x168>)
 80011e4:	f002 f938 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001202:	f002 f929 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Attention_Pin;
 8001206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PS2_Attention_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4814      	ldr	r0, [pc, #80]	@ (8001270 <MX_GPIO_Init+0x16c>)
 8001220:	f002 f91a 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8001224:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	480d      	ldr	r0, [pc, #52]	@ (8001270 <MX_GPIO_Init+0x16c>)
 800123c:	f002 f90c 	bl	8003458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	2017      	movs	r0, #23
 8001246:	f001 fe58 	bl	8002efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800124a:	2017      	movs	r0, #23
 800124c:	f001 fe6f 	bl	8002f2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2028      	movs	r0, #40	@ 0x28
 8001256:	f001 fe50 	bl	8002efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125a:	2028      	movs	r0, #40	@ 0x28
 800125c:	f001 fe67 	bl	8002f2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	@ 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	48000400 	.word	0x48000400
 8001270:	48000800 	.word	0x48000800

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <Error_Handler+0x8>

08001280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_MspInit+0x44>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6613      	str	r3, [r2, #96]	@ 0x60
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012b6:	f002 fb31 	bl	800391c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b09e      	sub	sp, #120	@ 0x78
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2254      	movs	r2, #84	@ 0x54
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 fef9 	bl	80080e0 <memset>
  if(hadc->Instance==ADC1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012f6:	d134      	bne.n	8001362 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001302:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4618      	mov	r0, r3
 800130a:	f003 f845 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001314:	f7ff ffae 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HAL_ADC_MspInit+0xa4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a13      	ldr	r2, [pc, #76]	@ (800136c <HAL_ADC_MspInit+0xa4>)
 800131e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_ADC_MspInit+0xa4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_ADC_MspInit+0xa4>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <HAL_ADC_MspInit+0xa4>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_ADC_MspInit+0xa4>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8001348:	2303      	movs	r3, #3
 800134a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134c:	2303      	movs	r3, #3
 800134e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135e:	f002 f87b 	bl	8003458 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001362:	bf00      	nop
 8001364:	3778      	adds	r7, #120	@ 0x78
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a25      	ldr	r2, [pc, #148]	@ (8001424 <HAL_SPI_MspInit+0xb4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d144      	bne.n	800141c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001396:	4a24      	ldr	r2, [pc, #144]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 8001398:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800139c:	6613      	str	r3, [r2, #96]	@ 0x60
 800139e:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a18      	ldr	r2, [pc, #96]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <HAL_SPI_MspInit+0xb8>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013da:	2320      	movs	r3, #32
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ea:	2305      	movs	r3, #5
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f8:	f002 f82e 	bl	8003458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013fc:	2330      	movs	r3, #48	@ 0x30
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140c:	2305      	movs	r3, #5
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <HAL_SPI_MspInit+0xbc>)
 8001418:	f002 f81e 	bl	8003458 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	@ 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40013000 	.word	0x40013000
 8001428:	40021000 	.word	0x40021000
 800142c:	48000400 	.word	0x48000400

08001430 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a39      	ldr	r2, [pc, #228]	@ (8001524 <HAL_TIM_Base_MspInit+0xf4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d11c      	bne.n	800147c <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001442:	4b39      	ldr	r3, [pc, #228]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001446:	4a38      	ldr	r2, [pc, #224]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 8001448:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800144c:	6613      	str	r3, [r2, #96]	@ 0x60
 800144e:	4b36      	ldr	r3, [pc, #216]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2018      	movs	r0, #24
 8001460:	f001 fd4b 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001464:	2018      	movs	r0, #24
 8001466:	f001 fd62 	bl	8002f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2019      	movs	r0, #25
 8001470:	f001 fd43 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001474:	2019      	movs	r0, #25
 8001476:	f001 fd5a 	bl	8002f2e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 800147a:	e04e      	b.n	800151a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001484:	d10c      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001486:	4b28      	ldr	r3, [pc, #160]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	4a27      	ldr	r2, [pc, #156]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6593      	str	r3, [r2, #88]	@ 0x58
 8001492:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]
}
 800149e:	e03c      	b.n	800151a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a21      	ldr	r2, [pc, #132]	@ (800152c <HAL_TIM_Base_MspInit+0xfc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10c      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 80014b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
}
 80014c2:	e02a      	b.n	800151a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <HAL_TIM_Base_MspInit+0x100>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d114      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	4a15      	ldr	r2, [pc, #84]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2019      	movs	r0, #25
 80014ec:	f001 fd05 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014f0:	2019      	movs	r0, #25
 80014f2:	f001 fd1c 	bl	8002f2e <HAL_NVIC_EnableIRQ>
}
 80014f6:	e010      	b.n	800151a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <HAL_TIM_Base_MspInit+0x104>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10b      	bne.n	800151a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 8001508:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800150c:	6613      	str	r3, [r2, #96]	@ 0x60
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_TIM_Base_MspInit+0xf8>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
}
 800151a:	bf00      	nop
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40012c00 	.word	0x40012c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40013400 	.word	0x40013400
 8001530:	40014400 	.word	0x40014400
 8001534:	40015000 	.word	0x40015000

08001538 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08e      	sub	sp, #56	@ 0x38
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a4b      	ldr	r2, [pc, #300]	@ (8001684 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d145      	bne.n	80015e6 <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155a:	4b4b      	ldr	r3, [pc, #300]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	4a4a      	ldr	r2, [pc, #296]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6593      	str	r3, [r2, #88]	@ 0x58
 8001566:	4b48      	ldr	r3, [pc, #288]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	623b      	str	r3, [r7, #32]
 8001570:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b45      	ldr	r3, [pc, #276]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a44      	ldr	r2, [pc, #272]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b42      	ldr	r3, [pc, #264]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	4b3f      	ldr	r3, [pc, #252]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a3e      	ldr	r2, [pc, #248]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 80015a2:	2340      	movs	r3, #64	@ 0x40
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015b2:	2302      	movs	r3, #2
 80015b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c0:	f001 ff4a 	bl	8003458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d4:	2302      	movs	r3, #2
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	482b      	ldr	r0, [pc, #172]	@ (800168c <HAL_TIM_Encoder_MspInit+0x154>)
 80015e0:	f001 ff3a 	bl	8003458 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015e4:	e04a      	b.n	800167c <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a29      	ldr	r2, [pc, #164]	@ (8001690 <HAL_TIM_Encoder_MspInit+0x158>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d145      	bne.n	800167c <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015f0:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	4a24      	ldr	r2, [pc, #144]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fc:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	4a1e      	ldr	r2, [pc, #120]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	4a18      	ldr	r2, [pc, #96]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162c:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x150>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8001638:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800164a:	230a      	movs	r3, #10
 800164c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f001 fefe 	bl	8003458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800166c:	2302      	movs	r3, #2
 800166e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	@ (8001694 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001678:	f001 feee 	bl	8003458 <HAL_GPIO_Init>
}
 800167c:	bf00      	nop
 800167e:	3738      	adds	r7, #56	@ 0x38
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40000400 	.word	0x40000400
 8001688:	40021000 	.word	0x40021000
 800168c:	48000800 	.word	0x48000800
 8001690:	40000800 	.word	0x40000800
 8001694:	48000400 	.word	0x48000400

08001698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a31      	ldr	r2, [pc, #196]	@ (800177c <HAL_TIM_MspPostInit+0xe4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d11d      	bne.n	80016f6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a30      	ldr	r2, [pc, #192]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80016d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80016e4:	2304      	movs	r3, #4
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4825      	ldr	r0, [pc, #148]	@ (8001784 <HAL_TIM_MspPostInit+0xec>)
 80016f0:	f001 feb2 	bl	8003458 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80016f4:	e03d      	b.n	8001772 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <HAL_TIM_MspPostInit+0xf0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d138      	bne.n	8001772 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	4a1e      	ldr	r2, [pc, #120]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170c:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	4a18      	ldr	r2, [pc, #96]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_TIM_MspPostInit+0xe8>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8001730:	2304      	movs	r3, #4
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001740:	2303      	movs	r3, #3
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4810      	ldr	r0, [pc, #64]	@ (800178c <HAL_TIM_MspPostInit+0xf4>)
 800174c:	f001 fe84 	bl	8003458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8001750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8001762:	2306      	movs	r3, #6
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <HAL_TIM_MspPostInit+0xec>)
 800176e:	f001 fe73 	bl	8003458 <HAL_GPIO_Init>
}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	@ 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40013400 	.word	0x40013400
 8001780:	40021000 	.word	0x40021000
 8001784:	48000800 	.word	0x48000800
 8001788:	40015000 	.word	0x40015000
 800178c:	48000400 	.word	0x48000400

08001790 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b09e      	sub	sp, #120	@ 0x78
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2254      	movs	r2, #84	@ 0x54
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f006 fc95 	bl	80080e0 <memset>
  if(huart->Instance==USART2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a37      	ldr	r2, [pc, #220]	@ (8001898 <HAL_UART_MspInit+0x108>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d167      	bne.n	8001890 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 fde3 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017d8:	f7ff fd4c 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017dc:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <HAL_UART_MspInit+0x10c>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	4a2e      	ldr	r2, [pc, #184]	@ (800189c <HAL_UART_MspInit+0x10c>)
 80017e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e8:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <HAL_UART_MspInit+0x10c>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <HAL_UART_MspInit+0x10c>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f8:	4a28      	ldr	r2, [pc, #160]	@ (800189c <HAL_UART_MspInit+0x10c>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001800:	4b26      	ldr	r3, [pc, #152]	@ (800189c <HAL_UART_MspInit+0x10c>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800180c:	230c      	movs	r3, #12
 800180e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181c:	2307      	movs	r3, #7
 800181e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f001 fe15 	bl	8003458 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 8001830:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <HAL_UART_MspInit+0x114>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 8001836:	221b      	movs	r2, #27
 8001838:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183a:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 800183c:	2210      	movs	r2, #16
 800183e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 8001848:	2280      	movs	r2, #128	@ 0x80
 800184a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001864:	480e      	ldr	r0, [pc, #56]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 8001866:	f001 fb7d 	bl	8002f64 <HAL_DMA_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001870:	f7ff fd00 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 8001878:	67da      	str	r2, [r3, #124]	@ 0x7c
 800187a:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <HAL_UART_MspInit+0x110>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2026      	movs	r0, #38	@ 0x26
 8001886:	f001 fb38 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800188a:	2026      	movs	r0, #38	@ 0x26
 800188c:	f001 fb4f 	bl	8002f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001890:	bf00      	nop
 8001892:	3778      	adds	r7, #120	@ 0x78
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40004400 	.word	0x40004400
 800189c:	40021000 	.word	0x40021000
 80018a0:	20000768 	.word	0x20000768
 80018a4:	40020008 	.word	0x40020008

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <NMI_Handler+0x4>

080018b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <MemManage_Handler+0x4>

080018c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <UsageFault_Handler+0x4>

080018d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fe:	f000 f8e1 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA1_Channel1_IRQHandler+0x10>)
 800190e:	f001 fc91 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000768 	.word	0x20000768

0800191c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8001920:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001924:	f001 ff32 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001932:	f003 fe09 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000108 	.word	0x20000108

08001940 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001944:	4803      	ldr	r0, [pc, #12]	@ (8001954 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001946:	f003 fdff 	bl	8005548 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800194a:	4803      	ldr	r0, [pc, #12]	@ (8001958 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800194c:	f003 fdfc 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000108 	.word	0x20000108
 8001958:	20000504 	.word	0x20000504

0800195c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <USART2_IRQHandler+0x10>)
 8001962:	f005 f93d 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000069c 	.word	0x2000069c

08001970 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8001974:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001978:	f001 ff08 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 800197c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001980:	f001 ff04 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8001984:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001988:	f001 ff00 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 800198c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001990:	f001 fefc 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8001994:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001998:	f001 fef8 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 800199c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80019a0:	f001 fef4 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019cc:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d0:	f7ff ffea 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	@ (8001a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <LoopForever+0xe>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001a18 <LoopForever+0x16>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fa:	f006 fb79 	bl	80080f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fe:	f7fe fe69 	bl	80006d4 <main>

08001a02 <LoopForever>:

LoopForever:
    b LoopForever
 8001a02:	e7fe      	b.n	8001a02 <LoopForever>
  ldr   r0, =_estack
 8001a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001a10:	080081a0 	.word	0x080081a0
  ldr r2, =_sbss
 8001a14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001a18:	200007ec 	.word	0x200007ec

08001a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC1_2_IRQHandler>

08001a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f001 fa5b 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 f80e 	bl	8001a50 <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	e001      	b.n	8001a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a40:	f7ff fc1e 	bl	8001280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a44:	79fb      	ldrb	r3, [r7, #7]

}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_InitTick+0x68>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d022      	beq.n	8001aaa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_InitTick+0x6c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_InitTick+0x68>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 fa66 	bl	8002f4a <HAL_SYSTICK_Config>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d809      	bhi.n	8001a9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a92:	f001 fa32 	bl	8002efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <HAL_InitTick+0x70>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e004      	b.n	8001aae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e001      	b.n	8001aae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	2000000c 	.word	0x2000000c

08001ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_IncTick+0x1c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a03      	ldr	r2, [pc, #12]	@ (8001ae0 <HAL_IncTick+0x1c>)
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	200007e8 	.word	0x200007e8
 8001ae4:	20000010 	.word	0x20000010

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200007e8 	.word	0x200007e8

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d004      	beq.n	8001b24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_Delay+0x40>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b24:	bf00      	nop
 8001b26:	f7ff ffdf 	bl	8001ae8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d8f7      	bhi.n	8001b26 <HAL_Delay+0x26>
  {
  }
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000010 	.word	0x20000010

08001b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3360      	adds	r3, #96	@ 0x60
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <LL_ADC_SetOffset+0x44>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	03fff000 	.word	0x03fff000

08001bf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3360      	adds	r3, #96	@ 0x60
 8001c02:	461a      	mov	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3360      	adds	r3, #96	@ 0x60
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b087      	sub	sp, #28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3360      	adds	r3, #96	@ 0x60
 8001c66:	461a      	mov	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3360      	adds	r3, #96	@ 0x60
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	615a      	str	r2, [r3, #20]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3330      	adds	r3, #48	@ 0x30
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	4413      	add	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	211f      	movs	r1, #31
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	f003 011f 	and.w	r1, r3, #31
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3314      	adds	r3, #20
 8001d50:	461a      	mov	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	0e5b      	lsrs	r3, r3, #25
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	0d1b      	lsrs	r3, r3, #20
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	2107      	movs	r1, #7
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	401a      	ands	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	0d1b      	lsrs	r3, r3, #20
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	431a      	orrs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0318 	and.w	r3, r3, #24
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dbc:	40d9      	lsrs	r1, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	0007ffff 	.word	0x0007ffff

08001de0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6093      	str	r3, [r2, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_IsEnabled+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_IsEnabled+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d101      	bne.n	8001eba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d101      	bne.n	8001ee0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e1a9      	b.n	800225e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff f9d5 	bl	80012c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff67 	bl	8001e04 <LL_ADC_IsDeepPowerDownEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff4d 	bl	8001de0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff82 	bl	8001e54 <LL_ADC_IsInternalRegulatorEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff66 	bl	8001e2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f60:	4b9c      	ldr	r3, [pc, #624]	@ (80021d4 <HAL_ADC_Init+0x2e4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	4a9c      	ldr	r2, [pc, #624]	@ (80021d8 <HAL_ADC_Init+0x2e8>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	3301      	adds	r3, #1
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f74:	e002      	b.n	8001f7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f9      	bne.n	8001f76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff64 	bl	8001e54 <LL_ADC_IsInternalRegulatorEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10d      	bne.n	8001fae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	f043 0210 	orr.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff75 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 8001fb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 8142 	bne.w	800224c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 813e 	bne.w	800224c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fd8:	f043 0202 	orr.w	r2, r3, #2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff49 	bl	8001e7c <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d141      	bne.n	8002074 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ff8:	d004      	beq.n	8002004 <HAL_ADC_Init+0x114>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a77      	ldr	r2, [pc, #476]	@ (80021dc <HAL_ADC_Init+0x2ec>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d10f      	bne.n	8002024 <HAL_ADC_Init+0x134>
 8002004:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002008:	f7ff ff38 	bl	8001e7c <LL_ADC_IsEnabled>
 800200c:	4604      	mov	r4, r0
 800200e:	4873      	ldr	r0, [pc, #460]	@ (80021dc <HAL_ADC_Init+0x2ec>)
 8002010:	f7ff ff34 	bl	8001e7c <LL_ADC_IsEnabled>
 8002014:	4603      	mov	r3, r0
 8002016:	4323      	orrs	r3, r4
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e012      	b.n	800204a <HAL_ADC_Init+0x15a>
 8002024:	486e      	ldr	r0, [pc, #440]	@ (80021e0 <HAL_ADC_Init+0x2f0>)
 8002026:	f7ff ff29 	bl	8001e7c <LL_ADC_IsEnabled>
 800202a:	4604      	mov	r4, r0
 800202c:	486d      	ldr	r0, [pc, #436]	@ (80021e4 <HAL_ADC_Init+0x2f4>)
 800202e:	f7ff ff25 	bl	8001e7c <LL_ADC_IsEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	431c      	orrs	r4, r3
 8002036:	486c      	ldr	r0, [pc, #432]	@ (80021e8 <HAL_ADC_Init+0x2f8>)
 8002038:	f7ff ff20 	bl	8001e7c <LL_ADC_IsEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	4323      	orrs	r3, r4
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002056:	d004      	beq.n	8002062 <HAL_ADC_Init+0x172>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a5f      	ldr	r2, [pc, #380]	@ (80021dc <HAL_ADC_Init+0x2ec>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_ADC_Init+0x176>
 8002062:	4a62      	ldr	r2, [pc, #392]	@ (80021ec <HAL_ADC_Init+0x2fc>)
 8002064:	e000      	b.n	8002068 <HAL_ADC_Init+0x178>
 8002066:	4a62      	ldr	r2, [pc, #392]	@ (80021f0 <HAL_ADC_Init+0x300>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f7ff fd68 	bl	8001b44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7f5b      	ldrb	r3, [r3, #29]
 8002078:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002084:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800208a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002092:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d106      	bne.n	80020b0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	045b      	lsls	r3, r3, #17
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b48      	ldr	r3, [pc, #288]	@ (80021f4 <HAL_ADC_Init+0x304>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	430b      	orrs	r3, r1
 80020de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fee4 	bl	8001ec8 <LL_ADC_INJ_IsConversionOngoing>
 8002100:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d17f      	bne.n	8002208 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d17c      	bne.n	8002208 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002112:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800211a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800212a:	f023 0302 	bic.w	r3, r3, #2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	69b9      	ldr	r1, [r7, #24]
 8002134:	430b      	orrs	r3, r1
 8002136:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d017      	beq.n	8002170 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800214e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002158:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800215c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6911      	ldr	r1, [r2, #16]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	430b      	orrs	r3, r1
 800216a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800216e:	e013      	b.n	8002198 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800217e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002190:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002194:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d12a      	bne.n	80021f8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021be:	4311      	orrs	r1, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021c4:	430a      	orrs	r2, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	e019      	b.n	8002208 <HAL_ADC_Init+0x318>
 80021d4:	20000008 	.word	0x20000008
 80021d8:	053e2d63 	.word	0x053e2d63
 80021dc:	50000100 	.word	0x50000100
 80021e0:	50000400 	.word	0x50000400
 80021e4:	50000500 	.word	0x50000500
 80021e8:	50000600 	.word	0x50000600
 80021ec:	50000300 	.word	0x50000300
 80021f0:	50000700 	.word	0x50000700
 80021f4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d10c      	bne.n	800222a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f023 010f 	bic.w	r1, r3, #15
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
 8002228:	e007      	b.n	800223a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 020f 	bic.w	r2, r2, #15
 8002238:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	f023 0303 	bic.w	r3, r3, #3
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	65da      	str	r2, [r3, #92]	@ 0x5c
 800224a:	e007      	b.n	800225c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	f043 0210 	orr.w	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800225c:	7ffb      	ldrb	r3, [r7, #31]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd90      	pop	{r4, r7, pc}
 8002266:	bf00      	nop

08002268 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0b6      	sub	sp, #216	@ 0xd8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_ADC_ConfigChannel+0x24>
 8002286:	2302      	movs	r3, #2
 8002288:	f000 bc13 	b.w	8002ab2 <HAL_ADC_ConfigChannel+0x84a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fe02 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 83f3 	bne.w	8002a8c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f7ff fd18 	bl	8001ce8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fdf0 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 80022c2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fdfc 	bl	8001ec8 <LL_ADC_INJ_IsConversionOngoing>
 80022d0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 81d9 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 81d4 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022f0:	d10f      	bne.n	8002312 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7ff fd1f 	bl	8001d40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fcd9 	bl	8001cc2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002310:	e00e      	b.n	8002330 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	461a      	mov	r2, r3
 8002320:	f7ff fd0e 	bl	8001d40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fcc9 	bl	8001cc2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	08db      	lsrs	r3, r3, #3
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b04      	cmp	r3, #4
 8002350:	d022      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002362:	f7ff fc23 	bl	8001bac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6919      	ldr	r1, [r3, #16]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	461a      	mov	r2, r3
 8002374:	f7ff fc6f 	bl	8001c56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <HAL_ADC_ConfigChannel+0x126>
 8002388:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800238c:	e000      	b.n	8002390 <HAL_ADC_ConfigChannel+0x128>
 800238e:	2300      	movs	r3, #0
 8002390:	461a      	mov	r2, r3
 8002392:	f7ff fc7b 	bl	8001c8c <LL_ADC_SetOffsetSaturation>
 8002396:	e17b      	b.n	8002690 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fc28 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x15c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fc1d 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	e01e      	b.n	8002402 <HAL_ADC_ConfigChannel+0x19a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fc12 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e004      	b.n	8002400 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80023f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x1b2>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e018      	b.n	800244c <HAL_ADC_ConfigChannel+0x1e4>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800242e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002432:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e004      	b.n	800244c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fbe1 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fbc5 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x222>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fbba 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	e01e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x260>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fbaf 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80024a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80024b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e004      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80024bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x278>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	e018      	b.n	8002512 <HAL_ADC_ConfigChannel+0x2aa>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80024f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80024fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e004      	b.n	8002512 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002508:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002512:	429a      	cmp	r2, r3
 8002514:	d106      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fb7e 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fb62 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x2e8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2102      	movs	r1, #2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fb57 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	e01e      	b.n	800258e <HAL_ADC_ConfigChannel+0x326>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fb4c 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800256e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002576:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e004      	b.n	800258c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002582:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x33e>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	e016      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x36c>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80025b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80025be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e004      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80025ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	2102      	movs	r1, #2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fb1d 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2103      	movs	r1, #3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fb01 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x3aa>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2103      	movs	r1, #3
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff faf6 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	e017      	b.n	8002642 <HAL_ADC_ConfigChannel+0x3da>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2103      	movs	r1, #3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff faeb 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800262a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800262c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800262e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_ADC_ConfigChannel+0x3f2>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	e011      	b.n	800267e <HAL_ADC_ConfigChannel+0x416>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800266a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800266c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002672:	2320      	movs	r3, #32
 8002674:	e003      	b.n	800267e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800267e:	429a      	cmp	r2, r3
 8002680:	d106      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	2103      	movs	r1, #3
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fac8 	bl	8001c20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fbf1 	bl	8001e7c <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 813d 	bne.w	800291c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f7ff fb72 	bl	8001d98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4aa2      	ldr	r2, [pc, #648]	@ (8002944 <HAL_ADC_ConfigChannel+0x6dc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	f040 812e 	bne.w	800291c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x480>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b09      	cmp	r3, #9
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e019      	b.n	800271c <HAL_ADC_ConfigChannel+0x4b4>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80026f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80026fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e003      	b.n	800270c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002704:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2b09      	cmp	r3, #9
 8002714:	bf94      	ite	ls
 8002716:	2301      	movls	r3, #1
 8002718:	2300      	movhi	r3, #0
 800271a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271c:	2b00      	cmp	r3, #0
 800271e:	d079      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_ADC_ConfigChannel+0x4d4>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	3301      	adds	r3, #1
 8002734:	069b      	lsls	r3, r3, #26
 8002736:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800273a:	e015      	b.n	8002768 <HAL_ADC_ConfigChannel+0x500>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800274a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800274c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800274e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e003      	b.n	8002760 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3301      	adds	r3, #1
 8002762:	069b      	lsls	r3, r3, #26
 8002764:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x520>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0e9b      	lsrs	r3, r3, #26
 800277a:	3301      	adds	r3, #1
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	e017      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x550>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002798:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800279a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80027a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	ea42 0103 	orr.w	r1, r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_ADC_ConfigChannel+0x576>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	3301      	adds	r3, #1
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	e018      	b.n	8002810 <HAL_ADC_ConfigChannel+0x5a8>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80027ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80027f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80027fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002810:	430b      	orrs	r3, r1
 8002812:	e07e      	b.n	8002912 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x5c8>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	069b      	lsls	r3, r3, #26
 800282a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282e:	e015      	b.n	800285c <HAL_ADC_ConfigChannel+0x5f4>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800283e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002840:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002848:	2320      	movs	r3, #32
 800284a:	e003      	b.n	8002854 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	069b      	lsls	r3, r3, #26
 8002858:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_ADC_ConfigChannel+0x614>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	3301      	adds	r3, #1
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	e017      	b.n	80028ac <HAL_ADC_ConfigChannel+0x644>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	61fb      	str	r3, [r7, #28]
  return result;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e003      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x670>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	3301      	adds	r3, #1
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	3b1e      	subs	r3, #30
 80028d0:	051b      	lsls	r3, r3, #20
 80028d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028d6:	e01b      	b.n	8002910 <HAL_ADC_ConfigChannel+0x6a8>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	613b      	str	r3, [r7, #16]
  return result;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	3b1e      	subs	r3, #30
 800290a:	051b      	lsls	r3, r3, #20
 800290c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002910:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002916:	4619      	mov	r1, r3
 8002918:	f7ff fa12 	bl	8001d40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_ADC_ConfigChannel+0x6e0>)
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80be 	beq.w	8002aa6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002932:	d004      	beq.n	800293e <HAL_ADC_ConfigChannel+0x6d6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a04      	ldr	r2, [pc, #16]	@ (800294c <HAL_ADC_ConfigChannel+0x6e4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10a      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x6ec>
 800293e:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <HAL_ADC_ConfigChannel+0x6e8>)
 8002940:	e009      	b.n	8002956 <HAL_ADC_ConfigChannel+0x6ee>
 8002942:	bf00      	nop
 8002944:	407f0000 	.word	0x407f0000
 8002948:	80080000 	.word	0x80080000
 800294c:	50000100 	.word	0x50000100
 8002950:	50000300 	.word	0x50000300
 8002954:	4b59      	ldr	r3, [pc, #356]	@ (8002abc <HAL_ADC_ConfigChannel+0x854>)
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f91a 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 800295c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a56      	ldr	r2, [pc, #344]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x858>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x70c>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a55      	ldr	r2, [pc, #340]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x85c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d13a      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d134      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002988:	d005      	beq.n	8002996 <HAL_ADC_ConfigChannel+0x72e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x860>)
 8002990:	4293      	cmp	r3, r2
 8002992:	f040 8085 	bne.w	8002aa0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800299e:	d004      	beq.n	80029aa <HAL_ADC_ConfigChannel+0x742>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a49      	ldr	r2, [pc, #292]	@ (8002acc <HAL_ADC_ConfigChannel+0x864>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x746>
 80029aa:	4a49      	ldr	r2, [pc, #292]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x868>)
 80029ac:	e000      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x748>
 80029ae:	4a43      	ldr	r2, [pc, #268]	@ (8002abc <HAL_ADC_ConfigChannel+0x854>)
 80029b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029b8:	4619      	mov	r1, r3
 80029ba:	4610      	mov	r0, r2
 80029bc:	f7ff f8d5 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c0:	4b44      	ldr	r3, [pc, #272]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x86c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	4a44      	ldr	r2, [pc, #272]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x870>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029da:	e002      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3b01      	subs	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f9      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029e8:	e05a      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a3b      	ldr	r2, [pc, #236]	@ (8002adc <HAL_ADC_ConfigChannel+0x874>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d125      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11f      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a31      	ldr	r2, [pc, #196]	@ (8002acc <HAL_ADC_ConfigChannel+0x864>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d104      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x7ac>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a34      	ldr	r2, [pc, #208]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x878>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d047      	beq.n	8002aa4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a1c:	d004      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x7c0>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2a      	ldr	r2, [pc, #168]	@ (8002acc <HAL_ADC_ConfigChannel+0x864>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x7c4>
 8002a28:	4a29      	ldr	r2, [pc, #164]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x868>)
 8002a2a:	e000      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x7c6>
 8002a2c:	4a23      	ldr	r2, [pc, #140]	@ (8002abc <HAL_ADC_ConfigChannel+0x854>)
 8002a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f7ff f896 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a3e:	e031      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a27      	ldr	r2, [pc, #156]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x87c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d12d      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d127      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002acc <HAL_ADC_ConfigChannel+0x864>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a68:	d004      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x80c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a17      	ldr	r2, [pc, #92]	@ (8002acc <HAL_ADC_ConfigChannel+0x864>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x810>
 8002a74:	4a16      	ldr	r2, [pc, #88]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x868>)
 8002a76:	e000      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x812>
 8002a78:	4a10      	ldr	r2, [pc, #64]	@ (8002abc <HAL_ADC_ConfigChannel+0x854>)
 8002a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7ff f870 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 8002a8a:	e00c      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a9e:	e002      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aa0:	bf00      	nop
 8002aa2:	e000      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	37d8      	adds	r7, #216	@ 0xd8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	50000700 	.word	0x50000700
 8002ac0:	c3210000 	.word	0xc3210000
 8002ac4:	90c00010 	.word	0x90c00010
 8002ac8:	50000600 	.word	0x50000600
 8002acc:	50000100 	.word	0x50000100
 8002ad0:	50000300 	.word	0x50000300
 8002ad4:	20000008 	.word	0x20000008
 8002ad8:	053e2d63 	.word	0x053e2d63
 8002adc:	c7520000 	.word	0xc7520000
 8002ae0:	50000500 	.word	0x50000500
 8002ae4:	cb840000 	.word	0xcb840000

08002ae8 <LL_ADC_IsEnabled>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <LL_ADC_IsEnabled+0x18>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <LL_ADC_IsEnabled+0x1a>
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d101      	bne.n	8002b26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b0a1      	sub	sp, #132	@ 0x84
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0e7      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b6a:	d102      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	e009      	b.n	8002b86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6e      	ldr	r2, [pc, #440]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d102      	bne.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	e001      	b.n	8002b86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0be      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ffb1 	bl	8002b0e <LL_ADC_REG_IsConversionOngoing>
 8002bac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ffab 	bl	8002b0e <LL_ADC_REG_IsConversionOngoing>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 80a0 	bne.w	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 809c 	bne.w	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd0:	d004      	beq.n	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a55      	ldr	r2, [pc, #340]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bdc:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002bde:	e000      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002be0:	4b56      	ldr	r3, [pc, #344]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002be2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d04b      	beq.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bfe:	035b      	lsls	r3, r3, #13
 8002c00:	430b      	orrs	r3, r1
 8002c02:	431a      	orrs	r2, r3
 8002c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c10:	d004      	beq.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a45      	ldr	r2, [pc, #276]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10f      	bne.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c20:	f7ff ff62 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c24:	4604      	mov	r4, r0
 8002c26:	4841      	ldr	r0, [pc, #260]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c28:	f7ff ff5e 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4323      	orrs	r3, r4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e012      	b.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c3c:	483c      	ldr	r0, [pc, #240]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c3e:	f7ff ff53 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c42:	4604      	mov	r4, r0
 8002c44:	483b      	ldr	r0, [pc, #236]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c46:	f7ff ff4f 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	431c      	orrs	r4, r3
 8002c4e:	483c      	ldr	r0, [pc, #240]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c50:	f7ff ff4a 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4323      	orrs	r3, r4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d056      	beq.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c6e:	f023 030f 	bic.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	6811      	ldr	r1, [r2, #0]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	6892      	ldr	r2, [r2, #8]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c82:	e047      	b.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c98:	d004      	beq.n	8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a23      	ldr	r2, [pc, #140]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10f      	bne.n	8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ca4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ca8:	f7ff ff1e 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cac:	4604      	mov	r4, r0
 8002cae:	481f      	ldr	r0, [pc, #124]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cb0:	f7ff ff1a 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e012      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002cc4:	481a      	ldr	r0, [pc, #104]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cc6:	f7ff ff0f 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4819      	ldr	r0, [pc, #100]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002cce:	f7ff ff0b 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	431c      	orrs	r4, r3
 8002cd6:	481a      	ldr	r0, [pc, #104]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cd8:	f7ff ff06 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4323      	orrs	r3, r4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cf6:	f023 030f 	bic.w	r3, r3, #15
 8002cfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002cfc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfe:	e009      	b.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d12:	e000      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3784      	adds	r7, #132	@ 0x84
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	50000100 	.word	0x50000100
 8002d30:	50000400 	.word	0x50000400
 8002d34:	50000500 	.word	0x50000500
 8002d38:	50000300 	.word	0x50000300
 8002d3c:	50000700 	.word	0x50000700
 8002d40:	50000600 	.word	0x50000600

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	@ (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	@ (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	@ (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	@ (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	@ 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	f7ff ff8e 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff29 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f08:	f7ff ff40 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7ff ff90 	bl	8002e38 <NVIC_EncodePriority>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5f 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff33 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ffa4 	bl	8002ea0 <SysTick_Config>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e08d      	b.n	8003092 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b47      	ldr	r3, [pc, #284]	@ (800309c <HAL_DMA_Init+0x138>)
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d80f      	bhi.n	8002fa2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b45      	ldr	r3, [pc, #276]	@ (80030a0 <HAL_DMA_Init+0x13c>)
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a45      	ldr	r2, [pc, #276]	@ (80030a4 <HAL_DMA_Init+0x140>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	009a      	lsls	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a42      	ldr	r2, [pc, #264]	@ (80030a8 <HAL_DMA_Init+0x144>)
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fa0:	e00e      	b.n	8002fc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <HAL_DMA_Init+0x148>)
 8002faa:	4413      	add	r3, r2
 8002fac:	4a3d      	ldr	r2, [pc, #244]	@ (80030a4 <HAL_DMA_Init+0x140>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	009a      	lsls	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80030b0 <HAL_DMA_Init+0x14c>)
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9be 	bl	8003394 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003020:	d102      	bne.n	8003028 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800303c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_DMA_Init+0x104>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d80c      	bhi.n	8003068 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f9de 	bl	8003410 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	e008      	b.n	800307a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40020407 	.word	0x40020407
 80030a0:	bffdfff8 	.word	0xbffdfff8
 80030a4:	cccccccd 	.word	0xcccccccd
 80030a8:	40020000 	.word	0x40020000
 80030ac:	bffdfbf8 	.word	0xbffdfbf8
 80030b0:	40020400 	.word	0x40020400

080030b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d005      	beq.n	80030d8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2204      	movs	r2, #4
 80030d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	e037      	b.n	8003148 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 020e 	bic.w	r2, r2, #14
 80030e6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030f6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	2101      	movs	r1, #1
 8003116:	fa01 f202 	lsl.w	r2, r1, r2
 800311a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003124:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800313c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003146:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d00d      	beq.n	800319a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2204      	movs	r2, #4
 8003182:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e047      	b.n	800322a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 020e 	bic.w	r2, r2, #14
 80031a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f003 021f 	and.w	r2, r3, #31
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031e6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00c      	beq.n	800320a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003208:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
    }
  }
  return status;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2204      	movs	r2, #4
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d026      	beq.n	80032ae <HAL_DMA_IRQHandler+0x7a>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d021      	beq.n	80032ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0204 	bic.w	r2, r2, #4
 8003286:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	2104      	movs	r1, #4
 8003296:	fa01 f202 	lsl.w	r2, r1, r2
 800329a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d071      	beq.n	8003388 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032ac:	e06c      	b.n	8003388 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2202      	movs	r2, #2
 80032b8:	409a      	lsls	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02e      	beq.n	8003320 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d029      	beq.n	8003320 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 020a 	bic.w	r2, r2, #10
 80032e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	f003 021f 	and.w	r2, r3, #31
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	2102      	movs	r1, #2
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d038      	beq.n	8003388 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800331e:	e033      	b.n	8003388 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2208      	movs	r2, #8
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02a      	beq.n	800338a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d025      	beq.n	800338a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 020e 	bic.w	r2, r2, #14
 800334c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003388:	bf00      	nop
 800338a:	bf00      	nop
}
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d802      	bhi.n	80033ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033a8:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e001      	b.n	80033b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80033ae:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3b08      	subs	r3, #8
 80033be:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	009a      	lsls	r2, r3, #2
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4413      	add	r3, r2
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0b      	ldr	r2, [pc, #44]	@ (800340c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80033de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40020407 	.word	0x40020407
 8003400:	40020800 	.word	0x40020800
 8003404:	40020820 	.word	0x40020820
 8003408:	cccccccd 	.word	0xcccccccd
 800340c:	40020880 	.word	0x40020880

08003410 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	461a      	mov	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a08      	ldr	r2, [pc, #32]	@ (8003454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003432:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3b01      	subs	r3, #1
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2201      	movs	r2, #1
 800343e:	409a      	lsls	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	1000823f 	.word	0x1000823f
 8003454:	40020940 	.word	0x40020940

08003458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003466:	e15a      	b.n	800371e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	4013      	ands	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 814c 	beq.w	8003718 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d005      	beq.n	8003498 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003494:	2b02      	cmp	r3, #2
 8003496:	d130      	bne.n	80034fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ce:	2201      	movs	r2, #1
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	f003 0201 	and.w	r2, r3, #1
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b03      	cmp	r3, #3
 8003504:	d017      	beq.n	8003536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	2203      	movs	r2, #3
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d123      	bne.n	800358a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	08da      	lsrs	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3208      	adds	r2, #8
 800354a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	220f      	movs	r2, #15
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	6939      	ldr	r1, [r7, #16]
 8003586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	2203      	movs	r2, #3
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0203 	and.w	r2, r3, #3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80a6 	beq.w	8003718 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035cc:	4b5b      	ldr	r3, [pc, #364]	@ (800373c <HAL_GPIO_Init+0x2e4>)
 80035ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d0:	4a5a      	ldr	r2, [pc, #360]	@ (800373c <HAL_GPIO_Init+0x2e4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80035d8:	4b58      	ldr	r3, [pc, #352]	@ (800373c <HAL_GPIO_Init+0x2e4>)
 80035da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035e4:	4a56      	ldr	r2, [pc, #344]	@ (8003740 <HAL_GPIO_Init+0x2e8>)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	3302      	adds	r3, #2
 80035ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	220f      	movs	r2, #15
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800360e:	d01f      	beq.n	8003650 <HAL_GPIO_Init+0x1f8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a4c      	ldr	r2, [pc, #304]	@ (8003744 <HAL_GPIO_Init+0x2ec>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d019      	beq.n	800364c <HAL_GPIO_Init+0x1f4>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a4b      	ldr	r2, [pc, #300]	@ (8003748 <HAL_GPIO_Init+0x2f0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <HAL_GPIO_Init+0x1f0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a4a      	ldr	r2, [pc, #296]	@ (800374c <HAL_GPIO_Init+0x2f4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00d      	beq.n	8003644 <HAL_GPIO_Init+0x1ec>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a49      	ldr	r2, [pc, #292]	@ (8003750 <HAL_GPIO_Init+0x2f8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d007      	beq.n	8003640 <HAL_GPIO_Init+0x1e8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a48      	ldr	r2, [pc, #288]	@ (8003754 <HAL_GPIO_Init+0x2fc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_GPIO_Init+0x1e4>
 8003638:	2305      	movs	r3, #5
 800363a:	e00a      	b.n	8003652 <HAL_GPIO_Init+0x1fa>
 800363c:	2306      	movs	r3, #6
 800363e:	e008      	b.n	8003652 <HAL_GPIO_Init+0x1fa>
 8003640:	2304      	movs	r3, #4
 8003642:	e006      	b.n	8003652 <HAL_GPIO_Init+0x1fa>
 8003644:	2303      	movs	r3, #3
 8003646:	e004      	b.n	8003652 <HAL_GPIO_Init+0x1fa>
 8003648:	2302      	movs	r3, #2
 800364a:	e002      	b.n	8003652 <HAL_GPIO_Init+0x1fa>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_GPIO_Init+0x1fa>
 8003650:	2300      	movs	r3, #0
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	f002 0203 	and.w	r2, r2, #3
 8003658:	0092      	lsls	r2, r2, #2
 800365a:	4093      	lsls	r3, r2
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003662:	4937      	ldr	r1, [pc, #220]	@ (8003740 <HAL_GPIO_Init+0x2e8>)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	3302      	adds	r3, #2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003670:	4b39      	ldr	r3, [pc, #228]	@ (8003758 <HAL_GPIO_Init+0x300>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003694:	4a30      	ldr	r2, [pc, #192]	@ (8003758 <HAL_GPIO_Init+0x300>)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800369a:	4b2f      	ldr	r3, [pc, #188]	@ (8003758 <HAL_GPIO_Init+0x300>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036be:	4a26      	ldr	r2, [pc, #152]	@ (8003758 <HAL_GPIO_Init+0x300>)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036c4:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <HAL_GPIO_Init+0x300>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4013      	ands	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <HAL_GPIO_Init+0x300>)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <HAL_GPIO_Init+0x300>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003712:	4a11      	ldr	r2, [pc, #68]	@ (8003758 <HAL_GPIO_Init+0x300>)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	3301      	adds	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	f47f ae9d 	bne.w	8003468 <HAL_GPIO_Init+0x10>
  }
}
 800372e:	bf00      	nop
 8003730:	bf00      	nop
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40021000 	.word	0x40021000
 8003740:	40010000 	.word	0x40010000
 8003744:	48000400 	.word	0x48000400
 8003748:	48000800 	.word	0x48000800
 800374c:	48000c00 	.word	0x48000c00
 8003750:	48001000 	.word	0x48001000
 8003754:	48001400 	.word	0x48001400
 8003758:	40010400 	.word	0x40010400

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800376c:	787b      	ldrb	r3, [r7, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003778:	e002      	b.n	8003780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003796:	4b08      	ldr	r3, [pc, #32]	@ (80037b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037a2:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f806 	bl	80037bc <HAL_GPIO_EXTI_Callback>
  }
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40010400 	.word	0x40010400

080037bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d141      	bne.n	8003866 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ee:	d131      	bne.n	8003854 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037f0:	4b47      	ldr	r3, [pc, #284]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f6:	4a46      	ldr	r2, [pc, #280]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003800:	4b43      	ldr	r3, [pc, #268]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003808:	4a41      	ldr	r2, [pc, #260]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800380e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003810:	4b40      	ldr	r3, [pc, #256]	@ (8003914 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2232      	movs	r2, #50	@ 0x32
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	4a3f      	ldr	r2, [pc, #252]	@ (8003918 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	0c9b      	lsrs	r3, r3, #18
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003826:	e002      	b.n	800382e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3b01      	subs	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800382e:	4b38      	ldr	r3, [pc, #224]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383a:	d102      	bne.n	8003842 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f2      	bne.n	8003828 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003842:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384e:	d158      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e057      	b.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003854:	4b2e      	ldr	r3, [pc, #184]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800385a:	4a2d      	ldr	r2, [pc, #180]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003860:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003864:	e04d      	b.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386c:	d141      	bne.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800386e:	4b28      	ldr	r3, [pc, #160]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387a:	d131      	bne.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800387c:	4b24      	ldr	r3, [pc, #144]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003882:	4a23      	ldr	r2, [pc, #140]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003888:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800388c:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003894:	4a1e      	ldr	r2, [pc, #120]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800389a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800389c:	4b1d      	ldr	r3, [pc, #116]	@ (8003914 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2232      	movs	r2, #50	@ 0x32
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003918 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	0c9b      	lsrs	r3, r3, #18
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038b2:	e002      	b.n	80038ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ba:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d102      	bne.n	80038ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f2      	bne.n	80038b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038da:	d112      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e011      	b.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038f0:	e007      	b.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038f2:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038fa:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003900:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40007000 	.word	0x40007000
 8003914:	20000008 	.word	0x20000008
 8003918:	431bde83 	.word	0x431bde83

0800391c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800392a:	6093      	str	r3, [r2, #8]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40007000 	.word	0x40007000

0800393c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e2fe      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d075      	beq.n	8003a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395a:	4b97      	ldr	r3, [pc, #604]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003964:	4b94      	ldr	r3, [pc, #592]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d102      	bne.n	800397a <HAL_RCC_OscConfig+0x3e>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d002      	beq.n	8003980 <HAL_RCC_OscConfig+0x44>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d10b      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	4b8d      	ldr	r3, [pc, #564]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05b      	beq.n	8003a44 <HAL_RCC_OscConfig+0x108>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d157      	bne.n	8003a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e2d9      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x74>
 80039a2:	4b85      	ldr	r3, [pc, #532]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a84      	ldr	r2, [pc, #528]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e01d      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x98>
 80039ba:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7e      	ldr	r2, [pc, #504]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a7b      	ldr	r2, [pc, #492]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039d4:	4b78      	ldr	r3, [pc, #480]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a77      	ldr	r2, [pc, #476]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b75      	ldr	r3, [pc, #468]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a74      	ldr	r2, [pc, #464]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fe f878 	bl	8001ae8 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe f874 	bl	8001ae8 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	@ 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e29e      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xc0>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe f864 	bl	8001ae8 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe f860 	bl	8001ae8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e28a      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a36:	4b60      	ldr	r3, [pc, #384]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0xe8>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d075      	beq.n	8003b3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a52:	4b59      	ldr	r3, [pc, #356]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a5c:	4b56      	ldr	r3, [pc, #344]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d102      	bne.n	8003a72 <HAL_RCC_OscConfig+0x136>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d002      	beq.n	8003a78 <HAL_RCC_OscConfig+0x13c>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11f      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a78:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_OscConfig+0x154>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e25d      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b49      	ldr	r3, [pc, #292]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	4946      	ldr	r1, [pc, #280]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aa4:	4b45      	ldr	r3, [pc, #276]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd ffd1 	bl	8001a50 <HAL_InitTick>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d043      	beq.n	8003b3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e249      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d023      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe f80c 	bl	8001ae8 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fe f808 	bl	8001ae8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e232      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae6:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b31      	ldr	r3, [pc, #196]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	492d      	ldr	r1, [pc, #180]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
 8003b06:	e01a      	b.n	8003b3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b08:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd ffe8 	bl	8001ae8 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fd ffe4 	bl	8001ae8 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e20e      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2e:	4b22      	ldr	r3, [pc, #136]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d041      	beq.n	8003bce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b58:	4a17      	ldr	r2, [pc, #92]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fd ffc1 	bl	8001ae8 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fd ffbd 	bl	8001ae8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1e7      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ef      	beq.n	8003b6a <HAL_RCC_OscConfig+0x22e>
 8003b8a:	e020      	b.n	8003bce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b92:	4a09      	ldr	r2, [pc, #36]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fd ffa4 	bl	8001ae8 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba2:	e00d      	b.n	8003bc0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba4:	f7fd ffa0 	bl	8001ae8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d906      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e1ca      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1ea      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80a6 	beq.w	8003d28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003be0:	4b84      	ldr	r3, [pc, #528]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2b4>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x2b6>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c02:	4b7c      	ldr	r3, [pc, #496]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c12:	4b79      	ldr	r3, [pc, #484]	@ (8003df8 <HAL_RCC_OscConfig+0x4bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d118      	bne.n	8003c50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1e:	4b76      	ldr	r3, [pc, #472]	@ (8003df8 <HAL_RCC_OscConfig+0x4bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a75      	ldr	r2, [pc, #468]	@ (8003df8 <HAL_RCC_OscConfig+0x4bc>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd ff5d 	bl	8001ae8 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fd ff59 	bl	8001ae8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e183      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c44:	4b6c      	ldr	r3, [pc, #432]	@ (8003df8 <HAL_RCC_OscConfig+0x4bc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d108      	bne.n	8003c6a <HAL_RCC_OscConfig+0x32e>
 8003c58:	4b66      	ldr	r3, [pc, #408]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	4a65      	ldr	r2, [pc, #404]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c68:	e024      	b.n	8003cb4 <HAL_RCC_OscConfig+0x378>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d110      	bne.n	8003c94 <HAL_RCC_OscConfig+0x358>
 8003c72:	4b60      	ldr	r3, [pc, #384]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c78:	4a5e      	ldr	r2, [pc, #376]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c7a:	f043 0304 	orr.w	r3, r3, #4
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c82:	4b5c      	ldr	r3, [pc, #368]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c88:	4a5a      	ldr	r2, [pc, #360]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c92:	e00f      	b.n	8003cb4 <HAL_RCC_OscConfig+0x378>
 8003c94:	4b57      	ldr	r3, [pc, #348]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	4a56      	ldr	r2, [pc, #344]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ca4:	4b53      	ldr	r3, [pc, #332]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	4a52      	ldr	r2, [pc, #328]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d016      	beq.n	8003cea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fd ff14 	bl	8001ae8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fd ff10 	bl	8001ae8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e138      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cda:	4b46      	ldr	r3, [pc, #280]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ed      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x388>
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fd fefd 	bl	8001ae8 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fd fef9 	bl	8001ae8 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e121      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d08:	4b3a      	ldr	r3, [pc, #232]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ed      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d16:	7ffb      	ldrb	r3, [r7, #31]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b35      	ldr	r3, [pc, #212]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d20:	4a34      	ldr	r2, [pc, #208]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d03c      	beq.n	8003dae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d42:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fd fecc 	bl	8001ae8 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d54:	f7fd fec8 	bl	8001ae8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e0f2      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d66:	4b23      	ldr	r3, [pc, #140]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ef      	beq.n	8003d54 <HAL_RCC_OscConfig+0x418>
 8003d74:	e01b      	b.n	8003dae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d76:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd feaf 	bl	8001ae8 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8e:	f7fd feab 	bl	8001ae8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e0d5      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003da0:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ef      	bne.n	8003d8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80c9 	beq.w	8003f4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db8:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	f000 8083 	beq.w	8003ecc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d15e      	bne.n	8003e8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dce:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <HAL_RCC_OscConfig+0x4b8>)
 8003dd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd fe85 	bl	8001ae8 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de0:	e00c      	b.n	8003dfc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de2:	f7fd fe81 	bl	8001ae8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d905      	bls.n	8003dfc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0ab      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dfc:	4b55      	ldr	r3, [pc, #340]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ec      	bne.n	8003de2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e08:	4b52      	ldr	r3, [pc, #328]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	4b52      	ldr	r3, [pc, #328]	@ (8003f58 <HAL_RCC_OscConfig+0x61c>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6a11      	ldr	r1, [r2, #32]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	4311      	orrs	r1, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e22:	0212      	lsls	r2, r2, #8
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e2a:	0852      	lsrs	r2, r2, #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	0552      	lsls	r2, r2, #21
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e36:	0852      	lsrs	r2, r2, #1
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	0652      	lsls	r2, r2, #25
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e42:	06d2      	lsls	r2, r2, #27
 8003e44:	430a      	orrs	r2, r1
 8003e46:	4943      	ldr	r1, [pc, #268]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b41      	ldr	r3, [pc, #260]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a40      	ldr	r2, [pc, #256]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e58:	4b3e      	ldr	r3, [pc, #248]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd fe40 	bl	8001ae8 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fd fe3c 	bl	8001ae8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e066      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7e:	4b35      	ldr	r3, [pc, #212]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x530>
 8003e8a:	e05e      	b.n	8003f4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b31      	ldr	r3, [pc, #196]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a30      	ldr	r2, [pc, #192]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fd fe26 	bl	8001ae8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fd fe22 	bl	8001ae8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e04c      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb2:	4b28      	ldr	r3, [pc, #160]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ebe:	4b25      	ldr	r3, [pc, #148]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	4924      	ldr	r1, [pc, #144]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003ec4:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <HAL_RCC_OscConfig+0x620>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	60cb      	str	r3, [r1, #12]
 8003eca:	e03e      	b.n	8003f4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e039      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f54 <HAL_RCC_OscConfig+0x618>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0203 	and.w	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d12c      	bne.n	8003f46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d123      	bne.n	8003f46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d11b      	bne.n	8003f46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d113      	bne.n	8003f46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	019f800c 	.word	0x019f800c
 8003f5c:	feeefffc 	.word	0xfeeefffc

08003f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e11e      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f78:	4b91      	ldr	r3, [pc, #580]	@ (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d910      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b8e      	ldr	r3, [pc, #568]	@ (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 020f 	bic.w	r2, r3, #15
 8003f8e:	498c      	ldr	r1, [pc, #560]	@ (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b8a      	ldr	r3, [pc, #552]	@ (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e106      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d073      	beq.n	800409c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d129      	bne.n	8004010 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fbc:	4b81      	ldr	r3, [pc, #516]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0f4      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fcc:	f000 f99e 	bl	800430c <RCC_GetSysClockFreqFromPLLSource>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4a7c      	ldr	r2, [pc, #496]	@ (80041c8 <HAL_RCC_ClockConfig+0x268>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d93f      	bls.n	800405a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fda:	4b7a      	ldr	r3, [pc, #488]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d033      	beq.n	800405a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d12f      	bne.n	800405a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ffa:	4b72      	ldr	r3, [pc, #456]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004002:	4a70      	ldr	r2, [pc, #448]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004008:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800400a:	2380      	movs	r3, #128	@ 0x80
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e024      	b.n	800405a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d107      	bne.n	8004028 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004018:	4b6a      	ldr	r3, [pc, #424]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0c6      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004028:	4b66      	ldr	r3, [pc, #408]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0be      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004038:	f000 f8ce 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800403c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4a61      	ldr	r2, [pc, #388]	@ (80041c8 <HAL_RCC_ClockConfig+0x268>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d909      	bls.n	800405a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004046:	4b5f      	ldr	r3, [pc, #380]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800404e:	4a5d      	ldr	r2, [pc, #372]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004054:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004056:	2380      	movs	r3, #128	@ 0x80
 8004058:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800405a:	4b5a      	ldr	r3, [pc, #360]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4957      	ldr	r1, [pc, #348]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fd fd3c 	bl	8001ae8 <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	e00a      	b.n	800408a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004074:	f7fd fd38 	bl	8001ae8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e095      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b4e      	ldr	r3, [pc, #312]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 020c 	and.w	r2, r3, #12
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1eb      	bne.n	8004074 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d023      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b4:	4b43      	ldr	r3, [pc, #268]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a42      	ldr	r2, [pc, #264]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040cc:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040d4:	4a3b      	ldr	r2, [pc, #236]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b39      	ldr	r3, [pc, #228]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4936      	ldr	r1, [pc, #216]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
 80040ee:	e008      	b.n	8004102 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b80      	cmp	r3, #128	@ 0x80
 80040f4:	d105      	bne.n	8004102 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040f6:	4b33      	ldr	r3, [pc, #204]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4a32      	ldr	r2, [pc, #200]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004100:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004102:	4b2f      	ldr	r3, [pc, #188]	@ (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d21d      	bcs.n	800414c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004110:	4b2b      	ldr	r3, [pc, #172]	@ (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 020f 	bic.w	r2, r3, #15
 8004118:	4929      	ldr	r1, [pc, #164]	@ (80041c0 <HAL_RCC_ClockConfig+0x260>)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	4313      	orrs	r3, r2
 800411e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004120:	f7fd fce2 	bl	8001ae8 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fd fcde 	bl	8001ae8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e03b      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d1ed      	bne.n	8004128 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004158:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4917      	ldr	r1, [pc, #92]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004176:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	490f      	ldr	r1, [pc, #60]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800418a:	f000 f825 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800418e:	4602      	mov	r2, r0
 8004190:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	490c      	ldr	r1, [pc, #48]	@ (80041cc <HAL_RCC_ClockConfig+0x26c>)
 800419c:	5ccb      	ldrb	r3, [r1, r3]
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	fa22 f303 	lsr.w	r3, r2, r3
 80041a6:	4a0a      	ldr	r2, [pc, #40]	@ (80041d0 <HAL_RCC_ClockConfig+0x270>)
 80041a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041aa:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <HAL_RCC_ClockConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd fc4e 	bl	8001a50 <HAL_InitTick>
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40022000 	.word	0x40022000
 80041c4:	40021000 	.word	0x40021000
 80041c8:	04c4b400 	.word	0x04c4b400
 80041cc:	08008150 	.word	0x08008150
 80041d0:	20000008 	.word	0x20000008
 80041d4:	2000000c 	.word	0x2000000c

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041de:	4b2c      	ldr	r3, [pc, #176]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d102      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004294 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e047      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041f0:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d102      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041fc:	4b26      	ldr	r3, [pc, #152]	@ (8004298 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e03e      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004202:	4b23      	ldr	r3, [pc, #140]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d136      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800420e:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004218:	4b1d      	ldr	r3, [pc, #116]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3301      	adds	r3, #1
 8004224:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d10c      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800422c:	4a1a      	ldr	r2, [pc, #104]	@ (8004298 <HAL_RCC_GetSysClockFreq+0xc0>)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	4a16      	ldr	r2, [pc, #88]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004236:	68d2      	ldr	r2, [r2, #12]
 8004238:	0a12      	lsrs	r2, r2, #8
 800423a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	617b      	str	r3, [r7, #20]
      break;
 8004244:	e00c      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004246:	4a13      	ldr	r2, [pc, #76]	@ (8004294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004250:	68d2      	ldr	r2, [r2, #12]
 8004252:	0a12      	lsrs	r2, r2, #8
 8004254:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
      break;
 800425e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004260:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0e5b      	lsrs	r3, r3, #25
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	3301      	adds	r3, #1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e001      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004280:	693b      	ldr	r3, [r7, #16]
}
 8004282:	4618      	mov	r0, r3
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	00f42400 	.word	0x00f42400
 8004298:	016e3600 	.word	0x016e3600

0800429c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b03      	ldr	r3, [pc, #12]	@ (80042b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000008 	.word	0x20000008

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042b8:	f7ff fff0 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4904      	ldr	r1, [pc, #16]	@ (80042dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	08008160 	.word	0x08008160

080042e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042e4:	f7ff ffda 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0adb      	lsrs	r3, r3, #11
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4904      	ldr	r1, [pc, #16]	@ (8004308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	08008160 	.word	0x08008160

0800430c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004312:	4b1e      	ldr	r3, [pc, #120]	@ (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800431c:	4b1b      	ldr	r3, [pc, #108]	@ (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d10c      	bne.n	800434a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004330:	4a17      	ldr	r2, [pc, #92]	@ (8004390 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	4a14      	ldr	r2, [pc, #80]	@ (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800433a:	68d2      	ldr	r2, [r2, #12]
 800433c:	0a12      	lsrs	r2, r2, #8
 800433e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	617b      	str	r3, [r7, #20]
    break;
 8004348:	e00c      	b.n	8004364 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800434a:	4a12      	ldr	r2, [pc, #72]	@ (8004394 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	4a0e      	ldr	r2, [pc, #56]	@ (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004354:	68d2      	ldr	r2, [r2, #12]
 8004356:	0a12      	lsrs	r2, r2, #8
 8004358:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
    break;
 8004362:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004364:	4b09      	ldr	r3, [pc, #36]	@ (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	0e5b      	lsrs	r3, r3, #25
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800437e:	687b      	ldr	r3, [r7, #4]
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40021000 	.word	0x40021000
 8004390:	016e3600 	.word	0x016e3600
 8004394:	00f42400 	.word	0x00f42400

08004398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043a0:	2300      	movs	r3, #0
 80043a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043a4:	2300      	movs	r3, #0
 80043a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8098 	beq.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ba:	4b43      	ldr	r3, [pc, #268]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	4b40      	ldr	r3, [pc, #256]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ca:	4a3f      	ldr	r2, [pc, #252]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d2:	4b3d      	ldr	r3, [pc, #244]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043de:	2301      	movs	r3, #1
 80043e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e2:	4b3a      	ldr	r3, [pc, #232]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a39      	ldr	r2, [pc, #228]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ee:	f7fd fb7b 	bl	8001ae8 <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f4:	e009      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f6:	f7fd fb77 	bl	8001ae8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d902      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	74fb      	strb	r3, [r7, #19]
        break;
 8004408:	e005      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800440a:	4b30      	ldr	r3, [pc, #192]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0ef      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d159      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800441c:	4b2a      	ldr	r3, [pc, #168]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004426:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01e      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	429a      	cmp	r2, r3
 8004436:	d019      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004438:	4b23      	ldr	r3, [pc, #140]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004444:	4b20      	ldr	r3, [pc, #128]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444a:	4a1f      	ldr	r2, [pc, #124]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004454:	4b1c      	ldr	r3, [pc, #112]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445a:	4a1b      	ldr	r2, [pc, #108]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004464:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fd fb37 	bl	8001ae8 <HAL_GetTick>
 800447a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447c:	e00b      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fd fb33 	bl	8001ae8 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448c:	4293      	cmp	r3, r2
 800448e:	d902      	bls.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	74fb      	strb	r3, [r7, #19]
            break;
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004496:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ec      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044aa:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	4903      	ldr	r1, [pc, #12]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	74bb      	strb	r3, [r7, #18]
 80044c6:	e005      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044d4:	7c7b      	ldrb	r3, [r7, #17]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044da:	4ba7      	ldr	r3, [pc, #668]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	4aa6      	ldr	r2, [pc, #664]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044f2:	4ba1      	ldr	r3, [pc, #644]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f8:	f023 0203 	bic.w	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	499d      	ldr	r1, [pc, #628]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004514:	4b98      	ldr	r3, [pc, #608]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451a:	f023 020c 	bic.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4995      	ldr	r1, [pc, #596]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004536:	4b90      	ldr	r3, [pc, #576]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	498c      	ldr	r1, [pc, #560]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004558:	4b87      	ldr	r3, [pc, #540]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	4984      	ldr	r1, [pc, #528]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800457a:	4b7f      	ldr	r3, [pc, #508]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004580:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	497b      	ldr	r1, [pc, #492]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800459c:	4b76      	ldr	r3, [pc, #472]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	4973      	ldr	r1, [pc, #460]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045be:	4b6e      	ldr	r3, [pc, #440]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	496a      	ldr	r1, [pc, #424]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e0:	4b65      	ldr	r3, [pc, #404]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	4962      	ldr	r1, [pc, #392]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004602:	4b5d      	ldr	r3, [pc, #372]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004608:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	4959      	ldr	r1, [pc, #356]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004624:	4b54      	ldr	r3, [pc, #336]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800462a:	f023 0203 	bic.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004632:	4951      	ldr	r1, [pc, #324]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004646:	4b4c      	ldr	r3, [pc, #304]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	4948      	ldr	r1, [pc, #288]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004668:	4b43      	ldr	r3, [pc, #268]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	4940      	ldr	r1, [pc, #256]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004686:	d105      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004688:	4b3b      	ldr	r3, [pc, #236]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a3a      	ldr	r2, [pc, #232]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004692:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046a0:	4b35      	ldr	r3, [pc, #212]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ae:	4932      	ldr	r1, [pc, #200]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046be:	d105      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d015      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046d8:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e6:	4924      	ldr	r1, [pc, #144]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046f6:	d105      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004702:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004710:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	4916      	ldr	r1, [pc, #88]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800472e:	d105      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004730:	4b11      	ldr	r3, [pc, #68]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a10      	ldr	r2, [pc, #64]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800473a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d019      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	4908      	ldr	r1, [pc, #32]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004766:	d109      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4a02      	ldr	r2, [pc, #8]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004772:	60d3      	str	r3, [r2, #12]
 8004774:	e002      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004788:	4b29      	ldr	r3, [pc, #164]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	4926      	ldr	r1, [pc, #152]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047a8:	4b21      	ldr	r3, [pc, #132]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a20      	ldr	r2, [pc, #128]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ce:	4918      	ldr	r1, [pc, #96]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047e0:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a12      	ldr	r2, [pc, #72]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004806:	490a      	ldr	r1, [pc, #40]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004812:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004816:	d105      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a04      	ldr	r2, [pc, #16]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800481e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004822:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004824:	7cbb      	ldrb	r3, [r7, #18]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000

08004834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e09d      	b.n	8004982 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	2b00      	cmp	r3, #0
 800484c:	d108      	bne.n	8004860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004856:	d009      	beq.n	800486c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	61da      	str	r2, [r3, #28]
 800485e:	e005      	b.n	800486c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fc fd72 	bl	8001370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048ac:	d902      	bls.n	80048b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e002      	b.n	80048ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048c2:	d007      	beq.n	80048d4 <HAL_SPI_Init+0xa0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048cc:	d002      	beq.n	80048d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004916:	ea42 0103 	orr.w	r1, r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	0c1b      	lsrs	r3, r3, #16
 8004930:	f003 0204 	and.w	r2, r3, #4
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004950:	ea42 0103 	orr.w	r1, r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004970:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b08a      	sub	sp, #40	@ 0x28
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004998:	2301      	movs	r3, #1
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800499c:	f7fd f8a4 	bl	8001ae8 <HAL_GetTick>
 80049a0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049a8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80049b0:	887b      	ldrh	r3, [r7, #2]
 80049b2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80049b4:	887b      	ldrh	r3, [r7, #2]
 80049b6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049b8:	7ffb      	ldrb	r3, [r7, #31]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d00c      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x4e>
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049c4:	d106      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x4a>
 80049ce:	7ffb      	ldrb	r3, [r7, #31]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d001      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	e1f3      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x60>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x60>
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e1e8      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x72>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e1e1      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x436>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d003      	beq.n	8004a18 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2205      	movs	r2, #5
 8004a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a5a:	d802      	bhi.n	8004a62 <HAL_SPI_TransmitReceive+0xd8>
 8004a5c:	8abb      	ldrh	r3, [r7, #20]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d908      	bls.n	8004a74 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a70:	605a      	str	r2, [r3, #4]
 8004a72:	e007      	b.n	8004a84 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a82:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8e:	2b40      	cmp	r3, #64	@ 0x40
 8004a90:	d007      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004aaa:	f240 8083 	bls.w	8004bb4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x132>
 8004ab6:	8afb      	ldrh	r3, [r7, #22]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d16f      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae0:	e05c      	b.n	8004b9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d11b      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x19e>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x19e>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d113      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	881a      	ldrh	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	1c9a      	adds	r2, r3, #2
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d11c      	bne.n	8004b70 <HAL_SPI_TransmitReceive+0x1e6>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	b292      	uxth	r2, r2
 8004b4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b54:	1c9a      	adds	r2, r3, #2
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b70:	f7fc ffba 	bl	8001ae8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d80d      	bhi.n	8004b9c <HAL_SPI_TransmitReceive+0x212>
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d009      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e111      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d19d      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x158>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d197      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x158>
 8004bb2:	e0e5      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_SPI_TransmitReceive+0x23a>
 8004bbc:	8afb      	ldrh	r3, [r7, #22]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	f040 80d1 	bne.w	8004d66 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d912      	bls.n	8004bf4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd2:	881a      	ldrh	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	1c9a      	adds	r2, r3, #2
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b02      	subs	r3, #2
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bf2:	e0b8      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	7812      	ldrb	r2, [r2, #0]
 8004c00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c1a:	e0a4      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d134      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x30a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02f      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x30a>
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d12c      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d912      	bls.n	8004c6a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	1c9a      	adds	r2, r3, #2
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b02      	subs	r3, #2
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c68:	e012      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d148      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x3aa>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d042      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d923      	bls.n	8004d02 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc4:	b292      	uxth	r2, r2
 8004cc6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	1c9a      	adds	r2, r3, #2
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b02      	subs	r3, #2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d81f      	bhi.n	8004d30 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	e016      	b.n	8004d30 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f103 020c 	add.w	r2, r3, #12
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	7812      	ldrb	r2, [r2, #0]
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d30:	2301      	movs	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d34:	f7fc fed8 	bl	8001ae8 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d803      	bhi.n	8004d4c <HAL_SPI_TransmitReceive+0x3c2>
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d102      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x3c8>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e02c      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f47f af55 	bne.w	8004c1c <HAL_SPI_TransmitReceive+0x292>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f47f af4e 	bne.w	8004c1c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f93d 	bl	8005004 <SPI_EndRxTxTransaction>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e00e      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
  }
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3728      	adds	r7, #40	@ 0x28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dd8:	f7fc fe86 	bl	8001ae8 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004de8:	f7fc fe7e 	bl	8001ae8 <HAL_GetTick>
 8004dec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dee:	4b39      	ldr	r3, [pc, #228]	@ (8004ed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	015b      	lsls	r3, r3, #5
 8004df4:	0d1b      	lsrs	r3, r3, #20
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	fb02 f303 	mul.w	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dfe:	e054      	b.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d050      	beq.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e08:	f7fc fe6e 	bl	8001ae8 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d902      	bls.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d13d      	bne.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e36:	d111      	bne.n	8004e5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e40:	d004      	beq.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4a:	d107      	bne.n	8004e5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e64:	d10f      	bne.n	8004e86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e017      	b.n	8004eca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	bf0c      	ite	eq
 8004eba:	2301      	moveq	r3, #1
 8004ebc:	2300      	movne	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d19b      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000008 	.word	0x20000008

08004ed8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	@ 0x28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eea:	f7fc fdfd 	bl	8001ae8 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004efa:	f7fc fdf5 	bl	8001ae8 <HAL_GetTick>
 8004efe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f08:	4b3d      	ldr	r3, [pc, #244]	@ (8005000 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00da      	lsls	r2, r3, #3
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	0d1b      	lsrs	r3, r3, #20
 8004f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f20:	e060      	b.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f28:	d107      	bne.n	8004f3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d050      	beq.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f42:	f7fc fdd1 	bl	8001ae8 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d902      	bls.n	8004f58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d13d      	bne.n	8004fd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f70:	d111      	bne.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f7a:	d004      	beq.n	8004f86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f84:	d107      	bne.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f9e:	d10f      	bne.n	8004fc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e010      	b.n	8004ff6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4013      	ands	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d196      	bne.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3728      	adds	r7, #40	@ 0x28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000008 	.word	0x20000008

08005004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff5b 	bl	8004ed8 <SPI_WaitFifoStateUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e027      	b.n	8005088 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2200      	movs	r2, #0
 8005040:	2180      	movs	r1, #128	@ 0x80
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff fec0 	bl	8004dc8 <SPI_WaitFlagStateUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005052:	f043 0220 	orr.w	r2, r3, #32
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e014      	b.n	8005088 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff ff34 	bl	8004ed8 <SPI_WaitFifoStateUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800507a:	f043 0220 	orr.w	r2, r3, #32
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e000      	b.n	8005088 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e054      	b.n	800514c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d111      	bne.n	80050d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f001 fb42 	bl	8006740 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a23      	ldr	r2, [pc, #140]	@ (8005154 <HAL_TIM_Base_Init+0xc4>)
 80050c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 feb1 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	08001431 	.word	0x08001431

08005158 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e054      	b.n	8005214 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d111      	bne.n	800519a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f001 fade 	bl	8006740 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a23      	ldr	r2, [pc, #140]	@ (800521c <HAL_TIM_OC_Init+0xc4>)
 8005190:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f000 fe4d 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	08005221 	.word	0x08005221

08005220 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e054      	b.n	80052f0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d111      	bne.n	8005276 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f001 fa70 	bl	8006740 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a23      	ldr	r2, [pc, #140]	@ (80052f8 <HAL_TIM_PWM_Init+0xc4>)
 800526c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f000 fddf 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	080052fd 	.word	0x080052fd

080052fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e04c      	b.n	80053be <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d111      	bne.n	8005354 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 fa01 	bl	8006740 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1f      	ldr	r2, [pc, #124]	@ (80053c8 <HAL_TIM_OnePulse_Init+0xb8>)
 800534a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f000 fd70 	bl	8005e4c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0208 	bic.w	r2, r2, #8
 800537a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6819      	ldr	r1, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	080053cd 	.word	0x080053cd

080053cc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0a2      	b.n	800553a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d111      	bne.n	8005424 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 f999 	bl	8006740 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a4a      	ldr	r2, [pc, #296]	@ (8005544 <HAL_TIM_Encoder_Init+0x164>)
 800541a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fcfe 	bl	8005e4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005478:	f023 0303 	bic.w	r3, r3, #3
 800547c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	4313      	orrs	r3, r2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005496:	f023 030c 	bic.w	r3, r3, #12
 800549a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	4313      	orrs	r3, r2
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	011a      	lsls	r2, r3, #4
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	031b      	lsls	r3, r3, #12
 80054c6:	4313      	orrs	r3, r2
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80054d4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80054dc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	4313      	orrs	r3, r2
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	08001539 	.word	0x08001539

08005548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d026      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d021      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0202 	mvn.w	r2, #2
 800557c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
 800559c:	e009      	b.n	80055b2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d026      	beq.n	8005610 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d021      	beq.n	8005610 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0204 	mvn.w	r2, #4
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
 80055f4:	e009      	b.n	800560a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d026      	beq.n	8005668 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d021      	beq.n	8005668 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0208 	mvn.w	r2, #8
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2204      	movs	r2, #4
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
 800564c:	e009      	b.n	8005662 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b00      	cmp	r3, #0
 8005670:	d026      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	d021      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0210 	mvn.w	r2, #16
 8005684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2208      	movs	r2, #8
 800568a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4798      	blx	r3
 80056a4:	e009      	b.n	80056ba <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0201 	mvn.w	r2, #1
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00e      	beq.n	800571a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800570e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00e      	beq.n	8005742 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00e      	beq.n	800576a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0220 	mvn.w	r2, #32
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00e      	beq.n	80057ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80057fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00e      	beq.n	8005832 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005856:	2302      	movs	r3, #2
 8005858:	e066      	b.n	8005928 <HAL_TIM_OC_ConfigChannel+0xec>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b14      	cmp	r3, #20
 8005866:	d857      	bhi.n	8005918 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005868:	a201      	add	r2, pc, #4	@ (adr r2, 8005870 <HAL_TIM_OC_ConfigChannel+0x34>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	080058c5 	.word	0x080058c5
 8005874:	08005919 	.word	0x08005919
 8005878:	08005919 	.word	0x08005919
 800587c:	08005919 	.word	0x08005919
 8005880:	080058d3 	.word	0x080058d3
 8005884:	08005919 	.word	0x08005919
 8005888:	08005919 	.word	0x08005919
 800588c:	08005919 	.word	0x08005919
 8005890:	080058e1 	.word	0x080058e1
 8005894:	08005919 	.word	0x08005919
 8005898:	08005919 	.word	0x08005919
 800589c:	08005919 	.word	0x08005919
 80058a0:	080058ef 	.word	0x080058ef
 80058a4:	08005919 	.word	0x08005919
 80058a8:	08005919 	.word	0x08005919
 80058ac:	08005919 	.word	0x08005919
 80058b0:	080058fd 	.word	0x080058fd
 80058b4:	08005919 	.word	0x08005919
 80058b8:	08005919 	.word	0x08005919
 80058bc:	08005919 	.word	0x08005919
 80058c0:	0800590b 	.word	0x0800590b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fb72 	bl	8005fb4 <TIM_OC1_SetConfig>
      break;
 80058d0:	e025      	b.n	800591e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fc05 	bl	80060e8 <TIM_OC2_SetConfig>
      break;
 80058de:	e01e      	b.n	800591e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fc92 	bl	8006210 <TIM_OC3_SetConfig>
      break;
 80058ec:	e017      	b.n	800591e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fd1d 	bl	8006334 <TIM_OC4_SetConfig>
      break;
 80058fa:	e010      	b.n	800591e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fdaa 	bl	800645c <TIM_OC5_SetConfig>
      break;
 8005908:	e009      	b.n	800591e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fe0d 	bl	8006530 <TIM_OC6_SetConfig>
      break;
 8005916:	e002      	b.n	800591e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
      break;
 800591c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005926:	7dfb      	ldrb	r3, [r7, #23]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800594a:	2302      	movs	r3, #2
 800594c:	e0ff      	b.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b14      	cmp	r3, #20
 800595a:	f200 80f0 	bhi.w	8005b3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800595e:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	080059b9 	.word	0x080059b9
 8005968:	08005b3f 	.word	0x08005b3f
 800596c:	08005b3f 	.word	0x08005b3f
 8005970:	08005b3f 	.word	0x08005b3f
 8005974:	080059f9 	.word	0x080059f9
 8005978:	08005b3f 	.word	0x08005b3f
 800597c:	08005b3f 	.word	0x08005b3f
 8005980:	08005b3f 	.word	0x08005b3f
 8005984:	08005a3b 	.word	0x08005a3b
 8005988:	08005b3f 	.word	0x08005b3f
 800598c:	08005b3f 	.word	0x08005b3f
 8005990:	08005b3f 	.word	0x08005b3f
 8005994:	08005a7b 	.word	0x08005a7b
 8005998:	08005b3f 	.word	0x08005b3f
 800599c:	08005b3f 	.word	0x08005b3f
 80059a0:	08005b3f 	.word	0x08005b3f
 80059a4:	08005abd 	.word	0x08005abd
 80059a8:	08005b3f 	.word	0x08005b3f
 80059ac:	08005b3f 	.word	0x08005b3f
 80059b0:	08005b3f 	.word	0x08005b3f
 80059b4:	08005afd 	.word	0x08005afd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 faf8 	bl	8005fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0208 	orr.w	r2, r2, #8
 80059d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6999      	ldr	r1, [r3, #24]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	619a      	str	r2, [r3, #24]
      break;
 80059f6:	e0a5      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fb72 	bl	80060e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6999      	ldr	r1, [r3, #24]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	619a      	str	r2, [r3, #24]
      break;
 8005a38:	e084      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fbe5 	bl	8006210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0208 	orr.w	r2, r2, #8
 8005a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0204 	bic.w	r2, r2, #4
 8005a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69d9      	ldr	r1, [r3, #28]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	61da      	str	r2, [r3, #28]
      break;
 8005a78:	e064      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fc57 	bl	8006334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69d9      	ldr	r1, [r3, #28]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	021a      	lsls	r2, r3, #8
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	61da      	str	r2, [r3, #28]
      break;
 8005aba:	e043      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fcca 	bl	800645c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0208 	orr.w	r2, r2, #8
 8005ad6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0204 	bic.w	r2, r2, #4
 8005ae6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005afa:	e023      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fd14 	bl	8006530 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b26:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	021a      	lsls	r2, r3, #8
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b3c:	e002      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
      break;
 8005b42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop

08005b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x1c>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e0f6      	b.n	8005d62 <HAL_TIM_ConfigClockSource+0x20a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005b92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6f      	ldr	r2, [pc, #444]	@ (8005d6c <HAL_TIM_ConfigClockSource+0x214>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f000 80c1 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005bb4:	4a6d      	ldr	r2, [pc, #436]	@ (8005d6c <HAL_TIM_ConfigClockSource+0x214>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	f200 80c6 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bbc:	4a6c      	ldr	r2, [pc, #432]	@ (8005d70 <HAL_TIM_ConfigClockSource+0x218>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f000 80b9 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8005d70 <HAL_TIM_ConfigClockSource+0x218>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	f200 80be 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bcc:	4a69      	ldr	r2, [pc, #420]	@ (8005d74 <HAL_TIM_ConfigClockSource+0x21c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	f000 80b1 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005bd4:	4a67      	ldr	r2, [pc, #412]	@ (8005d74 <HAL_TIM_ConfigClockSource+0x21c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	f200 80b6 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bdc:	4a66      	ldr	r2, [pc, #408]	@ (8005d78 <HAL_TIM_ConfigClockSource+0x220>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	f000 80a9 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005be4:	4a64      	ldr	r2, [pc, #400]	@ (8005d78 <HAL_TIM_ConfigClockSource+0x220>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	f200 80ae 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bec:	4a63      	ldr	r2, [pc, #396]	@ (8005d7c <HAL_TIM_ConfigClockSource+0x224>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f000 80a1 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf4:	4a61      	ldr	r2, [pc, #388]	@ (8005d7c <HAL_TIM_ConfigClockSource+0x224>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f200 80a6 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bfc:	4a60      	ldr	r2, [pc, #384]	@ (8005d80 <HAL_TIM_ConfigClockSource+0x228>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f000 8099 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c04:	4a5e      	ldr	r2, [pc, #376]	@ (8005d80 <HAL_TIM_ConfigClockSource+0x228>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	f200 809e 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c10:	f000 8091 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c18:	f200 8096 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c20:	f000 8089 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c28:	f200 808e 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c30:	d03e      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x158>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c36:	f200 8087 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3e:	f000 8086 	beq.w	8005d4e <HAL_TIM_ConfigClockSource+0x1f6>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c46:	d87f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c48:	2b70      	cmp	r3, #112	@ 0x70
 8005c4a:	d01a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x12a>
 8005c4c:	2b70      	cmp	r3, #112	@ 0x70
 8005c4e:	d87b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c50:	2b60      	cmp	r3, #96	@ 0x60
 8005c52:	d050      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x19e>
 8005c54:	2b60      	cmp	r3, #96	@ 0x60
 8005c56:	d877      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c58:	2b50      	cmp	r3, #80	@ 0x50
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0x17e>
 8005c5c:	2b50      	cmp	r3, #80	@ 0x50
 8005c5e:	d873      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c60:	2b40      	cmp	r3, #64	@ 0x40
 8005c62:	d058      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d86f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c68:	2b30      	cmp	r3, #48	@ 0x30
 8005c6a:	d064      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c6c:	2b30      	cmp	r3, #48	@ 0x30
 8005c6e:	d86b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d867      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c80:	e062      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c92:	f000 fd35 	bl	8006700 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04f      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	f000 fd1e 	bl	8006700 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e03c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 fc90 	bl	8006608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	@ 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fce9 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e02c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fcaf 	bl	8006666 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	@ 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fcd9 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e01c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fc70 	bl	8006608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	@ 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fcc9 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e00c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 fcc0 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8005d46:	e003      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e000      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	00100070 	.word	0x00100070
 8005d70:	00100060 	.word	0x00100060
 8005d74:	00100050 	.word	0x00100050
 8005d78:	00100040 	.word	0x00100040
 8005d7c:	00100030 	.word	0x00100030
 8005d80:	00100020 	.word	0x00100020

08005d84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8005f90 <TIM_Base_SetConfig+0x144>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d017      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e6a:	d013      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a49      	ldr	r2, [pc, #292]	@ (8005f94 <TIM_Base_SetConfig+0x148>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00f      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a48      	ldr	r2, [pc, #288]	@ (8005f98 <TIM_Base_SetConfig+0x14c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a47      	ldr	r2, [pc, #284]	@ (8005f9c <TIM_Base_SetConfig+0x150>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <TIM_Base_SetConfig+0x154>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a45      	ldr	r2, [pc, #276]	@ (8005fa4 <TIM_Base_SetConfig+0x158>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d108      	bne.n	8005ea6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a39      	ldr	r2, [pc, #228]	@ (8005f90 <TIM_Base_SetConfig+0x144>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d023      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb4:	d01f      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a36      	ldr	r2, [pc, #216]	@ (8005f94 <TIM_Base_SetConfig+0x148>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a35      	ldr	r2, [pc, #212]	@ (8005f98 <TIM_Base_SetConfig+0x14c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d017      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a34      	ldr	r2, [pc, #208]	@ (8005f9c <TIM_Base_SetConfig+0x150>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a33      	ldr	r2, [pc, #204]	@ (8005fa0 <TIM_Base_SetConfig+0x154>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00f      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a33      	ldr	r2, [pc, #204]	@ (8005fa8 <TIM_Base_SetConfig+0x15c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a32      	ldr	r2, [pc, #200]	@ (8005fac <TIM_Base_SetConfig+0x160>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a31      	ldr	r2, [pc, #196]	@ (8005fb0 <TIM_Base_SetConfig+0x164>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa4 <TIM_Base_SetConfig+0x158>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a18      	ldr	r2, [pc, #96]	@ (8005f90 <TIM_Base_SetConfig+0x144>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa0 <TIM_Base_SetConfig+0x154>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00f      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa8 <TIM_Base_SetConfig+0x15c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00b      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a19      	ldr	r2, [pc, #100]	@ (8005fac <TIM_Base_SetConfig+0x160>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d007      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a18      	ldr	r2, [pc, #96]	@ (8005fb0 <TIM_Base_SetConfig+0x164>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a13      	ldr	r2, [pc, #76]	@ (8005fa4 <TIM_Base_SetConfig+0x158>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d103      	bne.n	8005f64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]
  }
}
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40015000 	.word	0x40015000
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	f023 0201 	bic.w	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f023 0302 	bic.w	r3, r3, #2
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a30      	ldr	r2, [pc, #192]	@ (80060d0 <TIM_OC1_SetConfig+0x11c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a2f      	ldr	r2, [pc, #188]	@ (80060d4 <TIM_OC1_SetConfig+0x120>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00f      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a2e      	ldr	r2, [pc, #184]	@ (80060d8 <TIM_OC1_SetConfig+0x124>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a2d      	ldr	r2, [pc, #180]	@ (80060dc <TIM_OC1_SetConfig+0x128>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a2c      	ldr	r2, [pc, #176]	@ (80060e0 <TIM_OC1_SetConfig+0x12c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a2b      	ldr	r2, [pc, #172]	@ (80060e4 <TIM_OC1_SetConfig+0x130>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d10c      	bne.n	8006056 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0308 	bic.w	r3, r3, #8
 8006042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 0304 	bic.w	r3, r3, #4
 8006054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1d      	ldr	r2, [pc, #116]	@ (80060d0 <TIM_OC1_SetConfig+0x11c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1c      	ldr	r2, [pc, #112]	@ (80060d4 <TIM_OC1_SetConfig+0x120>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00f      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <TIM_OC1_SetConfig+0x124>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00b      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1a      	ldr	r2, [pc, #104]	@ (80060dc <TIM_OC1_SetConfig+0x128>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d007      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a19      	ldr	r2, [pc, #100]	@ (80060e0 <TIM_OC1_SetConfig+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d003      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a18      	ldr	r2, [pc, #96]	@ (80060e4 <TIM_OC1_SetConfig+0x130>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d111      	bne.n	80060aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800608c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	621a      	str	r2, [r3, #32]
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40013400 	.word	0x40013400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800
 80060e4:	40015000 	.word	0x40015000

080060e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f023 0210 	bic.w	r2, r3, #16
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0320 	bic.w	r3, r3, #32
 8006136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a2c      	ldr	r2, [pc, #176]	@ (80061f8 <TIM_OC2_SetConfig+0x110>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_OC2_SetConfig+0x74>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a2b      	ldr	r2, [pc, #172]	@ (80061fc <TIM_OC2_SetConfig+0x114>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC2_SetConfig+0x74>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a2a      	ldr	r2, [pc, #168]	@ (8006200 <TIM_OC2_SetConfig+0x118>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d10d      	bne.n	8006178 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006176:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a1f      	ldr	r2, [pc, #124]	@ (80061f8 <TIM_OC2_SetConfig+0x110>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a1e      	ldr	r2, [pc, #120]	@ (80061fc <TIM_OC2_SetConfig+0x114>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00f      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <TIM_OC2_SetConfig+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00b      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1d      	ldr	r2, [pc, #116]	@ (8006208 <TIM_OC2_SetConfig+0x120>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d007      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a1c      	ldr	r2, [pc, #112]	@ (800620c <TIM_OC2_SetConfig+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a17      	ldr	r2, [pc, #92]	@ (8006200 <TIM_OC2_SetConfig+0x118>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d113      	bne.n	80061d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40013400 	.word	0x40013400
 8006200:	40015000 	.word	0x40015000
 8006204:	40014000 	.word	0x40014000
 8006208:	40014400 	.word	0x40014400
 800620c:	40014800 	.word	0x40014800

08006210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800625c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <TIM_OC3_SetConfig+0x10c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_OC3_SetConfig+0x72>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2a      	ldr	r2, [pc, #168]	@ (8006320 <TIM_OC3_SetConfig+0x110>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_OC3_SetConfig+0x72>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a29      	ldr	r2, [pc, #164]	@ (8006324 <TIM_OC3_SetConfig+0x114>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10d      	bne.n	800629e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800629c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a1e      	ldr	r2, [pc, #120]	@ (800631c <TIM_OC3_SetConfig+0x10c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006320 <TIM_OC3_SetConfig+0x110>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <TIM_OC3_SetConfig+0x118>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <TIM_OC3_SetConfig+0x11c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006330 <TIM_OC3_SetConfig+0x120>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <TIM_OC3_SetConfig+0x114>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d113      	bne.n	80062f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400
 8006324:	40015000 	.word	0x40015000
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800

08006334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800636e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <TIM_OC4_SetConfig+0x110>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <TIM_OC4_SetConfig+0x74>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2b      	ldr	r2, [pc, #172]	@ (8006448 <TIM_OC4_SetConfig+0x114>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_OC4_SetConfig+0x74>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2a      	ldr	r2, [pc, #168]	@ (800644c <TIM_OC4_SetConfig+0x118>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10d      	bne.n	80063c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	031b      	lsls	r3, r3, #12
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006444 <TIM_OC4_SetConfig+0x110>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006448 <TIM_OC4_SetConfig+0x114>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00f      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006450 <TIM_OC4_SetConfig+0x11c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00b      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <TIM_OC4_SetConfig+0x120>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d007      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <TIM_OC4_SetConfig+0x124>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a17      	ldr	r2, [pc, #92]	@ (800644c <TIM_OC4_SetConfig+0x118>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d113      	bne.n	800641c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006402:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40013400 	.word	0x40013400
 800644c:	40015000 	.word	0x40015000
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800

0800645c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80064a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	041b      	lsls	r3, r3, #16
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a19      	ldr	r2, [pc, #100]	@ (8006518 <TIM_OC5_SetConfig+0xbc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a18      	ldr	r2, [pc, #96]	@ (800651c <TIM_OC5_SetConfig+0xc0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00f      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a17      	ldr	r2, [pc, #92]	@ (8006520 <TIM_OC5_SetConfig+0xc4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00b      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a16      	ldr	r2, [pc, #88]	@ (8006524 <TIM_OC5_SetConfig+0xc8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d007      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a15      	ldr	r2, [pc, #84]	@ (8006528 <TIM_OC5_SetConfig+0xcc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a14      	ldr	r2, [pc, #80]	@ (800652c <TIM_OC5_SetConfig+0xd0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d109      	bne.n	80064f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	621a      	str	r2, [r3, #32]
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40013400 	.word	0x40013400
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800
 800652c:	40015000 	.word	0x40015000

08006530 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	051b      	lsls	r3, r3, #20
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <TIM_OC6_SetConfig+0xc0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a19      	ldr	r2, [pc, #100]	@ (80065f4 <TIM_OC6_SetConfig+0xc4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00f      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a18      	ldr	r2, [pc, #96]	@ (80065f8 <TIM_OC6_SetConfig+0xc8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a17      	ldr	r2, [pc, #92]	@ (80065fc <TIM_OC6_SetConfig+0xcc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a16      	ldr	r2, [pc, #88]	@ (8006600 <TIM_OC6_SetConfig+0xd0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a15      	ldr	r2, [pc, #84]	@ (8006604 <TIM_OC6_SetConfig+0xd4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d109      	bne.n	80065c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40013400 	.word	0x40013400
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40014400 	.word	0x40014400
 8006600:	40014800 	.word	0x40014800
 8006604:	40015000 	.word	0x40015000

08006608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f023 0201 	bic.w	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 030a 	bic.w	r3, r3, #10
 8006644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006666:	b480      	push	{r7}
 8006668:	b087      	sub	sp, #28
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f023 0210 	bic.w	r2, r3, #16
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	031b      	lsls	r3, r3, #12
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f043 0307 	orr.w	r3, r3, #7
 80066ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	bf00      	nop
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800671a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	021a      	lsls	r2, r3, #8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	431a      	orrs	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4313      	orrs	r3, r2
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	609a      	str	r2, [r3, #8]
}
 8006734:	bf00      	nop
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a26      	ldr	r2, [pc, #152]	@ (80067e4 <TIM_ResetCallback+0xa4>)
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a25      	ldr	r2, [pc, #148]	@ (80067e8 <TIM_ResetCallback+0xa8>)
 8006754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a24      	ldr	r2, [pc, #144]	@ (80067ec <TIM_ResetCallback+0xac>)
 800675c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a23      	ldr	r2, [pc, #140]	@ (80067f0 <TIM_ResetCallback+0xb0>)
 8006764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a22      	ldr	r2, [pc, #136]	@ (80067f4 <TIM_ResetCallback+0xb4>)
 800676c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a21      	ldr	r2, [pc, #132]	@ (80067f8 <TIM_ResetCallback+0xb8>)
 8006774:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a20      	ldr	r2, [pc, #128]	@ (80067fc <TIM_ResetCallback+0xbc>)
 800677c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a1f      	ldr	r2, [pc, #124]	@ (8006800 <TIM_ResetCallback+0xc0>)
 8006784:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1e      	ldr	r2, [pc, #120]	@ (8006804 <TIM_ResetCallback+0xc4>)
 800678c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a1d      	ldr	r2, [pc, #116]	@ (8006808 <TIM_ResetCallback+0xc8>)
 8006794:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a1c      	ldr	r2, [pc, #112]	@ (800680c <TIM_ResetCallback+0xcc>)
 800679c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006810 <TIM_ResetCallback+0xd0>)
 80067a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006814 <TIM_ResetCallback+0xd4>)
 80067ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a19      	ldr	r2, [pc, #100]	@ (8006818 <TIM_ResetCallback+0xd8>)
 80067b4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a18      	ldr	r2, [pc, #96]	@ (800681c <TIM_ResetCallback+0xdc>)
 80067bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a17      	ldr	r2, [pc, #92]	@ (8006820 <TIM_ResetCallback+0xe0>)
 80067c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a16      	ldr	r2, [pc, #88]	@ (8006824 <TIM_ResetCallback+0xe4>)
 80067cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a15      	ldr	r2, [pc, #84]	@ (8006828 <TIM_ResetCallback+0xe8>)
 80067d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	08005d85 	.word	0x08005d85
 80067e8:	08005d99 	.word	0x08005d99
 80067ec:	08005e11 	.word	0x08005e11
 80067f0:	08005e25 	.word	0x08005e25
 80067f4:	08005dc1 	.word	0x08005dc1
 80067f8:	08005dd5 	.word	0x08005dd5
 80067fc:	08005dad 	.word	0x08005dad
 8006800:	08005de9 	.word	0x08005de9
 8006804:	08005dfd 	.word	0x08005dfd
 8006808:	08005e39 	.word	0x08005e39
 800680c:	08006a81 	.word	0x08006a81
 8006810:	08006a95 	.word	0x08006a95
 8006814:	08006aa9 	.word	0x08006aa9
 8006818:	08006abd 	.word	0x08006abd
 800681c:	08006ad1 	.word	0x08006ad1
 8006820:	08006ae5 	.word	0x08006ae5
 8006824:	08006af9 	.word	0x08006af9
 8006828:	08006b0d 	.word	0x08006b0d

0800682c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006840:	2302      	movs	r3, #2
 8006842:	e074      	b.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a34      	ldr	r2, [pc, #208]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a33      	ldr	r2, [pc, #204]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a31      	ldr	r2, [pc, #196]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d108      	bne.n	8006894 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006888:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800689a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a21      	ldr	r2, [pc, #132]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d022      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c4:	d01d      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d018      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1d      	ldr	r2, [pc, #116]	@ (800694c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1c      	ldr	r2, [pc, #112]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a15      	ldr	r2, [pc, #84]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d009      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a18      	ldr	r2, [pc, #96]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a11      	ldr	r2, [pc, #68]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10c      	bne.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4313      	orrs	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40013400 	.word	0x40013400
 8006944:	40015000 	.word	0x40015000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40014000 	.word	0x40014000

08006958 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006970:	2302      	movs	r3, #2
 8006972:	e078      	b.n	8006a66 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	041b      	lsls	r3, r3, #16
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1c      	ldr	r2, [pc, #112]	@ (8006a74 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006a78 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a19      	ldr	r2, [pc, #100]	@ (8006a7c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d11c      	bne.n	8006a54 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	051b      	lsls	r3, r3, #20
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40013400 	.word	0x40013400
 8006a7c:	40015000 	.word	0x40015000

08006a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e050      	b.n	8006bd4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d114      	bne.n	8006b66 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fbfb 	bl	8007340 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a21      	ldr	r2, [pc, #132]	@ (8006bdc <HAL_UART_Init+0xbc>)
 8006b58:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2224      	movs	r2, #36	@ 0x24
 8006b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0201 	bic.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 ff28 	bl	80079dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc29 	bl	80073e4 <UART_SetConfig>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e01b      	b.n	8006bd4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 ffa7 	bl	8007b20 <UART_CheckIdleState>
 8006bd2:	4603      	mov	r3, r0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	08001791 	.word	0x08001791

08006be0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b0ba      	sub	sp, #232	@ 0xe8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c0e:	4013      	ands	r3, r2
 8006c10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d11b      	bne.n	8006c54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d015      	beq.n	8006c54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d009      	beq.n	8006c54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8312 	beq.w	800726e <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
      }
      return;
 8006c52:	e30c      	b.n	800726e <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8129 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c62:	4b90      	ldr	r3, [pc, #576]	@ (8006ea4 <HAL_UART_IRQHandler+0x2c4>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c6e:	4b8e      	ldr	r3, [pc, #568]	@ (8006ea8 <HAL_UART_IRQHandler+0x2c8>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 811c 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d011      	beq.n	8006ca8 <HAL_UART_IRQHandler+0xc8>
 8006c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2201      	movs	r2, #1
 8006c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9e:	f043 0201 	orr.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d011      	beq.n	8006cd8 <HAL_UART_IRQHandler+0xf8>
 8006cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cce:	f043 0204 	orr.w	r2, r3, #4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d011      	beq.n	8006d08 <HAL_UART_IRQHandler+0x128>
 8006ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfe:	f043 0202 	orr.w	r2, r3, #2
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d017      	beq.n	8006d44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d105      	bne.n	8006d2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d24:	4b5f      	ldr	r3, [pc, #380]	@ (8006ea4 <HAL_UART_IRQHandler+0x2c4>)
 8006d26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2208      	movs	r2, #8
 8006d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3a:	f043 0208 	orr.w	r2, r3, #8
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d012      	beq.n	8006d76 <HAL_UART_IRQHandler+0x196>
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00c      	beq.n	8006d76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8278 	beq.w	8007272 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d013      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d105      	bne.n	8006da6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dca:	2b40      	cmp	r3, #64	@ 0x40
 8006dcc:	d005      	beq.n	8006dda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d058      	beq.n	8006e8c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 ffb7 	bl	8007d4e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dea:	2b40      	cmp	r3, #64	@ 0x40
 8006dec:	d148      	bne.n	8006e80 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1d9      	bne.n	8006dee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d017      	beq.n	8006e74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4a:	4a18      	ldr	r2, [pc, #96]	@ (8006eac <HAL_UART_IRQHandler+0x2cc>)
 8006e4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fc f986 	bl	8003166 <HAL_DMA_Abort_IT>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01f      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e72:	e015      	b.n	8006ea0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7e:	e00f      	b.n	8006ea0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8a:	e009      	b.n	8006ea0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006e9e:	e1e8      	b.n	8007272 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	bf00      	nop
    return;
 8006ea2:	e1e6      	b.n	8007272 <HAL_UART_IRQHandler+0x692>
 8006ea4:	10000001 	.word	0x10000001
 8006ea8:	04000120 	.word	0x04000120
 8006eac:	08007e1b 	.word	0x08007e1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 8176 	bne.w	80071a6 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ebe:	f003 0310 	and.w	r3, r3, #16
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 816f 	beq.w	80071a6 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8168 	beq.w	80071a6 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2210      	movs	r2, #16
 8006edc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee8:	2b40      	cmp	r3, #64	@ 0x40
 8006eea:	f040 80dc 	bne.w	80070a6 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80b1 	beq.w	8007068 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f10:	429a      	cmp	r2, r3
 8006f12:	f080 80a9 	bcs.w	8007068 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 8087 	bne.w	8007042 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1da      	bne.n	8006f34 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e1      	bne.n	8006f7e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e3      	bne.n	8006fba <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800700e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007010:	f023 0310 	bic.w	r3, r3, #16
 8007014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	461a      	mov	r2, r3
 800701e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007022:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007024:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007028:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e4      	bne.n	8007000 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703c:	4618      	mov	r0, r3
 800703e:	f7fc f839 	bl	80030b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800705a:	b292      	uxth	r2, r2
 800705c:	1a8a      	subs	r2, r1, r2
 800705e:	b292      	uxth	r2, r2
 8007060:	4611      	mov	r1, r2
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007066:	e106      	b.n	8007276 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800706e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007072:	429a      	cmp	r2, r3
 8007074:	f040 80ff 	bne.w	8007276 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b20      	cmp	r3, #32
 8007088:	f040 80f5 	bne.w	8007276 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800709e:	4611      	mov	r1, r2
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
      return;
 80070a4:	e0e7      	b.n	8007276 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80d9 	beq.w	800727a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 80070c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80d4 	beq.w	800727a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e4      	bne.n	80070d2 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3308      	adds	r3, #8
 800710e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	623b      	str	r3, [r7, #32]
   return(result);
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800711e:	f023 0301 	bic.w	r3, r3, #1
 8007122:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007130:	633a      	str	r2, [r7, #48]	@ 0x30
 8007132:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e1      	bne.n	8007108 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	60fb      	str	r3, [r7, #12]
   return(result);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f023 0310 	bic.w	r3, r3, #16
 800716c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	69b9      	ldr	r1, [r7, #24]
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	617b      	str	r3, [r7, #20]
   return(result);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e4      	bne.n	8007158 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800719a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800719e:	4611      	mov	r1, r2
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071a4:	e069      	b.n	800727a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d010      	beq.n	80071d4 <HAL_UART_IRQHandler+0x5f4>
 80071b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80071c6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071d2:	e055      	b.n	8007280 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d014      	beq.n	800720a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d105      	bne.n	80071f8 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d03e      	beq.n	800727e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
    }
    return;
 8007208:	e039      	b.n	800727e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <HAL_UART_IRQHandler+0x64a>
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fe0d 	bl	8007e42 <UART_EndTransmit_IT>
    return;
 8007228:	e02a      	b.n	8007280 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800722e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <HAL_UART_IRQHandler+0x66e>
 8007236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800723a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800724c:	e018      	b.n	8007280 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800724e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007252:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d012      	beq.n	8007280 <HAL_UART_IRQHandler+0x6a0>
 800725a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800725e:	2b00      	cmp	r3, #0
 8007260:	da0e      	bge.n	8007280 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800726c:	e008      	b.n	8007280 <HAL_UART_IRQHandler+0x6a0>
      return;
 800726e:	bf00      	nop
 8007270:	e006      	b.n	8007280 <HAL_UART_IRQHandler+0x6a0>
    return;
 8007272:	bf00      	nop
 8007274:	e004      	b.n	8007280 <HAL_UART_IRQHandler+0x6a0>
      return;
 8007276:	bf00      	nop
 8007278:	e002      	b.n	8007280 <HAL_UART_IRQHandler+0x6a0>
      return;
 800727a:	bf00      	nop
 800727c:	e000      	b.n	8007280 <HAL_UART_IRQHandler+0x6a0>
    return;
 800727e:	bf00      	nop
  }
}
 8007280:	37e8      	adds	r7, #232	@ 0xe8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop

08007288 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1a      	ldr	r2, [pc, #104]	@ (80073b4 <UART_InitCallbacksToDefault+0x74>)
 800734c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a19      	ldr	r2, [pc, #100]	@ (80073b8 <UART_InitCallbacksToDefault+0x78>)
 8007354:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a18      	ldr	r2, [pc, #96]	@ (80073bc <UART_InitCallbacksToDefault+0x7c>)
 800735c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a17      	ldr	r2, [pc, #92]	@ (80073c0 <UART_InitCallbacksToDefault+0x80>)
 8007364:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a16      	ldr	r2, [pc, #88]	@ (80073c4 <UART_InitCallbacksToDefault+0x84>)
 800736c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a15      	ldr	r2, [pc, #84]	@ (80073c8 <UART_InitCallbacksToDefault+0x88>)
 8007374:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a14      	ldr	r2, [pc, #80]	@ (80073cc <UART_InitCallbacksToDefault+0x8c>)
 800737c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a13      	ldr	r2, [pc, #76]	@ (80073d0 <UART_InitCallbacksToDefault+0x90>)
 8007384:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a12      	ldr	r2, [pc, #72]	@ (80073d4 <UART_InitCallbacksToDefault+0x94>)
 800738c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a11      	ldr	r2, [pc, #68]	@ (80073d8 <UART_InitCallbacksToDefault+0x98>)
 8007394:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a10      	ldr	r2, [pc, #64]	@ (80073dc <UART_InitCallbacksToDefault+0x9c>)
 800739c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a0f      	ldr	r2, [pc, #60]	@ (80073e0 <UART_InitCallbacksToDefault+0xa0>)
 80073a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	0800729d 	.word	0x0800729d
 80073b8:	08007289 	.word	0x08007289
 80073bc:	080072c5 	.word	0x080072c5
 80073c0:	080072b1 	.word	0x080072b1
 80073c4:	080072d9 	.word	0x080072d9
 80073c8:	080072ed 	.word	0x080072ed
 80073cc:	08007301 	.word	0x08007301
 80073d0:	08007315 	.word	0x08007315
 80073d4:	08007e9d 	.word	0x08007e9d
 80073d8:	08007eb1 	.word	0x08007eb1
 80073dc:	08007ec5 	.word	0x08007ec5
 80073e0:	08007329 	.word	0x08007329

080073e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e8:	b08c      	sub	sp, #48	@ 0x30
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	431a      	orrs	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	431a      	orrs	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	4313      	orrs	r3, r2
 800740a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4baa      	ldr	r3, [pc, #680]	@ (80076bc <UART_SetConfig+0x2d8>)
 8007414:	4013      	ands	r3, r2
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800741c:	430b      	orrs	r3, r1
 800741e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a9f      	ldr	r2, [pc, #636]	@ (80076c0 <UART_SetConfig+0x2dc>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d004      	beq.n	8007450 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800744c:	4313      	orrs	r3, r2
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800745a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007464:	430b      	orrs	r3, r1
 8007466:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	f023 010f 	bic.w	r1, r3, #15
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a90      	ldr	r2, [pc, #576]	@ (80076c4 <UART_SetConfig+0x2e0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d125      	bne.n	80074d4 <UART_SetConfig+0xf0>
 8007488:	4b8f      	ldr	r3, [pc, #572]	@ (80076c8 <UART_SetConfig+0x2e4>)
 800748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b03      	cmp	r3, #3
 8007494:	d81a      	bhi.n	80074cc <UART_SetConfig+0xe8>
 8007496:	a201      	add	r2, pc, #4	@ (adr r2, 800749c <UART_SetConfig+0xb8>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074ad 	.word	0x080074ad
 80074a0:	080074bd 	.word	0x080074bd
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b2:	e116      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80074b4:	2302      	movs	r3, #2
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ba:	e112      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80074bc:	2304      	movs	r3, #4
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	e10e      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80074c4:	2308      	movs	r3, #8
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e10a      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80074cc:	2310      	movs	r3, #16
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e106      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a7c      	ldr	r2, [pc, #496]	@ (80076cc <UART_SetConfig+0x2e8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d138      	bne.n	8007550 <UART_SetConfig+0x16c>
 80074de:	4b7a      	ldr	r3, [pc, #488]	@ (80076c8 <UART_SetConfig+0x2e4>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e4:	f003 030c 	and.w	r3, r3, #12
 80074e8:	2b0c      	cmp	r3, #12
 80074ea:	d82d      	bhi.n	8007548 <UART_SetConfig+0x164>
 80074ec:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0x110>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007549 	.word	0x08007549
 80074fc:	08007549 	.word	0x08007549
 8007500:	08007549 	.word	0x08007549
 8007504:	08007539 	.word	0x08007539
 8007508:	08007549 	.word	0x08007549
 800750c:	08007549 	.word	0x08007549
 8007510:	08007549 	.word	0x08007549
 8007514:	08007531 	.word	0x08007531
 8007518:	08007549 	.word	0x08007549
 800751c:	08007549 	.word	0x08007549
 8007520:	08007549 	.word	0x08007549
 8007524:	08007541 	.word	0x08007541
 8007528:	2300      	movs	r3, #0
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752e:	e0d8      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007530:	2302      	movs	r3, #2
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007536:	e0d4      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753e:	e0d0      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007546:	e0cc      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754e:	e0c8      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a5e      	ldr	r2, [pc, #376]	@ (80076d0 <UART_SetConfig+0x2ec>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d125      	bne.n	80075a6 <UART_SetConfig+0x1c2>
 800755a:	4b5b      	ldr	r3, [pc, #364]	@ (80076c8 <UART_SetConfig+0x2e4>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007560:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007564:	2b30      	cmp	r3, #48	@ 0x30
 8007566:	d016      	beq.n	8007596 <UART_SetConfig+0x1b2>
 8007568:	2b30      	cmp	r3, #48	@ 0x30
 800756a:	d818      	bhi.n	800759e <UART_SetConfig+0x1ba>
 800756c:	2b20      	cmp	r3, #32
 800756e:	d00a      	beq.n	8007586 <UART_SetConfig+0x1a2>
 8007570:	2b20      	cmp	r3, #32
 8007572:	d814      	bhi.n	800759e <UART_SetConfig+0x1ba>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <UART_SetConfig+0x19a>
 8007578:	2b10      	cmp	r3, #16
 800757a:	d008      	beq.n	800758e <UART_SetConfig+0x1aa>
 800757c:	e00f      	b.n	800759e <UART_SetConfig+0x1ba>
 800757e:	2300      	movs	r3, #0
 8007580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007584:	e0ad      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007586:	2302      	movs	r3, #2
 8007588:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758c:	e0a9      	b.n	80076e2 <UART_SetConfig+0x2fe>
 800758e:	2304      	movs	r3, #4
 8007590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007594:	e0a5      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007596:	2308      	movs	r3, #8
 8007598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759c:	e0a1      	b.n	80076e2 <UART_SetConfig+0x2fe>
 800759e:	2310      	movs	r3, #16
 80075a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a4:	e09d      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a4a      	ldr	r2, [pc, #296]	@ (80076d4 <UART_SetConfig+0x2f0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d125      	bne.n	80075fc <UART_SetConfig+0x218>
 80075b0:	4b45      	ldr	r3, [pc, #276]	@ (80076c8 <UART_SetConfig+0x2e4>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80075bc:	d016      	beq.n	80075ec <UART_SetConfig+0x208>
 80075be:	2bc0      	cmp	r3, #192	@ 0xc0
 80075c0:	d818      	bhi.n	80075f4 <UART_SetConfig+0x210>
 80075c2:	2b80      	cmp	r3, #128	@ 0x80
 80075c4:	d00a      	beq.n	80075dc <UART_SetConfig+0x1f8>
 80075c6:	2b80      	cmp	r3, #128	@ 0x80
 80075c8:	d814      	bhi.n	80075f4 <UART_SetConfig+0x210>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <UART_SetConfig+0x1f0>
 80075ce:	2b40      	cmp	r3, #64	@ 0x40
 80075d0:	d008      	beq.n	80075e4 <UART_SetConfig+0x200>
 80075d2:	e00f      	b.n	80075f4 <UART_SetConfig+0x210>
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075da:	e082      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80075dc:	2302      	movs	r3, #2
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e07e      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80075e4:	2304      	movs	r3, #4
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ea:	e07a      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e076      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80075f4:	2310      	movs	r3, #16
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	e072      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a35      	ldr	r2, [pc, #212]	@ (80076d8 <UART_SetConfig+0x2f4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d12a      	bne.n	800765c <UART_SetConfig+0x278>
 8007606:	4b30      	ldr	r3, [pc, #192]	@ (80076c8 <UART_SetConfig+0x2e4>)
 8007608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007610:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007614:	d01a      	beq.n	800764c <UART_SetConfig+0x268>
 8007616:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800761a:	d81b      	bhi.n	8007654 <UART_SetConfig+0x270>
 800761c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007620:	d00c      	beq.n	800763c <UART_SetConfig+0x258>
 8007622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007626:	d815      	bhi.n	8007654 <UART_SetConfig+0x270>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <UART_SetConfig+0x250>
 800762c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007630:	d008      	beq.n	8007644 <UART_SetConfig+0x260>
 8007632:	e00f      	b.n	8007654 <UART_SetConfig+0x270>
 8007634:	2300      	movs	r3, #0
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763a:	e052      	b.n	80076e2 <UART_SetConfig+0x2fe>
 800763c:	2302      	movs	r3, #2
 800763e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007642:	e04e      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764a:	e04a      	b.n	80076e2 <UART_SetConfig+0x2fe>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007652:	e046      	b.n	80076e2 <UART_SetConfig+0x2fe>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765a:	e042      	b.n	80076e2 <UART_SetConfig+0x2fe>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a17      	ldr	r2, [pc, #92]	@ (80076c0 <UART_SetConfig+0x2dc>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d13a      	bne.n	80076dc <UART_SetConfig+0x2f8>
 8007666:	4b18      	ldr	r3, [pc, #96]	@ (80076c8 <UART_SetConfig+0x2e4>)
 8007668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007674:	d01a      	beq.n	80076ac <UART_SetConfig+0x2c8>
 8007676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800767a:	d81b      	bhi.n	80076b4 <UART_SetConfig+0x2d0>
 800767c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007680:	d00c      	beq.n	800769c <UART_SetConfig+0x2b8>
 8007682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007686:	d815      	bhi.n	80076b4 <UART_SetConfig+0x2d0>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <UART_SetConfig+0x2b0>
 800768c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007690:	d008      	beq.n	80076a4 <UART_SetConfig+0x2c0>
 8007692:	e00f      	b.n	80076b4 <UART_SetConfig+0x2d0>
 8007694:	2300      	movs	r3, #0
 8007696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769a:	e022      	b.n	80076e2 <UART_SetConfig+0x2fe>
 800769c:	2302      	movs	r3, #2
 800769e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a2:	e01e      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80076a4:	2304      	movs	r3, #4
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076aa:	e01a      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80076ac:	2308      	movs	r3, #8
 80076ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b2:	e016      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80076b4:	2310      	movs	r3, #16
 80076b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ba:	e012      	b.n	80076e2 <UART_SetConfig+0x2fe>
 80076bc:	cfff69f3 	.word	0xcfff69f3
 80076c0:	40008000 	.word	0x40008000
 80076c4:	40013800 	.word	0x40013800
 80076c8:	40021000 	.word	0x40021000
 80076cc:	40004400 	.word	0x40004400
 80076d0:	40004800 	.word	0x40004800
 80076d4:	40004c00 	.word	0x40004c00
 80076d8:	40005000 	.word	0x40005000
 80076dc:	2310      	movs	r3, #16
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4aae      	ldr	r2, [pc, #696]	@ (80079a0 <UART_SetConfig+0x5bc>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	f040 8097 	bne.w	800781c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d823      	bhi.n	800773e <UART_SetConfig+0x35a>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <UART_SetConfig+0x318>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007721 	.word	0x08007721
 8007700:	0800773f 	.word	0x0800773f
 8007704:	08007729 	.word	0x08007729
 8007708:	0800773f 	.word	0x0800773f
 800770c:	0800772f 	.word	0x0800772f
 8007710:	0800773f 	.word	0x0800773f
 8007714:	0800773f 	.word	0x0800773f
 8007718:	0800773f 	.word	0x0800773f
 800771c:	08007737 	.word	0x08007737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fc fdc8 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8007724:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007726:	e010      	b.n	800774a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007728:	4b9e      	ldr	r3, [pc, #632]	@ (80079a4 <UART_SetConfig+0x5c0>)
 800772a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800772c:	e00d      	b.n	800774a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800772e:	f7fc fd53 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8007732:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007734:	e009      	b.n	800774a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800773c:	e005      	b.n	800774a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007748:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8130 	beq.w	80079b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007756:	4a94      	ldr	r2, [pc, #592]	@ (80079a8 <UART_SetConfig+0x5c4>)
 8007758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800775c:	461a      	mov	r2, r3
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	fbb3 f3f2 	udiv	r3, r3, r2
 8007764:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	4613      	mov	r3, r2
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	4413      	add	r3, r2
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	429a      	cmp	r2, r3
 8007774:	d305      	bcc.n	8007782 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	429a      	cmp	r2, r3
 8007780:	d903      	bls.n	800778a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007788:	e113      	b.n	80079b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	2200      	movs	r2, #0
 800778e:	60bb      	str	r3, [r7, #8]
 8007790:	60fa      	str	r2, [r7, #12]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007796:	4a84      	ldr	r2, [pc, #528]	@ (80079a8 <UART_SetConfig+0x5c4>)
 8007798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800779c:	b29b      	uxth	r3, r3
 800779e:	2200      	movs	r2, #0
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077ac:	f7f8 fd34 	bl	8000218 <__aeabi_uldivmod>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4610      	mov	r0, r2
 80077b6:	4619      	mov	r1, r3
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	020b      	lsls	r3, r1, #8
 80077c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077c6:	0202      	lsls	r2, r0, #8
 80077c8:	6979      	ldr	r1, [r7, #20]
 80077ca:	6849      	ldr	r1, [r1, #4]
 80077cc:	0849      	lsrs	r1, r1, #1
 80077ce:	2000      	movs	r0, #0
 80077d0:	460c      	mov	r4, r1
 80077d2:	4605      	mov	r5, r0
 80077d4:	eb12 0804 	adds.w	r8, r2, r4
 80077d8:	eb43 0905 	adc.w	r9, r3, r5
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	469a      	mov	sl, r3
 80077e4:	4693      	mov	fp, r2
 80077e6:	4652      	mov	r2, sl
 80077e8:	465b      	mov	r3, fp
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f8 fd13 	bl	8000218 <__aeabi_uldivmod>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4613      	mov	r3, r2
 80077f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007800:	d308      	bcc.n	8007814 <UART_SetConfig+0x430>
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007808:	d204      	bcs.n	8007814 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6a3a      	ldr	r2, [r7, #32]
 8007810:	60da      	str	r2, [r3, #12]
 8007812:	e0ce      	b.n	80079b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800781a:	e0ca      	b.n	80079b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007824:	d166      	bne.n	80078f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007826:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800782a:	2b08      	cmp	r3, #8
 800782c:	d827      	bhi.n	800787e <UART_SetConfig+0x49a>
 800782e:	a201      	add	r2, pc, #4	@ (adr r2, 8007834 <UART_SetConfig+0x450>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007859 	.word	0x08007859
 8007838:	08007861 	.word	0x08007861
 800783c:	08007869 	.word	0x08007869
 8007840:	0800787f 	.word	0x0800787f
 8007844:	0800786f 	.word	0x0800786f
 8007848:	0800787f 	.word	0x0800787f
 800784c:	0800787f 	.word	0x0800787f
 8007850:	0800787f 	.word	0x0800787f
 8007854:	08007877 	.word	0x08007877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007858:	f7fc fd2c 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 800785c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800785e:	e014      	b.n	800788a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007860:	f7fc fd3e 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 8007864:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007866:	e010      	b.n	800788a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007868:	4b4e      	ldr	r3, [pc, #312]	@ (80079a4 <UART_SetConfig+0x5c0>)
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800786c:	e00d      	b.n	800788a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786e:	f7fc fcb3 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8007872:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007874:	e009      	b.n	800788a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800787a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800787c:	e005      	b.n	800788a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 8090 	beq.w	80079b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007896:	4a44      	ldr	r2, [pc, #272]	@ (80079a8 <UART_SetConfig+0x5c4>)
 8007898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800789c:	461a      	mov	r2, r3
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a4:	005a      	lsls	r2, r3, #1
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	085b      	lsrs	r3, r3, #1
 80078ac:	441a      	add	r2, r3
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	2b0f      	cmp	r3, #15
 80078bc:	d916      	bls.n	80078ec <UART_SetConfig+0x508>
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c4:	d212      	bcs.n	80078ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f023 030f 	bic.w	r3, r3, #15
 80078ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	b29a      	uxth	r2, r3
 80078dc:	8bfb      	ldrh	r3, [r7, #30]
 80078de:	4313      	orrs	r3, r2
 80078e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	8bfa      	ldrh	r2, [r7, #30]
 80078e8:	60da      	str	r2, [r3, #12]
 80078ea:	e062      	b.n	80079b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078f2:	e05e      	b.n	80079b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d828      	bhi.n	800794e <UART_SetConfig+0x56a>
 80078fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007904 <UART_SetConfig+0x520>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007929 	.word	0x08007929
 8007908:	08007931 	.word	0x08007931
 800790c:	08007939 	.word	0x08007939
 8007910:	0800794f 	.word	0x0800794f
 8007914:	0800793f 	.word	0x0800793f
 8007918:	0800794f 	.word	0x0800794f
 800791c:	0800794f 	.word	0x0800794f
 8007920:	0800794f 	.word	0x0800794f
 8007924:	08007947 	.word	0x08007947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007928:	f7fc fcc4 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 800792c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800792e:	e014      	b.n	800795a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007930:	f7fc fcd6 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 8007934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007936:	e010      	b.n	800795a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007938:	4b1a      	ldr	r3, [pc, #104]	@ (80079a4 <UART_SetConfig+0x5c0>)
 800793a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800793c:	e00d      	b.n	800795a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800793e:	f7fc fc4b 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8007942:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007944:	e009      	b.n	800795a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800794a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800794c:	e005      	b.n	800795a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007958:	bf00      	nop
    }

    if (pclk != 0U)
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	d028      	beq.n	80079b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007964:	4a10      	ldr	r2, [pc, #64]	@ (80079a8 <UART_SetConfig+0x5c4>)
 8007966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800796a:	461a      	mov	r2, r3
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	441a      	add	r2, r3
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007982:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	2b0f      	cmp	r3, #15
 8007988:	d910      	bls.n	80079ac <UART_SetConfig+0x5c8>
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007990:	d20c      	bcs.n	80079ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	b29a      	uxth	r2, r3
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60da      	str	r2, [r3, #12]
 800799c:	e009      	b.n	80079b2 <UART_SetConfig+0x5ce>
 800799e:	bf00      	nop
 80079a0:	40008000 	.word	0x40008000
 80079a4:	00f42400 	.word	0x00f42400
 80079a8:	08008168 	.word	0x08008168
      }
      else
      {
        ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2201      	movs	r2, #1
 80079be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2200      	movs	r2, #0
 80079c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2200      	movs	r2, #0
 80079cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3730      	adds	r7, #48	@ 0x30
 80079d6:	46bd      	mov	sp, r7
 80079d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080079dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	f003 0308 	and.w	r3, r3, #8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00a      	beq.n	8007a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00a      	beq.n	8007a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01a      	beq.n	8007af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ada:	d10a      	bne.n	8007af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	605a      	str	r2, [r3, #4]
  }
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b098      	sub	sp, #96	@ 0x60
 8007b24:	af02      	add	r7, sp, #8
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b30:	f7f9 ffda 	bl	8001ae8 <HAL_GetTick>
 8007b34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d12f      	bne.n	8007ba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f88e 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d022      	beq.n	8007ba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b72:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e6      	bne.n	8007b5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e063      	b.n	8007c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d149      	bne.n	8007c46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f857 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d03c      	beq.n	8007c46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e6      	bne.n	8007bcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c1e:	61fa      	str	r2, [r7, #28]
 8007c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	69b9      	ldr	r1, [r7, #24]
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e5      	bne.n	8007bfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e012      	b.n	8007c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3758      	adds	r7, #88	@ 0x58
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c84:	e04f      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d04b      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8e:	f7f9 ff2b 	bl	8001ae8 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e04e      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d037      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b80      	cmp	r3, #128	@ 0x80
 8007cba:	d034      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b40      	cmp	r3, #64	@ 0x40
 8007cc0:	d031      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d110      	bne.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f838 	bl	8007d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e029      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d00:	d111      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f81e 	bl	8007d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e00f      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d0a0      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b095      	sub	sp, #84	@ 0x54
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d9e:	f023 0301 	bic.w	r3, r3, #1
 8007da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e3      	bne.n	8007d88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d118      	bne.n	8007dfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f023 0310 	bic.w	r3, r3, #16
 8007ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007de6:	61bb      	str	r3, [r7, #24]
 8007de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6979      	ldr	r1, [r7, #20]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	613b      	str	r3, [r7, #16]
   return(result);
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e6      	bne.n	8007dc8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e0e:	bf00      	nop
 8007e10:	3754      	adds	r7, #84	@ 0x54
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b088      	sub	sp, #32
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6979      	ldr	r1, [r7, #20]
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	613b      	str	r3, [r7, #16]
   return(result);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e6      	bne.n	8007e4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e94:	bf00      	nop
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_UARTEx_DisableFifoMode+0x16>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e027      	b.n	8007f3e <HAL_UARTEx_DisableFifoMode+0x66>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2224      	movs	r2, #36	@ 0x24
 8007efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0201 	bic.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e02d      	b.n	8007fbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2224      	movs	r2, #36	@ 0x24
 8007f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0201 	bic.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f850 	bl	8008044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e02d      	b.n	800803a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2224      	movs	r2, #36	@ 0x24
 8007fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f812 	bl	8008044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008050:	2b00      	cmp	r3, #0
 8008052:	d108      	bne.n	8008066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008064:	e031      	b.n	80080ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008066:	2308      	movs	r3, #8
 8008068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800806a:	2308      	movs	r3, #8
 800806c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	0e5b      	lsrs	r3, r3, #25
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	0f5b      	lsrs	r3, r3, #29
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	7b3a      	ldrb	r2, [r7, #12]
 8008092:	4911      	ldr	r1, [pc, #68]	@ (80080d8 <UARTEx_SetNbDataToProcess+0x94>)
 8008094:	5c8a      	ldrb	r2, [r1, r2]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800809a:	7b3a      	ldrb	r2, [r7, #12]
 800809c:	490f      	ldr	r1, [pc, #60]	@ (80080dc <UARTEx_SetNbDataToProcess+0x98>)
 800809e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	7b7a      	ldrb	r2, [r7, #13]
 80080b0:	4909      	ldr	r1, [pc, #36]	@ (80080d8 <UARTEx_SetNbDataToProcess+0x94>)
 80080b2:	5c8a      	ldrb	r2, [r1, r2]
 80080b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080b8:	7b7a      	ldrb	r2, [r7, #13]
 80080ba:	4908      	ldr	r1, [pc, #32]	@ (80080dc <UARTEx_SetNbDataToProcess+0x98>)
 80080bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080be:	fb93 f3f2 	sdiv	r3, r3, r2
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080ca:	bf00      	nop
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	08008180 	.word	0x08008180
 80080dc:	08008188 	.word	0x08008188

080080e0 <memset>:
 80080e0:	4402      	add	r2, r0
 80080e2:	4603      	mov	r3, r0
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d100      	bne.n	80080ea <memset+0xa>
 80080e8:	4770      	bx	lr
 80080ea:	f803 1b01 	strb.w	r1, [r3], #1
 80080ee:	e7f9      	b.n	80080e4 <memset+0x4>

080080f0 <__libc_init_array>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008128 <__libc_init_array+0x38>)
 80080f4:	4c0d      	ldr	r4, [pc, #52]	@ (800812c <__libc_init_array+0x3c>)
 80080f6:	1b64      	subs	r4, r4, r5
 80080f8:	10a4      	asrs	r4, r4, #2
 80080fa:	2600      	movs	r6, #0
 80080fc:	42a6      	cmp	r6, r4
 80080fe:	d109      	bne.n	8008114 <__libc_init_array+0x24>
 8008100:	4d0b      	ldr	r5, [pc, #44]	@ (8008130 <__libc_init_array+0x40>)
 8008102:	4c0c      	ldr	r4, [pc, #48]	@ (8008134 <__libc_init_array+0x44>)
 8008104:	f000 f818 	bl	8008138 <_init>
 8008108:	1b64      	subs	r4, r4, r5
 800810a:	10a4      	asrs	r4, r4, #2
 800810c:	2600      	movs	r6, #0
 800810e:	42a6      	cmp	r6, r4
 8008110:	d105      	bne.n	800811e <__libc_init_array+0x2e>
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	f855 3b04 	ldr.w	r3, [r5], #4
 8008118:	4798      	blx	r3
 800811a:	3601      	adds	r6, #1
 800811c:	e7ee      	b.n	80080fc <__libc_init_array+0xc>
 800811e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008122:	4798      	blx	r3
 8008124:	3601      	adds	r6, #1
 8008126:	e7f2      	b.n	800810e <__libc_init_array+0x1e>
 8008128:	08008198 	.word	0x08008198
 800812c:	08008198 	.word	0x08008198
 8008130:	08008198 	.word	0x08008198
 8008134:	0800819c 	.word	0x0800819c

08008138 <_init>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	bf00      	nop
 800813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813e:	bc08      	pop	{r3}
 8008140:	469e      	mov	lr, r3
 8008142:	4770      	bx	lr

08008144 <_fini>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr
